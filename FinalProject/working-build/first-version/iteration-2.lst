

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue May 14 17:59:50 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	intentry,global,class=CODE,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	dabs	1,0x7E,2
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001D                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  0086                     	;# 
   103  0087                     	;# 
   104  0088                     	;# 
   105  0089                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125                           
   126                           	psect	idataCOMMON
   127  0800                     __pidataCOMMON:	
   128                           
   129                           ;initializer for _hours
   130  0800  3404               	retlw	4
   131                           
   132                           ;initializer for _lastKeyState
   133  0801  34FF               	retlw	255
   134                           
   135                           ;initializer for _lastMode
   136  0802  34FF               	retlw	255
   137                           
   138                           	psect	idataBANK0
   139  0003                     __pidataBANK0:	
   140                           
   141                           ;initializer for _savedHoursEnd
   142  0003  340A               	retlw	10
   143                           
   144                           	psect	idataBANK1
   145  13CF                     __pidataBANK1:	
   146                           
   147                           ;initializer for _savedHoursStart
   148  13CF  3409               	retlw	9
   149                           
   150                           ;initializer for _savedMinutesEnd
   151  13D0  341E               	retlw	30
   152                           
   153                           ;initializer for _savedMinutesStart
   154  13D1  341E               	retlw	30
   155                           
   156                           	psect	stringtext
   157  1000                     __pstringtext:	
   158  1000                     stringtab:	
   159  1000                     __stringtab:	
   160                           
   161                           ;	String table - string pointers are 2 bytes each
   162  1000  1BFF               	btfsc	btemp+1,7
   163  1001  280A               	ljmp	stringcode
   164  1002  1383               	bcf	3,7
   165  1003  187F               	btfsc	btemp+1,0
   166  1004  1783               	bsf	3,7
   167  1005  0800               	movf	0,w
   168  1006  0A84               	incf	4,f
   169  1007  1903               	skipnz
   170  1008  0AFF               	incf	btemp+1,f
   171  1009  0008               	return
   172  100A                     stringcode:	
   173  100A  087F               	movf	btemp+1,w
   174  100B  397F               	andlw	127
   175  100C  008A               	movwf	10
   176  100D  0804               	movf	4,w
   177  100E  0A84               	incf	4,f
   178  100F  1903               	skipnz
   179  1010  0AFF               	incf	btemp+1,f
   180  1011  0082               	movwf	2
   181  1012                     __stringbase:	
   182  1012                     __end_of__stringtab:	
   183  1012                     _dpowers:	
   184  1012  3401               	retlw	1
   185  1013  3400               	retlw	0
   186  1014  340A               	retlw	10
   187  1015  3400               	retlw	0
   188  1016  3464               	retlw	100
   189  1017  3400               	retlw	0
   190  1018  34E8               	retlw	232
   191  1019  3403               	retlw	3
   192  101A  3410               	retlw	16
   193  101B  3427               	retlw	39
   194  101C                     __end_of_dpowers:	
   195  001F                     _ADCON0	set	31
   196  001E                     _ADRESH	set	30
   197  0005                     _PORTA	set	5
   198  0006                     _PORTB	set	6
   199  0007                     _PORTC	set	7
   200  0008                     _PORTD	set	8
   201  005F                     _GIE	set	95
   202  00FA                     _GO_DONE	set	250
   203  005C                     _INTE	set	92
   204  0059                     _INTF	set	89
   205  0031                     _RB1	set	49
   206  0038                     _RC0	set	56
   207  0039                     _RC1	set	57
   208  003A                     _RC2	set	58
   209  003B                     _RC3	set	59
   210  003C                     _RC4	set	60
   211  003D                     _RC5	set	61
   212  009F                     _ADCON1	set	159
   213  009E                     _ADRESL	set	158
   214  0085                     _TRISA	set	133
   215  0086                     _TRISB	set	134
   216  0087                     _TRISC	set	135
   217  0088                     _TRISD	set	136
   218  040E                     _INTEDG	set	1038
   219  101C                     __stringdata:	
   220  101C                     STR_28:	
   221  101C  3453               	retlw	83	;'S'
   222  101D  3445               	retlw	69	;'E'
   223  101E  3454               	retlw	84	;'T'
   224  101F  3420               	retlw	32	;' '
   225  1020  3448               	retlw	72	;'H'
   226  1021  3452               	retlw	82	;'R'
   227  1022  3453               	retlw	83	;'S'
   228  1023  3420               	retlw	32	;' '
   229  1024  342D               	retlw	45	;'-'
   230  1025  3420               	retlw	32	;' '
   231  1026  3453               	retlw	83	;'S'
   232  1027  3454               	retlw	84	;'T'
   233  1028  3441               	retlw	65	;'A'
   234  1029  3452               	retlw	82	;'R'
   235  102A  3454               	retlw	84	;'T'
   236  102B  3400               	retlw	0
   237  102C                     STR_6:	
   238  102C  3454               	retlw	84	;'T'
   239  102D  3469               	retlw	105	;'i'
   240  102E  346D               	retlw	109	;'m'
   241  102F  3465               	retlw	101	;'e'
   242  1030  343A               	retlw	58	;':'
   243  1031  3420               	retlw	32	;' '
   244  1032  3425               	retlw	37	;'%'
   245  1033  3430               	retlw	48	;'0'
   246  1034  3432               	retlw	50	;'2'
   247  1035  3464               	retlw	100	;'d'
   248  1036  343A               	retlw	58	;':'
   249  1037  3425               	retlw	37	;'%'
   250  1038  3430               	retlw	48	;'0'
   251  1039  3432               	retlw	50	;'2'
   252  103A  3464               	retlw	100	;'d'
   253  103B  3400               	retlw	0
   254  103C                     STR_24:	
   255  103C  3444               	retlw	68	;'D'
   256  103D  3449               	retlw	73	;'I'
   257  103E  3453               	retlw	83	;'S'
   258  103F  3450               	retlw	80	;'P'
   259  1040  3420               	retlw	32	;' '
   260  1041  3443               	retlw	67	;'C'
   261  1042  344D               	retlw	77	;'M'
   262  1043  344D               	retlw	77	;'M'
   263  1044  344F               	retlw	79	;'O'
   264  1045  344E               	retlw	78	;'N'
   265  1046  3420               	retlw	32	;' '
   266  1047  3450               	retlw	80	;'P'
   267  1048  3447               	retlw	71	;'G'
   268  1049  3431               	retlw	49	;'1'
   269  104A  3400               	retlw	0
   270  104B                     STR_27:	
   271  104B  3444               	retlw	68	;'D'
   272  104C  3449               	retlw	73	;'I'
   273  104D  3453               	retlw	83	;'S'
   274  104E  3450               	retlw	80	;'P'
   275  104F  3420               	retlw	32	;' '
   276  1050  3443               	retlw	67	;'C'
   277  1051  344D               	retlw	77	;'M'
   278  1052  344D               	retlw	77	;'M'
   279  1053  344F               	retlw	79	;'O'
   280  1054  344E               	retlw	78	;'N'
   281  1055  3420               	retlw	32	;' '
   282  1056  3450               	retlw	80	;'P'
   283  1057  3447               	retlw	71	;'G'
   284  1058  3432               	retlw	50	;'2'
   285  1059  3400               	retlw	0
   286  105A                     STR_31:	
   287  105A  3453               	retlw	83	;'S'
   288  105B  3445               	retlw	69	;'E'
   289  105C  3454               	retlw	84	;'T'
   290  105D  3420               	retlw	32	;' '
   291  105E  3448               	retlw	72	;'H'
   292  105F  3452               	retlw	82	;'R'
   293  1060  3453               	retlw	83	;'S'
   294  1061  3420               	retlw	32	;' '
   295  1062  342D               	retlw	45	;'-'
   296  1063  3420               	retlw	32	;' '
   297  1064  3445               	retlw	69	;'E'
   298  1065  344E               	retlw	78	;'N'
   299  1066  3444               	retlw	68	;'D'
   300  1067  3400               	retlw	0
   301  1068                     STR_25:	
   302  1068  3453               	retlw	83	;'S'
   303  1069  3454               	retlw	84	;'T'
   304  106A  3452               	retlw	82	;'R'
   305  106B  3454               	retlw	84	;'T'
   306  106C  343A               	retlw	58	;':'
   307  106D  3420               	retlw	32	;' '
   308  106E  3425               	retlw	37	;'%'
   309  106F  3432               	retlw	50	;'2'
   310  1070  3464               	retlw	100	;'d'
   311  1071  343A               	retlw	58	;':'
   312  1072  3425               	retlw	37	;'%'
   313  1073  3432               	retlw	50	;'2'
   314  1074  3464               	retlw	100	;'d'
   315  1075  3400               	retlw	0
   316  1076                     STR_26:	
   317  1076  3445               	retlw	69	;'E'
   318  1077  344E               	retlw	78	;'N'
   319  1078  3444               	retlw	68	;'D'
   320  1079  343A               	retlw	58	;':'
   321  107A  3420               	retlw	32	;' '
   322  107B  3425               	retlw	37	;'%'
   323  107C  3432               	retlw	50	;'2'
   324  107D  3464               	retlw	100	;'d'
   325  107E  343A               	retlw	58	;':'
   326  107F  3425               	retlw	37	;'%'
   327  1080  3432               	retlw	50	;'2'
   328  1081  3464               	retlw	100	;'d'
   329  1082  3400               	retlw	0
   330  1083                     STR_30:	
   331  1083  3453               	retlw	83	;'S'
   332  1084  3445               	retlw	69	;'E'
   333  1085  3454               	retlw	84	;'T'
   334  1086  3420               	retlw	32	;' '
   335  1087  344D               	retlw	77	;'M'
   336  1088  3449               	retlw	73	;'I'
   337  1089  344E               	retlw	78	;'N'
   338  108A  3455               	retlw	85	;'U'
   339  108B  3454               	retlw	84	;'T'
   340  108C  3445               	retlw	69	;'E'
   341  108D  3453               	retlw	83	;'S'
   342  108E  3400               	retlw	0
   343  108F                     STR_34:	
   344  108F  3449               	retlw	73	;'I'
   345  1090  344F               	retlw	79	;'O'
   346  1091  3420               	retlw	32	;' '
   347  1092  3453               	retlw	83	;'S'
   348  1093  3454               	retlw	84	;'T'
   349  1094  3441               	retlw	65	;'A'
   350  1095  3454               	retlw	84	;'T'
   351  1096  3455               	retlw	85	;'U'
   352  1097  3453               	retlw	83	;'S'
   353  1098  343A               	retlw	58	;':'
   354  1099  3400               	retlw	0
   355  109A                     STR_19:	
   356  109A  3454               	retlw	84	;'T'
   357  109B  3465               	retlw	101	;'e'
   358  109C  346D               	retlw	109	;'m'
   359  109D  3470               	retlw	112	;'p'
   360  109E  343A               	retlw	58	;':'
   361  109F  3420               	retlw	32	;' '
   362  10A0  3425               	retlw	37	;'%'
   363  10A1  3464               	retlw	100	;'d'
   364  10A2  3420               	retlw	32	;' '
   365  10A3  3443               	retlw	67	;'C'
   366  10A4  3400               	retlw	0
   367  10A5                     STR_29:	
   368  10A5  3453               	retlw	83	;'S'
   369  10A6  3445               	retlw	69	;'E'
   370  10A7  3454               	retlw	84	;'T'
   371  10A8  3420               	retlw	32	;' '
   372  10A9  3448               	retlw	72	;'H'
   373  10AA  344F               	retlw	79	;'O'
   374  10AB  3455               	retlw	85	;'U'
   375  10AC  3452               	retlw	82	;'R'
   376  10AD  3453               	retlw	83	;'S'
   377  10AE  3400               	retlw	0
   378  10AF                     STR_8:	
   379  10AF  3444               	retlw	68	;'D'
   380  10B0  3445               	retlw	69	;'E'
   381  10B1  3443               	retlw	67	;'C'
   382  10B2  343A               	retlw	58	;':'
   383  10B3  3420               	retlw	32	;' '
   384  10B4  3425               	retlw	37	;'%'
   385  10B5  3430               	retlw	48	;'0'
   386  10B6  3432               	retlw	50	;'2'
   387  10B7  3464               	retlw	100	;'d'
   388  10B8  3400               	retlw	0
   389  10B9                     STR_7:	
   390  10B9  3449               	retlw	73	;'I'
   391  10BA  344E               	retlw	78	;'N'
   392  10BB  3443               	retlw	67	;'C'
   393  10BC  343A               	retlw	58	;':'
   394  10BD  3420               	retlw	32	;' '
   395  10BE  3425               	retlw	37	;'%'
   396  10BF  3430               	retlw	48	;'0'
   397  10C0  3432               	retlw	50	;'2'
   398  10C1  3464               	retlw	100	;'d'
   399  10C2  3400               	retlw	0
   400  10C3                     STR_9:	
   401  10C3  3453               	retlw	83	;'S'
   402  10C4  3445               	retlw	69	;'E'
   403  10C5  3454               	retlw	84	;'T'
   404  10C6  343A               	retlw	58	;':'
   405  10C7  3420               	retlw	32	;' '
   406  10C8  3425               	retlw	37	;'%'
   407  10C9  3430               	retlw	48	;'0'
   408  10CA  3432               	retlw	50	;'2'
   409  10CB  3464               	retlw	100	;'d'
   410  10CC  3400               	retlw	0
   411  10CD                     STR_3:	
   412  10CD  3425               	retlw	37	;'%'
   413  10CE  3464               	retlw	100	;'d'
   414  10CF  3420               	retlw	32	;' '
   415  10D0  3470               	retlw	112	;'p'
   416  10D1  3470               	retlw	112	;'p'
   417  10D2  346D               	retlw	109	;'m'
   418  10D3  3420               	retlw	32	;' '
   419  10D4  3420               	retlw	32	;' '
   420  10D5  3400               	retlw	0
   421  10D6                     STR_20:	
   422  10D6  3456               	retlw	86	;'V'
   423  10D7  3445               	retlw	69	;'E'
   424  10D8  344E               	retlw	78	;'N'
   425  10D9  3454               	retlw	84	;'T'
   426  10DA  3420               	retlw	32	;' '
   427  10DB  344F               	retlw	79	;'O'
   428  10DC  344E               	retlw	78	;'N'
   429  10DD  3420               	retlw	32	;' '
   430  10DE  3400               	retlw	0
   431  10DF                     STR_21:	
   432  10DF  3446               	retlw	70	;'F'
   433  10E0  3441               	retlw	65	;'A'
   434  10E1  344E               	retlw	78	;'N'
   435  10E2  3420               	retlw	32	;' '
   436  10E3  344F               	retlw	79	;'O'
   437  10E4  3446               	retlw	70	;'F'
   438  10E5  3446               	retlw	70	;'F'
   439  10E6  3400               	retlw	0
   440  10E7                     STR_4:	
   441  10E7  3450               	retlw	80	;'P'
   442  10E8  3455               	retlw	85	;'U'
   443  10E9  3452               	retlw	82	;'R'
   444  10EA  3446               	retlw	70	;'F'
   445  10EB  3420               	retlw	32	;' '
   446  10EC  3448               	retlw	72	;'H'
   447  10ED  3449               	retlw	73	;'I'
   448  10EE  3400               	retlw	0
   449  10EF                     STR_5:	
   450  10EF  3450               	retlw	80	;'P'
   451  10F0  3455               	retlw	85	;'U'
   452  10F1  3452               	retlw	82	;'R'
   453  10F2  3446               	retlw	70	;'F'
   454  10F3  3420               	retlw	32	;' '
   455  10F4  344C               	retlw	76	;'L'
   456  10F5  344F               	retlw	79	;'O'
   457  10F6  3400               	retlw	0
   458  10F7                     STR_23:	
   459  10F7  344D               	retlw	77	;'M'
   460  10F8  344F               	retlw	79	;'O'
   461  10F9  3444               	retlw	68	;'D'
   462  10FA  3445               	retlw	69	;'E'
   463  10FB  343A               	retlw	58	;':'
   464  10FC  3420               	retlw	32	;' '
   465  10FD  3400               	retlw	0
   466  10FE                     STR_22:	
   467  10FE  3450               	retlw	80	;'P'
   468  10FF  3457               	retlw	87	;'W'
   469  1100  3452               	retlw	82	;'R'
   470  1101  3420               	retlw	32	;' '
   471  1102  344F               	retlw	79	;'O'
   472  1103  344E               	retlw	78	;'N'
   473  1104  3400               	retlw	0
   474  1105                     STR_1:	
   475  1105  3443               	retlw	67	;'C'
   476  1106  344F               	retlw	79	;'O'
   477  1107  3432               	retlw	50	;'2'
   478  1108  343A               	retlw	58	;':'
   479  1109  3420               	retlw	32	;' '
   480  110A  3400               	retlw	0
   481  110B                     STR_2:	
   482  110B  3425               	retlw	37	;'%'
   483  110C  3464               	retlw	100	;'d'
   484  110D  3400               	retlw	0
   485  110E                     __end_of__stringdata:	
   486                           
   487                           ; #config settings
   488  0000                     
   489                           	psect	cinit
   490  0015                     start_initialization:	
   491  0015                     __initialization:	
   492                           
   493                           ; Clear objects allocated to COMMON
   494  0015  01F7               	clrf	__pbssCOMMON& (0+127)
   495  0016  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   496  0017  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   497                           
   498                           ; Clear objects allocated to BANK1
   499  0018  1383               	bcf	3,7	;select IRP bank0
   500  0019  30C7               	movlw	low __pbssBANK1
   501  001A  0084               	movwf	4
   502  001B  30DC               	movlw	low (__pbssBANK1+21)
   503  001C  160A  118A  23D2  120A  118A  	fcall	clear_ram0
   504                           
   505                           ; Initialize objects allocated to BANK1
   506  0021  1683               	bsf	3,5	;RP0=1, select bank1
   507  0022  1303               	bcf	3,6	;RP1=0, select bank1
   508  0023  160A  118A  23CF  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   509  0028  00DC               	movwf	__pdataBANK1& (0+127)
   510  0029  160A  118A  23D0  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   511  002E  00DD               	movwf	(__pdataBANK1+1)& (0+127)
   512  002F  160A  118A  23D1  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   513  0034  00DE               	movwf	(__pdataBANK1+2)& (0+127)
   514                           
   515                           ; Initialize objects allocated to BANK0
   516  0035  1283               	bcf	3,5	;RP0=0, select bank0
   517  0036  1303               	bcf	3,6	;RP1=0, select bank0
   518  0037  120A  118A  2003  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   519  003C  00EF               	movwf	__pdataBANK0& (0+127)
   520                           
   521                           ; Initialize objects allocated to COMMON
   522  003D  120A  158A  2000  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   523  0042  00FA               	movwf	__pdataCOMMON& (0+127)
   524  0043  120A  158A  2001  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   525  0048  00FB               	movwf	(__pdataCOMMON+1)& (0+127)
   526  0049  120A  158A  2002   	fcall	__pidataCOMMON+2	;fetch initializer
   527  004C  00FC               	movwf	(__pdataCOMMON+2)& (0+127)
   528  004D                     end_of_initialization:	
   529                           ;End of C runtime variable initialization code
   530                           
   531  004D                     __end_of__initialization:	
   532  004D  0183               	clrf	3
   533  004E  160A  118A  2FA1   	ljmp	_main	;jump to C main() function
   534                           
   535                           	psect	bssCOMMON
   536  0077                     __pbssCOMMON:	
   537  0077                     _key:	
   538  0077                     	ds	1
   539  0078                     _keyValid:	
   540  0078                     	ds	1
   541  0079                     _minutes:	
   542  0079                     	ds	1
   543                           
   544                           	psect	dataCOMMON
   545  007A                     __pdataCOMMON:	
   546  007A                     _hours:	
   547  007A                     	ds	1
   548  007B                     _lastKeyState:	
   549  007B                     	ds	1
   550  007C                     _lastMode:	
   551  007C                     	ds	1
   552                           
   553                           	psect	dataBANK0
   554  006F                     __pdataBANK0:	
   555  006F                     _savedHoursEnd:	
   556  006F                     	ds	1
   557                           
   558                           	psect	bssBANK1
   559  00C7                     __pbssBANK1:	
   560  00C7                     _PPM:	
   561  00C7                     	ds	3
   562  00CA                     _tempBuffer:	
   563  00CA                     	ds	2
   564  00CC                     checkSelect@lastRB1State:	
   565  00CC                     	ds	2
   566  00CE                     _mode:	
   567  00CE                     	ds	1
   568  00CF                     _ppmFlag:	
   569  00CF                     	ds	1
   570  00D0                     _select:	
   571  00D0                     	ds	1
   572  00D1                     _tempFlag:	
   573  00D1                     	ds	1
   574  00D2                     _debugInfo:	
   575  00D2                     	ds	10
   576                           
   577                           	psect	dataBANK1
   578  00DC                     __pdataBANK1:	
   579  00DC                     _savedHoursStart:	
   580  00DC                     	ds	1
   581  00DD                     _savedMinutesEnd:	
   582  00DD                     	ds	1
   583  00DE                     _savedMinutesStart:	
   584  00DE                     	ds	1
   585                           
   586                           	psect	clrtext
   587  13D2                     clear_ram0:	
   588                           ;	Called with FSR containing the base address, and
   589                           ;	W with the last address+1
   590                           
   591  13D2  0064               	clrwdt	;clear the watchdog before getting into this loop
   592  13D3                     clrloop0:	
   593  13D3  0180               	clrf	0	;clear RAM location pointed to by FSR
   594  13D4  0A84               	incf	4,f	;increment pointer
   595  13D5  0604               	xorwf	4,w	;XOR with final address
   596  13D6  1903               	btfsc	3,2	;have we reached the end yet?
   597  13D7  3400               	retlw	0	;all done for this memory range, return
   598  13D8  0604               	xorwf	4,w	;XOR again to restore value
   599  13D9  2BD3               	goto	clrloop0	;do the next byte
   600                           
   601                           	psect	cstackBANK1
   602  00A0                     __pcstackBANK1:	
   603  00A0                     CalcMQ135@voltage:	
   604  00A0                     displayPPM@strBuffer:	
   605                           ; 3 bytes @ 0x0
   606                           
   607                           
   608                           ; 20 bytes @ 0x0
   609  00A0                     	ds	3
   610  00A3                     CalcMQ135@ratio6:	
   611                           
   612                           ; 3 bytes @ 0x3
   613  00A3                     	ds	3
   614  00A6                     _CalcMQ135$682:	
   615                           
   616                           ; 3 bytes @ 0x6
   617  00A6                     	ds	3
   618  00A9                     _CalcMQ135$683:	
   619                           
   620                           ; 3 bytes @ 0x9
   621  00A9                     	ds	3
   622  00AC                     _CalcMQ135$684:	
   623                           
   624                           ; 3 bytes @ 0xC
   625  00AC                     	ds	3
   626  00AF                     _CalcMQ135$685:	
   627                           
   628                           ; 3 bytes @ 0xF
   629  00AF                     	ds	3
   630  00B2                     _CalcMQ135$686:	
   631                           
   632                           ; 3 bytes @ 0x12
   633  00B2                     	ds	2
   634  00B4                     displayPPM@ppmWhole:	
   635                           
   636                           ; 2 bytes @ 0x14
   637  00B4                     	ds	1
   638  00B5                     CalcMQ135@ratio2:	
   639                           
   640                           ; 3 bytes @ 0x15
   641  00B5                     	ds	1
   642  00B6                     displayPPM@ppmFraction:	
   643                           
   644                           ; 2 bytes @ 0x16
   645  00B6                     	ds	2
   646  00B8                     displayPPM@bufPtr:	
   647  00B8                     CalcMQ135@ratio3:	
   648                           ; 1 bytes @ 0x18
   649                           
   650                           
   651                           ; 3 bytes @ 0x18
   652  00B8                     	ds	3
   653  00BB                     CalcMQ135@ratio4:	
   654                           
   655                           ; 3 bytes @ 0x1B
   656  00BB                     	ds	3
   657  00BE                     CalcMQ135@ratio5:	
   658                           
   659                           ; 3 bytes @ 0x1E
   660  00BE                     	ds	3
   661  00C1                     CalcMQ135@co2:	
   662                           
   663                           ; 3 bytes @ 0x21
   664  00C1                     	ds	3
   665  00C4                     CalcMQ135@ratio:	
   666                           
   667                           ; 3 bytes @ 0x24
   668  00C4                     	ds	3
   669                           
   670                           	psect	cstackCOMMON
   671  0070                     __pcstackCOMMON:	
   672  0070                     ?_setPortDirections:	
   673  0070                     ?_initADC:	
   674                           ; 0 bytes @ 0x0
   675                           
   676  0070                     ?_initInterrupt:	
   677                           ; 0 bytes @ 0x0
   678                           
   679  0070                     ?_startUpLCD:	
   680                           ; 0 bytes @ 0x0
   681                           
   682  0070                     ?_checkSelect:	
   683                           ; 0 bytes @ 0x0
   684                           
   685  0070                     ?_checkMode:	
   686                           ; 0 bytes @ 0x0
   687                           
   688  0070                     ?_updateState:	
   689                           ; 0 bytes @ 0x0
   690                           
   691  0070                     ?_isdigit:	
   692                           ; 0 bytes @ 0x0
   693                           
   694  0070                     ?_instCTRL:	
   695                           ; 1 bit 
   696                           
   697  0070                     ?_dataCTRL:	
   698                           ; 0 bytes @ 0x0
   699                           
   700  0070                     ?_initLCD:	
   701                           ; 0 bytes @ 0x0
   702                           
   703  0070                     ?_runMQ135:	
   704                           ; 0 bytes @ 0x0
   705                           
   706  0070                     ?_displayPPM:	
   707                           ; 0 bytes @ 0x0
   708                           
   709  0070                     ?_printStatusPPM:	
   710                           ; 0 bytes @ 0x0
   711                           
   712  0070                     ?_runClock:	
   713                           ; 0 bytes @ 0x0
   714                           
   715  0070                     ?_displayTime:	
   716                           ; 0 bytes @ 0x0
   717                           
   718  0070                     ?_setHoursStart:	
   719                           ; 0 bytes @ 0x0
   720                           
   721  0070                     ?_setHoursEnd:	
   722                           ; 0 bytes @ 0x0
   723                           
   724  0070                     ?_setMinutesStart:	
   725                           ; 0 bytes @ 0x0
   726                           
   727  0070                     ?_setMinutesEnd:	
   728                           ; 0 bytes @ 0x0
   729                           
   730  0070                     ?_checkTime:	
   731                           ; 0 bytes @ 0x0
   732                           
   733  0070                     ?_displayTemp:	
   734                           ; 0 bytes @ 0x0
   735                           
   736  0070                     ?_printStatusTMP:	
   737                           ; 0 bytes @ 0x0
   738                           
   739  0070                     ?_main:	
   740                           ; 0 bytes @ 0x0
   741                           
   742  0070                     ?_ISR:	
   743                           ; 0 bytes @ 0x0
   744                           
   745  0070                     ?i1_instCTRL:	
   746                           ; 0 bytes @ 0x0
   747                           
   748  0070                     ??i1_instCTRL:	
   749                           ; 0 bytes @ 0x0
   750                           
   751  0070                     ?_handlePPM:	
   752                           ; 0 bytes @ 0x0
   753                           
   754  0070                     ?_handleTemp:	
   755                           ; 1 bytes @ 0x0
   756                           
   757                           
   758                           ; 1 bytes @ 0x0
   759  0070                     	ds	1
   760  0071                     i1instCTRL@CMD:	
   761                           
   762                           ; 1 bytes @ 0x1
   763  0071                     	ds	1
   764  0072                     ??_ISR:	
   765                           
   766                           ; 0 bytes @ 0x2
   767  0072                     	ds	5
   768                           
   769                           	psect	cstackBANK0
   770  0020                     __pcstackBANK0:	
   771  0020                     ??_setPortDirections:	
   772  0020                     ??_initADC:	
   773                           ; 0 bytes @ 0x0
   774                           
   775  0020                     ??_initInterrupt:	
   776                           ; 0 bytes @ 0x0
   777                           
   778  0020                     ??_isdigit:	
   779                           ; 0 bytes @ 0x0
   780                           
   781  0020                     ??_instCTRL:	
   782                           ; 0 bytes @ 0x0
   783                           
   784  0020                     ??_dataCTRL:	
   785                           ; 0 bytes @ 0x0
   786                           
   787  0020                     ??_runClock:	
   788                           ; 0 bytes @ 0x0
   789                           
   790  0020                     ??_checkTime:	
   791                           ; 0 bytes @ 0x0
   792                           
   793  0020                     ??_handleTemp:	
   794                           ; 0 bytes @ 0x0
   795                           
   796  0020                     ?___ftge:	
   797                           ; 0 bytes @ 0x0
   798                           
   799  0020                     ?_readADC:	
   800                           ; 1 bit 
   801                           
   802  0020                     ?___wmul:	
   803                           ; 2 bytes @ 0x0
   804                           
   805  0020                     ?___awmod:	
   806                           ; 2 bytes @ 0x0
   807                           
   808  0020                     ?___ftpack:	
   809                           ; 2 bytes @ 0x0
   810                           
   811  0020                     _isdigit$441:	
   812                           ; 3 bytes @ 0x0
   813                           
   814  0020                     ___wmul@multiplier:	
   815                           ; 1 bytes @ 0x0
   816                           
   817  0020                     ___awmod@divisor:	
   818                           ; 2 bytes @ 0x0
   819                           
   820  0020                     ___ftpack@arg:	
   821                           ; 2 bytes @ 0x0
   822                           
   823  0020                     ___ftge@ff1:	
   824                           ; 3 bytes @ 0x0
   825                           
   826                           
   827                           ; 3 bytes @ 0x0
   828  0020                     	ds	1
   829  0021                     instCTRL@CMD:	
   830  0021                     dataCTRL@DAT:	
   831                           ; 1 bytes @ 0x1
   832                           
   833  0021                     isdigit@c:	
   834                           ; 1 bytes @ 0x1
   835                           
   836                           
   837                           ; 1 bytes @ 0x1
   838  0021                     	ds	1
   839  0022                     ??_checkSelect:	
   840  0022                     ??_checkMode:	
   841                           ; 0 bytes @ 0x2
   842                           
   843  0022                     ??_readADC:	
   844                           ; 0 bytes @ 0x2
   845                           
   846  0022                     ??_initLCD:	
   847                           ; 0 bytes @ 0x2
   848                           
   849  0022                     ?_printToLCD:	
   850                           ; 0 bytes @ 0x2
   851                           
   852  0022                     printToLCD@str:	
   853                           ; 0 bytes @ 0x2
   854                           
   855  0022                     ___wmul@multiplicand:	
   856                           ; 2 bytes @ 0x2
   857                           
   858  0022                     ___awmod@dividend:	
   859                           ; 2 bytes @ 0x2
   860                           
   861                           
   862                           ; 2 bytes @ 0x2
   863  0022                     	ds	1
   864  0023                     ___ftpack@exp:	
   865  0023                     ___ftge@ff2:	
   866                           ; 1 bytes @ 0x3
   867                           
   868                           
   869                           ; 3 bytes @ 0x3
   870  0023                     	ds	1
   871  0024                     ??_startUpLCD:	
   872  0024                     ??_printToLCD:	
   873                           ; 0 bytes @ 0x4
   874                           
   875  0024                     ??_printStatusPPM:	
   876                           ; 0 bytes @ 0x4
   877                           
   878  0024                     ??_printStatusTMP:	
   879                           ; 0 bytes @ 0x4
   880                           
   881  0024                     ??___wmul:	
   882                           ; 0 bytes @ 0x4
   883                           
   884  0024                     ??___awmod:	
   885                           ; 0 bytes @ 0x4
   886                           
   887  0024                     readADC@channel:	
   888                           ; 0 bytes @ 0x4
   889                           
   890  0024                     printStatusPPM@handler:	
   891                           ; 1 bytes @ 0x4
   892                           
   893  0024                     printStatusTMP@handler:	
   894                           ; 1 bytes @ 0x4
   895                           
   896  0024                     ___ftpack@sign:	
   897                           ; 1 bytes @ 0x4
   898                           
   899  0024                     checkSelect@currentRB1State:	
   900                           ; 1 bytes @ 0x4
   901                           
   902  0024                     ___wmul@product:	
   903                           ; 2 bytes @ 0x4
   904                           
   905                           
   906                           ; 2 bytes @ 0x4
   907  0024                     	ds	1
   908  0025                     ??___ftpack:	
   909  0025                     ___awmod@counter:	
   910                           ; 0 bytes @ 0x5
   911                           
   912                           
   913                           ; 1 bytes @ 0x5
   914  0025                     	ds	1
   915  0026                     ??___ftge:	
   916  0026                     ?___lwdiv:	
   917                           ; 0 bytes @ 0x6
   918                           
   919  0026                     ___awmod@sign:	
   920                           ; 2 bytes @ 0x6
   921                           
   922  0026                     ___lwdiv@divisor:	
   923                           ; 1 bytes @ 0x6
   924                           
   925                           
   926                           ; 2 bytes @ 0x6
   927  0026                     	ds	2
   928  0028                     ?___awtoft:	
   929  0028                     ___awtoft@c:	
   930                           ; 3 bytes @ 0x8
   931                           
   932  0028                     ___lwdiv@dividend:	
   933                           ; 2 bytes @ 0x8
   934                           
   935                           
   936                           ; 2 bytes @ 0x8
   937  0028                     	ds	2
   938  002A                     ??___lwdiv:	
   939                           
   940                           ; 0 bytes @ 0xA
   941  002A                     	ds	1
   942  002B                     ??___awtoft:	
   943  002B                     ___lwdiv@quotient:	
   944                           ; 0 bytes @ 0xB
   945                           
   946                           
   947                           ; 2 bytes @ 0xB
   948  002B                     	ds	1
   949  002C                     ??_handlePPM:	
   950                           
   951                           ; 0 bytes @ 0xC
   952  002C                     	ds	1
   953  002D                     ___awtoft@sign:	
   954  002D                     ___lwdiv@counter:	
   955                           ; 1 bytes @ 0xD
   956                           
   957                           
   958                           ; 1 bytes @ 0xD
   959  002D                     	ds	1
   960  002E                     ?_calculateTemp:	
   961  002E                     ?___lwmod:	
   962                           ; 0 bytes @ 0xE
   963                           
   964  002E                     ?___ftneg:	
   965                           ; 2 bytes @ 0xE
   966                           
   967  002E                     calculateTemp@adcValue:	
   968                           ; 3 bytes @ 0xE
   969                           
   970  002E                     ___lwmod@divisor:	
   971                           ; 2 bytes @ 0xE
   972                           
   973  002E                     ___ftneg@f1:	
   974                           ; 2 bytes @ 0xE
   975                           
   976                           
   977                           ; 3 bytes @ 0xE
   978  002E                     	ds	2
   979  0030                     ??_calculateTemp:	
   980  0030                     ___lwmod@dividend:	
   981                           ; 0 bytes @ 0x10
   982                           
   983                           
   984                           ; 2 bytes @ 0x10
   985  0030                     	ds	1
   986  0031                     ??___ftneg:	
   987  0031                     ?___ftadd:	
   988                           ; 0 bytes @ 0x11
   989                           
   990  0031                     ___ftadd@f1:	
   991                           ; 3 bytes @ 0x11
   992                           
   993                           
   994                           ; 3 bytes @ 0x11
   995  0031                     	ds	1
   996  0032                     ??___lwmod:	
   997                           
   998                           ; 0 bytes @ 0x12
   999  0032                     	ds	1
  1000  0033                     ___lwmod@counter:	
  1001                           
  1002                           ; 1 bytes @ 0x13
  1003  0033                     	ds	1
  1004  0034                     ?_sprintf:	
  1005  0034                     sprintf@f:	
  1006                           ; 2 bytes @ 0x14
  1007                           
  1008  0034                     ___ftadd@f2:	
  1009                           ; 2 bytes @ 0x14
  1010                           
  1011                           
  1012                           ; 3 bytes @ 0x14
  1013  0034                     	ds	3
  1014  0037                     ??___ftadd:	
  1015                           
  1016                           ; 0 bytes @ 0x17
  1017  0037                     	ds	3
  1018  003A                     ??_sprintf:	
  1019                           
  1020                           ; 0 bytes @ 0x1A
  1021  003A                     	ds	1
  1022  003B                     ___ftadd@sign:	
  1023                           
  1024                           ; 1 bytes @ 0x1B
  1025  003B                     	ds	1
  1026  003C                     ___ftadd@exp2:	
  1027                           
  1028                           ; 1 bytes @ 0x1C
  1029  003C                     	ds	1
  1030  003D                     sprintf@ap:	
  1031  003D                     ___ftadd@exp1:	
  1032                           ; 1 bytes @ 0x1D
  1033                           
  1034                           
  1035                           ; 1 bytes @ 0x1D
  1036  003D                     	ds	1
  1037  003E                     ?___ftmul:	
  1038  003E                     sprintf@prec:	
  1039                           ; 3 bytes @ 0x1E
  1040                           
  1041  003E                     ___ftmul@f1:	
  1042                           ; 1 bytes @ 0x1E
  1043                           
  1044                           
  1045                           ; 3 bytes @ 0x1E
  1046  003E                     	ds	1
  1047  003F                     sprintf@ccnt:	
  1048                           
  1049                           ; 2 bytes @ 0x1F
  1050  003F                     	ds	2
  1051  0041                     ___ftmul@f2:	
  1052  0041                     sprintf@_val:	
  1053                           ; 3 bytes @ 0x21
  1054                           
  1055                           
  1056                           ; 4 bytes @ 0x21
  1057  0041                     	ds	3
  1058  0044                     ??___ftmul:	
  1059                           
  1060                           ; 0 bytes @ 0x24
  1061  0044                     	ds	1
  1062  0045                     sprintf@flag:	
  1063                           
  1064                           ; 1 bytes @ 0x25
  1065  0045                     	ds	1
  1066  0046                     sprintf@width:	
  1067                           
  1068                           ; 2 bytes @ 0x26
  1069  0046                     	ds	2
  1070  0048                     sprintf@c:	
  1071  0048                     ___ftmul@exp:	
  1072                           ; 1 bytes @ 0x28
  1073                           
  1074                           
  1075                           ; 1 bytes @ 0x28
  1076  0048                     	ds	1
  1077  0049                     sprintf@sp:	
  1078  0049                     ___ftmul@f3_as_product:	
  1079                           ; 1 bytes @ 0x29
  1080                           
  1081                           
  1082                           ; 3 bytes @ 0x29
  1083  0049                     	ds	1
  1084  004A                     ??_displayTime:	
  1085  004A                     ??_setHoursStart:	
  1086                           ; 0 bytes @ 0x2A
  1087                           
  1088  004A                     ??_setHoursEnd:	
  1089                           ; 0 bytes @ 0x2A
  1090                           
  1091  004A                     ??_setMinutesStart:	
  1092                           ; 0 bytes @ 0x2A
  1093                           
  1094  004A                     ??_setMinutesEnd:	
  1095                           ; 0 bytes @ 0x2A
  1096                           
  1097  004A                     ??_displayTemp:	
  1098                           ; 0 bytes @ 0x2A
  1099                           
  1100  004A                     displayTemp@buffer:	
  1101                           ; 0 bytes @ 0x2A
  1102                           
  1103                           
  1104                           ; 20 bytes @ 0x2A
  1105  004A                     	ds	2
  1106  004C                     ___ftmul@cntr:	
  1107                           
  1108                           ; 1 bytes @ 0x2C
  1109  004C                     	ds	1
  1110  004D                     ___ftmul@sign:	
  1111                           
  1112                           ; 1 bytes @ 0x2D
  1113  004D                     	ds	1
  1114  004E                     ?___ftdiv:	
  1115  004E                     ?___fttol:	
  1116                           ; 3 bytes @ 0x2E
  1117                           
  1118  004E                     ___ftdiv@f2:	
  1119                           ; 4 bytes @ 0x2E
  1120                           
  1121  004E                     ___fttol@f1:	
  1122                           ; 3 bytes @ 0x2E
  1123                           
  1124  004E                     displayTime@timeFormat:	
  1125                           ; 3 bytes @ 0x2E
  1126                           
  1127                           
  1128                           ; 16 bytes @ 0x2E
  1129  004E                     	ds	3
  1130  0051                     ___ftdiv@f1:	
  1131                           
  1132                           ; 3 bytes @ 0x31
  1133  0051                     	ds	1
  1134  0052                     ??___fttol:	
  1135                           
  1136                           ; 0 bytes @ 0x32
  1137  0052                     	ds	2
  1138  0054                     ??___ftdiv:	
  1139                           
  1140                           ; 0 bytes @ 0x34
  1141  0054                     	ds	2
  1142  0056                     ___fttol@sign1:	
  1143                           
  1144                           ; 1 bytes @ 0x36
  1145  0056                     	ds	1
  1146  0057                     ___fttol@lval:	
  1147                           
  1148                           ; 4 bytes @ 0x37
  1149  0057                     	ds	1
  1150  0058                     ___ftdiv@cntr:	
  1151                           
  1152                           ; 1 bytes @ 0x38
  1153  0058                     	ds	1
  1154  0059                     ___ftdiv@f3:	
  1155                           
  1156                           ; 3 bytes @ 0x39
  1157  0059                     	ds	2
  1158  005B                     ___fttol@exp1:	
  1159                           
  1160                           ; 1 bytes @ 0x3B
  1161  005B                     	ds	1
  1162  005C                     ??_displayPPM:	
  1163  005C                     ___ftdiv@exp:	
  1164                           ; 0 bytes @ 0x3C
  1165                           
  1166                           
  1167                           ; 1 bytes @ 0x3C
  1168  005C                     	ds	1
  1169  005D                     ___ftdiv@sign:	
  1170                           
  1171                           ; 1 bytes @ 0x3D
  1172  005D                     	ds	1
  1173  005E                     ??_updateState:	
  1174  005E                     ?_CalcMQ135:	
  1175                           ; 0 bytes @ 0x3E
  1176                           
  1177  005E                     CalcMQ135@RAW_ADC:	
  1178                           ; 3 bytes @ 0x3E
  1179                           
  1180                           
  1181                           ; 2 bytes @ 0x3E
  1182  005E                     	ds	3
  1183  0061                     ??_CalcMQ135:	
  1184  0061                     ??_runMQ135:	
  1185                           ; 0 bytes @ 0x41
  1186                           
  1187                           
  1188                           ; 0 bytes @ 0x41
  1189  0061                     	ds	1
  1190  0062                     updateState@buffer:	
  1191                           
  1192                           ; 10 bytes @ 0x42
  1193  0062                     	ds	10
  1194  006C                     ??_main:	
  1195                           
  1196                           ; 0 bytes @ 0x4C
  1197  006C                     	ds	3
  1198                           
  1199                           	psect	maintext
  1200  17A1                     __pmaintext:	
  1201 ;;
  1202 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1203 ;;
  1204 ;; *************** function _main *****************
  1205 ;; Defined at:
  1206 ;;		line 29 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;		None
  1209 ;; Auto vars:     Size  Location     Type
  1210 ;;		None
  1211 ;; Return value:  Size  Location     Type
  1212 ;;		None               void
  1213 ;; Registers used:
  1214 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1215 ;; Tracked objects:
  1216 ;;		On entry : 17F/0
  1217 ;;		On exit  : 0/0
  1218 ;;		Unchanged: 0/0
  1219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1220 ;;      Params:         0       0       0       0       0
  1221 ;;      Locals:         0       0       0       0       0
  1222 ;;      Temps:          0       3       0       0       0
  1223 ;;      Totals:         0       3       0       0       0
  1224 ;;Total ram usage:        3 bytes
  1225 ;; Hardware stack levels required when called:    6
  1226 ;; This function calls:
  1227 ;;		_calculateTemp
  1228 ;;		_checkMode
  1229 ;;		_checkSelect
  1230 ;;		_checkTime
  1231 ;;		_handlePPM
  1232 ;;		_handleTemp
  1233 ;;		_initADC
  1234 ;;		_initInterrupt
  1235 ;;		_readADC
  1236 ;;		_runClock
  1237 ;;		_runMQ135
  1238 ;;		_setPortDirections
  1239 ;;		_startUpLCD
  1240 ;;		_updateState
  1241 ;; This function is called by:
  1242 ;;		Startup code after reset
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           
  1247                           ;psect for function _main
  1248  17A1                     _main:	
  1249                           
  1250                           ;main.c: 31: setPortDirections();
  1251                           
  1252                           ;incstack = 0
  1253                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1254  17A1  160A  118A  23ED  160A  118A  	fcall	_setPortDirections
  1255                           
  1256                           ;main.c: 32: initADC();
  1257  17A6  160A  118A  23DA  160A  118A  	fcall	_initADC
  1258                           
  1259                           ;main.c: 33: initInterrupt();
  1260  17AB  120A  118A  27F9  160A  118A  	fcall	_initInterrupt
  1261                           
  1262                           ;main.c: 34: startUpLCD();
  1263  17B0  160A  118A  2445  160A  118A  	fcall	_startUpLCD
  1264                           
  1265                           ;main.c: 35: _delay((unsigned long)((250)*(4000000/4000.0)));
  1266  17B5  3002               	movlw	2
  1267  17B6  1283               	bcf	3,5	;RP0=0, select bank0
  1268  17B7  1303               	bcf	3,6	;RP1=0, select bank0
  1269  17B8  00EE               	movwf	??_main+2
  1270  17B9  3045               	movlw	69
  1271  17BA  00ED               	movwf	??_main+1
  1272  17BB  30A9               	movlw	169
  1273  17BC  00EC               	movwf	??_main
  1274  17BD                     u4717:	
  1275  17BD  0BEC               	decfsz	??_main,f
  1276  17BE  2FBD               	goto	u4717
  1277  17BF  0BED               	decfsz	??_main+1,f
  1278  17C0  2FBD               	goto	u4717
  1279  17C1  0BEE               	decfsz	??_main+2,f
  1280  17C2  2FBD               	goto	u4717
  1281  17C3  2FC4               	nop2
  1282  17C4                     l3339:	
  1283                           ;main.c: 36: while (1)
  1284                           
  1285                           
  1286                           ;main.c: 37: {
  1287                           ;main.c: 38: runClock();
  1288  17C4  160A  118A  24AE  160A  118A  	fcall	_runClock
  1289                           
  1290                           ;main.c: 39: checkTime();
  1291  17C9  120A  158A  2052  160A  118A  	fcall	_checkTime
  1292                           
  1293                           ;main.c: 40: runMQ135();
  1294  17CE  160A  118A  250B  160A  118A  	fcall	_runMQ135
  1295                           
  1296                           ;main.c: 41: handlePPM();
  1297  17D3  160A  118A  2668  160A  118A  	fcall	_handlePPM
  1298                           
  1299                           ;main.c: 42: calculateTemp(readADC(1));
  1300  17D8  3001               	movlw	1
  1301  17D9  160A  118A  25E5  160A  118A  	fcall	_readADC
  1302  17DE  1283               	bcf	3,5	;RP0=0, select bank0
  1303  17DF  1303               	bcf	3,6	;RP1=0, select bank0
  1304  17E0  0821               	movf	?_readADC+1,w
  1305  17E1  01AF               	clrf	calculateTemp@adcValue+1
  1306  17E2  07AF               	addwf	calculateTemp@adcValue+1,f
  1307  17E3  0820               	movf	?_readADC,w
  1308  17E4  01AE               	clrf	calculateTemp@adcValue
  1309  17E5  07AE               	addwf	calculateTemp@adcValue,f
  1310  17E6  160A  118A  2639  160A  118A  	fcall	_calculateTemp
  1311                           
  1312                           ;main.c: 43: handleTemp();
  1313  17EB  160A  118A  245A  160A  118A  	fcall	_handleTemp
  1314                           
  1315                           ;main.c: 44: checkSelect();
  1316  17F0  160A  118A  2698  160A  118A  	fcall	_checkSelect
  1317                           
  1318                           ;main.c: 45: checkMode();
  1319  17F5  160A  118A  24EB  160A  118A  	fcall	_checkMode
  1320                           
  1321                           ;main.c: 46: updateState();
  1322  17FA  120A  118A  25F7  160A  118A  	fcall	_updateState
  1323  17FF  2FC4               	goto	l3339
  1324  1800                     __end_of_main:	
  1325                           
  1326                           	psect	text1
  1327  05F7                     __ptext1:	
  1328 ;; *************** function _updateState *****************
  1329 ;; Defined at:
  1330 ;;		line 97 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;		None
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;  buffer         10   66[BANK0 ] unsigned char [10]
  1335 ;; Return value:  Size  Location     Type
  1336 ;;		None               void
  1337 ;; Registers used:
  1338 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1339 ;; Tracked objects:
  1340 ;;		On entry : 0/0
  1341 ;;		On exit  : 0/0
  1342 ;;		Unchanged: 0/0
  1343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1344 ;;      Params:         0       0       0       0       0
  1345 ;;      Locals:         0      10       0       0       0
  1346 ;;      Temps:          0       4       0       0       0
  1347 ;;      Totals:         0      14       0       0       0
  1348 ;;Total ram usage:       14 bytes
  1349 ;; Hardware stack levels used:    1
  1350 ;; Hardware stack levels required when called:    5
  1351 ;; This function calls:
  1352 ;;		_displayPPM
  1353 ;;		_displayTemp
  1354 ;;		_displayTime
  1355 ;;		_instCTRL
  1356 ;;		_printStatusPPM
  1357 ;;		_printStatusTMP
  1358 ;;		_printToLCD
  1359 ;;		_setHoursEnd
  1360 ;;		_setHoursStart
  1361 ;;		_setMinutesEnd
  1362 ;;		_setMinutesStart
  1363 ;;		_sprintf
  1364 ;; This function is called by:
  1365 ;;		_main
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           
  1370                           ;psect for function _updateState
  1371  05F7                     _updateState:	
  1372                           
  1373                           ;main.c: 99: char buffer[10];
  1374                           ;main.c: 100: switch (mode)
  1375                           
  1376                           ;incstack = 0
  1377                           ; Regs used in _updateState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1378  05F7  2F7E               	goto	l3329
  1379  05F8                     l3247:	
  1380                           ;main.c: 101: {
  1381                           ;main.c: 102: case DISP_CMN:
  1382                           
  1383                           
  1384                           ;main.c: 103: instCTRL(0x80);
  1385  05F8  3080               	movlw	128
  1386  05F9  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1387                           
  1388                           ;main.c: 104: printToLCD("MODE: ");
  1389  05FE  30F7               	movlw	low (STR_23| (0+32768))
  1390  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  1391  0600  1303               	bcf	3,6	;RP1=0, select bank0
  1392  0601  00A2               	movwf	printToLCD@str
  1393  0602  3090               	movlw	high (STR_23| (0+32768))
  1394  0603  00A3               	movwf	printToLCD@str+1
  1395  0604  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1396                           
  1397                           ;main.c: 105: switch (select)
  1398  0609  2EA1               	goto	l3275
  1399  060A                     l3251:	
  1400                           ;main.c: 106: {
  1401                           ;main.c: 107: case 0:
  1402                           
  1403                           
  1404                           ;main.c: 108: printToLCD("DISP CMMON PG1");
  1405  060A  303C               	movlw	low (STR_24| (0+32768))
  1406  060B  1283               	bcf	3,5	;RP0=0, select bank0
  1407  060C  1303               	bcf	3,6	;RP1=0, select bank0
  1408  060D  00A2               	movwf	printToLCD@str
  1409  060E  3090               	movlw	high (STR_24| (0+32768))
  1410  060F  00A3               	movwf	printToLCD@str+1
  1411  0610  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1412                           
  1413                           ;main.c: 109: instCTRL(0xC0);
  1414  0615  30C0               	movlw	192
  1415  0616  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1416                           
  1417                           ;main.c: 110: displayTime();
  1418  061B  160A  118A  2577  120A  118A  	fcall	_displayTime
  1419                           
  1420                           ;main.c: 111: instCTRL(0x94);
  1421  0620  3094               	movlw	148
  1422  0621  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1423                           
  1424                           ;main.c: 112: sprintf(buffer, "STRT: %2d:%2d", savedHoursStart, savedMinutesStart);
  1425  0626  3068               	movlw	low (STR_25| (0+32768))
  1426  0627  1283               	bcf	3,5	;RP0=0, select bank0
  1427  0628  1303               	bcf	3,6	;RP1=0, select bank0
  1428  0629  00B4               	movwf	sprintf@f
  1429  062A  3090               	movlw	high (STR_25| (0+32768))
  1430  062B  00B5               	movwf	sprintf@f+1
  1431  062C  1683               	bsf	3,5	;RP0=1, select bank1
  1432  062D  1303               	bcf	3,6	;RP1=0, select bank1
  1433  062E  085C               	movf	_savedHoursStart^(0+128),w	;volatile
  1434  062F  1283               	bcf	3,5	;RP0=0, select bank0
  1435  0630  1303               	bcf	3,6	;RP1=0, select bank0
  1436  0631  00DE               	movwf	??_updateState
  1437  0632  01DF               	clrf	??_updateState+1
  1438  0633  085E               	movf	??_updateState,w
  1439  0634  00B6               	movwf	?_sprintf+2
  1440  0635  085F               	movf	??_updateState+1,w
  1441  0636  00B7               	movwf	?_sprintf+3
  1442  0637  1683               	bsf	3,5	;RP0=1, select bank1
  1443  0638  1303               	bcf	3,6	;RP1=0, select bank1
  1444  0639  085E               	movf	_savedMinutesStart^(0+128),w	;volatile
  1445  063A  1283               	bcf	3,5	;RP0=0, select bank0
  1446  063B  1303               	bcf	3,6	;RP1=0, select bank0
  1447  063C  00E0               	movwf	??_updateState+2
  1448  063D  01E1               	clrf	??_updateState+3
  1449  063E  0860               	movf	??_updateState+2,w
  1450  063F  00B8               	movwf	?_sprintf+4
  1451  0640  0861               	movf	??_updateState+3,w
  1452  0641  00B9               	movwf	?_sprintf+5
  1453  0642  3062               	movlw	updateState@buffer& (0+255)
  1454  0643  120A  118A  23F8  120A  118A  	fcall	_sprintf
  1455                           
  1456                           ;main.c: 113: printToLCD(buffer);
  1457  0648  3062               	movlw	updateState@buffer& (0+255)
  1458  0649  1283               	bcf	3,5	;RP0=0, select bank0
  1459  064A  1303               	bcf	3,6	;RP1=0, select bank0
  1460  064B  00A2               	movwf	printToLCD@str
  1461  064C  3000               	movlw	0
  1462  064D  00A3               	movwf	printToLCD@str+1
  1463  064E  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1464                           
  1465                           ;main.c: 114: instCTRL(0xD4);
  1466  0653  30D4               	movlw	212
  1467  0654  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1468                           
  1469                           ;main.c: 115: sprintf(buffer, "END: %2d:%2d", savedHoursEnd, savedMinutesEnd);
  1470  0659  3076               	movlw	low (STR_26| (0+32768))
  1471  065A  1283               	bcf	3,5	;RP0=0, select bank0
  1472  065B  1303               	bcf	3,6	;RP1=0, select bank0
  1473  065C  00B4               	movwf	sprintf@f
  1474  065D  3090               	movlw	high (STR_26| (0+32768))
  1475  065E  00B5               	movwf	sprintf@f+1
  1476  065F  086F               	movf	_savedHoursEnd,w	;volatile
  1477  0660  00DE               	movwf	??_updateState
  1478  0661  01DF               	clrf	??_updateState+1
  1479  0662  085E               	movf	??_updateState,w
  1480  0663  00B6               	movwf	?_sprintf+2
  1481  0664  085F               	movf	??_updateState+1,w
  1482  0665  00B7               	movwf	?_sprintf+3
  1483  0666  1683               	bsf	3,5	;RP0=1, select bank1
  1484  0667  1303               	bcf	3,6	;RP1=0, select bank1
  1485  0668  085D               	movf	_savedMinutesEnd^(0+128),w	;volatile
  1486  0669  1283               	bcf	3,5	;RP0=0, select bank0
  1487  066A  1303               	bcf	3,6	;RP1=0, select bank0
  1488  066B  00E0               	movwf	??_updateState+2
  1489  066C  01E1               	clrf	??_updateState+3
  1490  066D  0860               	movf	??_updateState+2,w
  1491  066E  00B8               	movwf	?_sprintf+4
  1492  066F  0861               	movf	??_updateState+3,w
  1493  0670  00B9               	movwf	?_sprintf+5
  1494  0671  3062               	movlw	updateState@buffer& (0+255)
  1495  0672  120A  118A  23F8  120A  118A  	fcall	_sprintf
  1496                           
  1497                           ;main.c: 116: printToLCD(buffer);
  1498  0677  3062               	movlw	updateState@buffer& (0+255)
  1499  0678  1283               	bcf	3,5	;RP0=0, select bank0
  1500  0679  1303               	bcf	3,6	;RP1=0, select bank0
  1501  067A  00A2               	movwf	printToLCD@str
  1502  067B  3000               	movlw	0
  1503  067C  00A3               	movwf	printToLCD@str+1
  1504  067D  160A  118A  260E   	fcall	_printToLCD
  1505                           
  1506                           ;main.c: 117: break;
  1507  0680  0008               	return
  1508  0681                     l3265:	
  1509                           ;main.c: 118: case 1:
  1510                           
  1511                           
  1512                           ;main.c: 119: printToLCD("DISP CMMON PG2");
  1513  0681  304B               	movlw	low (STR_27| (0+32768))
  1514  0682  1283               	bcf	3,5	;RP0=0, select bank0
  1515  0683  1303               	bcf	3,6	;RP1=0, select bank0
  1516  0684  00A2               	movwf	printToLCD@str
  1517  0685  3090               	movlw	high (STR_27| (0+32768))
  1518  0686  00A3               	movwf	printToLCD@str+1
  1519  0687  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1520                           
  1521                           ;main.c: 120: instCTRL(0xC0);
  1522  068C  30C0               	movlw	192
  1523  068D  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1524                           
  1525                           ;main.c: 121: displayPPM();
  1526  0692  120A  158A  26D7  120A  118A  	fcall	_displayPPM
  1527                           
  1528                           ;main.c: 122: instCTRL(0x94);
  1529  0697  3094               	movlw	148
  1530  0698  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1531                           
  1532                           ;main.c: 123: displayTemp();
  1533  069D  160A  118A  2553   	fcall	_displayTemp
  1534                           
  1535                           ;main.c: 126: }
  1536                           
  1537                           ;main.c: 125: break;
  1538  06A0  0008               	return
  1539  06A1                     l3275:	
  1540  06A1  1683               	bsf	3,5	;RP0=1, select bank1
  1541  06A2  1303               	bcf	3,6	;RP1=0, select bank1
  1542  06A3  0850               	movf	_select^(0+128),w	;volatile
  1543                           
  1544                           ; Switch size 1, requested type "space"
  1545                           ; Number of cases is 2, Range of values is 0 to 1
  1546                           ; switch strategies available:
  1547                           ; Name         Instructions Cycles
  1548                           ; simple_byte            7     4 (average)
  1549                           ; direct_byte           14     8 (fixed)
  1550                           ; jumptable            260     6 (fixed)
  1551                           ;	Chosen strategy is simple_byte
  1552  06A4  3A00               	xorlw	0	; case 0
  1553  06A5  1903               	skipnz
  1554  06A6  2E0A               	goto	l3251
  1555  06A7  3A01               	xorlw	1	; case 1
  1556  06A8  1903               	skipnz
  1557  06A9  2E81               	goto	l3265
  1558  06AA  2F8E               	goto	l294
  1559                           
  1560                           ;main.c: 127: break;
  1561  06AB  0008               	return
  1562  06AC                     l3277:	
  1563                           ;main.c: 128: case SET_ACTV_START:
  1564                           
  1565                           
  1566                           ;main.c: 129: instCTRL(0x80);
  1567  06AC  3080               	movlw	128
  1568  06AD  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1569                           
  1570                           ;main.c: 130: printToLCD("SET HRS - START");
  1571  06B2  301C               	movlw	low (STR_28| (0+32768))
  1572  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  1573  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  1574  06B5  00A2               	movwf	printToLCD@str
  1575  06B6  3090               	movlw	high (STR_28| (0+32768))
  1576  06B7  00A3               	movwf	printToLCD@str+1
  1577  06B8  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1578                           
  1579                           ;main.c: 131: switch (select)
  1580  06BD  2EF4               	goto	l3295
  1581  06BE                     l3281:	
  1582                           ;main.c: 132: {
  1583                           ;main.c: 133: case 0:
  1584                           
  1585                           
  1586                           ;main.c: 134: instCTRL(0xC0);
  1587  06BE  30C0               	movlw	192
  1588  06BF  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1589                           
  1590                           ;main.c: 135: printToLCD("SET HOURS");
  1591  06C4  30A5               	movlw	low (STR_29| (0+32768))
  1592  06C5  1283               	bcf	3,5	;RP0=0, select bank0
  1593  06C6  1303               	bcf	3,6	;RP1=0, select bank0
  1594  06C7  00A2               	movwf	printToLCD@str
  1595  06C8  3090               	movlw	high (STR_29| (0+32768))
  1596  06C9  00A3               	movwf	printToLCD@str+1
  1597  06CA  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1598                           
  1599                           ;main.c: 136: instCTRL(0x94);
  1600  06CF  3094               	movlw	148
  1601  06D0  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1602                           
  1603                           ;main.c: 137: setHoursStart();
  1604  06D5  120A  158A  22BB   	fcall	_setHoursStart
  1605                           
  1606                           ;main.c: 138: break;
  1607  06D8  0008               	return
  1608  06D9                     l3287:	
  1609                           ;main.c: 139: case 1:
  1610                           
  1611                           
  1612                           ;main.c: 140: instCTRL(0xC0);
  1613  06D9  30C0               	movlw	192
  1614  06DA  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1615                           
  1616                           ;main.c: 141: printToLCD("SET MINUTES");
  1617  06DF  3083               	movlw	low (STR_30| (0+32768))
  1618  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  1619  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  1620  06E2  00A2               	movwf	printToLCD@str
  1621  06E3  3090               	movlw	high (STR_30| (0+32768))
  1622  06E4  00A3               	movwf	printToLCD@str+1
  1623  06E5  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1624                           
  1625                           ;main.c: 142: instCTRL(0x94);
  1626  06EA  3094               	movlw	148
  1627  06EB  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1628                           
  1629                           ;main.c: 143: setMinutesStart();
  1630  06F0  120A  158A  243B   	fcall	_setMinutesStart
  1631                           
  1632                           ;main.c: 145: }
  1633                           
  1634                           ;main.c: 144: break;
  1635  06F3  0008               	return
  1636  06F4                     l3295:	
  1637  06F4  1683               	bsf	3,5	;RP0=1, select bank1
  1638  06F5  1303               	bcf	3,6	;RP1=0, select bank1
  1639  06F6  0850               	movf	_select^(0+128),w	;volatile
  1640                           
  1641                           ; Switch size 1, requested type "space"
  1642                           ; Number of cases is 2, Range of values is 0 to 1
  1643                           ; switch strategies available:
  1644                           ; Name         Instructions Cycles
  1645                           ; simple_byte            7     4 (average)
  1646                           ; direct_byte           14     8 (fixed)
  1647                           ; jumptable            260     6 (fixed)
  1648                           ;	Chosen strategy is simple_byte
  1649  06F7  3A00               	xorlw	0	; case 0
  1650  06F8  1903               	skipnz
  1651  06F9  2EBE               	goto	l3281
  1652  06FA  3A01               	xorlw	1	; case 1
  1653  06FB  1903               	skipnz
  1654  06FC  2ED9               	goto	l3287
  1655  06FD  2F8E               	goto	l294
  1656                           
  1657                           ;main.c: 146: break;
  1658  06FE  0008               	return
  1659  06FF                     l3297:	
  1660                           ;main.c: 147: case SET_ACTV_END:
  1661                           
  1662                           
  1663                           ;main.c: 148: instCTRL(0x80);
  1664  06FF  3080               	movlw	128
  1665  0700  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1666                           
  1667                           ;main.c: 149: printToLCD("SET HRS - END");
  1668  0705  305A               	movlw	low (STR_31| (0+32768))
  1669  0706  1283               	bcf	3,5	;RP0=0, select bank0
  1670  0707  1303               	bcf	3,6	;RP1=0, select bank0
  1671  0708  00A2               	movwf	printToLCD@str
  1672  0709  3090               	movlw	high (STR_31| (0+32768))
  1673  070A  00A3               	movwf	printToLCD@str+1
  1674  070B  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1675                           
  1676                           ;main.c: 150: switch (select)
  1677  0710  2F47               	goto	l3315
  1678  0711                     l3301:	
  1679                           ;main.c: 151: {
  1680                           ;main.c: 152: case 0:
  1681                           
  1682                           
  1683                           ;main.c: 153: instCTRL(0xC0);
  1684  0711  30C0               	movlw	192
  1685  0712  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1686                           
  1687                           ;main.c: 154: printToLCD("SET HOURS");
  1688  0717  30A5               	movlw	low (STR_29| (0+32768))
  1689  0718  1283               	bcf	3,5	;RP0=0, select bank0
  1690  0719  1303               	bcf	3,6	;RP1=0, select bank0
  1691  071A  00A2               	movwf	printToLCD@str
  1692  071B  3090               	movlw	high (STR_29| (0+32768))
  1693  071C  00A3               	movwf	printToLCD@str+1
  1694  071D  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1695                           
  1696                           ;main.c: 155: instCTRL(0x94);
  1697  0722  3094               	movlw	148
  1698  0723  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1699                           
  1700                           ;main.c: 156: setHoursEnd();
  1701  0728  120A  158A  2157   	fcall	_setHoursEnd
  1702                           
  1703                           ;main.c: 157: break;
  1704  072B  0008               	return
  1705  072C                     l3307:	
  1706                           ;main.c: 158: case 1:
  1707                           
  1708                           
  1709                           ;main.c: 159: instCTRL(0xC0);
  1710  072C  30C0               	movlw	192
  1711  072D  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1712                           
  1713                           ;main.c: 160: printToLCD("SET MINUTES");
  1714  0732  3083               	movlw	low (STR_30| (0+32768))
  1715  0733  1283               	bcf	3,5	;RP0=0, select bank0
  1716  0734  1303               	bcf	3,6	;RP1=0, select bank0
  1717  0735  00A2               	movwf	printToLCD@str
  1718  0736  3090               	movlw	high (STR_30| (0+32768))
  1719  0737  00A3               	movwf	printToLCD@str+1
  1720  0738  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1721                           
  1722                           ;main.c: 161: instCTRL(0x94);
  1723  073D  3094               	movlw	148
  1724  073E  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1725                           
  1726                           ;main.c: 162: setMinutesEnd();
  1727  0743  120A  158A  237B   	fcall	_setMinutesEnd
  1728                           
  1729                           ;main.c: 164: }
  1730                           
  1731                           ;main.c: 163: break;
  1732  0746  0008               	return
  1733  0747                     l3315:	
  1734  0747  1683               	bsf	3,5	;RP0=1, select bank1
  1735  0748  1303               	bcf	3,6	;RP1=0, select bank1
  1736  0749  0850               	movf	_select^(0+128),w	;volatile
  1737                           
  1738                           ; Switch size 1, requested type "space"
  1739                           ; Number of cases is 2, Range of values is 0 to 1
  1740                           ; switch strategies available:
  1741                           ; Name         Instructions Cycles
  1742                           ; simple_byte            7     4 (average)
  1743                           ; direct_byte           14     8 (fixed)
  1744                           ; jumptable            260     6 (fixed)
  1745                           ;	Chosen strategy is simple_byte
  1746  074A  3A00               	xorlw	0	; case 0
  1747  074B  1903               	skipnz
  1748  074C  2F11               	goto	l3301
  1749  074D  3A01               	xorlw	1	; case 1
  1750  074E  1903               	skipnz
  1751  074F  2F2C               	goto	l3307
  1752  0750  2F8E               	goto	l294
  1753                           
  1754                           ;main.c: 165: break;
  1755  0751  0008               	return
  1756  0752                     l3317:	
  1757                           ;main.c: 166: case CHCK_IO:
  1758                           
  1759                           
  1760                           ;main.c: 167: instCTRL(0x80);
  1761  0752  3080               	movlw	128
  1762  0753  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1763                           
  1764                           ;main.c: 168: printToLCD("IO STATUS:");
  1765  0758  308F               	movlw	low (STR_34| (0+32768))
  1766  0759  1283               	bcf	3,5	;RP0=0, select bank0
  1767  075A  1303               	bcf	3,6	;RP1=0, select bank0
  1768  075B  00A2               	movwf	printToLCD@str
  1769  075C  3090               	movlw	high (STR_34| (0+32768))
  1770  075D  00A3               	movwf	printToLCD@str+1
  1771  075E  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1772                           
  1773                           ;main.c: 169: instCTRL(0xC0);
  1774  0763  30C0               	movlw	192
  1775  0764  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1776                           
  1777                           ;main.c: 170: printStatusTMP(tempFlag);
  1778  0769  1683               	bsf	3,5	;RP0=1, select bank1
  1779  076A  1303               	bcf	3,6	;RP1=0, select bank1
  1780  076B  0851               	movf	_tempFlag^(0+128),w
  1781  076C  160A  118A  2492  120A  118A  	fcall	_printStatusTMP
  1782                           
  1783                           ;main.c: 171: instCTRL(0x94);
  1784  0771  3094               	movlw	148
  1785  0772  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1786                           
  1787                           ;main.c: 172: printStatusPPM(ppmFlag);
  1788  0777  1683               	bsf	3,5	;RP0=1, select bank1
  1789  0778  1303               	bcf	3,6	;RP1=0, select bank1
  1790  0779  084F               	movf	_ppmFlag^(0+128),w
  1791  077A  160A  118A  2476   	fcall	_printStatusPPM
  1792                           
  1793                           ;main.c: 176: }
  1794                           
  1795                           ;main.c: 175: break;
  1796                           
  1797                           ;main.c: 174: default:
  1798                           
  1799                           ;main.c: 173: break;
  1800  077D  0008               	return
  1801  077E                     l3329:	
  1802  077E  1683               	bsf	3,5	;RP0=1, select bank1
  1803  077F  1303               	bcf	3,6	;RP1=0, select bank1
  1804  0780  084E               	movf	_mode^(0+128),w
  1805                           
  1806                           ; Switch size 1, requested type "space"
  1807                           ; Number of cases is 4, Range of values is 0 to 3
  1808                           ; switch strategies available:
  1809                           ; Name         Instructions Cycles
  1810                           ; simple_byte           13     7 (average)
  1811                           ; direct_byte           20     8 (fixed)
  1812                           ; jumptable            260     6 (fixed)
  1813                           ;	Chosen strategy is simple_byte
  1814  0781  3A00               	xorlw	0	; case 0
  1815  0782  1903               	skipnz
  1816  0783  2DF8               	goto	l3247
  1817  0784  3A01               	xorlw	1	; case 1
  1818  0785  1903               	skipnz
  1819  0786  2EAC               	goto	l3277
  1820  0787  3A03               	xorlw	3	; case 2
  1821  0788  1903               	skipnz
  1822  0789  2EFF               	goto	l3297
  1823  078A  3A01               	xorlw	1	; case 3
  1824  078B  1903               	skipnz
  1825  078C  2F52               	goto	l3317
  1826  078D  2F8E               	goto	l294
  1827  078E                     l294:	
  1828  078E  0008               	return
  1829  078F                     __end_of_updateState:	
  1830                           
  1831                           	psect	text2
  1832  0C3B                     __ptext2:	
  1833 ;; *************** function _setMinutesStart *****************
  1834 ;; Defined at:
  1835 ;;		line 132 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\time_scheduler.
      +h"
  1836 ;; Parameters:    Size  Location     Type
  1837 ;;		None
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;		None
  1840 ;; Return value:  Size  Location     Type
  1841 ;;		None               void
  1842 ;; Registers used:
  1843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1849 ;;      Params:         0       0       0       0       0
  1850 ;;      Locals:         0       0       0       0       0
  1851 ;;      Temps:          0       2       0       0       0
  1852 ;;      Totals:         0       2       0       0       0
  1853 ;;Total ram usage:        2 bytes
  1854 ;; Hardware stack levels used:    1
  1855 ;; Hardware stack levels required when called:    4
  1856 ;; This function calls:
  1857 ;;		___awmod
  1858 ;;		_printToLCD
  1859 ;;		_sprintf
  1860 ;; This function is called by:
  1861 ;;		_updateState
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           
  1866                           ;psect for function _setMinutesStart
  1867  0C3B                     _setMinutesStart:	
  1868                           
  1869                           ;time_scheduler.h: 134: keyValid = (PORTB & 0x08) >> 3;
  1870                           
  1871                           ;incstack = 0
  1872                           ; Regs used in _setMinutesStart: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1873  0C3B  1283               	bcf	3,5	;RP0=0, select bank0
  1874  0C3C  1303               	bcf	3,6	;RP1=0, select bank0
  1875  0C3D  0806               	movf	6,w	;volatile
  1876  0C3E  00CA               	movwf	??_setMinutesStart
  1877  0C3F  3003               	movlw	3
  1878  0C40                     u4315:	
  1879  0C40  1003               	clrc
  1880  0C41  0CCA               	rrf	??_setMinutesStart,f
  1881  0C42  3EFF               	addlw	-1
  1882  0C43  1D03               	skipz
  1883  0C44  2C40               	goto	u4315
  1884  0C45  084A               	movf	??_setMinutesStart,w
  1885  0C46  3901               	andlw	1
  1886  0C47  00CB               	movwf	??_setMinutesStart+1
  1887  0C48  084B               	movf	??_setMinutesStart+1,w
  1888  0C49  00F8               	movwf	_keyValid
  1889                           
  1890                           ;time_scheduler.h: 135: key = (PORTB & 0xF0) >> 4;
  1891  0C4A  0806               	movf	6,w	;volatile
  1892  0C4B  00CA               	movwf	??_setMinutesStart
  1893  0C4C  3004               	movlw	4
  1894  0C4D                     u4325:	
  1895  0C4D  1003               	clrc
  1896  0C4E  0CCA               	rrf	??_setMinutesStart,f
  1897  0C4F  3EFF               	addlw	-1
  1898  0C50  1D03               	skipz
  1899  0C51  2C4D               	goto	u4325
  1900  0C52  084A               	movf	??_setMinutesStart,w
  1901  0C53  390F               	andlw	15
  1902  0C54  00CB               	movwf	??_setMinutesStart+1
  1903  0C55  084B               	movf	??_setMinutesStart+1,w
  1904  0C56  00F7               	movwf	_key
  1905                           
  1906                           ;time_scheduler.h: 137: _delay((unsigned long)((50)*(4000000/4000.0)));
  1907  0C57  3041               	movlw	65
  1908  0C58  00CB               	movwf	??_setMinutesStart+1
  1909  0C59  30EE               	movlw	238
  1910  0C5A  00CA               	movwf	??_setMinutesStart
  1911  0C5B                     u4727:	
  1912  0C5B  0BCA               	decfsz	??_setMinutesStart,f
  1913  0C5C  2C5B               	goto	u4727
  1914  0C5D  0BCB               	decfsz	??_setMinutesStart+1,f
  1915  0C5E  2C5B               	goto	u4727
  1916  0C5F  0000               	nop
  1917                           
  1918                           ;time_scheduler.h: 139: if (keyValid && key != lastKeyState)
  1919  0C60  0878               	movf	_keyValid,w
  1920  0C61  1903               	btfsc	3,2
  1921  0C62  2CF1               	goto	l3111
  1922  0C63  0877               	movf	_key,w
  1923  0C64  067B               	xorwf	_lastKeyState,w
  1924  0C65  1903               	skipnz
  1925  0C66  2CF1               	goto	l3111
  1926                           
  1927                           ;time_scheduler.h: 140: {
  1928                           ;time_scheduler.h: 141: if (key == 0b00001100)
  1929  0C67  0877               	movf	_key,w
  1930  0C68  3A0C               	xorlw	12
  1931  0C69  1D03               	skipz
  1932  0C6A  2C8F               	goto	l3095
  1933                           
  1934                           ;time_scheduler.h: 142: {
  1935                           ;time_scheduler.h: 143: savedMinutesStart = (savedMinutesStart + 5) % 60;
  1936  0C6B  303C               	movlw	60
  1937  0C6C  1283               	bcf	3,5	;RP0=0, select bank0
  1938  0C6D  1303               	bcf	3,6	;RP1=0, select bank0
  1939  0C6E  00A0               	movwf	___awmod@divisor
  1940  0C6F  3000               	movlw	0
  1941  0C70  00A1               	movwf	___awmod@divisor+1
  1942  0C71  1683               	bsf	3,5	;RP0=1, select bank1
  1943  0C72  1303               	bcf	3,6	;RP1=0, select bank1
  1944  0C73  085E               	movf	_savedMinutesStart^(0+128),w	;volatile
  1945  0C74  3E05               	addlw	5
  1946  0C75  1283               	bcf	3,5	;RP0=0, select bank0
  1947  0C76  1303               	bcf	3,6	;RP1=0, select bank0
  1948  0C77  00A2               	movwf	___awmod@dividend
  1949  0C78  3000               	movlw	0
  1950  0C79  1803               	skipnc
  1951  0C7A  3001               	movlw	1
  1952  0C7B  00A3               	movwf	___awmod@dividend+1
  1953  0C7C  120A  158A  2003  120A  158A  	fcall	___awmod
  1954  0C81  1283               	bcf	3,5	;RP0=0, select bank0
  1955  0C82  1303               	bcf	3,6	;RP1=0, select bank0
  1956  0C83  0820               	movf	?___awmod,w
  1957  0C84  00CA               	movwf	??_setMinutesStart
  1958  0C85  084A               	movf	??_setMinutesStart,w
  1959  0C86  1683               	bsf	3,5	;RP0=1, select bank1
  1960  0C87  1303               	bcf	3,6	;RP1=0, select bank1
  1961  0C88  00DE               	movwf	_savedMinutesStart^(0+128)	;volatile
  1962                           
  1963                           ;time_scheduler.h: 144: sprintf(debugInfo, "INC: %02d", savedMinutesStart);
  1964  0C89  30B9               	movlw	low (STR_7| (0+32768))
  1965  0C8A  1283               	bcf	3,5	;RP0=0, select bank0
  1966  0C8B  1303               	bcf	3,6	;RP1=0, select bank0
  1967  0C8C  00B4               	movwf	sprintf@f
  1968  0C8D  3090               	movlw	high (STR_7| (0+32768))
  1969  0C8E  2CC0               	goto	L1
  1970  0C8F                     l3095:	
  1971                           ;time_scheduler.h: 145: }
  1972                           
  1973                           
  1974                           ;time_scheduler.h: 146: else if (key == 0b00001110)
  1975  0C8F  0877               	movf	_key,w
  1976  0C90  3A0E               	xorlw	14
  1977  0C91  1D03               	skipz
  1978  0C92  2CB7               	goto	l3101
  1979                           
  1980                           ;time_scheduler.h: 147: {
  1981                           ;time_scheduler.h: 148: savedMinutesStart = (savedMinutesStart - 5 + 60) % 60;
  1982  0C93  303C               	movlw	60
  1983  0C94  1283               	bcf	3,5	;RP0=0, select bank0
  1984  0C95  1303               	bcf	3,6	;RP1=0, select bank0
  1985  0C96  00A0               	movwf	___awmod@divisor
  1986  0C97  3000               	movlw	0
  1987  0C98  00A1               	movwf	___awmod@divisor+1
  1988  0C99  1683               	bsf	3,5	;RP0=1, select bank1
  1989  0C9A  1303               	bcf	3,6	;RP1=0, select bank1
  1990  0C9B  085E               	movf	_savedMinutesStart^(0+128),w	;volatile
  1991  0C9C  3E37               	addlw	55
  1992  0C9D  1283               	bcf	3,5	;RP0=0, select bank0
  1993  0C9E  1303               	bcf	3,6	;RP1=0, select bank0
  1994  0C9F  00A2               	movwf	___awmod@dividend
  1995  0CA0  3000               	movlw	0
  1996  0CA1  1803               	skipnc
  1997  0CA2  3001               	movlw	1
  1998  0CA3  00A3               	movwf	___awmod@dividend+1
  1999  0CA4  120A  158A  2003  120A  158A  	fcall	___awmod
  2000  0CA9  1283               	bcf	3,5	;RP0=0, select bank0
  2001  0CAA  1303               	bcf	3,6	;RP1=0, select bank0
  2002  0CAB  0820               	movf	?___awmod,w
  2003  0CAC  00CA               	movwf	??_setMinutesStart
  2004  0CAD  084A               	movf	??_setMinutesStart,w
  2005  0CAE  1683               	bsf	3,5	;RP0=1, select bank1
  2006  0CAF  1303               	bcf	3,6	;RP1=0, select bank1
  2007  0CB0  00DE               	movwf	_savedMinutesStart^(0+128)	;volatile
  2008                           
  2009                           ;time_scheduler.h: 149: sprintf(debugInfo, "DEC: %02d", savedMinutesStart);
  2010  0CB1  30AF               	movlw	low (STR_8| (0+32768))
  2011  0CB2  1283               	bcf	3,5	;RP0=0, select bank0
  2012  0CB3  1303               	bcf	3,6	;RP1=0, select bank0
  2013  0CB4  00B4               	movwf	sprintf@f
  2014  0CB5  3090               	movlw	high (STR_8| (0+32768))
  2015  0CB6  2CC0               	goto	L1
  2016  0CB7                     l3101:	
  2017                           ;time_scheduler.h: 150: }
  2018                           
  2019                           
  2020                           ;time_scheduler.h: 151: else if (key == 0b00001101)
  2021  0CB7  0877               	movf	_key,w
  2022  0CB8  3A0D               	xorlw	13
  2023  0CB9  1D03               	skipz
  2024  0CBA  2CD2               	goto	l175
  2025                           
  2026                           ;time_scheduler.h: 152: {
  2027                           ;time_scheduler.h: 153: sprintf(debugInfo, "SET: %02d", savedMinutesStart);
  2028  0CBB  30C3               	movlw	low (STR_9| (0+32768))
  2029  0CBC  1283               	bcf	3,5	;RP0=0, select bank0
  2030  0CBD  1303               	bcf	3,6	;RP1=0, select bank0
  2031  0CBE  00B4               	movwf	sprintf@f
  2032  0CBF  3090               	movlw	high (STR_9| (0+32768))
  2033  0CC0                     L1:	
  2034  0CC0  00B5               	movwf	sprintf@f+1
  2035  0CC1  1683               	bsf	3,5	;RP0=1, select bank1
  2036  0CC2  1303               	bcf	3,6	;RP1=0, select bank1
  2037  0CC3  085E               	movf	_savedMinutesStart^(0+128),w	;volatile
  2038  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  2039  0CC5  1303               	bcf	3,6	;RP1=0, select bank0
  2040  0CC6  00CA               	movwf	??_setMinutesStart
  2041  0CC7  01CB               	clrf	??_setMinutesStart+1
  2042  0CC8  084A               	movf	??_setMinutesStart,w
  2043  0CC9  00B6               	movwf	?_sprintf+2
  2044  0CCA  084B               	movf	??_setMinutesStart+1,w
  2045  0CCB  00B7               	movwf	?_sprintf+3
  2046  0CCC  30D2               	movlw	_debugInfo& (0+255)
  2047  0CCD  120A  118A  23F8  120A  158A  	fcall	_sprintf
  2048  0CD2                     l175:	
  2049                           
  2050                           ;time_scheduler.h: 154: }
  2051                           ;time_scheduler.h: 156: printToLCD(debugInfo);
  2052  0CD2  30D2               	movlw	_debugInfo& (0+255)
  2053  0CD3  1283               	bcf	3,5	;RP0=0, select bank0
  2054  0CD4  1303               	bcf	3,6	;RP1=0, select bank0
  2055  0CD5  00A2               	movwf	printToLCD@str
  2056  0CD6  3000               	movlw	0
  2057  0CD7  00A3               	movwf	printToLCD@str+1
  2058  0CD8  160A  118A  260E  120A  158A  	fcall	_printToLCD
  2059                           
  2060                           ;time_scheduler.h: 157: lastKeyState = key;
  2061  0CDD  0877               	movf	_key,w
  2062  0CDE  1283               	bcf	3,5	;RP0=0, select bank0
  2063  0CDF  1303               	bcf	3,6	;RP1=0, select bank0
  2064  0CE0  00CA               	movwf	??_setMinutesStart
  2065  0CE1  084A               	movf	??_setMinutesStart,w
  2066  0CE2  00FB               	movwf	_lastKeyState
  2067  0CE3                     l3109:	
  2068                           ;time_scheduler.h: 159: while ((PORTB & 0x08) != 0)
  2069                           
  2070  0CE3  1283               	bcf	3,5	;RP0=0, select bank0
  2071  0CE4  1303               	bcf	3,6	;RP1=0, select bank0
  2072  0CE5  1D86               	btfss	6,3	;volatile
  2073  0CE6  0008               	return
  2074                           
  2075                           ;time_scheduler.h: 160: {
  2076                           ;time_scheduler.h: 161: _delay((unsigned long)((10)*(4000000/4000.0)));
  2077  0CE7  300D               	movlw	13
  2078  0CE8  00CB               	movwf	??_setMinutesStart+1
  2079  0CE9  30FB               	movlw	251
  2080  0CEA  00CA               	movwf	??_setMinutesStart
  2081  0CEB                     u4737:	
  2082  0CEB  0BCA               	decfsz	??_setMinutesStart,f
  2083  0CEC  2CEB               	goto	u4737
  2084  0CED  0BCB               	decfsz	??_setMinutesStart+1,f
  2085  0CEE  2CEB               	goto	u4737
  2086  0CEF  2CF0               	nop2
  2087  0CF0  2CE3               	goto	l3109
  2088  0CF1                     l3111:	
  2089                           ;time_scheduler.h: 162: }
  2090                           ;time_scheduler.h: 163: }
  2091                           
  2092                           
  2093                           ;time_scheduler.h: 164: else if (!keyValid)
  2094  0CF1  08F8               	movf	_keyValid,f
  2095  0CF2  1D03               	skipz
  2096  0CF3  0008               	return
  2097                           
  2098                           ;time_scheduler.h: 165: {
  2099                           ;time_scheduler.h: 166: lastKeyState = 0xFF;
  2100  0CF4  30FF               	movlw	255
  2101  0CF5  1283               	bcf	3,5	;RP0=0, select bank0
  2102  0CF6  1303               	bcf	3,6	;RP1=0, select bank0
  2103  0CF7  00CA               	movwf	??_setMinutesStart
  2104  0CF8  084A               	movf	??_setMinutesStart,w
  2105  0CF9  00FB               	movwf	_lastKeyState
  2106  0CFA  0008               	return
  2107  0CFB                     __end_of_setMinutesStart:	
  2108                           
  2109                           	psect	text3
  2110  0B7B                     __ptext3:	
  2111 ;; *************** function _setMinutesEnd *****************
  2112 ;; Defined at:
  2113 ;;		line 170 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\time_scheduler.
      +h"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;		None
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;		None
  2118 ;; Return value:  Size  Location     Type
  2119 ;;		None               void
  2120 ;; Registers used:
  2121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2127 ;;      Params:         0       0       0       0       0
  2128 ;;      Locals:         0       0       0       0       0
  2129 ;;      Temps:          0       2       0       0       0
  2130 ;;      Totals:         0       2       0       0       0
  2131 ;;Total ram usage:        2 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; Hardware stack levels required when called:    4
  2134 ;; This function calls:
  2135 ;;		___awmod
  2136 ;;		_printToLCD
  2137 ;;		_sprintf
  2138 ;; This function is called by:
  2139 ;;		_updateState
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           
  2144                           ;psect for function _setMinutesEnd
  2145  0B7B                     _setMinutesEnd:	
  2146                           
  2147                           ;time_scheduler.h: 172: keyValid = (PORTB & 0x08) >> 3;
  2148                           
  2149                           ;incstack = 0
  2150                           ; Regs used in _setMinutesEnd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2151  0B7B  1283               	bcf	3,5	;RP0=0, select bank0
  2152  0B7C  1303               	bcf	3,6	;RP1=0, select bank0
  2153  0B7D  0806               	movf	6,w	;volatile
  2154  0B7E  00CA               	movwf	??_setMinutesEnd
  2155  0B7F  3003               	movlw	3
  2156  0B80                     u4405:	
  2157  0B80  1003               	clrc
  2158  0B81  0CCA               	rrf	??_setMinutesEnd,f
  2159  0B82  3EFF               	addlw	-1
  2160  0B83  1D03               	skipz
  2161  0B84  2B80               	goto	u4405
  2162  0B85  084A               	movf	??_setMinutesEnd,w
  2163  0B86  3901               	andlw	1
  2164  0B87  00CB               	movwf	??_setMinutesEnd+1
  2165  0B88  084B               	movf	??_setMinutesEnd+1,w
  2166  0B89  00F8               	movwf	_keyValid
  2167                           
  2168                           ;time_scheduler.h: 173: key = (PORTB & 0xF0) >> 4;
  2169  0B8A  0806               	movf	6,w	;volatile
  2170  0B8B  00CA               	movwf	??_setMinutesEnd
  2171  0B8C  3004               	movlw	4
  2172  0B8D                     u4415:	
  2173  0B8D  1003               	clrc
  2174  0B8E  0CCA               	rrf	??_setMinutesEnd,f
  2175  0B8F  3EFF               	addlw	-1
  2176  0B90  1D03               	skipz
  2177  0B91  2B8D               	goto	u4415
  2178  0B92  084A               	movf	??_setMinutesEnd,w
  2179  0B93  390F               	andlw	15
  2180  0B94  00CB               	movwf	??_setMinutesEnd+1
  2181  0B95  084B               	movf	??_setMinutesEnd+1,w
  2182  0B96  00F7               	movwf	_key
  2183                           
  2184                           ;time_scheduler.h: 175: _delay((unsigned long)((50)*(4000000/4000.0)));
  2185  0B97  3041               	movlw	65
  2186  0B98  00CB               	movwf	??_setMinutesEnd+1
  2187  0B99  30EE               	movlw	238
  2188  0B9A  00CA               	movwf	??_setMinutesEnd
  2189  0B9B                     u4747:	
  2190  0B9B  0BCA               	decfsz	??_setMinutesEnd,f
  2191  0B9C  2B9B               	goto	u4747
  2192  0B9D  0BCB               	decfsz	??_setMinutesEnd+1,f
  2193  0B9E  2B9B               	goto	u4747
  2194  0B9F  0000               	nop
  2195                           
  2196                           ;time_scheduler.h: 177: if (keyValid && key != lastKeyState)
  2197  0BA0  0878               	movf	_keyValid,w
  2198  0BA1  1903               	btfsc	3,2
  2199  0BA2  2C31               	goto	l3145
  2200  0BA3  0877               	movf	_key,w
  2201  0BA4  067B               	xorwf	_lastKeyState,w
  2202  0BA5  1903               	skipnz
  2203  0BA6  2C31               	goto	l3145
  2204                           
  2205                           ;time_scheduler.h: 178: {
  2206                           ;time_scheduler.h: 179: if (key == 0b00001100)
  2207  0BA7  0877               	movf	_key,w
  2208  0BA8  3A0C               	xorlw	12
  2209  0BA9  1D03               	skipz
  2210  0BAA  2BCF               	goto	l3129
  2211                           
  2212                           ;time_scheduler.h: 180: {
  2213                           ;time_scheduler.h: 181: savedMinutesEnd = (savedMinutesEnd + 5) % 60;
  2214  0BAB  303C               	movlw	60
  2215  0BAC  1283               	bcf	3,5	;RP0=0, select bank0
  2216  0BAD  1303               	bcf	3,6	;RP1=0, select bank0
  2217  0BAE  00A0               	movwf	___awmod@divisor
  2218  0BAF  3000               	movlw	0
  2219  0BB0  00A1               	movwf	___awmod@divisor+1
  2220  0BB1  1683               	bsf	3,5	;RP0=1, select bank1
  2221  0BB2  1303               	bcf	3,6	;RP1=0, select bank1
  2222  0BB3  085D               	movf	_savedMinutesEnd^(0+128),w	;volatile
  2223  0BB4  3E05               	addlw	5
  2224  0BB5  1283               	bcf	3,5	;RP0=0, select bank0
  2225  0BB6  1303               	bcf	3,6	;RP1=0, select bank0
  2226  0BB7  00A2               	movwf	___awmod@dividend
  2227  0BB8  3000               	movlw	0
  2228  0BB9  1803               	skipnc
  2229  0BBA  3001               	movlw	1
  2230  0BBB  00A3               	movwf	___awmod@dividend+1
  2231  0BBC  120A  158A  2003  120A  158A  	fcall	___awmod
  2232  0BC1  1283               	bcf	3,5	;RP0=0, select bank0
  2233  0BC2  1303               	bcf	3,6	;RP1=0, select bank0
  2234  0BC3  0820               	movf	?___awmod,w
  2235  0BC4  00CA               	movwf	??_setMinutesEnd
  2236  0BC5  084A               	movf	??_setMinutesEnd,w
  2237  0BC6  1683               	bsf	3,5	;RP0=1, select bank1
  2238  0BC7  1303               	bcf	3,6	;RP1=0, select bank1
  2239  0BC8  00DD               	movwf	_savedMinutesEnd^(0+128)	;volatile
  2240                           
  2241                           ;time_scheduler.h: 182: sprintf(debugInfo, "INC: %02d", savedMinutesEnd);
  2242  0BC9  30B9               	movlw	low (STR_7| (0+32768))
  2243  0BCA  1283               	bcf	3,5	;RP0=0, select bank0
  2244  0BCB  1303               	bcf	3,6	;RP1=0, select bank0
  2245  0BCC  00B4               	movwf	sprintf@f
  2246  0BCD  3090               	movlw	high (STR_7| (0+32768))
  2247  0BCE  2C00               	goto	L2
  2248  0BCF                     l3129:	
  2249                           ;time_scheduler.h: 183: }
  2250                           
  2251                           
  2252                           ;time_scheduler.h: 184: else if (key == 0b00001110)
  2253  0BCF  0877               	movf	_key,w
  2254  0BD0  3A0E               	xorlw	14
  2255  0BD1  1D03               	skipz
  2256  0BD2  2BF7               	goto	l3135
  2257                           
  2258                           ;time_scheduler.h: 185: {
  2259                           ;time_scheduler.h: 186: savedMinutesEnd = (savedMinutesEnd - 5 + 60) % 60;
  2260  0BD3  303C               	movlw	60
  2261  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  2262  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
  2263  0BD6  00A0               	movwf	___awmod@divisor
  2264  0BD7  3000               	movlw	0
  2265  0BD8  00A1               	movwf	___awmod@divisor+1
  2266  0BD9  1683               	bsf	3,5	;RP0=1, select bank1
  2267  0BDA  1303               	bcf	3,6	;RP1=0, select bank1
  2268  0BDB  085D               	movf	_savedMinutesEnd^(0+128),w	;volatile
  2269  0BDC  3E37               	addlw	55
  2270  0BDD  1283               	bcf	3,5	;RP0=0, select bank0
  2271  0BDE  1303               	bcf	3,6	;RP1=0, select bank0
  2272  0BDF  00A2               	movwf	___awmod@dividend
  2273  0BE0  3000               	movlw	0
  2274  0BE1  1803               	skipnc
  2275  0BE2  3001               	movlw	1
  2276  0BE3  00A3               	movwf	___awmod@dividend+1
  2277  0BE4  120A  158A  2003  120A  158A  	fcall	___awmod
  2278  0BE9  1283               	bcf	3,5	;RP0=0, select bank0
  2279  0BEA  1303               	bcf	3,6	;RP1=0, select bank0
  2280  0BEB  0820               	movf	?___awmod,w
  2281  0BEC  00CA               	movwf	??_setMinutesEnd
  2282  0BED  084A               	movf	??_setMinutesEnd,w
  2283  0BEE  1683               	bsf	3,5	;RP0=1, select bank1
  2284  0BEF  1303               	bcf	3,6	;RP1=0, select bank1
  2285  0BF0  00DD               	movwf	_savedMinutesEnd^(0+128)	;volatile
  2286                           
  2287                           ;time_scheduler.h: 187: sprintf(debugInfo, "DEC: %02d", savedMinutesEnd);
  2288  0BF1  30AF               	movlw	low (STR_8| (0+32768))
  2289  0BF2  1283               	bcf	3,5	;RP0=0, select bank0
  2290  0BF3  1303               	bcf	3,6	;RP1=0, select bank0
  2291  0BF4  00B4               	movwf	sprintf@f
  2292  0BF5  3090               	movlw	high (STR_8| (0+32768))
  2293  0BF6  2C00               	goto	L2
  2294  0BF7                     l3135:	
  2295                           ;time_scheduler.h: 188: }
  2296                           
  2297                           
  2298                           ;time_scheduler.h: 189: else if (key == 0b00001101)
  2299  0BF7  0877               	movf	_key,w
  2300  0BF8  3A0D               	xorlw	13
  2301  0BF9  1D03               	skipz
  2302  0BFA  2C12               	goto	l189
  2303                           
  2304                           ;time_scheduler.h: 190: {
  2305                           ;time_scheduler.h: 191: sprintf(debugInfo, "SET: %02d", savedMinutesEnd);
  2306  0BFB  30C3               	movlw	low (STR_9| (0+32768))
  2307  0BFC  1283               	bcf	3,5	;RP0=0, select bank0
  2308  0BFD  1303               	bcf	3,6	;RP1=0, select bank0
  2309  0BFE  00B4               	movwf	sprintf@f
  2310  0BFF  3090               	movlw	high (STR_9| (0+32768))
  2311  0C00                     L2:	
  2312  0C00  00B5               	movwf	sprintf@f+1
  2313  0C01  1683               	bsf	3,5	;RP0=1, select bank1
  2314  0C02  1303               	bcf	3,6	;RP1=0, select bank1
  2315  0C03  085D               	movf	_savedMinutesEnd^(0+128),w	;volatile
  2316  0C04  1283               	bcf	3,5	;RP0=0, select bank0
  2317  0C05  1303               	bcf	3,6	;RP1=0, select bank0
  2318  0C06  00CA               	movwf	??_setMinutesEnd
  2319  0C07  01CB               	clrf	??_setMinutesEnd+1
  2320  0C08  084A               	movf	??_setMinutesEnd,w
  2321  0C09  00B6               	movwf	?_sprintf+2
  2322  0C0A  084B               	movf	??_setMinutesEnd+1,w
  2323  0C0B  00B7               	movwf	?_sprintf+3
  2324  0C0C  30D2               	movlw	_debugInfo& (0+255)
  2325  0C0D  120A  118A  23F8  120A  158A  	fcall	_sprintf
  2326  0C12                     l189:	
  2327                           
  2328                           ;time_scheduler.h: 192: }
  2329                           ;time_scheduler.h: 194: printToLCD(debugInfo);
  2330  0C12  30D2               	movlw	_debugInfo& (0+255)
  2331  0C13  1283               	bcf	3,5	;RP0=0, select bank0
  2332  0C14  1303               	bcf	3,6	;RP1=0, select bank0
  2333  0C15  00A2               	movwf	printToLCD@str
  2334  0C16  3000               	movlw	0
  2335  0C17  00A3               	movwf	printToLCD@str+1
  2336  0C18  160A  118A  260E  120A  158A  	fcall	_printToLCD
  2337                           
  2338                           ;time_scheduler.h: 195: lastKeyState = key;
  2339  0C1D  0877               	movf	_key,w
  2340  0C1E  1283               	bcf	3,5	;RP0=0, select bank0
  2341  0C1F  1303               	bcf	3,6	;RP1=0, select bank0
  2342  0C20  00CA               	movwf	??_setMinutesEnd
  2343  0C21  084A               	movf	??_setMinutesEnd,w
  2344  0C22  00FB               	movwf	_lastKeyState
  2345  0C23                     l3143:	
  2346                           ;time_scheduler.h: 197: while ((PORTB & 0x08) != 0)
  2347                           
  2348  0C23  1283               	bcf	3,5	;RP0=0, select bank0
  2349  0C24  1303               	bcf	3,6	;RP1=0, select bank0
  2350  0C25  1D86               	btfss	6,3	;volatile
  2351  0C26  0008               	return
  2352                           
  2353                           ;time_scheduler.h: 198: {
  2354                           ;time_scheduler.h: 199: _delay((unsigned long)((10)*(4000000/4000.0)));
  2355  0C27  300D               	movlw	13
  2356  0C28  00CB               	movwf	??_setMinutesEnd+1
  2357  0C29  30FB               	movlw	251
  2358  0C2A  00CA               	movwf	??_setMinutesEnd
  2359  0C2B                     u4757:	
  2360  0C2B  0BCA               	decfsz	??_setMinutesEnd,f
  2361  0C2C  2C2B               	goto	u4757
  2362  0C2D  0BCB               	decfsz	??_setMinutesEnd+1,f
  2363  0C2E  2C2B               	goto	u4757
  2364  0C2F  2C30               	nop2
  2365  0C30  2C23               	goto	l3143
  2366  0C31                     l3145:	
  2367                           ;time_scheduler.h: 200: }
  2368                           ;time_scheduler.h: 201: }
  2369                           
  2370                           
  2371                           ;time_scheduler.h: 202: else if (!keyValid)
  2372  0C31  08F8               	movf	_keyValid,f
  2373  0C32  1D03               	skipz
  2374  0C33  0008               	return
  2375                           
  2376                           ;time_scheduler.h: 203: {
  2377                           ;time_scheduler.h: 204: lastKeyState = 0xFF;
  2378  0C34  30FF               	movlw	255
  2379  0C35  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0C36  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0C37  00CA               	movwf	??_setMinutesEnd
  2382  0C38  084A               	movf	??_setMinutesEnd,w
  2383  0C39  00FB               	movwf	_lastKeyState
  2384  0C3A  0008               	return
  2385  0C3B                     __end_of_setMinutesEnd:	
  2386                           
  2387                           	psect	text4
  2388  0ABB                     __ptext4:	
  2389 ;; *************** function _setHoursStart *****************
  2390 ;; Defined at:
  2391 ;;		line 55 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\time_scheduler.h
      +"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;		None
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;		None
  2396 ;; Return value:  Size  Location     Type
  2397 ;;		None               void
  2398 ;; Registers used:
  2399 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2405 ;;      Params:         0       0       0       0       0
  2406 ;;      Locals:         0       0       0       0       0
  2407 ;;      Temps:          0       2       0       0       0
  2408 ;;      Totals:         0       2       0       0       0
  2409 ;;Total ram usage:        2 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    4
  2412 ;; This function calls:
  2413 ;;		___awmod
  2414 ;;		_printToLCD
  2415 ;;		_sprintf
  2416 ;; This function is called by:
  2417 ;;		_updateState
  2418 ;; This function uses a non-reentrant model
  2419 ;;
  2420                           
  2421                           
  2422                           ;psect for function _setHoursStart
  2423  0ABB                     _setHoursStart:	
  2424                           
  2425                           ;time_scheduler.h: 57: keyValid = (PORTB & 0x08) >> 3;
  2426                           
  2427                           ;incstack = 0
  2428                           ; Regs used in _setHoursStart: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2429  0ABB  1283               	bcf	3,5	;RP0=0, select bank0
  2430  0ABC  1303               	bcf	3,6	;RP1=0, select bank0
  2431  0ABD  0806               	movf	6,w	;volatile
  2432  0ABE  00CA               	movwf	??_setHoursStart
  2433  0ABF  3003               	movlw	3
  2434  0AC0                     u4135:	
  2435  0AC0  1003               	clrc
  2436  0AC1  0CCA               	rrf	??_setHoursStart,f
  2437  0AC2  3EFF               	addlw	-1
  2438  0AC3  1D03               	skipz
  2439  0AC4  2AC0               	goto	u4135
  2440  0AC5  084A               	movf	??_setHoursStart,w
  2441  0AC6  3901               	andlw	1
  2442  0AC7  00CB               	movwf	??_setHoursStart+1
  2443  0AC8  084B               	movf	??_setHoursStart+1,w
  2444  0AC9  00F8               	movwf	_keyValid
  2445                           
  2446                           ;time_scheduler.h: 58: key = (PORTB & 0xF0) >> 4;
  2447  0ACA  0806               	movf	6,w	;volatile
  2448  0ACB  00CA               	movwf	??_setHoursStart
  2449  0ACC  3004               	movlw	4
  2450  0ACD                     u4145:	
  2451  0ACD  1003               	clrc
  2452  0ACE  0CCA               	rrf	??_setHoursStart,f
  2453  0ACF  3EFF               	addlw	-1
  2454  0AD0  1D03               	skipz
  2455  0AD1  2ACD               	goto	u4145
  2456  0AD2  084A               	movf	??_setHoursStart,w
  2457  0AD3  390F               	andlw	15
  2458  0AD4  00CB               	movwf	??_setHoursStart+1
  2459  0AD5  084B               	movf	??_setHoursStart+1,w
  2460  0AD6  00F7               	movwf	_key
  2461                           
  2462                           ;time_scheduler.h: 60: _delay((unsigned long)((50)*(4000000/4000.0)));
  2463  0AD7  3041               	movlw	65
  2464  0AD8  00CB               	movwf	??_setHoursStart+1
  2465  0AD9  30EE               	movlw	238
  2466  0ADA  00CA               	movwf	??_setHoursStart
  2467  0ADB                     u4767:	
  2468  0ADB  0BCA               	decfsz	??_setHoursStart,f
  2469  0ADC  2ADB               	goto	u4767
  2470  0ADD  0BCB               	decfsz	??_setHoursStart+1,f
  2471  0ADE  2ADB               	goto	u4767
  2472  0ADF  0000               	nop
  2473                           
  2474                           ;time_scheduler.h: 62: if (keyValid && key != lastKeyState)
  2475  0AE0  0878               	movf	_keyValid,w
  2476  0AE1  1903               	btfsc	3,2
  2477  0AE2  2B71               	goto	l3043
  2478  0AE3  0877               	movf	_key,w
  2479  0AE4  067B               	xorwf	_lastKeyState,w
  2480  0AE5  1903               	skipnz
  2481  0AE6  2B71               	goto	l3043
  2482                           
  2483                           ;time_scheduler.h: 63: {
  2484                           ;time_scheduler.h: 64: if (key == 0b00001100)
  2485  0AE7  0877               	movf	_key,w
  2486  0AE8  3A0C               	xorlw	12
  2487  0AE9  1D03               	skipz
  2488  0AEA  2B0F               	goto	l3027
  2489                           
  2490                           ;time_scheduler.h: 65: {
  2491                           ;time_scheduler.h: 66: savedHoursStart = (savedHoursStart + 1) % 24;
  2492  0AEB  3018               	movlw	24
  2493  0AEC  1283               	bcf	3,5	;RP0=0, select bank0
  2494  0AED  1303               	bcf	3,6	;RP1=0, select bank0
  2495  0AEE  00A0               	movwf	___awmod@divisor
  2496  0AEF  3000               	movlw	0
  2497  0AF0  00A1               	movwf	___awmod@divisor+1
  2498  0AF1  1683               	bsf	3,5	;RP0=1, select bank1
  2499  0AF2  1303               	bcf	3,6	;RP1=0, select bank1
  2500  0AF3  085C               	movf	_savedHoursStart^(0+128),w	;volatile
  2501  0AF4  3E01               	addlw	1
  2502  0AF5  1283               	bcf	3,5	;RP0=0, select bank0
  2503  0AF6  1303               	bcf	3,6	;RP1=0, select bank0
  2504  0AF7  00A2               	movwf	___awmod@dividend
  2505  0AF8  3000               	movlw	0
  2506  0AF9  1803               	skipnc
  2507  0AFA  3001               	movlw	1
  2508  0AFB  00A3               	movwf	___awmod@dividend+1
  2509  0AFC  120A  158A  2003  120A  158A  	fcall	___awmod
  2510  0B01  1283               	bcf	3,5	;RP0=0, select bank0
  2511  0B02  1303               	bcf	3,6	;RP1=0, select bank0
  2512  0B03  0820               	movf	?___awmod,w
  2513  0B04  00CA               	movwf	??_setHoursStart
  2514  0B05  084A               	movf	??_setHoursStart,w
  2515  0B06  1683               	bsf	3,5	;RP0=1, select bank1
  2516  0B07  1303               	bcf	3,6	;RP1=0, select bank1
  2517  0B08  00DC               	movwf	_savedHoursStart^(0+128)	;volatile
  2518                           
  2519                           ;time_scheduler.h: 67: sprintf(debugInfo, "INC: %02d", savedHoursStart);
  2520  0B09  30B9               	movlw	low (STR_7| (0+32768))
  2521  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  2522  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  2523  0B0C  00B4               	movwf	sprintf@f
  2524  0B0D  3090               	movlw	high (STR_7| (0+32768))
  2525  0B0E  2B40               	goto	L3
  2526  0B0F                     l3027:	
  2527                           ;time_scheduler.h: 68: }
  2528                           
  2529                           
  2530                           ;time_scheduler.h: 69: else if (key == 0b00001110)
  2531  0B0F  0877               	movf	_key,w
  2532  0B10  3A0E               	xorlw	14
  2533  0B11  1D03               	skipz
  2534  0B12  2B37               	goto	l3033
  2535                           
  2536                           ;time_scheduler.h: 70: {
  2537                           ;time_scheduler.h: 71: savedHoursStart = (savedHoursStart - 1 + 24) % 24;
  2538  0B13  3018               	movlw	24
  2539  0B14  1283               	bcf	3,5	;RP0=0, select bank0
  2540  0B15  1303               	bcf	3,6	;RP1=0, select bank0
  2541  0B16  00A0               	movwf	___awmod@divisor
  2542  0B17  3000               	movlw	0
  2543  0B18  00A1               	movwf	___awmod@divisor+1
  2544  0B19  1683               	bsf	3,5	;RP0=1, select bank1
  2545  0B1A  1303               	bcf	3,6	;RP1=0, select bank1
  2546  0B1B  085C               	movf	_savedHoursStart^(0+128),w	;volatile
  2547  0B1C  3E17               	addlw	23
  2548  0B1D  1283               	bcf	3,5	;RP0=0, select bank0
  2549  0B1E  1303               	bcf	3,6	;RP1=0, select bank0
  2550  0B1F  00A2               	movwf	___awmod@dividend
  2551  0B20  3000               	movlw	0
  2552  0B21  1803               	skipnc
  2553  0B22  3001               	movlw	1
  2554  0B23  00A3               	movwf	___awmod@dividend+1
  2555  0B24  120A  158A  2003  120A  158A  	fcall	___awmod
  2556  0B29  1283               	bcf	3,5	;RP0=0, select bank0
  2557  0B2A  1303               	bcf	3,6	;RP1=0, select bank0
  2558  0B2B  0820               	movf	?___awmod,w
  2559  0B2C  00CA               	movwf	??_setHoursStart
  2560  0B2D  084A               	movf	??_setHoursStart,w
  2561  0B2E  1683               	bsf	3,5	;RP0=1, select bank1
  2562  0B2F  1303               	bcf	3,6	;RP1=0, select bank1
  2563  0B30  00DC               	movwf	_savedHoursStart^(0+128)	;volatile
  2564                           
  2565                           ;time_scheduler.h: 72: sprintf(debugInfo, "DEC: %02d", savedHoursStart);
  2566  0B31  30AF               	movlw	low (STR_8| (0+32768))
  2567  0B32  1283               	bcf	3,5	;RP0=0, select bank0
  2568  0B33  1303               	bcf	3,6	;RP1=0, select bank0
  2569  0B34  00B4               	movwf	sprintf@f
  2570  0B35  3090               	movlw	high (STR_8| (0+32768))
  2571  0B36  2B40               	goto	L3
  2572  0B37                     l3033:	
  2573                           ;time_scheduler.h: 73: }
  2574                           
  2575                           
  2576                           ;time_scheduler.h: 74: else if (key == 0b00001101)
  2577  0B37  0877               	movf	_key,w
  2578  0B38  3A0D               	xorlw	13
  2579  0B39  1D03               	skipz
  2580  0B3A  2B52               	goto	l147
  2581                           
  2582                           ;time_scheduler.h: 75: {
  2583                           ;time_scheduler.h: 76: sprintf(debugInfo, "SET: %02d", savedHoursStart);
  2584  0B3B  30C3               	movlw	low (STR_9| (0+32768))
  2585  0B3C  1283               	bcf	3,5	;RP0=0, select bank0
  2586  0B3D  1303               	bcf	3,6	;RP1=0, select bank0
  2587  0B3E  00B4               	movwf	sprintf@f
  2588  0B3F  3090               	movlw	high (STR_9| (0+32768))
  2589  0B40                     L3:	
  2590  0B40  00B5               	movwf	sprintf@f+1
  2591  0B41  1683               	bsf	3,5	;RP0=1, select bank1
  2592  0B42  1303               	bcf	3,6	;RP1=0, select bank1
  2593  0B43  085C               	movf	_savedHoursStart^(0+128),w	;volatile
  2594  0B44  1283               	bcf	3,5	;RP0=0, select bank0
  2595  0B45  1303               	bcf	3,6	;RP1=0, select bank0
  2596  0B46  00CA               	movwf	??_setHoursStart
  2597  0B47  01CB               	clrf	??_setHoursStart+1
  2598  0B48  084A               	movf	??_setHoursStart,w
  2599  0B49  00B6               	movwf	?_sprintf+2
  2600  0B4A  084B               	movf	??_setHoursStart+1,w
  2601  0B4B  00B7               	movwf	?_sprintf+3
  2602  0B4C  30D2               	movlw	_debugInfo& (0+255)
  2603  0B4D  120A  118A  23F8  120A  158A  	fcall	_sprintf
  2604  0B52                     l147:	
  2605                           
  2606                           ;time_scheduler.h: 78: }
  2607                           ;time_scheduler.h: 80: printToLCD(debugInfo);
  2608  0B52  30D2               	movlw	_debugInfo& (0+255)
  2609  0B53  1283               	bcf	3,5	;RP0=0, select bank0
  2610  0B54  1303               	bcf	3,6	;RP1=0, select bank0
  2611  0B55  00A2               	movwf	printToLCD@str
  2612  0B56  3000               	movlw	0
  2613  0B57  00A3               	movwf	printToLCD@str+1
  2614  0B58  160A  118A  260E  120A  158A  	fcall	_printToLCD
  2615                           
  2616                           ;time_scheduler.h: 81: lastKeyState = key;
  2617  0B5D  0877               	movf	_key,w
  2618  0B5E  1283               	bcf	3,5	;RP0=0, select bank0
  2619  0B5F  1303               	bcf	3,6	;RP1=0, select bank0
  2620  0B60  00CA               	movwf	??_setHoursStart
  2621  0B61  084A               	movf	??_setHoursStart,w
  2622  0B62  00FB               	movwf	_lastKeyState
  2623  0B63                     l3041:	
  2624                           ;time_scheduler.h: 83: while ((PORTB & 0x08) != 0)
  2625                           
  2626  0B63  1283               	bcf	3,5	;RP0=0, select bank0
  2627  0B64  1303               	bcf	3,6	;RP1=0, select bank0
  2628  0B65  1D86               	btfss	6,3	;volatile
  2629  0B66  0008               	return
  2630                           
  2631                           ;time_scheduler.h: 84: {
  2632                           ;time_scheduler.h: 85: _delay((unsigned long)((10)*(4000000/4000.0)));
  2633  0B67  300D               	movlw	13
  2634  0B68  00CB               	movwf	??_setHoursStart+1
  2635  0B69  30FB               	movlw	251
  2636  0B6A  00CA               	movwf	??_setHoursStart
  2637  0B6B                     u4777:	
  2638  0B6B  0BCA               	decfsz	??_setHoursStart,f
  2639  0B6C  2B6B               	goto	u4777
  2640  0B6D  0BCB               	decfsz	??_setHoursStart+1,f
  2641  0B6E  2B6B               	goto	u4777
  2642  0B6F  2B70               	nop2
  2643  0B70  2B63               	goto	l3041
  2644  0B71                     l3043:	
  2645                           ;time_scheduler.h: 86: }
  2646                           ;time_scheduler.h: 87: }
  2647                           
  2648                           
  2649                           ;time_scheduler.h: 88: else if (!keyValid)
  2650  0B71  08F8               	movf	_keyValid,f
  2651  0B72  1D03               	skipz
  2652  0B73  0008               	return
  2653                           
  2654                           ;time_scheduler.h: 89: {
  2655                           ;time_scheduler.h: 90: lastKeyState = 0xFF;
  2656  0B74  30FF               	movlw	255
  2657  0B75  1283               	bcf	3,5	;RP0=0, select bank0
  2658  0B76  1303               	bcf	3,6	;RP1=0, select bank0
  2659  0B77  00CA               	movwf	??_setHoursStart
  2660  0B78  084A               	movf	??_setHoursStart,w
  2661  0B79  00FB               	movwf	_lastKeyState
  2662  0B7A  0008               	return
  2663  0B7B                     __end_of_setHoursStart:	
  2664                           
  2665                           	psect	text5
  2666  0957                     __ptext5:	
  2667 ;; *************** function _setHoursEnd *****************
  2668 ;; Defined at:
  2669 ;;		line 94 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\time_scheduler.h
      +"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;		None
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;		None
  2674 ;; Return value:  Size  Location     Type
  2675 ;;		None               void
  2676 ;; Registers used:
  2677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2683 ;;      Params:         0       0       0       0       0
  2684 ;;      Locals:         0       0       0       0       0
  2685 ;;      Temps:          0       2       0       0       0
  2686 ;;      Totals:         0       2       0       0       0
  2687 ;;Total ram usage:        2 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    4
  2690 ;; This function calls:
  2691 ;;		___awmod
  2692 ;;		_printToLCD
  2693 ;;		_sprintf
  2694 ;; This function is called by:
  2695 ;;		_updateState
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           
  2700                           ;psect for function _setHoursEnd
  2701  0957                     _setHoursEnd:	
  2702                           
  2703                           ;time_scheduler.h: 96: keyValid = (PORTB & 0x08) >> 3;
  2704                           
  2705                           ;incstack = 0
  2706                           ; Regs used in _setHoursEnd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2707  0957  1283               	bcf	3,5	;RP0=0, select bank0
  2708  0958  1303               	bcf	3,6	;RP1=0, select bank0
  2709  0959  0806               	movf	6,w	;volatile
  2710  095A  00CA               	movwf	??_setHoursEnd
  2711  095B  3003               	movlw	3
  2712  095C                     u4225:	
  2713  095C  1003               	clrc
  2714  095D  0CCA               	rrf	??_setHoursEnd,f
  2715  095E  3EFF               	addlw	-1
  2716  095F  1D03               	skipz
  2717  0960  295C               	goto	u4225
  2718  0961  084A               	movf	??_setHoursEnd,w
  2719  0962  3901               	andlw	1
  2720  0963  00CB               	movwf	??_setHoursEnd+1
  2721  0964  084B               	movf	??_setHoursEnd+1,w
  2722  0965  00F8               	movwf	_keyValid
  2723                           
  2724                           ;time_scheduler.h: 97: key = (PORTB & 0xF0) >> 4;
  2725  0966  0806               	movf	6,w	;volatile
  2726  0967  00CA               	movwf	??_setHoursEnd
  2727  0968  3004               	movlw	4
  2728  0969                     u4235:	
  2729  0969  1003               	clrc
  2730  096A  0CCA               	rrf	??_setHoursEnd,f
  2731  096B  3EFF               	addlw	-1
  2732  096C  1D03               	skipz
  2733  096D  2969               	goto	u4235
  2734  096E  084A               	movf	??_setHoursEnd,w
  2735  096F  390F               	andlw	15
  2736  0970  00CB               	movwf	??_setHoursEnd+1
  2737  0971  084B               	movf	??_setHoursEnd+1,w
  2738  0972  00F7               	movwf	_key
  2739                           
  2740                           ;time_scheduler.h: 99: _delay((unsigned long)((50)*(4000000/4000.0)));
  2741  0973  3041               	movlw	65
  2742  0974  00CB               	movwf	??_setHoursEnd+1
  2743  0975  30EE               	movlw	238
  2744  0976  00CA               	movwf	??_setHoursEnd
  2745  0977                     u4787:	
  2746  0977  0BCA               	decfsz	??_setHoursEnd,f
  2747  0978  2977               	goto	u4787
  2748  0979  0BCB               	decfsz	??_setHoursEnd+1,f
  2749  097A  2977               	goto	u4787
  2750  097B  0000               	nop
  2751                           
  2752                           ;time_scheduler.h: 101: if (keyValid && key != lastKeyState)
  2753  097C  0878               	movf	_keyValid,w
  2754  097D  1903               	btfsc	3,2
  2755  097E  29F9               	goto	l3077
  2756  097F  0877               	movf	_key,w
  2757  0980  067B               	xorwf	_lastKeyState,w
  2758  0981  1903               	skipnz
  2759  0982  29F9               	goto	l3077
  2760                           
  2761                           ;time_scheduler.h: 102: {
  2762                           ;time_scheduler.h: 103: if (key == 0b00001100)
  2763  0983  0877               	movf	_key,w
  2764  0984  3A0C               	xorlw	12
  2765  0985  1D03               	skipz
  2766  0986  29A3               	goto	l3061
  2767                           
  2768                           ;time_scheduler.h: 104: {
  2769                           ;time_scheduler.h: 105: savedHoursEnd = (savedHoursEnd + 1) % 24;
  2770  0987  3018               	movlw	24
  2771  0988  1283               	bcf	3,5	;RP0=0, select bank0
  2772  0989  1303               	bcf	3,6	;RP1=0, select bank0
  2773  098A  00A0               	movwf	___awmod@divisor
  2774  098B  3000               	movlw	0
  2775  098C  00A1               	movwf	___awmod@divisor+1
  2776  098D  086F               	movf	_savedHoursEnd,w	;volatile
  2777  098E  3E01               	addlw	1
  2778  098F  00A2               	movwf	___awmod@dividend
  2779  0990  3000               	movlw	0
  2780  0991  1803               	skipnc
  2781  0992  3001               	movlw	1
  2782  0993  00A3               	movwf	___awmod@dividend+1
  2783  0994  120A  158A  2003  120A  158A  	fcall	___awmod
  2784  0999  1283               	bcf	3,5	;RP0=0, select bank0
  2785  099A  1303               	bcf	3,6	;RP1=0, select bank0
  2786  099B  0820               	movf	?___awmod,w
  2787  099C  00CA               	movwf	??_setHoursEnd
  2788  099D  084A               	movf	??_setHoursEnd,w
  2789  099E  00EF               	movwf	_savedHoursEnd	;volatile
  2790                           
  2791                           ;time_scheduler.h: 106: sprintf(debugInfo, "INC: %02d", savedHoursEnd);
  2792  099F  30B9               	movlw	low (STR_7| (0+32768))
  2793  09A0  00B4               	movwf	sprintf@f
  2794  09A1  3090               	movlw	high (STR_7| (0+32768))
  2795  09A2  29CC               	goto	L4
  2796  09A3                     l3061:	
  2797                           ;time_scheduler.h: 107: }
  2798                           
  2799                           
  2800                           ;time_scheduler.h: 108: else if (key == 0b00001110)
  2801  09A3  0877               	movf	_key,w
  2802  09A4  3A0E               	xorlw	14
  2803  09A5  1D03               	skipz
  2804  09A6  29C3               	goto	l3067
  2805                           
  2806                           ;time_scheduler.h: 109: {
  2807                           ;time_scheduler.h: 110: savedHoursEnd = (savedHoursEnd - 1 + 24) % 24;
  2808  09A7  3018               	movlw	24
  2809  09A8  1283               	bcf	3,5	;RP0=0, select bank0
  2810  09A9  1303               	bcf	3,6	;RP1=0, select bank0
  2811  09AA  00A0               	movwf	___awmod@divisor
  2812  09AB  3000               	movlw	0
  2813  09AC  00A1               	movwf	___awmod@divisor+1
  2814  09AD  086F               	movf	_savedHoursEnd,w	;volatile
  2815  09AE  3E17               	addlw	23
  2816  09AF  00A2               	movwf	___awmod@dividend
  2817  09B0  3000               	movlw	0
  2818  09B1  1803               	skipnc
  2819  09B2  3001               	movlw	1
  2820  09B3  00A3               	movwf	___awmod@dividend+1
  2821  09B4  120A  158A  2003  120A  158A  	fcall	___awmod
  2822  09B9  1283               	bcf	3,5	;RP0=0, select bank0
  2823  09BA  1303               	bcf	3,6	;RP1=0, select bank0
  2824  09BB  0820               	movf	?___awmod,w
  2825  09BC  00CA               	movwf	??_setHoursEnd
  2826  09BD  084A               	movf	??_setHoursEnd,w
  2827  09BE  00EF               	movwf	_savedHoursEnd	;volatile
  2828                           
  2829                           ;time_scheduler.h: 111: sprintf(debugInfo, "DEC: %02d", savedHoursEnd);
  2830  09BF  30AF               	movlw	low (STR_8| (0+32768))
  2831  09C0  00B4               	movwf	sprintf@f
  2832  09C1  3090               	movlw	high (STR_8| (0+32768))
  2833  09C2  29CC               	goto	L4
  2834  09C3                     l3067:	
  2835                           ;time_scheduler.h: 112: }
  2836                           
  2837                           
  2838                           ;time_scheduler.h: 113: else if (key == 0b00001101)
  2839  09C3  0877               	movf	_key,w
  2840  09C4  3A0D               	xorlw	13
  2841  09C5  1D03               	skipz
  2842  09C6  29DA               	goto	l161
  2843                           
  2844                           ;time_scheduler.h: 114: {
  2845                           ;time_scheduler.h: 115: sprintf(debugInfo, "SET: %02d", savedHoursEnd);
  2846  09C7  30C3               	movlw	low (STR_9| (0+32768))
  2847  09C8  1283               	bcf	3,5	;RP0=0, select bank0
  2848  09C9  1303               	bcf	3,6	;RP1=0, select bank0
  2849  09CA  00B4               	movwf	sprintf@f
  2850  09CB  3090               	movlw	high (STR_9| (0+32768))
  2851  09CC                     L4:	
  2852  09CC  00B5               	movwf	sprintf@f+1
  2853  09CD  086F               	movf	_savedHoursEnd,w	;volatile
  2854  09CE  00CA               	movwf	??_setHoursEnd
  2855  09CF  01CB               	clrf	??_setHoursEnd+1
  2856  09D0  084A               	movf	??_setHoursEnd,w
  2857  09D1  00B6               	movwf	?_sprintf+2
  2858  09D2  084B               	movf	??_setHoursEnd+1,w
  2859  09D3  00B7               	movwf	?_sprintf+3
  2860  09D4  30D2               	movlw	_debugInfo& (0+255)
  2861  09D5  120A  118A  23F8  120A  158A  	fcall	_sprintf
  2862  09DA                     l161:	
  2863                           
  2864                           ;time_scheduler.h: 116: }
  2865                           ;time_scheduler.h: 118: printToLCD(debugInfo);
  2866  09DA  30D2               	movlw	_debugInfo& (0+255)
  2867  09DB  1283               	bcf	3,5	;RP0=0, select bank0
  2868  09DC  1303               	bcf	3,6	;RP1=0, select bank0
  2869  09DD  00A2               	movwf	printToLCD@str
  2870  09DE  3000               	movlw	0
  2871  09DF  00A3               	movwf	printToLCD@str+1
  2872  09E0  160A  118A  260E  120A  158A  	fcall	_printToLCD
  2873                           
  2874                           ;time_scheduler.h: 119: lastKeyState = key;
  2875  09E5  0877               	movf	_key,w
  2876  09E6  1283               	bcf	3,5	;RP0=0, select bank0
  2877  09E7  1303               	bcf	3,6	;RP1=0, select bank0
  2878  09E8  00CA               	movwf	??_setHoursEnd
  2879  09E9  084A               	movf	??_setHoursEnd,w
  2880  09EA  00FB               	movwf	_lastKeyState
  2881  09EB                     l3075:	
  2882                           ;time_scheduler.h: 121: while ((PORTB & 0x08) != 0)
  2883                           
  2884  09EB  1283               	bcf	3,5	;RP0=0, select bank0
  2885  09EC  1303               	bcf	3,6	;RP1=0, select bank0
  2886  09ED  1D86               	btfss	6,3	;volatile
  2887  09EE  0008               	return
  2888                           
  2889                           ;time_scheduler.h: 122: {
  2890                           ;time_scheduler.h: 123: _delay((unsigned long)((10)*(4000000/4000.0)));
  2891  09EF  300D               	movlw	13
  2892  09F0  00CB               	movwf	??_setHoursEnd+1
  2893  09F1  30FB               	movlw	251
  2894  09F2  00CA               	movwf	??_setHoursEnd
  2895  09F3                     u4797:	
  2896  09F3  0BCA               	decfsz	??_setHoursEnd,f
  2897  09F4  29F3               	goto	u4797
  2898  09F5  0BCB               	decfsz	??_setHoursEnd+1,f
  2899  09F6  29F3               	goto	u4797
  2900  09F7  29F8               	nop2
  2901  09F8  29EB               	goto	l3075
  2902  09F9                     l3077:	
  2903                           ;time_scheduler.h: 124: }
  2904                           ;time_scheduler.h: 125: }
  2905                           
  2906                           
  2907                           ;time_scheduler.h: 126: else if (!keyValid)
  2908  09F9  08F8               	movf	_keyValid,f
  2909  09FA  1D03               	skipz
  2910  09FB  0008               	return
  2911                           
  2912                           ;time_scheduler.h: 127: {
  2913                           ;time_scheduler.h: 128: lastKeyState = 0xFF;
  2914  09FC  30FF               	movlw	255
  2915  09FD  1283               	bcf	3,5	;RP0=0, select bank0
  2916  09FE  1303               	bcf	3,6	;RP1=0, select bank0
  2917  09FF  00CA               	movwf	??_setHoursEnd
  2918  0A00  084A               	movf	??_setHoursEnd,w
  2919  0A01  00FB               	movwf	_lastKeyState
  2920  0A02  0008               	return
  2921  0A03                     __end_of_setHoursEnd:	
  2922                           
  2923                           	psect	text6
  2924  0803                     __ptext6:	
  2925 ;; *************** function ___awmod *****************
  2926 ;; Defined at:
  2927 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;  divisor         2    0[BANK0 ] int 
  2930 ;;  dividend        2    2[BANK0 ] int 
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;  sign            1    6[BANK0 ] unsigned char 
  2933 ;;  counter         1    5[BANK0 ] unsigned char 
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  2    0[BANK0 ] int 
  2936 ;; Registers used:
  2937 ;;		wreg, status,2, status,0
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2943 ;;      Params:         0       4       0       0       0
  2944 ;;      Locals:         0       2       0       0       0
  2945 ;;      Temps:          0       1       0       0       0
  2946 ;;      Totals:         0       7       0       0       0
  2947 ;;Total ram usage:        7 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:    2
  2950 ;; This function calls:
  2951 ;;		Nothing
  2952 ;; This function is called by:
  2953 ;;		_setHoursStart
  2954 ;;		_setHoursEnd
  2955 ;;		_setMinutesStart
  2956 ;;		_setMinutesEnd
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           
  2961                           ;psect for function ___awmod
  2962  0803                     ___awmod:	
  2963                           
  2964                           ;incstack = 0
  2965                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2966  0803  1283               	bcf	3,5	;RP0=0, select bank0
  2967  0804  1303               	bcf	3,6	;RP1=0, select bank0
  2968  0805  01A6               	clrf	___awmod@sign
  2969  0806  1FA3               	btfss	___awmod@dividend+1,7
  2970  0807  280F               	goto	l2093
  2971  0808  09A2               	comf	___awmod@dividend,f
  2972  0809  09A3               	comf	___awmod@dividend+1,f
  2973  080A  0AA2               	incf	___awmod@dividend,f
  2974  080B  1903               	skipnz
  2975  080C  0AA3               	incf	___awmod@dividend+1,f
  2976  080D  01A6               	clrf	___awmod@sign
  2977  080E  0AA6               	incf	___awmod@sign,f
  2978  080F                     l2093:	
  2979  080F  1FA1               	btfss	___awmod@divisor+1,7
  2980  0810  2816               	goto	l2097
  2981  0811  09A0               	comf	___awmod@divisor,f
  2982  0812  09A1               	comf	___awmod@divisor+1,f
  2983  0813  0AA0               	incf	___awmod@divisor,f
  2984  0814  1903               	skipnz
  2985  0815  0AA1               	incf	___awmod@divisor+1,f
  2986  0816                     l2097:	
  2987  0816  0821               	movf	___awmod@divisor+1,w
  2988  0817  0420               	iorwf	___awmod@divisor,w
  2989  0818  1903               	skipnz
  2990  0819  2843               	goto	l2115
  2991  081A  01A5               	clrf	___awmod@counter
  2992  081B  0AA5               	incf	___awmod@counter,f
  2993  081C                     l2105:	
  2994  081C  1BA1               	btfsc	___awmod@divisor+1,7
  2995  081D  282A               	goto	l2107
  2996  081E  3001               	movlw	1
  2997  081F                     u2455:	
  2998  081F  1003               	clrc
  2999  0820  0DA0               	rlf	___awmod@divisor,f
  3000  0821  0DA1               	rlf	___awmod@divisor+1,f
  3001  0822  3EFF               	addlw	-1
  3002  0823  1D03               	skipz
  3003  0824  281F               	goto	u2455
  3004  0825  3001               	movlw	1
  3005  0826  00A4               	movwf	??___awmod
  3006  0827  0824               	movf	??___awmod,w
  3007  0828  07A5               	addwf	___awmod@counter,f
  3008  0829  281C               	goto	l2105
  3009  082A                     l2107:	
  3010  082A  0821               	movf	___awmod@divisor+1,w
  3011  082B  0223               	subwf	___awmod@dividend+1,w
  3012  082C  1D03               	skipz
  3013  082D  2830               	goto	u2475
  3014  082E  0820               	movf	___awmod@divisor,w
  3015  082F  0222               	subwf	___awmod@dividend,w
  3016  0830                     u2475:	
  3017  0830  1C03               	skipc
  3018  0831  2838               	goto	l2111
  3019  0832  0820               	movf	___awmod@divisor,w
  3020  0833  02A2               	subwf	___awmod@dividend,f
  3021  0834  0821               	movf	___awmod@divisor+1,w
  3022  0835  1C03               	skipc
  3023  0836  03A3               	decf	___awmod@dividend+1,f
  3024  0837  02A3               	subwf	___awmod@dividend+1,f
  3025  0838                     l2111:	
  3026  0838  3001               	movlw	1
  3027  0839                     u2485:	
  3028  0839  1003               	clrc
  3029  083A  0CA1               	rrf	___awmod@divisor+1,f
  3030  083B  0CA0               	rrf	___awmod@divisor,f
  3031  083C  3EFF               	addlw	-1
  3032  083D  1D03               	skipz
  3033  083E  2839               	goto	u2485
  3034  083F  3001               	movlw	1
  3035  0840  02A5               	subwf	___awmod@counter,f
  3036  0841  1D03               	btfss	3,2
  3037  0842  282A               	goto	l2107
  3038  0843                     l2115:	
  3039  0843  0826               	movf	___awmod@sign,w
  3040  0844  1903               	btfsc	3,2
  3041  0845  284B               	goto	l2119
  3042  0846  09A2               	comf	___awmod@dividend,f
  3043  0847  09A3               	comf	___awmod@dividend+1,f
  3044  0848  0AA2               	incf	___awmod@dividend,f
  3045  0849  1903               	skipnz
  3046  084A  0AA3               	incf	___awmod@dividend+1,f
  3047  084B                     l2119:	
  3048  084B  0823               	movf	___awmod@dividend+1,w
  3049  084C  01A1               	clrf	?___awmod+1
  3050  084D  07A1               	addwf	?___awmod+1,f
  3051  084E  0822               	movf	___awmod@dividend,w
  3052  084F  01A0               	clrf	?___awmod
  3053  0850  07A0               	addwf	?___awmod,f
  3054  0851  0008               	return
  3055  0852                     __end_of___awmod:	
  3056                           
  3057                           	psect	text7
  3058  1492                     __ptext7:	
  3059 ;; *************** function _printStatusTMP *****************
  3060 ;; Defined at:
  3061 ;;		line 47 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\temp_module.h"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;  handler         1    wreg     unsigned char 
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;  handler         1    4[BANK0 ] unsigned char 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;		None               void
  3068 ;; Registers used:
  3069 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3075 ;;      Params:         0       0       0       0       0
  3076 ;;      Locals:         0       1       0       0       0
  3077 ;;      Temps:          0       0       0       0       0
  3078 ;;      Totals:         0       1       0       0       0
  3079 ;;Total ram usage:        1 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    4
  3082 ;; This function calls:
  3083 ;;		_printToLCD
  3084 ;; This function is called by:
  3085 ;;		_updateState
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           
  3090                           ;psect for function _printStatusTMP
  3091  1492                     _printStatusTMP:	
  3092                           
  3093                           ;incstack = 0
  3094                           ; Regs used in _printStatusTMP: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3095                           ;printStatusTMP@handler stored from wreg
  3096  1492  1283               	bcf	3,5	;RP0=0, select bank0
  3097  1493  1303               	bcf	3,6	;RP1=0, select bank0
  3098  1494  00A4               	movwf	printStatusTMP@handler
  3099                           
  3100                           ;temp_module.h: 49: if (handler == 1)
  3101  1495  0824               	movf	printStatusTMP@handler,w
  3102  1496  3A01               	xorlw	1
  3103  1497  1D03               	skipz
  3104  1498  2CA1               	goto	l3155
  3105                           
  3106                           ;temp_module.h: 50: {
  3107                           ;temp_module.h: 51: printToLCD("VENT ON ");
  3108  1499  30D6               	movlw	low (STR_20| (0+32768))
  3109  149A  00A2               	movwf	printToLCD@str
  3110  149B  3090               	movlw	high (STR_20| (0+32768))
  3111  149C  00A3               	movwf	printToLCD@str+1
  3112  149D  160A  118A  260E   	fcall	_printToLCD
  3113                           
  3114                           ;temp_module.h: 52: }
  3115  14A0  0008               	return
  3116  14A1                     l3155:	
  3117                           
  3118                           ;temp_module.h: 53: else if (handler == 0)
  3119  14A1  1283               	bcf	3,5	;RP0=0, select bank0
  3120  14A2  1303               	bcf	3,6	;RP1=0, select bank0
  3121  14A3  08A4               	movf	printStatusTMP@handler,f
  3122  14A4  1D03               	skipz
  3123  14A5  0008               	return
  3124                           
  3125                           ;temp_module.h: 54: {
  3126                           ;temp_module.h: 55: printToLCD("FAN OFF");
  3127  14A6  30DF               	movlw	low (STR_21| (0+32768))
  3128  14A7  00A2               	movwf	printToLCD@str
  3129  14A8  3090               	movlw	high (STR_21| (0+32768))
  3130  14A9  00A3               	movwf	printToLCD@str+1
  3131  14AA  160A  118A  260E   	fcall	_printToLCD
  3132  14AD  0008               	return
  3133  14AE                     __end_of_printStatusTMP:	
  3134                           
  3135                           	psect	text8
  3136  1476                     __ptext8:	
  3137 ;; *************** function _printStatusPPM *****************
  3138 ;; Defined at:
  3139 ;;		line 70 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\mq135_module.h"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;  handler         1    wreg     unsigned char 
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;  handler         1    4[BANK0 ] unsigned char 
  3144 ;; Return value:  Size  Location     Type
  3145 ;;		None               void
  3146 ;; Registers used:
  3147 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3153 ;;      Params:         0       0       0       0       0
  3154 ;;      Locals:         0       1       0       0       0
  3155 ;;      Temps:          0       0       0       0       0
  3156 ;;      Totals:         0       1       0       0       0
  3157 ;;Total ram usage:        1 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    4
  3160 ;; This function calls:
  3161 ;;		_printToLCD
  3162 ;; This function is called by:
  3163 ;;		_updateState
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           
  3168                           ;psect for function _printStatusPPM
  3169  1476                     _printStatusPPM:	
  3170                           
  3171                           ;incstack = 0
  3172                           ; Regs used in _printStatusPPM: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3173                           ;printStatusPPM@handler stored from wreg
  3174  1476  1283               	bcf	3,5	;RP0=0, select bank0
  3175  1477  1303               	bcf	3,6	;RP1=0, select bank0
  3176  1478  00A4               	movwf	printStatusPPM@handler
  3177                           
  3178                           ;mq135_module.h: 72: if (handler == 1)
  3179  1479  0824               	movf	printStatusPPM@handler,w
  3180  147A  3A01               	xorlw	1
  3181  147B  1D03               	skipz
  3182  147C  2C85               	goto	l3007
  3183                           
  3184                           ;mq135_module.h: 73: {
  3185                           ;mq135_module.h: 74: printToLCD("PURF HI");
  3186  147D  30E7               	movlw	low (STR_4| (0+32768))
  3187  147E  00A2               	movwf	printToLCD@str
  3188  147F  3090               	movlw	high (STR_4| (0+32768))
  3189  1480  00A3               	movwf	printToLCD@str+1
  3190  1481  160A  118A  260E   	fcall	_printToLCD
  3191                           
  3192                           ;mq135_module.h: 75: }
  3193  1484  0008               	return
  3194  1485                     l3007:	
  3195                           
  3196                           ;mq135_module.h: 76: else if (handler == 0)
  3197  1485  1283               	bcf	3,5	;RP0=0, select bank0
  3198  1486  1303               	bcf	3,6	;RP1=0, select bank0
  3199  1487  08A4               	movf	printStatusPPM@handler,f
  3200  1488  1D03               	skipz
  3201  1489  0008               	return
  3202                           
  3203                           ;mq135_module.h: 77: {
  3204                           ;mq135_module.h: 78: printToLCD("PURF LO");
  3205  148A  30EF               	movlw	low (STR_5| (0+32768))
  3206  148B  00A2               	movwf	printToLCD@str
  3207  148C  3090               	movlw	high (STR_5| (0+32768))
  3208  148D  00A3               	movwf	printToLCD@str+1
  3209  148E  160A  118A  260E   	fcall	_printToLCD
  3210  1491  0008               	return
  3211  1492                     __end_of_printStatusPPM:	
  3212                           
  3213                           	psect	text9
  3214  1577                     __ptext9:	
  3215 ;; *************** function _displayTime *****************
  3216 ;; Defined at:
  3217 ;;		line 49 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\time_scheduler.h
      +"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;		None
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;  timeFormat     16   46[BANK0 ] unsigned char [16]
  3222 ;; Return value:  Size  Location     Type
  3223 ;;		None               void
  3224 ;; Registers used:
  3225 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3231 ;;      Params:         0       0       0       0       0
  3232 ;;      Locals:         0      16       0       0       0
  3233 ;;      Temps:          0       4       0       0       0
  3234 ;;      Totals:         0      20       0       0       0
  3235 ;;Total ram usage:       20 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; Hardware stack levels required when called:    4
  3238 ;; This function calls:
  3239 ;;		_printToLCD
  3240 ;;		_sprintf
  3241 ;; This function is called by:
  3242 ;;		_updateState
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           
  3247                           ;psect for function _displayTime
  3248  1577                     _displayTime:	
  3249                           
  3250                           ;time_scheduler.h: 51: char timeFormat[16];
  3251                           ;time_scheduler.h: 52: sprintf(timeFormat, "Time: %02d:%02d", hours, minutes);
  3252                           
  3253                           ;incstack = 0
  3254                           ; Regs used in _displayTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3255  1577  302C               	movlw	low (STR_6| (0+32768))
  3256  1578  1283               	bcf	3,5	;RP0=0, select bank0
  3257  1579  1303               	bcf	3,6	;RP1=0, select bank0
  3258  157A  00B4               	movwf	sprintf@f
  3259  157B  3090               	movlw	high (STR_6| (0+32768))
  3260  157C  00B5               	movwf	sprintf@f+1
  3261  157D  087A               	movf	_hours,w	;volatile
  3262  157E  00CA               	movwf	??_displayTime
  3263  157F  01CB               	clrf	??_displayTime+1
  3264  1580  084A               	movf	??_displayTime,w
  3265  1581  00B6               	movwf	?_sprintf+2
  3266  1582  084B               	movf	??_displayTime+1,w
  3267  1583  00B7               	movwf	?_sprintf+3
  3268  1584  0879               	movf	_minutes,w	;volatile
  3269  1585  00CC               	movwf	??_displayTime+2
  3270  1586  01CD               	clrf	??_displayTime+3
  3271  1587  084C               	movf	??_displayTime+2,w
  3272  1588  00B8               	movwf	?_sprintf+4
  3273  1589  084D               	movf	??_displayTime+3,w
  3274  158A  00B9               	movwf	?_sprintf+5
  3275  158B  304E               	movlw	displayTime@timeFormat& (0+255)
  3276  158C  120A  118A  23F8  160A  118A  	fcall	_sprintf
  3277                           
  3278                           ;time_scheduler.h: 53: printToLCD(timeFormat);
  3279  1591  304E               	movlw	displayTime@timeFormat& (0+255)
  3280  1592  1283               	bcf	3,5	;RP0=0, select bank0
  3281  1593  1303               	bcf	3,6	;RP1=0, select bank0
  3282  1594  00A2               	movwf	printToLCD@str
  3283  1595  3000               	movlw	0
  3284  1596  00A3               	movwf	printToLCD@str+1
  3285  1597  160A  118A  260E   	fcall	_printToLCD
  3286  159A  0008               	return
  3287  159B                     __end_of_displayTime:	
  3288                           
  3289                           	psect	text10
  3290  1553                     __ptext10:	
  3291 ;; *************** function _displayTemp *****************
  3292 ;; Defined at:
  3293 ;;		line 24 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\temp_module.h"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;		None
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;  buffer         20   42[BANK0 ] unsigned char [20]
  3298 ;; Return value:  Size  Location     Type
  3299 ;;		None               void
  3300 ;; Registers used:
  3301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3307 ;;      Params:         0       0       0       0       0
  3308 ;;      Locals:         0      20       0       0       0
  3309 ;;      Temps:          0       0       0       0       0
  3310 ;;      Totals:         0      20       0       0       0
  3311 ;;Total ram usage:       20 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    4
  3314 ;; This function calls:
  3315 ;;		_printToLCD
  3316 ;;		_sprintf
  3317 ;; This function is called by:
  3318 ;;		_updateState
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           
  3323                           ;psect for function _displayTemp
  3324  1553                     _displayTemp:	
  3325                           
  3326                           ;temp_module.h: 26: char buffer[20];
  3327                           ;temp_module.h: 27: sprintf(buffer, "Temp: %d C", tempBuffer);
  3328                           
  3329                           ;incstack = 0
  3330                           ; Regs used in _displayTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3331  1553  309A               	movlw	low (STR_19| (0+32768))
  3332  1554  1283               	bcf	3,5	;RP0=0, select bank0
  3333  1555  1303               	bcf	3,6	;RP1=0, select bank0
  3334  1556  00B4               	movwf	sprintf@f
  3335  1557  3090               	movlw	high (STR_19| (0+32768))
  3336  1558  00B5               	movwf	sprintf@f+1
  3337  1559  1683               	bsf	3,5	;RP0=1, select bank1
  3338  155A  1303               	bcf	3,6	;RP1=0, select bank1
  3339  155B  084B               	movf	(_tempBuffer+1)^(0+128),w
  3340  155C  1283               	bcf	3,5	;RP0=0, select bank0
  3341  155D  1303               	bcf	3,6	;RP1=0, select bank0
  3342  155E  01B7               	clrf	?_sprintf+3
  3343  155F  07B7               	addwf	?_sprintf+3,f
  3344  1560  1683               	bsf	3,5	;RP0=1, select bank1
  3345  1561  1303               	bcf	3,6	;RP1=0, select bank1
  3346  1562  084A               	movf	_tempBuffer^(0+128),w
  3347  1563  1283               	bcf	3,5	;RP0=0, select bank0
  3348  1564  1303               	bcf	3,6	;RP1=0, select bank0
  3349  1565  01B6               	clrf	?_sprintf+2
  3350  1566  07B6               	addwf	?_sprintf+2,f
  3351  1567  304A               	movlw	displayTemp@buffer& (0+255)
  3352  1568  120A  118A  23F8  160A  118A  	fcall	_sprintf
  3353                           
  3354                           ;temp_module.h: 28: printToLCD(buffer);
  3355  156D  304A               	movlw	displayTemp@buffer& (0+255)
  3356  156E  1283               	bcf	3,5	;RP0=0, select bank0
  3357  156F  1303               	bcf	3,6	;RP1=0, select bank0
  3358  1570  00A2               	movwf	printToLCD@str
  3359  1571  3000               	movlw	0
  3360  1572  00A3               	movwf	printToLCD@str+1
  3361  1573  160A  118A  260E   	fcall	_printToLCD
  3362  1576  0008               	return
  3363  1577                     __end_of_displayTemp:	
  3364                           
  3365                           	psect	text11
  3366  0ED7                     __ptext11:	
  3367 ;; *************** function _displayPPM *****************
  3368 ;; Defined at:
  3369 ;;		line 37 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\mq135_module.h"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;		None
  3372 ;; Auto vars:     Size  Location     Type
  3373 ;;  strBuffer      20    0[BANK1 ] unsigned char [20]
  3374 ;;  ppmFraction     2   22[BANK1 ] int 
  3375 ;;  ppmWhole        2   20[BANK1 ] int 
  3376 ;;  bufPtr          1   24[BANK1 ] PTR unsigned char 
  3377 ;;		 -> displayPPM@strBuffer(20), 
  3378 ;; Return value:  Size  Location     Type
  3379 ;;		None               void
  3380 ;; Registers used:
  3381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3387 ;;      Params:         0       0       0       0       0
  3388 ;;      Locals:         0       0      25       0       0
  3389 ;;      Temps:          0       1       0       0       0
  3390 ;;      Totals:         0       1      25       0       0
  3391 ;;Total ram usage:       26 bytes
  3392 ;; Hardware stack levels used:    1
  3393 ;; Hardware stack levels required when called:    4
  3394 ;; This function calls:
  3395 ;;		___awtoft
  3396 ;;		___ftadd
  3397 ;;		___ftmul
  3398 ;;		___ftneg
  3399 ;;		___fttol
  3400 ;;		_printToLCD
  3401 ;;		_sprintf
  3402 ;; This function is called by:
  3403 ;;		_updateState
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           
  3408                           ;psect for function _displayPPM
  3409  0ED7                     _displayPPM:	
  3410                           
  3411                           ;mq135_module.h: 39: char strBuffer[20];
  3412                           ;mq135_module.h: 40: int ppmWhole = (int)PPM;
  3413                           
  3414                           ;incstack = 0
  3415                           ; Regs used in _displayPPM: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3416  0ED7  1683               	bsf	3,5	;RP0=1, select bank1
  3417  0ED8  1303               	bcf	3,6	;RP1=0, select bank1
  3418  0ED9  0847               	movf	_PPM^(0+128),w	;volatile
  3419  0EDA  1283               	bcf	3,5	;RP0=0, select bank0
  3420  0EDB  1303               	bcf	3,6	;RP1=0, select bank0
  3421  0EDC  00CE               	movwf	___fttol@f1
  3422  0EDD  1683               	bsf	3,5	;RP0=1, select bank1
  3423  0EDE  1303               	bcf	3,6	;RP1=0, select bank1
  3424  0EDF  0848               	movf	(_PPM+1)^(0+128),w	;volatile
  3425  0EE0  1283               	bcf	3,5	;RP0=0, select bank0
  3426  0EE1  1303               	bcf	3,6	;RP1=0, select bank0
  3427  0EE2  00CF               	movwf	___fttol@f1+1
  3428  0EE3  1683               	bsf	3,5	;RP0=1, select bank1
  3429  0EE4  1303               	bcf	3,6	;RP1=0, select bank1
  3430  0EE5  0849               	movf	(_PPM+2)^(0+128),w	;volatile
  3431  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  3432  0EE7  1303               	bcf	3,6	;RP1=0, select bank0
  3433  0EE8  00D0               	movwf	___fttol@f1+2
  3434  0EE9  120A  158A  20C9  120A  158A  	fcall	___fttol
  3435  0EEE  1283               	bcf	3,5	;RP0=0, select bank0
  3436  0EEF  1303               	bcf	3,6	;RP1=0, select bank0
  3437  0EF0  084F               	movf	?___fttol+1,w
  3438  0EF1  1683               	bsf	3,5	;RP0=1, select bank1
  3439  0EF2  1303               	bcf	3,6	;RP1=0, select bank1
  3440  0EF3  01B5               	clrf	(displayPPM@ppmWhole+1)^(0+128)
  3441  0EF4  07B5               	addwf	(displayPPM@ppmWhole+1)^(0+128),f
  3442  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  3443  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  3444  0EF7  084E               	movf	?___fttol,w
  3445  0EF8  1683               	bsf	3,5	;RP0=1, select bank1
  3446  0EF9  1303               	bcf	3,6	;RP1=0, select bank1
  3447  0EFA  01B4               	clrf	displayPPM@ppmWhole^(0+128)
  3448  0EFB  07B4               	addwf	displayPPM@ppmWhole^(0+128),f
  3449                           
  3450                           ;mq135_module.h: 41: int ppmFraction = (int)((PPM - ppmWhole) * 100);
  3451  0EFC  0835               	movf	(displayPPM@ppmWhole+1)^(0+128),w
  3452  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  3453  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  3454  0EFF  01A9               	clrf	___awtoft@c+1
  3455  0F00  07A9               	addwf	___awtoft@c+1,f
  3456  0F01  1683               	bsf	3,5	;RP0=1, select bank1
  3457  0F02  1303               	bcf	3,6	;RP1=0, select bank1
  3458  0F03  0834               	movf	displayPPM@ppmWhole^(0+128),w
  3459  0F04  1283               	bcf	3,5	;RP0=0, select bank0
  3460  0F05  1303               	bcf	3,6	;RP1=0, select bank0
  3461  0F06  01A8               	clrf	___awtoft@c
  3462  0F07  07A8               	addwf	___awtoft@c,f
  3463  0F08  160A  118A  25C0  120A  158A  	fcall	___awtoft
  3464  0F0D  1283               	bcf	3,5	;RP0=0, select bank0
  3465  0F0E  1303               	bcf	3,6	;RP1=0, select bank0
  3466  0F0F  0828               	movf	?___awtoft,w
  3467  0F10  00AE               	movwf	___ftneg@f1
  3468  0F11  0829               	movf	?___awtoft+1,w
  3469  0F12  00AF               	movwf	___ftneg@f1+1
  3470  0F13  082A               	movf	?___awtoft+2,w
  3471  0F14  00B0               	movwf	___ftneg@f1+2
  3472  0F15  160A  118A  23E3  120A  158A  	fcall	___ftneg
  3473  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  3474  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  3475  0F1C  082E               	movf	?___ftneg,w
  3476  0F1D  00B4               	movwf	___ftadd@f2
  3477  0F1E  082F               	movf	?___ftneg+1,w
  3478  0F1F  00B5               	movwf	___ftadd@f2+1
  3479  0F20  0830               	movf	?___ftneg+2,w
  3480  0F21  00B6               	movwf	___ftadd@f2+2
  3481  0F22  1683               	bsf	3,5	;RP0=1, select bank1
  3482  0F23  1303               	bcf	3,6	;RP1=0, select bank1
  3483  0F24  0847               	movf	_PPM^(0+128),w	;volatile
  3484  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  3485  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  3486  0F27  00B1               	movwf	___ftadd@f1
  3487  0F28  1683               	bsf	3,5	;RP0=1, select bank1
  3488  0F29  1303               	bcf	3,6	;RP1=0, select bank1
  3489  0F2A  0848               	movf	(_PPM+1)^(0+128),w	;volatile
  3490  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  3491  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  3492  0F2D  00B2               	movwf	___ftadd@f1+1
  3493  0F2E  1683               	bsf	3,5	;RP0=1, select bank1
  3494  0F2F  1303               	bcf	3,6	;RP1=0, select bank1
  3495  0F30  0849               	movf	(_PPM+2)^(0+128),w	;volatile
  3496  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  3497  0F32  1303               	bcf	3,6	;RP1=0, select bank0
  3498  0F33  00B3               	movwf	___ftadd@f1+2
  3499  0F34  120A  158A  25CE  120A  158A  	fcall	___ftadd
  3500  0F39  1283               	bcf	3,5	;RP0=0, select bank0
  3501  0F3A  1303               	bcf	3,6	;RP1=0, select bank0
  3502  0F3B  0831               	movf	?___ftadd,w
  3503  0F3C  00C1               	movwf	___ftmul@f2
  3504  0F3D  0832               	movf	?___ftadd+1,w
  3505  0F3E  00C2               	movwf	___ftmul@f2+1
  3506  0F3F  0833               	movf	?___ftadd+2,w
  3507  0F40  00C3               	movwf	___ftmul@f2+2
  3508  0F41  3000               	movlw	0
  3509  0F42  00BE               	movwf	___ftmul@f1
  3510  0F43  30C8               	movlw	200
  3511  0F44  00BF               	movwf	___ftmul@f1+1
  3512  0F45  3042               	movlw	66
  3513  0F46  00C0               	movwf	___ftmul@f1+2
  3514  0F47  120A  158A  24FB  120A  158A  	fcall	___ftmul
  3515  0F4C  1283               	bcf	3,5	;RP0=0, select bank0
  3516  0F4D  1303               	bcf	3,6	;RP1=0, select bank0
  3517  0F4E  083E               	movf	?___ftmul,w
  3518  0F4F  00CE               	movwf	___fttol@f1
  3519  0F50  083F               	movf	?___ftmul+1,w
  3520  0F51  00CF               	movwf	___fttol@f1+1
  3521  0F52  0840               	movf	?___ftmul+2,w
  3522  0F53  00D0               	movwf	___fttol@f1+2
  3523  0F54  120A  158A  20C9  120A  158A  	fcall	___fttol
  3524  0F59  1283               	bcf	3,5	;RP0=0, select bank0
  3525  0F5A  1303               	bcf	3,6	;RP1=0, select bank0
  3526  0F5B  084F               	movf	?___fttol+1,w
  3527  0F5C  1683               	bsf	3,5	;RP0=1, select bank1
  3528  0F5D  1303               	bcf	3,6	;RP1=0, select bank1
  3529  0F5E  01B7               	clrf	(displayPPM@ppmFraction+1)^(0+128)
  3530  0F5F  07B7               	addwf	(displayPPM@ppmFraction+1)^(0+128),f
  3531  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  3532  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  3533  0F62  084E               	movf	?___fttol,w
  3534  0F63  1683               	bsf	3,5	;RP0=1, select bank1
  3535  0F64  1303               	bcf	3,6	;RP1=0, select bank1
  3536  0F65  01B6               	clrf	displayPPM@ppmFraction^(0+128)
  3537  0F66  07B6               	addwf	displayPPM@ppmFraction^(0+128),f
  3538                           
  3539                           ;mq135_module.h: 44: char *bufPtr = strBuffer;
  3540  0F67  30A0               	movlw	displayPPM@strBuffer& (0+255)
  3541  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  3542  0F69  1303               	bcf	3,6	;RP1=0, select bank0
  3543  0F6A  00DC               	movwf	??_displayPPM
  3544  0F6B  085C               	movf	??_displayPPM,w
  3545  0F6C  1683               	bsf	3,5	;RP0=1, select bank1
  3546  0F6D  1303               	bcf	3,6	;RP1=0, select bank1
  3547  0F6E  00B8               	movwf	displayPPM@bufPtr^(0+128)
  3548                           
  3549                           ;mq135_module.h: 45: bufPtr += sprintf(bufPtr, "CO2: ");
  3550  0F6F  3005               	movlw	low (STR_1| (0+32768))
  3551  0F70  1283               	bcf	3,5	;RP0=0, select bank0
  3552  0F71  1303               	bcf	3,6	;RP1=0, select bank0
  3553  0F72  00B4               	movwf	sprintf@f
  3554  0F73  3091               	movlw	high (STR_1| (0+32768))
  3555  0F74  00B5               	movwf	sprintf@f+1
  3556  0F75  1683               	bsf	3,5	;RP0=1, select bank1
  3557  0F76  1303               	bcf	3,6	;RP1=0, select bank1
  3558  0F77  0838               	movf	displayPPM@bufPtr^(0+128),w
  3559  0F78  120A  118A  23F8  120A  158A  	fcall	_sprintf
  3560  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  3561  0F7E  1303               	bcf	3,6	;RP1=0, select bank0
  3562  0F7F  0834               	movf	?_sprintf,w
  3563  0F80  00DC               	movwf	??_displayPPM
  3564  0F81  085C               	movf	??_displayPPM,w
  3565  0F82  1683               	bsf	3,5	;RP0=1, select bank1
  3566  0F83  1303               	bcf	3,6	;RP1=0, select bank1
  3567  0F84  07B8               	addwf	displayPPM@bufPtr^(0+128),f
  3568                           
  3569                           ;mq135_module.h: 46: bufPtr += sprintf(bufPtr, "%d", ppmWhole);
  3570  0F85  300B               	movlw	low (STR_2| (0+32768))
  3571  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  3572  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  3573  0F88  00B4               	movwf	sprintf@f
  3574  0F89  3091               	movlw	high (STR_2| (0+32768))
  3575  0F8A  00B5               	movwf	sprintf@f+1
  3576  0F8B  1683               	bsf	3,5	;RP0=1, select bank1
  3577  0F8C  1303               	bcf	3,6	;RP1=0, select bank1
  3578  0F8D  0835               	movf	(displayPPM@ppmWhole+1)^(0+128),w
  3579  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  3580  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  3581  0F90  01B7               	clrf	?_sprintf+3
  3582  0F91  07B7               	addwf	?_sprintf+3,f
  3583  0F92  1683               	bsf	3,5	;RP0=1, select bank1
  3584  0F93  1303               	bcf	3,6	;RP1=0, select bank1
  3585  0F94  0834               	movf	displayPPM@ppmWhole^(0+128),w
  3586  0F95  1283               	bcf	3,5	;RP0=0, select bank0
  3587  0F96  1303               	bcf	3,6	;RP1=0, select bank0
  3588  0F97  01B6               	clrf	?_sprintf+2
  3589  0F98  07B6               	addwf	?_sprintf+2,f
  3590  0F99  1683               	bsf	3,5	;RP0=1, select bank1
  3591  0F9A  1303               	bcf	3,6	;RP1=0, select bank1
  3592  0F9B  0838               	movf	displayPPM@bufPtr^(0+128),w
  3593  0F9C  120A  118A  23F8  120A  158A  	fcall	_sprintf
  3594  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  3595  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  3596  0FA3  0834               	movf	?_sprintf,w
  3597  0FA4  00DC               	movwf	??_displayPPM
  3598  0FA5  085C               	movf	??_displayPPM,w
  3599  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  3600  0FA7  1303               	bcf	3,6	;RP1=0, select bank1
  3601  0FA8  07B8               	addwf	displayPPM@bufPtr^(0+128),f
  3602                           
  3603                           ;mq135_module.h: 47: *bufPtr++ = '.';
  3604  0FA9  302E               	movlw	46
  3605  0FAA  1283               	bcf	3,5	;RP0=0, select bank0
  3606  0FAB  1303               	bcf	3,6	;RP1=0, select bank0
  3607  0FAC  00DC               	movwf	??_displayPPM
  3608  0FAD  1683               	bsf	3,5	;RP0=1, select bank1
  3609  0FAE  1303               	bcf	3,6	;RP1=0, select bank1
  3610  0FAF  0838               	movf	displayPPM@bufPtr^(0+128),w
  3611  0FB0  0084               	movwf	4
  3612  0FB1  1283               	bcf	3,5	;RP0=0, select bank0
  3613  0FB2  1303               	bcf	3,6	;RP1=0, select bank0
  3614  0FB3  085C               	movf	??_displayPPM,w
  3615  0FB4  1383               	bcf	3,7	;select IRP bank0
  3616  0FB5  0080               	movwf	0
  3617  0FB6  3001               	movlw	1
  3618  0FB7  00DC               	movwf	??_displayPPM
  3619  0FB8  085C               	movf	??_displayPPM,w
  3620  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  3621  0FBA  1303               	bcf	3,6	;RP1=0, select bank1
  3622  0FBB  07B8               	addwf	displayPPM@bufPtr^(0+128),f
  3623                           
  3624                           ;mq135_module.h: 48: if (ppmFraction < 10)
  3625  0FBC  0837               	movf	(displayPPM@ppmFraction+1)^(0+128),w
  3626  0FBD  3A80               	xorlw	128
  3627  0FBE  00FF               	movwf	127
  3628  0FBF  3080               	movlw	128
  3629  0FC0  027F               	subwf	127,w
  3630  0FC1  1D03               	skipz
  3631  0FC2  2FC5               	goto	u4105
  3632  0FC3  300A               	movlw	10
  3633  0FC4  0236               	subwf	displayPPM@ppmFraction^(0+128),w
  3634  0FC5                     u4105:	
  3635  0FC5  1803               	skipnc
  3636  0FC6  2FDA               	goto	l2999
  3637                           
  3638                           ;mq135_module.h: 49: *bufPtr++ = '0';
  3639  0FC7  3030               	movlw	48
  3640  0FC8  1283               	bcf	3,5	;RP0=0, select bank0
  3641  0FC9  1303               	bcf	3,6	;RP1=0, select bank0
  3642  0FCA  00DC               	movwf	??_displayPPM
  3643  0FCB  1683               	bsf	3,5	;RP0=1, select bank1
  3644  0FCC  1303               	bcf	3,6	;RP1=0, select bank1
  3645  0FCD  0838               	movf	displayPPM@bufPtr^(0+128),w
  3646  0FCE  0084               	movwf	4
  3647  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  3648  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  3649  0FD1  085C               	movf	??_displayPPM,w
  3650  0FD2  1383               	bcf	3,7	;select IRP bank0
  3651  0FD3  0080               	movwf	0
  3652  0FD4  3001               	movlw	1
  3653  0FD5  00DC               	movwf	??_displayPPM
  3654  0FD6  085C               	movf	??_displayPPM,w
  3655  0FD7  1683               	bsf	3,5	;RP0=1, select bank1
  3656  0FD8  1303               	bcf	3,6	;RP1=0, select bank1
  3657  0FD9  07B8               	addwf	displayPPM@bufPtr^(0+128),f
  3658  0FDA                     l2999:	
  3659                           
  3660                           ;mq135_module.h: 50: sprintf(bufPtr, "%d ppm  ", ppmFraction);
  3661  0FDA  30CD               	movlw	low (STR_3| (0+32768))
  3662  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  3663  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
  3664  0FDD  00B4               	movwf	sprintf@f
  3665  0FDE  3090               	movlw	high (STR_3| (0+32768))
  3666  0FDF  00B5               	movwf	sprintf@f+1
  3667  0FE0  1683               	bsf	3,5	;RP0=1, select bank1
  3668  0FE1  1303               	bcf	3,6	;RP1=0, select bank1
  3669  0FE2  0837               	movf	(displayPPM@ppmFraction+1)^(0+128),w
  3670  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  3671  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  3672  0FE5  01B7               	clrf	?_sprintf+3
  3673  0FE6  07B7               	addwf	?_sprintf+3,f
  3674  0FE7  1683               	bsf	3,5	;RP0=1, select bank1
  3675  0FE8  1303               	bcf	3,6	;RP1=0, select bank1
  3676  0FE9  0836               	movf	displayPPM@ppmFraction^(0+128),w
  3677  0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  3678  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  3679  0FEC  01B6               	clrf	?_sprintf+2
  3680  0FED  07B6               	addwf	?_sprintf+2,f
  3681  0FEE  1683               	bsf	3,5	;RP0=1, select bank1
  3682  0FEF  1303               	bcf	3,6	;RP1=0, select bank1
  3683  0FF0  0838               	movf	displayPPM@bufPtr^(0+128),w
  3684  0FF1  120A  118A  23F8  120A  158A  	fcall	_sprintf
  3685                           
  3686                           ;mq135_module.h: 51: printToLCD(strBuffer);
  3687  0FF6  30A0               	movlw	displayPPM@strBuffer& (0+255)
  3688  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  3689  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  3690  0FF9  00A2               	movwf	printToLCD@str
  3691  0FFA  3000               	movlw	0
  3692  0FFB  00A3               	movwf	printToLCD@str+1
  3693  0FFC  160A  118A  260E   	fcall	_printToLCD
  3694  0FFF  0008               	return
  3695  1000                     __end_of_displayPPM:	
  3696                           
  3697                           	psect	text12
  3698  03F8                     __ptext12:	
  3699 ;; *************** function _sprintf *****************
  3700 ;; Defined at:
  3701 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;  sp              1    wreg     PTR unsigned char 
  3704 ;;		 -> updateState@buffer(10), displayTemp@buffer(20), debugInfo(10), displayTime@timeFormat(16), 
  3705 ;;		 -> displayPPM@strBuffer(20), 
  3706 ;;  f               2   20[BANK0 ] PTR const unsigned char 
  3707 ;;		 -> STR_26(13), STR_25(14), STR_19(11), STR_18(10), 
  3708 ;;		 -> STR_17(10), STR_16(10), STR_15(10), STR_14(10), 
  3709 ;;		 -> STR_13(10), STR_12(10), STR_11(10), STR_10(10), 
  3710 ;;		 -> STR_9(10), STR_8(10), STR_7(10), STR_6(16), 
  3711 ;;		 -> STR_3(9), STR_2(3), STR_1(6), 
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;  sp              1   41[BANK0 ] PTR unsigned char 
  3714 ;;		 -> updateState@buffer(10), displayTemp@buffer(20), debugInfo(10), displayTime@timeFormat(16), 
  3715 ;;		 -> displayPPM@strBuffer(20), 
  3716 ;;  _val            4   33[BANK0 ] struct .
  3717 ;;  width           2   38[BANK0 ] int 
  3718 ;;  ccnt            2   31[BANK0 ] int 
  3719 ;;  c               1   40[BANK0 ] char 
  3720 ;;  flag            1   37[BANK0 ] unsigned char 
  3721 ;;  prec            1   30[BANK0 ] char 
  3722 ;;  ap              1   29[BANK0 ] PTR void [1]
  3723 ;;		 -> ?_sprintf(2), 
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  2   20[BANK0 ] int 
  3726 ;; Registers used:
  3727 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3733 ;;      Params:         0       6       0       0       0
  3734 ;;      Locals:         0      13       0       0       0
  3735 ;;      Temps:          0       3       0       0       0
  3736 ;;      Totals:         0      22       0       0       0
  3737 ;;Total ram usage:       22 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; Hardware stack levels required when called:    3
  3740 ;; This function calls:
  3741 ;;		___lwdiv
  3742 ;;		___lwmod
  3743 ;;		___wmul
  3744 ;;		_isdigit
  3745 ;; This function is called by:
  3746 ;;		_displayPPM
  3747 ;;		_displayTime
  3748 ;;		_setHoursStart
  3749 ;;		_setHoursEnd
  3750 ;;		_setMinutesStart
  3751 ;;		_setMinutesEnd
  3752 ;;		_displayTemp
  3753 ;;		_updateState
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           
  3758                           ;psect for function _sprintf
  3759  03F8                     _sprintf:	
  3760                           
  3761                           ;incstack = 0
  3762                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3763                           ;sprintf@sp stored from wreg
  3764  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  3765  03F9  1303               	bcf	3,6	;RP1=0, select bank0
  3766  03FA  00C9               	movwf	sprintf@sp
  3767                           
  3768                           ;doprnt.c: 494: va_list ap;
  3769                           ;doprnt.c: 499: signed char c;
  3770                           ;doprnt.c: 501: int width;
  3771                           ;doprnt.c: 506: signed char prec;
  3772                           ;doprnt.c: 508: unsigned char flag;
  3773                           ;doprnt.c: 510: int ccnt = 0;
  3774  03FB  01BF               	clrf	sprintf@ccnt
  3775  03FC  01C0               	clrf	sprintf@ccnt+1
  3776                           
  3777                           ;doprnt.c: 527: union {
  3778                           ;doprnt.c: 528: unsigned int _val;
  3779                           ;doprnt.c: 529: struct {
  3780                           ;doprnt.c: 530: const char * _cp;
  3781                           ;doprnt.c: 531: unsigned _len;
  3782                           ;doprnt.c: 532: } _str;
  3783                           ;doprnt.c: 533: } _val;
  3784                           ;doprnt.c: 542: *ap = __va_start();
  3785  03FD  3036               	movlw	(?_sprintf+2)& (0+255)
  3786  03FE  00BA               	movwf	??_sprintf
  3787  03FF  083A               	movf	??_sprintf,w
  3788  0400  00BD               	movwf	sprintf@ap
  3789  0401                     l2959:	
  3790                           ;doprnt.c: 545: while(c = *f++) {
  3791                           
  3792  0401  1283               	bcf	3,5	;RP0=0, select bank0
  3793  0402  1303               	bcf	3,6	;RP1=0, select bank0
  3794  0403  0835               	movf	sprintf@f+1,w
  3795  0404  00BB               	movwf	??_sprintf+1
  3796  0405  0834               	movf	sprintf@f,w
  3797  0406  00BA               	movwf	??_sprintf
  3798  0407  0AB4               	incf	sprintf@f,f
  3799  0408  1903               	skipnz
  3800  0409  0AB5               	incf	sprintf@f+1,f
  3801  040A  083B               	movf	??_sprintf+1,w
  3802  040B  00FF               	movwf	127
  3803  040C  083A               	movf	??_sprintf,w
  3804  040D  0084               	movwf	4
  3805  040E  160A  118A  2000  120A  118A  	fcall	stringtab
  3806  0413  00BC               	movwf	??_sprintf+2
  3807  0414  083C               	movf	??_sprintf+2,w
  3808  0415  00C8               	movwf	sprintf@c
  3809  0416  08C8               	movf	sprintf@c,f
  3810  0417  1903               	btfsc	3,2
  3811  0418  2DEA               	goto	l2961
  3812                           
  3813                           ;doprnt.c: 547: if(c != '%')
  3814  0419  0848               	movf	sprintf@c,w
  3815  041A  3A25               	xorlw	37
  3816  041B  1903               	skipnz
  3817  041C  2C2F               	goto	l2855
  3818                           
  3819                           ;doprnt.c: 549: {
  3820                           ;doprnt.c: 550: ((*sp++ = (c)),(++ccnt));
  3821  041D  0848               	movf	sprintf@c,w
  3822  041E  00BA               	movwf	??_sprintf
  3823  041F  0849               	movf	sprintf@sp,w
  3824  0420  0084               	movwf	4
  3825  0421  083A               	movf	??_sprintf,w
  3826  0422  1383               	bcf	3,7	;select IRP bank0
  3827  0423  0080               	movwf	0
  3828  0424  3001               	movlw	1
  3829  0425  00BA               	movwf	??_sprintf
  3830  0426  083A               	movf	??_sprintf,w
  3831  0427  07C9               	addwf	sprintf@sp,f
  3832  0428  3001               	movlw	1
  3833  0429  07BF               	addwf	sprintf@ccnt,f
  3834  042A  1803               	skipnc
  3835  042B  0AC0               	incf	sprintf@ccnt+1,f
  3836  042C  3000               	movlw	0
  3837  042D  07C0               	addwf	sprintf@ccnt+1,f
  3838                           
  3839                           ;doprnt.c: 551: continue;
  3840  042E  2C01               	goto	l2959
  3841  042F                     l2855:	
  3842                           
  3843                           ;doprnt.c: 552: }
  3844                           ;doprnt.c: 555: width = 0;
  3845  042F  01C6               	clrf	sprintf@width
  3846  0430  01C7               	clrf	sprintf@width+1
  3847                           
  3848                           ;doprnt.c: 557: flag = 0;
  3849  0431  01C5               	clrf	sprintf@flag
  3850                           
  3851                           ;doprnt.c: 560: switch(*f) {
  3852                           
  3853                           ;doprnt.c: 559: for(;;) {
  3854  0432  2C38               	goto	l2859
  3855  0433                     l320:	
  3856                           ;doprnt.c: 588: case '0':
  3857                           
  3858                           
  3859                           ;doprnt.c: 589: flag |= 0x04;
  3860  0433  1545               	bsf	sprintf@flag,2
  3861                           
  3862                           ;doprnt.c: 590: f++;
  3863  0434  3001               	movlw	1
  3864  0435  07B4               	addwf	sprintf@f,f
  3865  0436  1803               	skipnc
  3866  0437  0AB5               	incf	sprintf@f+1,f
  3867  0438                     l2859:	
  3868                           ;doprnt.c: 593: }
  3869                           
  3870                           ;doprnt.c: 591: continue;
  3871                           
  3872  0438  0835               	movf	sprintf@f+1,w
  3873  0439  00FF               	movwf	127
  3874  043A  0834               	movf	sprintf@f,w
  3875  043B  0084               	movwf	4
  3876  043C  160A  118A  2000  120A  118A  	fcall	stringtab
  3877                           
  3878                           ; Switch size 1, requested type "space"
  3879                           ; Number of cases is 1, Range of values is 48 to 48
  3880                           ; switch strategies available:
  3881                           ; Name         Instructions Cycles
  3882                           ; simple_byte            4     3 (average)
  3883                           ; direct_byte           14    11 (fixed)
  3884                           ; jumptable            263     9 (fixed)
  3885                           ;	Chosen strategy is simple_byte
  3886  0441  3A30               	xorlw	48	; case 48
  3887  0442  1903               	skipnz
  3888  0443  2C33               	goto	l320
  3889  0444  2C45               	goto	l2861
  3890  0445                     l2861:	
  3891                           ;doprnt.c: 595: }
  3892                           
  3893                           ;doprnt.c: 594: break;
  3894                           
  3895                           
  3896                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  3897  0445  0835               	movf	sprintf@f+1,w
  3898  0446  00FF               	movwf	127
  3899  0447  0834               	movf	sprintf@f,w
  3900  0448  0084               	movwf	4
  3901  0449  160A  118A  2000  120A  118A  	fcall	stringtab
  3902  044E  160A  118A  23FC  120A  118A  	fcall	_isdigit
  3903  0453  1C03               	btfss	3,0
  3904  0454  2C9B               	goto	l2875
  3905                           
  3906                           ;doprnt.c: 607: width = 0;
  3907  0455  1283               	bcf	3,5	;RP0=0, select bank0
  3908  0456  1303               	bcf	3,6	;RP1=0, select bank0
  3909  0457  01C6               	clrf	sprintf@width
  3910  0458  01C7               	clrf	sprintf@width+1
  3911  0459                     l2865:	
  3912                           ;doprnt.c: 608: do {
  3913                           
  3914                           
  3915                           ;doprnt.c: 609: width *= 10;
  3916  0459  300A               	movlw	10
  3917  045A  1283               	bcf	3,5	;RP0=0, select bank0
  3918  045B  1303               	bcf	3,6	;RP1=0, select bank0
  3919  045C  00A0               	movwf	___wmul@multiplier
  3920  045D  3000               	movlw	0
  3921  045E  00A1               	movwf	___wmul@multiplier+1
  3922  045F  0847               	movf	sprintf@width+1,w
  3923  0460  01A3               	clrf	___wmul@multiplicand+1
  3924  0461  07A3               	addwf	___wmul@multiplicand+1,f
  3925  0462  0846               	movf	sprintf@width,w
  3926  0463  01A2               	clrf	___wmul@multiplicand
  3927  0464  07A2               	addwf	___wmul@multiplicand,f
  3928  0465  160A  118A  259B  120A  118A  	fcall	___wmul
  3929  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3930  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3931  046C  0821               	movf	?___wmul+1,w
  3932  046D  01C7               	clrf	sprintf@width+1
  3933  046E  07C7               	addwf	sprintf@width+1,f
  3934  046F  0820               	movf	?___wmul,w
  3935  0470  01C6               	clrf	sprintf@width
  3936  0471  07C6               	addwf	sprintf@width,f
  3937                           
  3938                           ;doprnt.c: 610: width += *f++ - '0';
  3939  0472  0835               	movf	sprintf@f+1,w
  3940  0473  00FF               	movwf	127
  3941  0474  0834               	movf	sprintf@f,w
  3942  0475  0084               	movwf	4
  3943  0476  160A  118A  2000  120A  118A  	fcall	stringtab
  3944  047B  3ED0               	addlw	208
  3945  047C  00BA               	movwf	??_sprintf
  3946  047D  30FF               	movlw	255
  3947  047E  1803               	skipnc
  3948  047F  3000               	movlw	0
  3949  0480  00BB               	movwf	??_sprintf+1
  3950  0481  083A               	movf	??_sprintf,w
  3951  0482  07C6               	addwf	sprintf@width,f
  3952  0483  1803               	skipnc
  3953  0484  0AC7               	incf	sprintf@width+1,f
  3954  0485  083B               	movf	??_sprintf+1,w
  3955  0486  07C7               	addwf	sprintf@width+1,f
  3956  0487  3001               	movlw	1
  3957  0488  07B4               	addwf	sprintf@f,f
  3958  0489  1803               	skipnc
  3959  048A  0AB5               	incf	sprintf@f+1,f
  3960                           
  3961                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  3962  048B  0835               	movf	sprintf@f+1,w
  3963  048C  00FF               	movwf	127
  3964  048D  0834               	movf	sprintf@f,w
  3965  048E  0084               	movwf	4
  3966  048F  160A  118A  2000  120A  118A  	fcall	stringtab
  3967  0494  160A  118A  23FC  120A  118A  	fcall	_isdigit
  3968  0499  1803               	btfsc	3,0
  3969  049A  2C59               	goto	l2865
  3970  049B                     l2875:	
  3971                           ;doprnt.c: 831: }
  3972                           
  3973                           ;doprnt.c: 822: continue;
  3974                           
  3975                           ;doprnt.c: 811: default:
  3976                           
  3977                           ;doprnt.c: 707: case 'i':
  3978                           ;doprnt.c: 708: break;
  3979                           
  3980                           ;doprnt.c: 706: case 'd':
  3981                           
  3982                           ;doprnt.c: 647: goto alldone;
  3983                           
  3984                           ;doprnt.c: 646: case 0:
  3985                           
  3986                           ;doprnt.c: 617: }
  3987                           ;doprnt.c: 644: switch(c = *f++) {
  3988                           
  3989  049B  1283               	bcf	3,5	;RP0=0, select bank0
  3990  049C  1303               	bcf	3,6	;RP1=0, select bank0
  3991  049D  0835               	movf	sprintf@f+1,w
  3992  049E  00BB               	movwf	??_sprintf+1
  3993  049F  0834               	movf	sprintf@f,w
  3994  04A0  00BA               	movwf	??_sprintf
  3995  04A1  0AB4               	incf	sprintf@f,f
  3996  04A2  1903               	skipnz
  3997  04A3  0AB5               	incf	sprintf@f+1,f
  3998  04A4  083B               	movf	??_sprintf+1,w
  3999  04A5  00FF               	movwf	127
  4000  04A6  083A               	movf	??_sprintf,w
  4001  04A7  0084               	movwf	4
  4002  04A8  160A  118A  2000  120A  118A  	fcall	stringtab
  4003  04AD  00C8               	movwf	sprintf@c
  4004                           
  4005                           ; Switch size 1, requested type "space"
  4006                           ; Number of cases is 3, Range of values is 0 to 105
  4007                           ; switch strategies available:
  4008                           ; Name         Instructions Cycles
  4009                           ; simple_byte           10     6 (average)
  4010                           ; jumptable            260     6 (fixed)
  4011                           ;	Chosen strategy is simple_byte
  4012  04AE  3A00               	xorlw	0	; case 0
  4013  04AF  1903               	skipnz
  4014  04B0  2DEA               	goto	l2961
  4015  04B1  3A64               	xorlw	100	; case 100
  4016  04B2  1903               	skipnz
  4017  04B3  2CB8               	goto	l2877
  4018  04B4  3A0D               	xorlw	13	; case 105
  4019  04B5  1903               	skipnz
  4020  04B6  2CB8               	goto	l2877
  4021  04B7  2C01               	goto	l2959
  4022  04B8                     l2877:	
  4023                           
  4024                           ;doprnt.c: 1262: {
  4025                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4026  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  4027  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  4028  04BA  083D               	movf	sprintf@ap,w
  4029  04BB  0084               	movwf	4
  4030  04BC  1383               	bcf	3,7	;select IRP bank0
  4031  04BD  0800               	movf	0,w
  4032  04BE  00C1               	movwf	sprintf@_val
  4033  04BF  0A84               	incf	4,f
  4034  04C0  0800               	movf	0,w
  4035  04C1  00C2               	movwf	sprintf@_val+1
  4036  04C2  3002               	movlw	2
  4037  04C3  00BA               	movwf	??_sprintf
  4038  04C4  083A               	movf	??_sprintf,w
  4039  04C5  07BD               	addwf	sprintf@ap,f
  4040                           
  4041                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  4042  04C6  1FC2               	btfss	sprintf@_val+1,7
  4043  04C7  2CD1               	goto	l2887
  4044                           
  4045                           ;doprnt.c: 1271: flag |= 0x03;
  4046  04C8  3003               	movlw	3
  4047  04C9  00BA               	movwf	??_sprintf
  4048  04CA  083A               	movf	??_sprintf,w
  4049  04CB  04C5               	iorwf	sprintf@flag,f
  4050                           
  4051                           ;doprnt.c: 1272: _val._val = -_val._val;
  4052  04CC  09C1               	comf	sprintf@_val,f
  4053  04CD  09C2               	comf	sprintf@_val+1,f
  4054  04CE  0AC1               	incf	sprintf@_val,f
  4055  04CF  1903               	skipnz
  4056  04D0  0AC2               	incf	sprintf@_val+1,f
  4057  04D1                     l2887:	
  4058                           
  4059                           ;doprnt.c: 1273: }
  4060                           ;doprnt.c: 1275: }
  4061                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4062  04D1  01C8               	clrf	sprintf@c
  4063  04D2  0AC8               	incf	sprintf@c,f
  4064  04D3  0848               	movf	sprintf@c,w
  4065  04D4  3A05               	xorlw	5
  4066  04D5  1903               	btfsc	3,2
  4067  04D6  2CFC               	goto	l2899
  4068  04D7                     l2891:	
  4069                           
  4070                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4071  04D7  0848               	movf	sprintf@c,w
  4072  04D8  00BA               	movwf	??_sprintf
  4073  04D9  073A               	addwf	??_sprintf,w
  4074  04DA  3E12               	addlw	low (_dpowers| (0+32768))
  4075  04DB  0084               	movwf	4
  4076  04DC  3090               	movlw	high (_dpowers| (0+32768))
  4077  04DD  1803               	skipnc
  4078  04DE  3E01               	addlw	1
  4079  04DF  00FF               	movwf	127
  4080  04E0  160A  118A  2000  120A  118A  	fcall	stringtab
  4081  04E5  00BB               	movwf	??_sprintf+1
  4082  04E6  160A  118A  2000  120A  118A  	fcall	stringtab
  4083  04EB  00BC               	movwf	??_sprintf+2
  4084  04EC  083C               	movf	??_sprintf+2,w
  4085  04ED  0242               	subwf	sprintf@_val+1,w
  4086  04EE  1D03               	skipz
  4087  04EF  2CF2               	goto	u3955
  4088  04F0  083B               	movf	??_sprintf+1,w
  4089  04F1  0241               	subwf	sprintf@_val,w
  4090  04F2                     u3955:	
  4091  04F2  1C03               	btfss	3,0
  4092  04F3  2CFC               	goto	l2899
  4093                           
  4094                           ;doprnt.c: 1316: break;
  4095  04F4  3001               	movlw	1
  4096  04F5  00BA               	movwf	??_sprintf
  4097  04F6  083A               	movf	??_sprintf,w
  4098  04F7  07C8               	addwf	sprintf@c,f
  4099  04F8  0848               	movf	sprintf@c,w
  4100  04F9  3A05               	xorlw	5
  4101  04FA  1D03               	skipz
  4102  04FB  2CD7               	goto	l2891
  4103  04FC                     l2899:	
  4104                           
  4105                           ;doprnt.c: 1354: if(width && flag & 0x03)
  4106  04FC  0847               	movf	sprintf@width+1,w
  4107  04FD  0446               	iorwf	sprintf@width,w
  4108  04FE  1903               	skipnz
  4109  04FF  2D0A               	goto	l338
  4110  0500  0845               	movf	sprintf@flag,w
  4111  0501  3903               	andlw	3
  4112  0502  1903               	btfsc	3,2
  4113  0503  2D0A               	goto	l338
  4114                           
  4115                           ;doprnt.c: 1355: width--;
  4116  0504  30FF               	movlw	255
  4117  0505  07C6               	addwf	sprintf@width,f
  4118  0506  1803               	skipnc
  4119  0507  0AC7               	incf	sprintf@width+1,f
  4120  0508  30FF               	movlw	255
  4121  0509  07C7               	addwf	sprintf@width+1,f
  4122  050A                     l338:	
  4123                           
  4124                           ;doprnt.c: 1390: if(width > c)
  4125  050A  0848               	movf	sprintf@c,w
  4126  050B  00BA               	movwf	??_sprintf
  4127  050C  01BB               	clrf	??_sprintf+1
  4128  050D  1BBA               	btfsc	??_sprintf,7
  4129  050E  03BB               	decf	??_sprintf+1,f
  4130  050F  083B               	movf	??_sprintf+1,w
  4131  0510  3A80               	xorlw	128
  4132  0511  00BC               	movwf	??_sprintf+2
  4133  0512  0847               	movf	sprintf@width+1,w
  4134  0513  3A80               	xorlw	128
  4135  0514  023C               	subwf	??_sprintf+2,w
  4136  0515  1D03               	skipz
  4137  0516  2D19               	goto	u3995
  4138  0517  0846               	movf	sprintf@width,w
  4139  0518  023A               	subwf	??_sprintf,w
  4140  0519                     u3995:	
  4141  0519  1803               	skipnc
  4142  051A  2D29               	goto	l2907
  4143                           
  4144                           ;doprnt.c: 1391: width -= c;
  4145  051B  1283               	bcf	3,5	;RP0=0, select bank0
  4146  051C  1303               	bcf	3,6	;RP1=0, select bank0
  4147  051D  0848               	movf	sprintf@c,w
  4148  051E  00BA               	movwf	??_sprintf
  4149  051F  01BB               	clrf	??_sprintf+1
  4150  0520  1BBA               	btfsc	??_sprintf,7
  4151  0521  03BB               	decf	??_sprintf+1,f
  4152  0522  083A               	movf	??_sprintf,w
  4153  0523  02C6               	subwf	sprintf@width,f
  4154  0524  083B               	movf	??_sprintf+1,w
  4155  0525  1C03               	skipc
  4156  0526  03C7               	decf	sprintf@width+1,f
  4157  0527  02C7               	subwf	sprintf@width+1,f
  4158  0528  2D2D               	goto	l2909
  4159  0529                     l2907:	
  4160                           
  4161                           ;doprnt.c: 1392: else
  4162                           ;doprnt.c: 1393: width = 0;
  4163  0529  1283               	bcf	3,5	;RP0=0, select bank0
  4164  052A  1303               	bcf	3,6	;RP1=0, select bank0
  4165  052B  01C6               	clrf	sprintf@width
  4166  052C  01C7               	clrf	sprintf@width+1
  4167  052D                     l2909:	
  4168                           
  4169                           ;doprnt.c: 1396: if(flag & 0x04) {
  4170  052D  1D45               	btfss	sprintf@flag,2
  4171  052E  2D60               	goto	l2929
  4172                           
  4173                           ;doprnt.c: 1401: if(flag & 0x03)
  4174  052F  0845               	movf	sprintf@flag,w
  4175  0530  3903               	andlw	3
  4176  0531  1903               	btfsc	3,2
  4177  0532  2D44               	goto	l2919
  4178                           
  4179                           ;doprnt.c: 1402: ((*sp++ = ('-')),(++ccnt));
  4180  0533  302D               	movlw	45
  4181  0534  00BA               	movwf	??_sprintf
  4182  0535  0849               	movf	sprintf@sp,w
  4183  0536  0084               	movwf	4
  4184  0537  083A               	movf	??_sprintf,w
  4185  0538  1383               	bcf	3,7	;select IRP bank0
  4186  0539  0080               	movwf	0
  4187  053A  3001               	movlw	1
  4188  053B  00BA               	movwf	??_sprintf
  4189  053C  083A               	movf	??_sprintf,w
  4190  053D  07C9               	addwf	sprintf@sp,f
  4191  053E  3001               	movlw	1
  4192  053F  07BF               	addwf	sprintf@ccnt,f
  4193  0540  1803               	skipnc
  4194  0541  0AC0               	incf	sprintf@ccnt+1,f
  4195  0542  3000               	movlw	0
  4196  0543  07C0               	addwf	sprintf@ccnt+1,f
  4197  0544                     l2919:	
  4198                           
  4199                           ;doprnt.c: 1424: if(width)
  4200  0544  0847               	movf	sprintf@width+1,w
  4201  0545  0446               	iorwf	sprintf@width,w
  4202  0546  1903               	skipnz
  4203  0547  2D94               	goto	l2947
  4204                           
  4205                           ;doprnt.c: 1426: ((*sp++ = ('0')),(++ccnt));
  4206                           
  4207                           ;doprnt.c: 1425: do
  4208  0548  3030               	movlw	48
  4209  0549  00BA               	movwf	??_sprintf
  4210  054A  0849               	movf	sprintf@sp,w
  4211  054B  0084               	movwf	4
  4212  054C  083A               	movf	??_sprintf,w
  4213  054D  1383               	bcf	3,7	;select IRP bank0
  4214  054E  0080               	movwf	0
  4215  054F  3001               	movlw	1
  4216  0550  00BA               	movwf	??_sprintf
  4217  0551  083A               	movf	??_sprintf,w
  4218  0552  07C9               	addwf	sprintf@sp,f
  4219  0553  3001               	movlw	1
  4220  0554  07BF               	addwf	sprintf@ccnt,f
  4221  0555  1803               	skipnc
  4222  0556  0AC0               	incf	sprintf@ccnt+1,f
  4223  0557  3000               	movlw	0
  4224  0558  07C0               	addwf	sprintf@ccnt+1,f
  4225                           
  4226                           ;doprnt.c: 1427: while(--width);
  4227  0559  30FF               	movlw	255
  4228  055A  07C6               	addwf	sprintf@width,f
  4229  055B  1803               	skipnc
  4230  055C  0AC7               	incf	sprintf@width+1,f
  4231  055D  30FF               	movlw	255
  4232  055E  07C7               	addwf	sprintf@width+1,f
  4233  055F  2D44               	goto	l2919
  4234  0560                     l2929:	
  4235                           ;doprnt.c: 1429: } else
  4236                           
  4237                           
  4238                           ;doprnt.c: 1431: {
  4239                           ;doprnt.c: 1433: if(width
  4240                           ;doprnt.c: 1437: )
  4241  0560  0847               	movf	sprintf@width+1,w
  4242  0561  0446               	iorwf	sprintf@width,w
  4243  0562  1903               	skipnz
  4244  0563  2D7F               	goto	l2939
  4245  0564                     l2931:	
  4246                           ;doprnt.c: 1438: do
  4247                           
  4248                           
  4249                           ;doprnt.c: 1439: ((*sp++ = (' ')),(++ccnt));
  4250  0564  3020               	movlw	32
  4251  0565  00BA               	movwf	??_sprintf
  4252  0566  0849               	movf	sprintf@sp,w
  4253  0567  0084               	movwf	4
  4254  0568  083A               	movf	??_sprintf,w
  4255  0569  1383               	bcf	3,7	;select IRP bank0
  4256  056A  0080               	movwf	0
  4257  056B  3001               	movlw	1
  4258  056C  00BA               	movwf	??_sprintf
  4259  056D  083A               	movf	??_sprintf,w
  4260  056E  07C9               	addwf	sprintf@sp,f
  4261  056F  3001               	movlw	1
  4262  0570  07BF               	addwf	sprintf@ccnt,f
  4263  0571  1803               	skipnc
  4264  0572  0AC0               	incf	sprintf@ccnt+1,f
  4265  0573  3000               	movlw	0
  4266  0574  07C0               	addwf	sprintf@ccnt+1,f
  4267                           
  4268                           ;doprnt.c: 1440: while(--width);
  4269  0575  30FF               	movlw	255
  4270  0576  07C6               	addwf	sprintf@width,f
  4271  0577  1803               	skipnc
  4272  0578  0AC7               	incf	sprintf@width+1,f
  4273  0579  30FF               	movlw	255
  4274  057A  07C7               	addwf	sprintf@width+1,f
  4275  057B  0847               	movf	sprintf@width+1,w
  4276  057C  0446               	iorwf	sprintf@width,w
  4277  057D  1D03               	skipz
  4278  057E  2D64               	goto	l2931
  4279  057F                     l2939:	
  4280                           
  4281                           ;doprnt.c: 1447: if(flag & 0x03)
  4282  057F  0845               	movf	sprintf@flag,w
  4283  0580  3903               	andlw	3
  4284  0581  1903               	btfsc	3,2
  4285  0582  2D94               	goto	l2947
  4286                           
  4287                           ;doprnt.c: 1448: ((*sp++ = ('-')),(++ccnt));
  4288  0583  302D               	movlw	45
  4289  0584  00BA               	movwf	??_sprintf
  4290  0585  0849               	movf	sprintf@sp,w
  4291  0586  0084               	movwf	4
  4292  0587  083A               	movf	??_sprintf,w
  4293  0588  1383               	bcf	3,7	;select IRP bank0
  4294  0589  0080               	movwf	0
  4295  058A  3001               	movlw	1
  4296  058B  00BA               	movwf	??_sprintf
  4297  058C  083A               	movf	??_sprintf,w
  4298  058D  07C9               	addwf	sprintf@sp,f
  4299  058E  3001               	movlw	1
  4300  058F  07BF               	addwf	sprintf@ccnt,f
  4301  0590  1803               	skipnc
  4302  0591  0AC0               	incf	sprintf@ccnt+1,f
  4303  0592  3000               	movlw	0
  4304  0593  07C0               	addwf	sprintf@ccnt+1,f
  4305  0594                     l2947:	
  4306                           
  4307                           ;doprnt.c: 1478: }
  4308                           ;doprnt.c: 1481: prec = c;
  4309  0594  0848               	movf	sprintf@c,w
  4310  0595  00BA               	movwf	??_sprintf
  4311  0596  083A               	movf	??_sprintf,w
  4312  0597  00BE               	movwf	sprintf@prec
  4313  0598                     l2957:	
  4314                           ;doprnt.c: 1483: while(prec--) {
  4315                           
  4316  0598  30FF               	movlw	-1
  4317  0599  00BA               	movwf	??_sprintf
  4318  059A  083A               	movf	??_sprintf,w
  4319  059B  07BE               	addwf	sprintf@prec,f
  4320  059C  083E               	movf	sprintf@prec,w
  4321  059D  3AFF               	xorlw	-1
  4322  059E  1903               	btfsc	3,2
  4323  059F  2C01               	goto	l2959
  4324                           
  4325                           ;doprnt.c: 1487: {
  4326                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4327  05A0  300A               	movlw	10
  4328  05A1  00AE               	movwf	___lwmod@divisor
  4329  05A2  3000               	movlw	0
  4330  05A3  00AF               	movwf	___lwmod@divisor+1
  4331  05A4  083E               	movf	sprintf@prec,w
  4332  05A5  00BA               	movwf	??_sprintf
  4333  05A6  073A               	addwf	??_sprintf,w
  4334  05A7  3E12               	addlw	low (_dpowers| (0+32768))
  4335  05A8  0084               	movwf	4
  4336  05A9  3090               	movlw	high (_dpowers| (0+32768))
  4337  05AA  1803               	skipnc
  4338  05AB  3E01               	addlw	1
  4339  05AC  00FF               	movwf	127
  4340  05AD  160A  118A  2000  120A  118A  	fcall	stringtab
  4341  05B2  00A6               	movwf	___lwdiv@divisor
  4342  05B3  160A  118A  2000  120A  118A  	fcall	stringtab
  4343  05B8  00A7               	movwf	___lwdiv@divisor+1
  4344  05B9  0842               	movf	sprintf@_val+1,w
  4345  05BA  01A9               	clrf	___lwdiv@dividend+1
  4346  05BB  07A9               	addwf	___lwdiv@dividend+1,f
  4347  05BC  0841               	movf	sprintf@_val,w
  4348  05BD  01A8               	clrf	___lwdiv@dividend
  4349  05BE  07A8               	addwf	___lwdiv@dividend,f
  4350  05BF  160A  118A  2702  120A  118A  	fcall	___lwdiv
  4351  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  4352  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  4353  05C6  0827               	movf	?___lwdiv+1,w
  4354  05C7  01B1               	clrf	___lwmod@dividend+1
  4355  05C8  07B1               	addwf	___lwmod@dividend+1,f
  4356  05C9  0826               	movf	?___lwdiv,w
  4357  05CA  01B0               	clrf	___lwmod@dividend
  4358  05CB  07B0               	addwf	___lwmod@dividend,f
  4359  05CC  160A  118A  26CC  120A  118A  	fcall	___lwmod
  4360  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  4361  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  4362  05D3  082E               	movf	?___lwmod,w
  4363  05D4  3E30               	addlw	48
  4364  05D5  00BB               	movwf	??_sprintf+1
  4365  05D6  083B               	movf	??_sprintf+1,w
  4366  05D7  00C8               	movwf	sprintf@c
  4367                           
  4368                           ;doprnt.c: 1532: }
  4369                           ;doprnt.c: 1533: ((*sp++ = (c)),(++ccnt));
  4370  05D8  0848               	movf	sprintf@c,w
  4371  05D9  00BA               	movwf	??_sprintf
  4372  05DA  0849               	movf	sprintf@sp,w
  4373  05DB  0084               	movwf	4
  4374  05DC  083A               	movf	??_sprintf,w
  4375  05DD  1383               	bcf	3,7	;select IRP bank0
  4376  05DE  0080               	movwf	0
  4377  05DF  3001               	movlw	1
  4378  05E0  00BA               	movwf	??_sprintf
  4379  05E1  083A               	movf	??_sprintf,w
  4380  05E2  07C9               	addwf	sprintf@sp,f
  4381  05E3  3001               	movlw	1
  4382  05E4  07BF               	addwf	sprintf@ccnt,f
  4383  05E5  1803               	skipnc
  4384  05E6  0AC0               	incf	sprintf@ccnt+1,f
  4385  05E7  3000               	movlw	0
  4386  05E8  07C0               	addwf	sprintf@ccnt+1,f
  4387  05E9  2D98               	goto	l2957
  4388  05EA                     l2961:	
  4389                           ;doprnt.c: 1534: }
  4390                           ;doprnt.c: 1542: }
  4391                           ;doprnt.c: 1544: alldone:
  4392                           
  4393                           
  4394                           ;doprnt.c: 1547: *sp = 0;
  4395  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  4396  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  4397  05EC  0849               	movf	sprintf@sp,w
  4398  05ED  0084               	movwf	4
  4399  05EE  1383               	bcf	3,7	;select IRP bank0
  4400  05EF  0180               	clrf	0
  4401                           
  4402                           ;doprnt.c: 1549: return ccnt;
  4403  05F0  0840               	movf	sprintf@ccnt+1,w
  4404  05F1  01B5               	clrf	?_sprintf+1
  4405  05F2  07B5               	addwf	?_sprintf+1,f
  4406  05F3  083F               	movf	sprintf@ccnt,w
  4407  05F4  01B4               	clrf	?_sprintf
  4408  05F5  07B4               	addwf	?_sprintf,f
  4409  05F6  0008               	return
  4410  05F7                     __end_of_sprintf:	
  4411                           
  4412                           	psect	text13
  4413  13FC                     __ptext13:	
  4414 ;; *************** function _isdigit *****************
  4415 ;; Defined at:
  4416 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  4417 ;; Parameters:    Size  Location     Type
  4418 ;;  c               1    wreg     unsigned char 
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;  c               1    1[BANK0 ] unsigned char 
  4421 ;; Return value:  Size  Location     Type
  4422 ;;		None               void
  4423 ;; Registers used:
  4424 ;;		wreg, status,2, status,0
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4430 ;;      Params:         0       0       0       0       0
  4431 ;;      Locals:         0       2       0       0       0
  4432 ;;      Temps:          0       0       0       0       0
  4433 ;;      Totals:         0       2       0       0       0
  4434 ;;Total ram usage:        2 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    2
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_sprintf
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           
  4445                           ;psect for function _isdigit
  4446  13FC                     _isdigit:	
  4447                           
  4448                           ;incstack = 0
  4449                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4450                           ;isdigit@c stored from wreg
  4451  13FC  1283               	bcf	3,5	;RP0=0, select bank0
  4452  13FD  1303               	bcf	3,6	;RP1=0, select bank0
  4453  13FE  00A1               	movwf	isdigit@c
  4454  13FF  01A0               	clrf	_isdigit$441
  4455  1400  303A               	movlw	58
  4456  1401  0221               	subwf	isdigit@c,w
  4457  1402  1803               	skipnc
  4458  1403  2C0A               	goto	l2819
  4459  1404  3030               	movlw	48
  4460  1405  0221               	subwf	isdigit@c,w
  4461  1406  1C03               	skipc
  4462  1407  2C0A               	goto	l2819
  4463  1408  01A0               	clrf	_isdigit$441
  4464  1409  0AA0               	incf	_isdigit$441,f
  4465  140A                     l2819:	
  4466  140A  0C20               	rrf	_isdigit$441,w
  4467  140B  0008               	return
  4468  140C                     __end_of_isdigit:	
  4469                           
  4470                           	psect	text14
  4471  16CC                     __ptext14:	
  4472 ;; *************** function ___lwmod *****************
  4473 ;; Defined at:
  4474 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  divisor         2   14[BANK0 ] unsigned int 
  4477 ;;  dividend        2   16[BANK0 ] unsigned int 
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;  counter         1   19[BANK0 ] unsigned char 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  2   14[BANK0 ] unsigned int 
  4482 ;; Registers used:
  4483 ;;		wreg, status,2, status,0
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4489 ;;      Params:         0       4       0       0       0
  4490 ;;      Locals:         0       1       0       0       0
  4491 ;;      Temps:          0       1       0       0       0
  4492 ;;      Totals:         0       6       0       0       0
  4493 ;;Total ram usage:        6 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    2
  4496 ;; This function calls:
  4497 ;;		Nothing
  4498 ;; This function is called by:
  4499 ;;		_sprintf
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function ___lwmod
  4505  16CC                     ___lwmod:	
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4509  16CC  1283               	bcf	3,5	;RP0=0, select bank0
  4510  16CD  1303               	bcf	3,6	;RP1=0, select bank0
  4511  16CE  082F               	movf	___lwmod@divisor+1,w
  4512  16CF  042E               	iorwf	___lwmod@divisor,w
  4513  16D0  1903               	skipnz
  4514  16D1  2EFB               	goto	l1949
  4515  16D2  01B3               	clrf	___lwmod@counter
  4516  16D3  0AB3               	incf	___lwmod@counter,f
  4517  16D4                     l1939:	
  4518  16D4  1BAF               	btfsc	___lwmod@divisor+1,7
  4519  16D5  2EE2               	goto	l1941
  4520  16D6  3001               	movlw	1
  4521  16D7                     u2175:	
  4522  16D7  1003               	clrc
  4523  16D8  0DAE               	rlf	___lwmod@divisor,f
  4524  16D9  0DAF               	rlf	___lwmod@divisor+1,f
  4525  16DA  3EFF               	addlw	-1
  4526  16DB  1D03               	skipz
  4527  16DC  2ED7               	goto	u2175
  4528  16DD  3001               	movlw	1
  4529  16DE  00B2               	movwf	??___lwmod
  4530  16DF  0832               	movf	??___lwmod,w
  4531  16E0  07B3               	addwf	___lwmod@counter,f
  4532  16E1  2ED4               	goto	l1939
  4533  16E2                     l1941:	
  4534  16E2  082F               	movf	___lwmod@divisor+1,w
  4535  16E3  0231               	subwf	___lwmod@dividend+1,w
  4536  16E4  1D03               	skipz
  4537  16E5  2EE8               	goto	u2195
  4538  16E6  082E               	movf	___lwmod@divisor,w
  4539  16E7  0230               	subwf	___lwmod@dividend,w
  4540  16E8                     u2195:	
  4541  16E8  1C03               	skipc
  4542  16E9  2EF0               	goto	l1945
  4543  16EA  082E               	movf	___lwmod@divisor,w
  4544  16EB  02B0               	subwf	___lwmod@dividend,f
  4545  16EC  082F               	movf	___lwmod@divisor+1,w
  4546  16ED  1C03               	skipc
  4547  16EE  03B1               	decf	___lwmod@dividend+1,f
  4548  16EF  02B1               	subwf	___lwmod@dividend+1,f
  4549  16F0                     l1945:	
  4550  16F0  3001               	movlw	1
  4551  16F1                     u2205:	
  4552  16F1  1003               	clrc
  4553  16F2  0CAF               	rrf	___lwmod@divisor+1,f
  4554  16F3  0CAE               	rrf	___lwmod@divisor,f
  4555  16F4  3EFF               	addlw	-1
  4556  16F5  1D03               	skipz
  4557  16F6  2EF1               	goto	u2205
  4558  16F7  3001               	movlw	1
  4559  16F8  02B3               	subwf	___lwmod@counter,f
  4560  16F9  1D03               	btfss	3,2
  4561  16FA  2EE2               	goto	l1941
  4562  16FB                     l1949:	
  4563  16FB  0831               	movf	___lwmod@dividend+1,w
  4564  16FC  01AF               	clrf	?___lwmod+1
  4565  16FD  07AF               	addwf	?___lwmod+1,f
  4566  16FE  0830               	movf	___lwmod@dividend,w
  4567  16FF  01AE               	clrf	?___lwmod
  4568  1700  07AE               	addwf	?___lwmod,f
  4569  1701  0008               	return
  4570  1702                     __end_of___lwmod:	
  4571                           
  4572                           	psect	text15
  4573  08C9                     __ptext15:	
  4574 ;; *************** function ___fttol *****************
  4575 ;; Defined at:
  4576 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;  f1              3   46[BANK0 ] float 
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;  lval            4   55[BANK0 ] unsigned long 
  4581 ;;  exp1            1   59[BANK0 ] unsigned char 
  4582 ;;  sign1           1   54[BANK0 ] unsigned char 
  4583 ;; Return value:  Size  Location     Type
  4584 ;;                  4   46[BANK0 ] long 
  4585 ;; Registers used:
  4586 ;;		wreg, status,2, status,0
  4587 ;; Tracked objects:
  4588 ;;		On entry : 0/0
  4589 ;;		On exit  : 0/0
  4590 ;;		Unchanged: 0/0
  4591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4592 ;;      Params:         0       4       0       0       0
  4593 ;;      Locals:         0       6       0       0       0
  4594 ;;      Temps:          0       4       0       0       0
  4595 ;;      Totals:         0      14       0       0       0
  4596 ;;Total ram usage:       14 bytes
  4597 ;; Hardware stack levels used:    1
  4598 ;; Hardware stack levels required when called:    2
  4599 ;; This function calls:
  4600 ;;		Nothing
  4601 ;; This function is called by:
  4602 ;;		_displayPPM
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           
  4607                           ;psect for function ___fttol
  4608  08C9                     ___fttol:	
  4609                           
  4610                           ;incstack = 0
  4611                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4612  08C9  1283               	bcf	3,5	;RP0=0, select bank0
  4613  08CA  1303               	bcf	3,6	;RP1=0, select bank0
  4614  08CB  084E               	movf	___fttol@f1,w
  4615  08CC  00D2               	movwf	??___fttol
  4616  08CD  084F               	movf	___fttol@f1+1,w
  4617  08CE  00D3               	movwf	??___fttol+1
  4618  08CF  0850               	movf	___fttol@f1+2,w
  4619  08D0  00D4               	movwf	??___fttol+2
  4620  08D1  1003               	clrc
  4621  08D2  0D53               	rlf	??___fttol+1,w
  4622  08D3  0D54               	rlf	??___fttol+2,w
  4623  08D4  00D5               	movwf	??___fttol+3
  4624  08D5  0855               	movf	??___fttol+3,w
  4625  08D6  00DB               	movwf	___fttol@exp1
  4626  08D7  08DB               	movf	___fttol@exp1,f
  4627  08D8  1D03               	skipz
  4628  08D9  28E3               	goto	l2313
  4629  08DA  3000               	movlw	0
  4630  08DB  00D1               	movwf	?___fttol+3
  4631  08DC  3000               	movlw	0
  4632  08DD  00D0               	movwf	?___fttol+2
  4633  08DE  3000               	movlw	0
  4634  08DF  00CF               	movwf	?___fttol+1
  4635  08E0  3000               	movlw	0
  4636  08E1  00CE               	movwf	?___fttol
  4637  08E2  0008               	return
  4638  08E3                     l2313:	
  4639  08E3  084E               	movf	___fttol@f1,w
  4640  08E4  00D2               	movwf	??___fttol
  4641  08E5  084F               	movf	___fttol@f1+1,w
  4642  08E6  00D3               	movwf	??___fttol+1
  4643  08E7  0850               	movf	___fttol@f1+2,w
  4644  08E8  00D4               	movwf	??___fttol+2
  4645  08E9  3017               	movlw	23
  4646  08EA                     u3005:	
  4647  08EA  1003               	clrc
  4648  08EB  0CD4               	rrf	??___fttol+2,f
  4649  08EC  0CD3               	rrf	??___fttol+1,f
  4650  08ED  0CD2               	rrf	??___fttol,f
  4651  08EE  3EFF               	addlw	-1
  4652  08EF  1D03               	skipz
  4653  08F0  28EA               	goto	u3005
  4654  08F1  0852               	movf	??___fttol,w
  4655  08F2  00D5               	movwf	??___fttol+3
  4656  08F3  0855               	movf	??___fttol+3,w
  4657  08F4  00D6               	movwf	___fttol@sign1
  4658  08F5  17CF               	bsf	___fttol@f1+1,7
  4659  08F6  30FF               	movlw	255
  4660  08F7  05CE               	andwf	___fttol@f1,f
  4661  08F8  30FF               	movlw	255
  4662  08F9  05CF               	andwf	___fttol@f1+1,f
  4663  08FA  3000               	movlw	0
  4664  08FB  05D0               	andwf	___fttol@f1+2,f
  4665  08FC  084E               	movf	___fttol@f1,w
  4666  08FD  00D7               	movwf	___fttol@lval
  4667  08FE  084F               	movf	___fttol@f1+1,w
  4668  08FF  00D8               	movwf	___fttol@lval+1
  4669  0900  0850               	movf	___fttol@f1+2,w
  4670  0901  00D9               	movwf	___fttol@lval+2
  4671  0902  01DA               	clrf	___fttol@lval+3
  4672  0903  308E               	movlw	142
  4673  0904  02DB               	subwf	___fttol@exp1,f
  4674  0905  1FDB               	btfss	___fttol@exp1,7
  4675  0906  2925               	goto	l2333
  4676  0907  085B               	movf	___fttol@exp1,w
  4677  0908  3A80               	xorlw	128
  4678  0909  3E8F               	addlw	143
  4679  090A  1803               	skipnc
  4680  090B  2915               	goto	l2331
  4681  090C  3000               	movlw	0
  4682  090D  00D1               	movwf	?___fttol+3
  4683  090E  3000               	movlw	0
  4684  090F  00D0               	movwf	?___fttol+2
  4685  0910  3000               	movlw	0
  4686  0911  00CF               	movwf	?___fttol+1
  4687  0912  3000               	movlw	0
  4688  0913  00CE               	movwf	?___fttol
  4689  0914  0008               	return
  4690  0915                     l2331:	
  4691  0915  3001               	movlw	1
  4692  0916                     u3035:	
  4693  0916  1003               	clrc
  4694  0917  0CDA               	rrf	___fttol@lval+3,f
  4695  0918  0CD9               	rrf	___fttol@lval+2,f
  4696  0919  0CD8               	rrf	___fttol@lval+1,f
  4697  091A  0CD7               	rrf	___fttol@lval,f
  4698  091B  3EFF               	addlw	-1
  4699  091C  1D03               	skipz
  4700  091D  2916               	goto	u3035
  4701  091E  3001               	movlw	1
  4702  091F  00D2               	movwf	??___fttol
  4703  0920  0852               	movf	??___fttol,w
  4704  0921  07DB               	addwf	___fttol@exp1,f
  4705  0922  1903               	btfsc	3,2
  4706  0923  2940               	goto	l2343
  4707  0924  2915               	goto	l2331
  4708  0925                     l2333:	
  4709  0925  3018               	movlw	24
  4710  0926  025B               	subwf	___fttol@exp1,w
  4711  0927  1C03               	skipc
  4712  0928  293D               	goto	l2341
  4713  0929  3000               	movlw	0
  4714  092A  00D1               	movwf	?___fttol+3
  4715  092B  3000               	movlw	0
  4716  092C  00D0               	movwf	?___fttol+2
  4717  092D  3000               	movlw	0
  4718  092E  00CF               	movwf	?___fttol+1
  4719  092F  3000               	movlw	0
  4720  0930  00CE               	movwf	?___fttol
  4721  0931  0008               	return
  4722  0932                     l2339:	
  4723  0932  3001               	movlw	1
  4724  0933  00D2               	movwf	??___fttol
  4725  0934                     u3065:	
  4726  0934  1003               	clrc
  4727  0935  0DD7               	rlf	___fttol@lval,f
  4728  0936  0DD8               	rlf	___fttol@lval+1,f
  4729  0937  0DD9               	rlf	___fttol@lval+2,f
  4730  0938  0DDA               	rlf	___fttol@lval+3,f
  4731  0939  0BD2               	decfsz	??___fttol,f
  4732  093A  2934               	goto	u3065
  4733  093B  3001               	movlw	1
  4734  093C  02DB               	subwf	___fttol@exp1,f
  4735  093D                     l2341:	
  4736  093D  08DB               	movf	___fttol@exp1,f
  4737  093E  1D03               	skipz
  4738  093F  2932               	goto	l2339
  4739  0940                     l2343:	
  4740  0940  0856               	movf	___fttol@sign1,w
  4741  0941  1903               	btfsc	3,2
  4742  0942  294E               	goto	l2347
  4743  0943  09D7               	comf	___fttol@lval,f
  4744  0944  09D8               	comf	___fttol@lval+1,f
  4745  0945  09D9               	comf	___fttol@lval+2,f
  4746  0946  09DA               	comf	___fttol@lval+3,f
  4747  0947  0AD7               	incf	___fttol@lval,f
  4748  0948  1903               	skipnz
  4749  0949  0AD8               	incf	___fttol@lval+1,f
  4750  094A  1903               	skipnz
  4751  094B  0AD9               	incf	___fttol@lval+2,f
  4752  094C  1903               	skipnz
  4753  094D  0ADA               	incf	___fttol@lval+3,f
  4754  094E                     l2347:	
  4755  094E  085A               	movf	___fttol@lval+3,w
  4756  094F  00D1               	movwf	?___fttol+3
  4757  0950  0859               	movf	___fttol@lval+2,w
  4758  0951  00D0               	movwf	?___fttol+2
  4759  0952  0858               	movf	___fttol@lval+1,w
  4760  0953  00CF               	movwf	?___fttol+1
  4761  0954  0857               	movf	___fttol@lval,w
  4762  0955  00CE               	movwf	?___fttol
  4763  0956  0008               	return
  4764  0957                     __end_of___fttol:	
  4765                           
  4766                           	psect	text16
  4767  13E3                     __ptext16:	
  4768 ;; *************** function ___ftneg *****************
  4769 ;; Defined at:
  4770 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;  f1              3   14[BANK0 ] float 
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;		None
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  3   14[BANK0 ] float 
  4777 ;; Registers used:
  4778 ;;		wreg
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4784 ;;      Params:         0       3       0       0       0
  4785 ;;      Locals:         0       0       0       0       0
  4786 ;;      Temps:          0       0       0       0       0
  4787 ;;      Totals:         0       3       0       0       0
  4788 ;;Total ram usage:        3 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; Hardware stack levels required when called:    2
  4791 ;; This function calls:
  4792 ;;		Nothing
  4793 ;; This function is called by:
  4794 ;;		_displayPPM
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           
  4799                           ;psect for function ___ftneg
  4800  13E3                     ___ftneg:	
  4801                           
  4802                           ;incstack = 0
  4803                           ; Regs used in ___ftneg: [wreg]
  4804  13E3  1283               	bcf	3,5	;RP0=0, select bank0
  4805  13E4  1303               	bcf	3,6	;RP1=0, select bank0
  4806  13E5  0830               	movf	___ftneg@f1+2,w
  4807  13E6  042F               	iorwf	___ftneg@f1+1,w
  4808  13E7  042E               	iorwf	___ftneg@f1,w
  4809  13E8  1903               	skipnz
  4810  13E9  0008               	return
  4811  13EA  3080               	movlw	128
  4812  13EB  06B0               	xorwf	___ftneg@f1+2,f
  4813  13EC  0008               	return
  4814  13ED                     __end_of___ftneg:	
  4815                           
  4816                           	psect	text17
  4817  1445                     __ptext17:	
  4818 ;; *************** function _startUpLCD *****************
  4819 ;; Defined at:
  4820 ;;		line 69 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;		None
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;		None
  4825 ;; Return value:  Size  Location     Type
  4826 ;;		None               void
  4827 ;; Registers used:
  4828 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4834 ;;      Params:         0       0       0       0       0
  4835 ;;      Locals:         0       0       0       0       0
  4836 ;;      Temps:          0       0       0       0       0
  4837 ;;      Totals:         0       0       0       0       0
  4838 ;;Total ram usage:        0 bytes
  4839 ;; Hardware stack levels used:    1
  4840 ;; Hardware stack levels required when called:    4
  4841 ;; This function calls:
  4842 ;;		_initLCD
  4843 ;;		_instCTRL
  4844 ;;		_printToLCD
  4845 ;; This function is called by:
  4846 ;;		_main
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           
  4851                           ;psect for function _startUpLCD
  4852  1445                     _startUpLCD:	
  4853                           
  4854                           ;main.c: 71: initLCD();
  4855                           
  4856                           ;incstack = 0
  4857                           ; Regs used in _startUpLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4858  1445  160A  118A  252F  160A  118A  	fcall	_initLCD
  4859                           
  4860                           ;main.c: 72: instCTRL(0x80);
  4861  144A  3080               	movlw	128
  4862  144B  160A  118A  241F  160A  118A  	fcall	_instCTRL
  4863                           
  4864                           ;main.c: 73: printToLCD("PWR ON");
  4865  1450  30FE               	movlw	low (STR_22| (0+32768))
  4866  1451  1283               	bcf	3,5	;RP0=0, select bank0
  4867  1452  1303               	bcf	3,6	;RP1=0, select bank0
  4868  1453  00A2               	movwf	printToLCD@str
  4869  1454  3090               	movlw	high (STR_22| (0+32768))
  4870  1455  00A3               	movwf	printToLCD@str+1
  4871  1456  160A  118A  260E   	fcall	_printToLCD
  4872  1459  0008               	return
  4873  145A                     __end_of_startUpLCD:	
  4874                           
  4875                           	psect	text18
  4876  160E                     __ptext18:	
  4877 ;; *************** function _printToLCD *****************
  4878 ;; Defined at:
  4879 ;;		line 47 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\lcd_functions.h"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;  str             2    2[BANK0 ] PTR const unsigned char 
  4882 ;;		 -> STR_34(11), STR_33(12), STR_32(10), STR_31(14), 
  4883 ;;		 -> STR_30(12), STR_29(10), STR_28(16), STR_27(15), 
  4884 ;;		 -> updateState@buffer(10), STR_24(15), STR_23(7), STR_22(7), 
  4885 ;;		 -> STR_21(8), STR_20(9), displayTemp@buffer(20), debugInfo(10), 
  4886 ;;		 -> displayTime@timeFormat(16), STR_5(8), STR_4(8), displayPPM@strBuffer(20), 
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;		None
  4889 ;; Return value:  Size  Location     Type
  4890 ;;		None               void
  4891 ;; Registers used:
  4892 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4898 ;;      Params:         0       2       0       0       0
  4899 ;;      Locals:         0       0       0       0       0
  4900 ;;      Temps:          0       0       0       0       0
  4901 ;;      Totals:         0       2       0       0       0
  4902 ;;Total ram usage:        2 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    3
  4905 ;; This function calls:
  4906 ;;		_dataCTRL
  4907 ;;		_instCTRL
  4908 ;; This function is called by:
  4909 ;;		_displayPPM
  4910 ;;		_printStatusPPM
  4911 ;;		_displayTime
  4912 ;;		_setHoursStart
  4913 ;;		_setHoursEnd
  4914 ;;		_setMinutesStart
  4915 ;;		_setMinutesEnd
  4916 ;;		_displayTemp
  4917 ;;		_printStatusTMP
  4918 ;;		_startUpLCD
  4919 ;;		_updateState
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           
  4924                           ;psect for function _printToLCD
  4925  160E                     _printToLCD:	
  4926                           
  4927                           ;lcd_functions.h: 49: instCTRL(0x0C);
  4928                           
  4929                           ;incstack = 0
  4930                           ; Regs used in _printToLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4931  160E  300C               	movlw	12
  4932  160F  160A  118A  241F  160A  118A  	fcall	_instCTRL
  4933  1614                     l2841:	
  4934                           ;lcd_functions.h: 50: while (*str)
  4935                           
  4936  1614  1283               	bcf	3,5	;RP0=0, select bank0
  4937  1615  1303               	bcf	3,6	;RP1=0, select bank0
  4938  1616  0823               	movf	printToLCD@str+1,w
  4939  1617  00FF               	movwf	127
  4940  1618  0822               	movf	printToLCD@str,w
  4941  1619  0084               	movwf	4
  4942  161A  160A  118A  2000  160A  118A  	fcall	stringtab
  4943  161F  3800               	iorlw	0
  4944  1620  1903               	btfsc	3,2
  4945  1621  0008               	return
  4946                           
  4947                           ;lcd_functions.h: 51: {
  4948                           ;lcd_functions.h: 52: dataCTRL(*str);
  4949  1622  1283               	bcf	3,5	;RP0=0, select bank0
  4950  1623  1303               	bcf	3,6	;RP1=0, select bank0
  4951  1624  0823               	movf	printToLCD@str+1,w
  4952  1625  00FF               	movwf	127
  4953  1626  0822               	movf	printToLCD@str,w
  4954  1627  0084               	movwf	4
  4955  1628  160A  118A  2000  160A  118A  	fcall	stringtab
  4956  162D  160A  118A  2432  160A  118A  	fcall	_dataCTRL
  4957                           
  4958                           ;lcd_functions.h: 53: str++;
  4959  1632  3001               	movlw	1
  4960  1633  1283               	bcf	3,5	;RP0=0, select bank0
  4961  1634  1303               	bcf	3,6	;RP1=0, select bank0
  4962  1635  07A2               	addwf	printToLCD@str,f
  4963  1636  1803               	skipnc
  4964  1637  0AA3               	incf	printToLCD@str+1,f
  4965  1638  2E14               	goto	l2841
  4966  1639                     __end_of_printToLCD:	
  4967                           
  4968                           	psect	text19
  4969  1432                     __ptext19:	
  4970 ;; *************** function _dataCTRL *****************
  4971 ;; Defined at:
  4972 ;;		line 27 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\lcd_functions.h"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;  DAT             1    wreg     unsigned char 
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;  DAT             1    1[BANK0 ] unsigned char 
  4977 ;; Return value:  Size  Location     Type
  4978 ;;		None               void
  4979 ;; Registers used:
  4980 ;;		wreg
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4986 ;;      Params:         0       0       0       0       0
  4987 ;;      Locals:         0       1       0       0       0
  4988 ;;      Temps:          0       1       0       0       0
  4989 ;;      Totals:         0       2       0       0       0
  4990 ;;Total ram usage:        2 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:    2
  4993 ;; This function calls:
  4994 ;;		Nothing
  4995 ;; This function is called by:
  4996 ;;		_printToLCD
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           
  5001                           ;psect for function _dataCTRL
  5002  1432                     _dataCTRL:	
  5003                           
  5004                           ;incstack = 0
  5005                           ; Regs used in _dataCTRL: [wreg]
  5006                           ;dataCTRL@DAT stored from wreg
  5007  1432  1283               	bcf	3,5	;RP0=0, select bank0
  5008  1433  1303               	bcf	3,6	;RP1=0, select bank0
  5009  1434  00A1               	movwf	dataCTRL@DAT
  5010                           
  5011                           ;lcd_functions.h: 29: PORTD = DAT;
  5012  1435  0821               	movf	dataCTRL@DAT,w
  5013  1436  0088               	movwf	8	;volatile
  5014                           
  5015                           ;lcd_functions.h: 30: RC0 = 1;
  5016  1437  1407               	bsf	7,0	;volatile
  5017                           
  5018                           ;lcd_functions.h: 31: RC1 = 0;
  5019  1438  1087               	bcf	7,1	;volatile
  5020                           
  5021                           ;lcd_functions.h: 32: RC2 = 1;
  5022  1439  1507               	bsf	7,2	;volatile
  5023                           
  5024                           ;lcd_functions.h: 33: _delay((unsigned long)((1)*(4000000/4000.0)));
  5025  143A  30F9               	movlw	249
  5026  143B  00A0               	movwf	??_dataCTRL
  5027  143C                     u4807:	
  5028  143C  0000               	nop
  5029  143D  0BA0               	decfsz	??_dataCTRL,f
  5030  143E  2C3C               	goto	u4807
  5031  143F  2C40               	nop2	;nop
  5032  1440  0000               	nop
  5033                           
  5034                           ;lcd_functions.h: 34: RC2 = 0;
  5035  1441  1283               	bcf	3,5	;RP0=0, select bank0
  5036  1442  1303               	bcf	3,6	;RP1=0, select bank0
  5037  1443  1107               	bcf	7,2	;volatile
  5038  1444  0008               	return
  5039  1445                     __end_of_dataCTRL:	
  5040                           
  5041                           	psect	text20
  5042  152F                     __ptext20:	
  5043 ;; *************** function _initLCD *****************
  5044 ;; Defined at:
  5045 ;;		line 37 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\lcd_functions.h"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;		None
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;		None
  5050 ;; Return value:  Size  Location     Type
  5051 ;;		None               void
  5052 ;; Registers used:
  5053 ;;		wreg, status,2, status,0, pclath, cstack
  5054 ;; Tracked objects:
  5055 ;;		On entry : 0/0
  5056 ;;		On exit  : 0/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5059 ;;      Params:         0       0       0       0       0
  5060 ;;      Locals:         0       0       0       0       0
  5061 ;;      Temps:          0       1       0       0       0
  5062 ;;      Totals:         0       1       0       0       0
  5063 ;;Total ram usage:        1 bytes
  5064 ;; Hardware stack levels used:    1
  5065 ;; Hardware stack levels required when called:    3
  5066 ;; This function calls:
  5067 ;;		_instCTRL
  5068 ;; This function is called by:
  5069 ;;		_startUpLCD
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           
  5074                           ;psect for function _initLCD
  5075  152F                     _initLCD:	
  5076                           
  5077                           ;lcd_functions.h: 39: instCTRL(0x38);
  5078                           
  5079                           ;incstack = 0
  5080                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  5081  152F  3038               	movlw	56
  5082  1530  160A  118A  241F  160A  118A  	fcall	_instCTRL
  5083                           
  5084                           ;lcd_functions.h: 40: _delay((unsigned long)((50)*(4000000/4000000.0)));
  5085  1535  3010               	movlw	16
  5086  1536  1283               	bcf	3,5	;RP0=0, select bank0
  5087  1537  1303               	bcf	3,6	;RP1=0, select bank0
  5088  1538  00A2               	movwf	??_initLCD
  5089  1539                     u4817:	
  5090  1539  0BA2               	decfsz	??_initLCD,f
  5091  153A  2D39               	goto	u4817
  5092  153B  0000               	nop
  5093                           
  5094                           ;lcd_functions.h: 41: instCTRL(0x0C);
  5095  153C  300C               	movlw	12
  5096  153D  160A  118A  241F  160A  118A  	fcall	_instCTRL
  5097                           
  5098                           ;lcd_functions.h: 42: instCTRL(0x01);
  5099  1542  3001               	movlw	1
  5100  1543  160A  118A  241F  160A  118A  	fcall	_instCTRL
  5101                           
  5102                           ;lcd_functions.h: 43: instCTRL(0x06);
  5103  1548  3006               	movlw	6
  5104  1549  160A  118A  241F  160A  118A  	fcall	_instCTRL
  5105                           
  5106                           ;lcd_functions.h: 44: instCTRL(0x0F);
  5107  154E  300F               	movlw	15
  5108  154F  160A  118A  241F   	fcall	_instCTRL
  5109  1552  0008               	return
  5110  1553                     __end_of_initLCD:	
  5111                           
  5112                           	psect	text21
  5113  13ED                     __ptext21:	
  5114 ;; *************** function _setPortDirections *****************
  5115 ;; Defined at:
  5116 ;;		line 51 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;		None
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;		None
  5121 ;; Return value:  Size  Location     Type
  5122 ;;		None               void
  5123 ;; Registers used:
  5124 ;;		wreg, status,2
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5130 ;;      Params:         0       0       0       0       0
  5131 ;;      Locals:         0       0       0       0       0
  5132 ;;      Temps:          0       0       0       0       0
  5133 ;;      Totals:         0       0       0       0       0
  5134 ;;Total ram usage:        0 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    2
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_main
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           
  5145                           ;psect for function _setPortDirections
  5146  13ED                     _setPortDirections:	
  5147                           
  5148                           ;main.c: 53: TRISA = 0xFF;
  5149                           
  5150                           ;incstack = 0
  5151                           ; Regs used in _setPortDirections: [wreg+status,2]
  5152  13ED  30FF               	movlw	255
  5153  13EE  1683               	bsf	3,5	;RP0=1, select bank1
  5154  13EF  1303               	bcf	3,6	;RP1=0, select bank1
  5155  13F0  0085               	movwf	5	;volatile
  5156                           
  5157                           ;main.c: 54: TRISB = 0xFF;
  5158  13F1  30FF               	movlw	255
  5159  13F2  0086               	movwf	6	;volatile
  5160                           
  5161                           ;main.c: 55: TRISC = 0x00;
  5162  13F3  0187               	clrf	7	;volatile
  5163                           
  5164                           ;main.c: 56: TRISD = 0x00;
  5165  13F4  0188               	clrf	8	;volatile
  5166                           
  5167                           ;main.c: 57: PORTA = 0x00;
  5168  13F5  1283               	bcf	3,5	;RP0=0, select bank0
  5169  13F6  1303               	bcf	3,6	;RP1=0, select bank0
  5170  13F7  0185               	clrf	5	;volatile
  5171                           
  5172                           ;main.c: 58: PORTB = 0x00;
  5173  13F8  0186               	clrf	6	;volatile
  5174                           
  5175                           ;main.c: 59: PORTC = 0x00;
  5176  13F9  0187               	clrf	7	;volatile
  5177                           
  5178                           ;main.c: 60: PORTD = 0x00;
  5179  13FA  0188               	clrf	8	;volatile
  5180  13FB  0008               	return
  5181  13FC                     __end_of_setPortDirections:	
  5182                           
  5183                           	psect	text22
  5184  150B                     __ptext22:	
  5185 ;; *************** function _runMQ135 *****************
  5186 ;; Defined at:
  5187 ;;		line 32 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\mq135_module.h"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;		None
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;		None
  5192 ;; Return value:  Size  Location     Type
  5193 ;;		None               void
  5194 ;; Registers used:
  5195 ;;		wreg, status,2, status,0, pclath, cstack
  5196 ;; Tracked objects:
  5197 ;;		On entry : 0/0
  5198 ;;		On exit  : 0/0
  5199 ;;		Unchanged: 0/0
  5200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5201 ;;      Params:         0       0       0       0       0
  5202 ;;      Locals:         0       0       0       0       0
  5203 ;;      Temps:          0       0       0       0       0
  5204 ;;      Totals:         0       0       0       0       0
  5205 ;;Total ram usage:        0 bytes
  5206 ;; Hardware stack levels used:    1
  5207 ;; Hardware stack levels required when called:    5
  5208 ;; This function calls:
  5209 ;;		_CalcMQ135
  5210 ;;		_readADC
  5211 ;; This function is called by:
  5212 ;;		_main
  5213 ;; This function uses a non-reentrant model
  5214 ;;
  5215                           
  5216                           
  5217                           ;psect for function _runMQ135
  5218  150B                     _runMQ135:	
  5219                           
  5220                           ;mq135_module.h: 34: PPM = CalcMQ135(readADC(0));
  5221                           
  5222                           ;incstack = 0
  5223                           ; Regs used in _runMQ135: [wreg+status,2+status,0+pclath+cstack]
  5224  150B  3000               	movlw	0
  5225  150C  160A  118A  25E5  160A  118A  	fcall	_readADC
  5226  1511  1283               	bcf	3,5	;RP0=0, select bank0
  5227  1512  1303               	bcf	3,6	;RP1=0, select bank0
  5228  1513  0821               	movf	?_readADC+1,w
  5229  1514  01DF               	clrf	CalcMQ135@RAW_ADC+1
  5230  1515  07DF               	addwf	CalcMQ135@RAW_ADC+1,f
  5231  1516  0820               	movf	?_readADC,w
  5232  1517  01DE               	clrf	CalcMQ135@RAW_ADC
  5233  1518  07DE               	addwf	CalcMQ135@RAW_ADC,f
  5234  1519  120A  118A  2051   	fcall	_CalcMQ135
  5235  151C  1283               	bcf	3,5	;RP0=0, select bank0
  5236  151D  1303               	bcf	3,6	;RP1=0, select bank0
  5237  151E  085E               	movf	?_CalcMQ135,w
  5238  151F  1683               	bsf	3,5	;RP0=1, select bank1
  5239  1520  1303               	bcf	3,6	;RP1=0, select bank1
  5240  1521  00C7               	movwf	_PPM^(0+128)	;volatile
  5241  1522  1283               	bcf	3,5	;RP0=0, select bank0
  5242  1523  1303               	bcf	3,6	;RP1=0, select bank0
  5243  1524  085F               	movf	?_CalcMQ135+1,w
  5244  1525  1683               	bsf	3,5	;RP0=1, select bank1
  5245  1526  1303               	bcf	3,6	;RP1=0, select bank1
  5246  1527  00C8               	movwf	(_PPM+1)^(0+128)	;volatile
  5247  1528  1283               	bcf	3,5	;RP0=0, select bank0
  5248  1529  1303               	bcf	3,6	;RP1=0, select bank0
  5249  152A  0860               	movf	?_CalcMQ135+2,w
  5250  152B  1683               	bsf	3,5	;RP0=1, select bank1
  5251  152C  1303               	bcf	3,6	;RP1=0, select bank1
  5252  152D  00C9               	movwf	(_PPM+2)^(0+128)	;volatile
  5253  152E  0008               	return
  5254  152F                     __end_of_runMQ135:	
  5255                           
  5256                           	psect	text23
  5257  15E5                     __ptext23:	
  5258 ;; *************** function _readADC *****************
  5259 ;; Defined at:
  5260 ;;		line 23 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\common_dependenc
      +ies.h"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;  channel         1    wreg     unsigned char 
  5263 ;; Auto vars:     Size  Location     Type
  5264 ;;  channel         1    4[BANK0 ] unsigned char 
  5265 ;; Return value:  Size  Location     Type
  5266 ;;                  2    0[BANK0 ] int 
  5267 ;; Registers used:
  5268 ;;		wreg, status,2, status,0
  5269 ;; Tracked objects:
  5270 ;;		On entry : 0/0
  5271 ;;		On exit  : 0/0
  5272 ;;		Unchanged: 0/0
  5273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5274 ;;      Params:         0       2       0       0       0
  5275 ;;      Locals:         0       1       0       0       0
  5276 ;;      Temps:          0       2       0       0       0
  5277 ;;      Totals:         0       5       0       0       0
  5278 ;;Total ram usage:        5 bytes
  5279 ;; Hardware stack levels used:    1
  5280 ;; Hardware stack levels required when called:    2
  5281 ;; This function calls:
  5282 ;;		Nothing
  5283 ;; This function is called by:
  5284 ;;		_runMQ135
  5285 ;;		_main
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           
  5290                           ;psect for function _readADC
  5291  15E5                     _readADC:	
  5292                           
  5293                           ;incstack = 0
  5294                           ; Regs used in _readADC: [wreg+status,2+status,0]
  5295                           ;readADC@channel stored from wreg
  5296  15E5  1283               	bcf	3,5	;RP0=0, select bank0
  5297  15E6  1303               	bcf	3,6	;RP1=0, select bank0
  5298  15E7  00A4               	movwf	readADC@channel
  5299                           
  5300                           ;common_dependencies.h: 25: ADCON0 &= 0xC3;
  5301  15E8  30C3               	movlw	195
  5302  15E9  00A2               	movwf	??_readADC
  5303  15EA  0822               	movf	??_readADC,w
  5304  15EB  059F               	andwf	31,f	;volatile
  5305                           
  5306                           ;common_dependencies.h: 26: ADCON0 |= (channel << 3);
  5307  15EC  0824               	movf	readADC@channel,w
  5308  15ED  00A2               	movwf	??_readADC
  5309  15EE  3002               	movlw	2
  5310  15EF                     u3095:	
  5311  15EF  1003               	clrc
  5312  15F0  0DA2               	rlf	??_readADC,f
  5313  15F1  3EFF               	addlw	-1
  5314  15F2  1D03               	skipz
  5315  15F3  2DEF               	goto	u3095
  5316  15F4  1003               	clrc
  5317  15F5  0D22               	rlf	??_readADC,w
  5318  15F6  00A3               	movwf	??_readADC+1
  5319  15F7  0823               	movf	??_readADC+1,w
  5320  15F8  049F               	iorwf	31,f	;volatile
  5321                           
  5322                           ;common_dependencies.h: 27: _delay((unsigned long)((20)*(4000000/4000000.0)));
  5323  15F9  3006               	movlw	6
  5324  15FA  00A2               	movwf	??_readADC
  5325  15FB                     u4827:	
  5326  15FB  0BA2               	decfsz	??_readADC,f
  5327  15FC  2DFB               	goto	u4827
  5328  15FD  0000               	nop
  5329                           
  5330                           ;common_dependencies.h: 28: GO_DONE = 1;
  5331  15FE  1283               	bcf	3,5	;RP0=0, select bank0
  5332  15FF  1303               	bcf	3,6	;RP1=0, select bank0
  5333  1600  151F               	bsf	31,2	;volatile
  5334  1601                     l71:	
  5335                           ;common_dependencies.h: 30: ;
  5336                           
  5337                           ;common_dependencies.h: 29: while (GO_DONE)
  5338                           
  5339  1601  191F               	btfsc	31,2	;volatile
  5340  1602  2E01               	goto	l71
  5341                           
  5342                           ;common_dependencies.h: 31: return ((ADRESH << 8) + ADRESL);
  5343  1603  081E               	movf	30,w	;volatile
  5344  1604  01A1               	clrf	?_readADC+1
  5345  1605  07A1               	addwf	?_readADC+1,f
  5346  1606  1683               	bsf	3,5	;RP0=1, select bank1
  5347  1607  1303               	bcf	3,6	;RP1=0, select bank1
  5348  1608  081E               	movf	30,w	;volatile
  5349  1609  1283               	bcf	3,5	;RP0=0, select bank0
  5350  160A  1303               	bcf	3,6	;RP1=0, select bank0
  5351  160B  01A0               	clrf	?_readADC
  5352  160C  07A0               	addwf	?_readADC,f
  5353  160D  0008               	return
  5354  160E                     __end_of_readADC:	
  5355                           
  5356                           	psect	text24
  5357  0051                     __ptext24:	
  5358 ;; *************** function _CalcMQ135 *****************
  5359 ;; Defined at:
  5360 ;;		line 93 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\mq135_module.h"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;  RAW_ADC         2   62[BANK0 ] int 
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;  ratio           3   36[BANK1 ] float 
  5365 ;;  co2             3   33[BANK1 ] float 
  5366 ;;  ratio5          3   30[BANK1 ] float 
  5367 ;;  ratio4          3   27[BANK1 ] float 
  5368 ;;  ratio3          3   24[BANK1 ] float 
  5369 ;;  ratio2          3   21[BANK1 ] float 
  5370 ;;  ratio6          3    3[BANK1 ] float 
  5371 ;;  voltage         3    0[BANK1 ] float 
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  3   62[BANK0 ] float 
  5374 ;; Registers used:
  5375 ;;		wreg, status,2, status,0, pclath, cstack
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5381 ;;      Params:         0       3       0       0       0
  5382 ;;      Locals:         0       0      39       0       0
  5383 ;;      Temps:          0       0       0       0       0
  5384 ;;      Totals:         0       3      39       0       0
  5385 ;;Total ram usage:       42 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; Hardware stack levels required when called:    4
  5388 ;; This function calls:
  5389 ;;		___awtoft
  5390 ;;		___ftadd
  5391 ;;		___ftdiv
  5392 ;;		___ftmul
  5393 ;; This function is called by:
  5394 ;;		_runMQ135
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           
  5399                           ;psect for function _CalcMQ135
  5400  0051                     _CalcMQ135:	
  5401                           
  5402                           ;mq135_module.h: 95: float voltage = (RAW_ADC * 5.0) / 1023.0;
  5403                           
  5404                           ;incstack = 0
  5405                           ; Regs used in _CalcMQ135: [wreg+status,2+status,0+pclath+cstack]
  5406  0051  30C0               	movlw	192
  5407  0052  1283               	bcf	3,5	;RP0=0, select bank0
  5408  0053  1303               	bcf	3,6	;RP1=0, select bank0
  5409  0054  00CE               	movwf	___ftdiv@f2
  5410  0055  307F               	movlw	127
  5411  0056  00CF               	movwf	___ftdiv@f2+1
  5412  0057  3044               	movlw	68
  5413  0058  00D0               	movwf	___ftdiv@f2+2
  5414  0059  3000               	movlw	0
  5415  005A  00BE               	movwf	___ftmul@f1
  5416  005B  30A0               	movlw	160
  5417  005C  00BF               	movwf	___ftmul@f1+1
  5418  005D  3040               	movlw	64
  5419  005E  00C0               	movwf	___ftmul@f1+2
  5420  005F  085F               	movf	CalcMQ135@RAW_ADC+1,w
  5421  0060  01A9               	clrf	___awtoft@c+1
  5422  0061  07A9               	addwf	___awtoft@c+1,f
  5423  0062  085E               	movf	CalcMQ135@RAW_ADC,w
  5424  0063  01A8               	clrf	___awtoft@c
  5425  0064  07A8               	addwf	___awtoft@c,f
  5426  0065  160A  118A  25C0  120A  118A  	fcall	___awtoft
  5427  006A  1283               	bcf	3,5	;RP0=0, select bank0
  5428  006B  1303               	bcf	3,6	;RP1=0, select bank0
  5429  006C  0828               	movf	?___awtoft,w
  5430  006D  00C1               	movwf	___ftmul@f2
  5431  006E  0829               	movf	?___awtoft+1,w
  5432  006F  00C2               	movwf	___ftmul@f2+1
  5433  0070  082A               	movf	?___awtoft+2,w
  5434  0071  00C3               	movwf	___ftmul@f2+2
  5435  0072  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5436  0077  1283               	bcf	3,5	;RP0=0, select bank0
  5437  0078  1303               	bcf	3,6	;RP1=0, select bank0
  5438  0079  083E               	movf	?___ftmul,w
  5439  007A  00D1               	movwf	___ftdiv@f1
  5440  007B  083F               	movf	?___ftmul+1,w
  5441  007C  00D2               	movwf	___ftdiv@f1+1
  5442  007D  0840               	movf	?___ftmul+2,w
  5443  007E  00D3               	movwf	___ftdiv@f1+2
  5444  007F  120A  158A  2203  120A  118A  	fcall	___ftdiv
  5445  0084  1283               	bcf	3,5	;RP0=0, select bank0
  5446  0085  1303               	bcf	3,6	;RP1=0, select bank0
  5447  0086  084E               	movf	?___ftdiv,w
  5448  0087  1683               	bsf	3,5	;RP0=1, select bank1
  5449  0088  1303               	bcf	3,6	;RP1=0, select bank1
  5450  0089  00A0               	movwf	CalcMQ135@voltage^(0+128)
  5451  008A  1283               	bcf	3,5	;RP0=0, select bank0
  5452  008B  1303               	bcf	3,6	;RP1=0, select bank0
  5453  008C  084F               	movf	?___ftdiv+1,w
  5454  008D  1683               	bsf	3,5	;RP0=1, select bank1
  5455  008E  1303               	bcf	3,6	;RP1=0, select bank1
  5456  008F  00A1               	movwf	(CalcMQ135@voltage+1)^(0+128)
  5457  0090  1283               	bcf	3,5	;RP0=0, select bank0
  5458  0091  1303               	bcf	3,6	;RP1=0, select bank0
  5459  0092  0850               	movf	?___ftdiv+2,w
  5460  0093  1683               	bsf	3,5	;RP0=1, select bank1
  5461  0094  1303               	bcf	3,6	;RP1=0, select bank1
  5462  0095  00A2               	movwf	(CalcMQ135@voltage+2)^(0+128)
  5463                           
  5464                           ;mq135_module.h: 96: float ratio = voltage / 5.0;
  5465  0096  3000               	movlw	0
  5466  0097  1283               	bcf	3,5	;RP0=0, select bank0
  5467  0098  1303               	bcf	3,6	;RP1=0, select bank0
  5468  0099  00CE               	movwf	___ftdiv@f2
  5469  009A  30A0               	movlw	160
  5470  009B  00CF               	movwf	___ftdiv@f2+1
  5471  009C  3040               	movlw	64
  5472  009D  00D0               	movwf	___ftdiv@f2+2
  5473  009E  1683               	bsf	3,5	;RP0=1, select bank1
  5474  009F  1303               	bcf	3,6	;RP1=0, select bank1
  5475  00A0  0820               	movf	CalcMQ135@voltage^(0+128),w
  5476  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  5477  00A2  1303               	bcf	3,6	;RP1=0, select bank0
  5478  00A3  00D1               	movwf	___ftdiv@f1
  5479  00A4  1683               	bsf	3,5	;RP0=1, select bank1
  5480  00A5  1303               	bcf	3,6	;RP1=0, select bank1
  5481  00A6  0821               	movf	(CalcMQ135@voltage+1)^(0+128),w
  5482  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  5483  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  5484  00A9  00D2               	movwf	___ftdiv@f1+1
  5485  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  5486  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  5487  00AC  0822               	movf	(CalcMQ135@voltage+2)^(0+128),w
  5488  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  5489  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  5490  00AF  00D3               	movwf	___ftdiv@f1+2
  5491  00B0  120A  158A  2203  120A  118A  	fcall	___ftdiv
  5492  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  5493  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  5494  00B7  084E               	movf	?___ftdiv,w
  5495  00B8  1683               	bsf	3,5	;RP0=1, select bank1
  5496  00B9  1303               	bcf	3,6	;RP1=0, select bank1
  5497  00BA  00C4               	movwf	CalcMQ135@ratio^(0+128)
  5498  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  5499  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  5500  00BD  084F               	movf	?___ftdiv+1,w
  5501  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  5502  00BF  1303               	bcf	3,6	;RP1=0, select bank1
  5503  00C0  00C5               	movwf	(CalcMQ135@ratio+1)^(0+128)
  5504  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  5505  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  5506  00C3  0850               	movf	?___ftdiv+2,w
  5507  00C4  1683               	bsf	3,5	;RP0=1, select bank1
  5508  00C5  1303               	bcf	3,6	;RP1=0, select bank1
  5509  00C6  00C6               	movwf	(CalcMQ135@ratio+2)^(0+128)
  5510                           
  5511                           ;mq135_module.h: 99: float ratio2 = ratio * ratio;
  5512  00C7  0844               	movf	CalcMQ135@ratio^(0+128),w
  5513  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  5514  00C9  1303               	bcf	3,6	;RP1=0, select bank0
  5515  00CA  00BE               	movwf	___ftmul@f1
  5516  00CB  1683               	bsf	3,5	;RP0=1, select bank1
  5517  00CC  1303               	bcf	3,6	;RP1=0, select bank1
  5518  00CD  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5519  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  5520  00CF  1303               	bcf	3,6	;RP1=0, select bank0
  5521  00D0  00BF               	movwf	___ftmul@f1+1
  5522  00D1  1683               	bsf	3,5	;RP0=1, select bank1
  5523  00D2  1303               	bcf	3,6	;RP1=0, select bank1
  5524  00D3  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5525  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  5526  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  5527  00D6  00C0               	movwf	___ftmul@f1+2
  5528  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  5529  00D8  1303               	bcf	3,6	;RP1=0, select bank1
  5530  00D9  0844               	movf	CalcMQ135@ratio^(0+128),w
  5531  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  5532  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  5533  00DC  00C1               	movwf	___ftmul@f2
  5534  00DD  1683               	bsf	3,5	;RP0=1, select bank1
  5535  00DE  1303               	bcf	3,6	;RP1=0, select bank1
  5536  00DF  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5537  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  5538  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  5539  00E2  00C2               	movwf	___ftmul@f2+1
  5540  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  5541  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  5542  00E5  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5543  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  5544  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  5545  00E8  00C3               	movwf	___ftmul@f2+2
  5546  00E9  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5547  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  5548  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  5549  00F0  083E               	movf	?___ftmul,w
  5550  00F1  1683               	bsf	3,5	;RP0=1, select bank1
  5551  00F2  1303               	bcf	3,6	;RP1=0, select bank1
  5552  00F3  00B5               	movwf	CalcMQ135@ratio2^(0+128)
  5553  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  5554  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  5555  00F6  083F               	movf	?___ftmul+1,w
  5556  00F7  1683               	bsf	3,5	;RP0=1, select bank1
  5557  00F8  1303               	bcf	3,6	;RP1=0, select bank1
  5558  00F9  00B6               	movwf	(CalcMQ135@ratio2+1)^(0+128)
  5559  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  5560  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  5561  00FC  0840               	movf	?___ftmul+2,w
  5562  00FD  1683               	bsf	3,5	;RP0=1, select bank1
  5563  00FE  1303               	bcf	3,6	;RP1=0, select bank1
  5564  00FF  00B7               	movwf	(CalcMQ135@ratio2+2)^(0+128)
  5565                           
  5566                           ;mq135_module.h: 100: float ratio3 = ratio2 * ratio;
  5567  0100  0844               	movf	CalcMQ135@ratio^(0+128),w
  5568  0101  1283               	bcf	3,5	;RP0=0, select bank0
  5569  0102  1303               	bcf	3,6	;RP1=0, select bank0
  5570  0103  00BE               	movwf	___ftmul@f1
  5571  0104  1683               	bsf	3,5	;RP0=1, select bank1
  5572  0105  1303               	bcf	3,6	;RP1=0, select bank1
  5573  0106  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5574  0107  1283               	bcf	3,5	;RP0=0, select bank0
  5575  0108  1303               	bcf	3,6	;RP1=0, select bank0
  5576  0109  00BF               	movwf	___ftmul@f1+1
  5577  010A  1683               	bsf	3,5	;RP0=1, select bank1
  5578  010B  1303               	bcf	3,6	;RP1=0, select bank1
  5579  010C  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5580  010D  1283               	bcf	3,5	;RP0=0, select bank0
  5581  010E  1303               	bcf	3,6	;RP1=0, select bank0
  5582  010F  00C0               	movwf	___ftmul@f1+2
  5583  0110  1683               	bsf	3,5	;RP0=1, select bank1
  5584  0111  1303               	bcf	3,6	;RP1=0, select bank1
  5585  0112  0835               	movf	CalcMQ135@ratio2^(0+128),w
  5586  0113  1283               	bcf	3,5	;RP0=0, select bank0
  5587  0114  1303               	bcf	3,6	;RP1=0, select bank0
  5588  0115  00C1               	movwf	___ftmul@f2
  5589  0116  1683               	bsf	3,5	;RP0=1, select bank1
  5590  0117  1303               	bcf	3,6	;RP1=0, select bank1
  5591  0118  0836               	movf	(CalcMQ135@ratio2+1)^(0+128),w
  5592  0119  1283               	bcf	3,5	;RP0=0, select bank0
  5593  011A  1303               	bcf	3,6	;RP1=0, select bank0
  5594  011B  00C2               	movwf	___ftmul@f2+1
  5595  011C  1683               	bsf	3,5	;RP0=1, select bank1
  5596  011D  1303               	bcf	3,6	;RP1=0, select bank1
  5597  011E  0837               	movf	(CalcMQ135@ratio2+2)^(0+128),w
  5598  011F  1283               	bcf	3,5	;RP0=0, select bank0
  5599  0120  1303               	bcf	3,6	;RP1=0, select bank0
  5600  0121  00C3               	movwf	___ftmul@f2+2
  5601  0122  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5602  0127  1283               	bcf	3,5	;RP0=0, select bank0
  5603  0128  1303               	bcf	3,6	;RP1=0, select bank0
  5604  0129  083E               	movf	?___ftmul,w
  5605  012A  1683               	bsf	3,5	;RP0=1, select bank1
  5606  012B  1303               	bcf	3,6	;RP1=0, select bank1
  5607  012C  00B8               	movwf	CalcMQ135@ratio3^(0+128)
  5608  012D  1283               	bcf	3,5	;RP0=0, select bank0
  5609  012E  1303               	bcf	3,6	;RP1=0, select bank0
  5610  012F  083F               	movf	?___ftmul+1,w
  5611  0130  1683               	bsf	3,5	;RP0=1, select bank1
  5612  0131  1303               	bcf	3,6	;RP1=0, select bank1
  5613  0132  00B9               	movwf	(CalcMQ135@ratio3+1)^(0+128)
  5614  0133  1283               	bcf	3,5	;RP0=0, select bank0
  5615  0134  1303               	bcf	3,6	;RP1=0, select bank0
  5616  0135  0840               	movf	?___ftmul+2,w
  5617  0136  1683               	bsf	3,5	;RP0=1, select bank1
  5618  0137  1303               	bcf	3,6	;RP1=0, select bank1
  5619  0138  00BA               	movwf	(CalcMQ135@ratio3+2)^(0+128)
  5620                           
  5621                           ;mq135_module.h: 101: float ratio4 = ratio3 * ratio;
  5622  0139  0844               	movf	CalcMQ135@ratio^(0+128),w
  5623  013A  1283               	bcf	3,5	;RP0=0, select bank0
  5624  013B  1303               	bcf	3,6	;RP1=0, select bank0
  5625  013C  00BE               	movwf	___ftmul@f1
  5626  013D  1683               	bsf	3,5	;RP0=1, select bank1
  5627  013E  1303               	bcf	3,6	;RP1=0, select bank1
  5628  013F  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5629  0140  1283               	bcf	3,5	;RP0=0, select bank0
  5630  0141  1303               	bcf	3,6	;RP1=0, select bank0
  5631  0142  00BF               	movwf	___ftmul@f1+1
  5632  0143  1683               	bsf	3,5	;RP0=1, select bank1
  5633  0144  1303               	bcf	3,6	;RP1=0, select bank1
  5634  0145  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5635  0146  1283               	bcf	3,5	;RP0=0, select bank0
  5636  0147  1303               	bcf	3,6	;RP1=0, select bank0
  5637  0148  00C0               	movwf	___ftmul@f1+2
  5638  0149  1683               	bsf	3,5	;RP0=1, select bank1
  5639  014A  1303               	bcf	3,6	;RP1=0, select bank1
  5640  014B  0838               	movf	CalcMQ135@ratio3^(0+128),w
  5641  014C  1283               	bcf	3,5	;RP0=0, select bank0
  5642  014D  1303               	bcf	3,6	;RP1=0, select bank0
  5643  014E  00C1               	movwf	___ftmul@f2
  5644  014F  1683               	bsf	3,5	;RP0=1, select bank1
  5645  0150  1303               	bcf	3,6	;RP1=0, select bank1
  5646  0151  0839               	movf	(CalcMQ135@ratio3+1)^(0+128),w
  5647  0152  1283               	bcf	3,5	;RP0=0, select bank0
  5648  0153  1303               	bcf	3,6	;RP1=0, select bank0
  5649  0154  00C2               	movwf	___ftmul@f2+1
  5650  0155  1683               	bsf	3,5	;RP0=1, select bank1
  5651  0156  1303               	bcf	3,6	;RP1=0, select bank1
  5652  0157  083A               	movf	(CalcMQ135@ratio3+2)^(0+128),w
  5653  0158  1283               	bcf	3,5	;RP0=0, select bank0
  5654  0159  1303               	bcf	3,6	;RP1=0, select bank0
  5655  015A  00C3               	movwf	___ftmul@f2+2
  5656  015B  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5657  0160  1283               	bcf	3,5	;RP0=0, select bank0
  5658  0161  1303               	bcf	3,6	;RP1=0, select bank0
  5659  0162  083E               	movf	?___ftmul,w
  5660  0163  1683               	bsf	3,5	;RP0=1, select bank1
  5661  0164  1303               	bcf	3,6	;RP1=0, select bank1
  5662  0165  00BB               	movwf	CalcMQ135@ratio4^(0+128)
  5663  0166  1283               	bcf	3,5	;RP0=0, select bank0
  5664  0167  1303               	bcf	3,6	;RP1=0, select bank0
  5665  0168  083F               	movf	?___ftmul+1,w
  5666  0169  1683               	bsf	3,5	;RP0=1, select bank1
  5667  016A  1303               	bcf	3,6	;RP1=0, select bank1
  5668  016B  00BC               	movwf	(CalcMQ135@ratio4+1)^(0+128)
  5669  016C  1283               	bcf	3,5	;RP0=0, select bank0
  5670  016D  1303               	bcf	3,6	;RP1=0, select bank0
  5671  016E  0840               	movf	?___ftmul+2,w
  5672  016F  1683               	bsf	3,5	;RP0=1, select bank1
  5673  0170  1303               	bcf	3,6	;RP1=0, select bank1
  5674  0171  00BD               	movwf	(CalcMQ135@ratio4+2)^(0+128)
  5675                           
  5676                           ;mq135_module.h: 102: float ratio5 = ratio4 * ratio;
  5677  0172  0844               	movf	CalcMQ135@ratio^(0+128),w
  5678  0173  1283               	bcf	3,5	;RP0=0, select bank0
  5679  0174  1303               	bcf	3,6	;RP1=0, select bank0
  5680  0175  00BE               	movwf	___ftmul@f1
  5681  0176  1683               	bsf	3,5	;RP0=1, select bank1
  5682  0177  1303               	bcf	3,6	;RP1=0, select bank1
  5683  0178  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5684  0179  1283               	bcf	3,5	;RP0=0, select bank0
  5685  017A  1303               	bcf	3,6	;RP1=0, select bank0
  5686  017B  00BF               	movwf	___ftmul@f1+1
  5687  017C  1683               	bsf	3,5	;RP0=1, select bank1
  5688  017D  1303               	bcf	3,6	;RP1=0, select bank1
  5689  017E  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5690  017F  1283               	bcf	3,5	;RP0=0, select bank0
  5691  0180  1303               	bcf	3,6	;RP1=0, select bank0
  5692  0181  00C0               	movwf	___ftmul@f1+2
  5693  0182  1683               	bsf	3,5	;RP0=1, select bank1
  5694  0183  1303               	bcf	3,6	;RP1=0, select bank1
  5695  0184  083B               	movf	CalcMQ135@ratio4^(0+128),w
  5696  0185  1283               	bcf	3,5	;RP0=0, select bank0
  5697  0186  1303               	bcf	3,6	;RP1=0, select bank0
  5698  0187  00C1               	movwf	___ftmul@f2
  5699  0188  1683               	bsf	3,5	;RP0=1, select bank1
  5700  0189  1303               	bcf	3,6	;RP1=0, select bank1
  5701  018A  083C               	movf	(CalcMQ135@ratio4+1)^(0+128),w
  5702  018B  1283               	bcf	3,5	;RP0=0, select bank0
  5703  018C  1303               	bcf	3,6	;RP1=0, select bank0
  5704  018D  00C2               	movwf	___ftmul@f2+1
  5705  018E  1683               	bsf	3,5	;RP0=1, select bank1
  5706  018F  1303               	bcf	3,6	;RP1=0, select bank1
  5707  0190  083D               	movf	(CalcMQ135@ratio4+2)^(0+128),w
  5708  0191  1283               	bcf	3,5	;RP0=0, select bank0
  5709  0192  1303               	bcf	3,6	;RP1=0, select bank0
  5710  0193  00C3               	movwf	___ftmul@f2+2
  5711  0194  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5712  0199  1283               	bcf	3,5	;RP0=0, select bank0
  5713  019A  1303               	bcf	3,6	;RP1=0, select bank0
  5714  019B  083E               	movf	?___ftmul,w
  5715  019C  1683               	bsf	3,5	;RP0=1, select bank1
  5716  019D  1303               	bcf	3,6	;RP1=0, select bank1
  5717  019E  00BE               	movwf	CalcMQ135@ratio5^(0+128)
  5718  019F  1283               	bcf	3,5	;RP0=0, select bank0
  5719  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  5720  01A1  083F               	movf	?___ftmul+1,w
  5721  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  5722  01A3  1303               	bcf	3,6	;RP1=0, select bank1
  5723  01A4  00BF               	movwf	(CalcMQ135@ratio5+1)^(0+128)
  5724  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  5725  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  5726  01A7  0840               	movf	?___ftmul+2,w
  5727  01A8  1683               	bsf	3,5	;RP0=1, select bank1
  5728  01A9  1303               	bcf	3,6	;RP1=0, select bank1
  5729  01AA  00C0               	movwf	(CalcMQ135@ratio5+2)^(0+128)
  5730                           
  5731                           ;mq135_module.h: 103: float ratio6 = ratio5 * ratio;
  5732  01AB  0844               	movf	CalcMQ135@ratio^(0+128),w
  5733  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  5734  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  5735  01AE  00BE               	movwf	___ftmul@f1
  5736  01AF  1683               	bsf	3,5	;RP0=1, select bank1
  5737  01B0  1303               	bcf	3,6	;RP1=0, select bank1
  5738  01B1  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5739  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  5740  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  5741  01B4  00BF               	movwf	___ftmul@f1+1
  5742  01B5  1683               	bsf	3,5	;RP0=1, select bank1
  5743  01B6  1303               	bcf	3,6	;RP1=0, select bank1
  5744  01B7  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5745  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  5746  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  5747  01BA  00C0               	movwf	___ftmul@f1+2
  5748  01BB  1683               	bsf	3,5	;RP0=1, select bank1
  5749  01BC  1303               	bcf	3,6	;RP1=0, select bank1
  5750  01BD  083E               	movf	CalcMQ135@ratio5^(0+128),w
  5751  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  5752  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  5753  01C0  00C1               	movwf	___ftmul@f2
  5754  01C1  1683               	bsf	3,5	;RP0=1, select bank1
  5755  01C2  1303               	bcf	3,6	;RP1=0, select bank1
  5756  01C3  083F               	movf	(CalcMQ135@ratio5+1)^(0+128),w
  5757  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  5758  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  5759  01C6  00C2               	movwf	___ftmul@f2+1
  5760  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  5761  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  5762  01C9  0840               	movf	(CalcMQ135@ratio5+2)^(0+128),w
  5763  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  5764  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  5765  01CC  00C3               	movwf	___ftmul@f2+2
  5766  01CD  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5767  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  5768  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  5769  01D4  083E               	movf	?___ftmul,w
  5770  01D5  1683               	bsf	3,5	;RP0=1, select bank1
  5771  01D6  1303               	bcf	3,6	;RP1=0, select bank1
  5772  01D7  00A3               	movwf	CalcMQ135@ratio6^(0+128)
  5773  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  5774  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  5775  01DA  083F               	movf	?___ftmul+1,w
  5776  01DB  1683               	bsf	3,5	;RP0=1, select bank1
  5777  01DC  1303               	bcf	3,6	;RP1=0, select bank1
  5778  01DD  00A4               	movwf	(CalcMQ135@ratio6+1)^(0+128)
  5779  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  5780  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  5781  01E0  0840               	movf	?___ftmul+2,w
  5782  01E1  1683               	bsf	3,5	;RP0=1, select bank1
  5783  01E2  1303               	bcf	3,6	;RP1=0, select bank1
  5784  01E3  00A5               	movwf	(CalcMQ135@ratio6+2)^(0+128)
  5785                           
  5786                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  5787                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  5788  01E4  309C               	movlw	156
  5789  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  5790  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  5791  01E7  00BE               	movwf	___ftmul@f1
  5792  01E8  30B2               	movlw	178
  5793  01E9  00BF               	movwf	___ftmul@f1+1
  5794  01EA  303F               	movlw	63
  5795  01EB  00C0               	movwf	___ftmul@f1+2
  5796  01EC  1683               	bsf	3,5	;RP0=1, select bank1
  5797  01ED  1303               	bcf	3,6	;RP1=0, select bank1
  5798  01EE  0835               	movf	CalcMQ135@ratio2^(0+128),w
  5799  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  5800  01F0  1303               	bcf	3,6	;RP1=0, select bank0
  5801  01F1  00C1               	movwf	___ftmul@f2
  5802  01F2  1683               	bsf	3,5	;RP0=1, select bank1
  5803  01F3  1303               	bcf	3,6	;RP1=0, select bank1
  5804  01F4  0836               	movf	(CalcMQ135@ratio2+1)^(0+128),w
  5805  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  5806  01F6  1303               	bcf	3,6	;RP1=0, select bank0
  5807  01F7  00C2               	movwf	___ftmul@f2+1
  5808  01F8  1683               	bsf	3,5	;RP0=1, select bank1
  5809  01F9  1303               	bcf	3,6	;RP1=0, select bank1
  5810  01FA  0837               	movf	(CalcMQ135@ratio2+2)^(0+128),w
  5811  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  5812  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  5813  01FD  00C3               	movwf	___ftmul@f2+2
  5814  01FE  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5815  0203  1283               	bcf	3,5	;RP0=0, select bank0
  5816  0204  1303               	bcf	3,6	;RP1=0, select bank0
  5817  0205  083E               	movf	?___ftmul,w
  5818  0206  00B1               	movwf	___ftadd@f1
  5819  0207  083F               	movf	?___ftmul+1,w
  5820  0208  00B2               	movwf	___ftadd@f1+1
  5821  0209  0840               	movf	?___ftmul+2,w
  5822  020A  00B3               	movwf	___ftadd@f1+2
  5823  020B  30A9               	movlw	169
  5824  020C  00BE               	movwf	___ftmul@f1
  5825  020D  30DE               	movlw	222
  5826  020E  00BF               	movwf	___ftmul@f1+1
  5827  020F  303C               	movlw	60
  5828  0210  00C0               	movwf	___ftmul@f1+2
  5829  0211  1683               	bsf	3,5	;RP0=1, select bank1
  5830  0212  1303               	bcf	3,6	;RP1=0, select bank1
  5831  0213  0844               	movf	CalcMQ135@ratio^(0+128),w
  5832  0214  1283               	bcf	3,5	;RP0=0, select bank0
  5833  0215  1303               	bcf	3,6	;RP1=0, select bank0
  5834  0216  00C1               	movwf	___ftmul@f2
  5835  0217  1683               	bsf	3,5	;RP0=1, select bank1
  5836  0218  1303               	bcf	3,6	;RP1=0, select bank1
  5837  0219  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5838  021A  1283               	bcf	3,5	;RP0=0, select bank0
  5839  021B  1303               	bcf	3,6	;RP1=0, select bank0
  5840  021C  00C2               	movwf	___ftmul@f2+1
  5841  021D  1683               	bsf	3,5	;RP0=1, select bank1
  5842  021E  1303               	bcf	3,6	;RP1=0, select bank1
  5843  021F  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5844  0220  1283               	bcf	3,5	;RP0=0, select bank0
  5845  0221  1303               	bcf	3,6	;RP1=0, select bank0
  5846  0222  00C3               	movwf	___ftmul@f2+2
  5847  0223  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5848  0228  1283               	bcf	3,5	;RP0=0, select bank0
  5849  0229  1303               	bcf	3,6	;RP1=0, select bank0
  5850  022A  083E               	movf	?___ftmul,w
  5851  022B  00B4               	movwf	___ftadd@f2
  5852  022C  083F               	movf	?___ftmul+1,w
  5853  022D  00B5               	movwf	___ftadd@f2+1
  5854  022E  0840               	movf	?___ftmul+2,w
  5855  022F  00B6               	movwf	___ftadd@f2+2
  5856  0230  120A  158A  25CE  120A  118A  	fcall	___ftadd
  5857  0235  1283               	bcf	3,5	;RP0=0, select bank0
  5858  0236  1303               	bcf	3,6	;RP1=0, select bank0
  5859  0237  0831               	movf	?___ftadd,w
  5860  0238  1683               	bsf	3,5	;RP0=1, select bank1
  5861  0239  1303               	bcf	3,6	;RP1=0, select bank1
  5862  023A  00A6               	movwf	_CalcMQ135$682^(0+128)
  5863  023B  1283               	bcf	3,5	;RP0=0, select bank0
  5864  023C  1303               	bcf	3,6	;RP1=0, select bank0
  5865  023D  0832               	movf	?___ftadd+1,w
  5866  023E  1683               	bsf	3,5	;RP0=1, select bank1
  5867  023F  1303               	bcf	3,6	;RP1=0, select bank1
  5868  0240  00A7               	movwf	(_CalcMQ135$682+1)^(0+128)
  5869  0241  1283               	bcf	3,5	;RP0=0, select bank0
  5870  0242  1303               	bcf	3,6	;RP1=0, select bank0
  5871  0243  0833               	movf	?___ftadd+2,w
  5872  0244  1683               	bsf	3,5	;RP0=1, select bank1
  5873  0245  1303               	bcf	3,6	;RP1=0, select bank1
  5874  0246  00A8               	movwf	(_CalcMQ135$682+2)^(0+128)
  5875                           
  5876                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  5877                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  5878  0247  30EE               	movlw	238
  5879  0248  1283               	bcf	3,5	;RP0=0, select bank0
  5880  0249  1303               	bcf	3,6	;RP1=0, select bank0
  5881  024A  00BE               	movwf	___ftmul@f1
  5882  024B  30EB               	movlw	235
  5883  024C  00BF               	movwf	___ftmul@f1+1
  5884  024D  303A               	movlw	58
  5885  024E  00C0               	movwf	___ftmul@f1+2
  5886  024F  1683               	bsf	3,5	;RP0=1, select bank1
  5887  0250  1303               	bcf	3,6	;RP1=0, select bank1
  5888  0251  0838               	movf	CalcMQ135@ratio3^(0+128),w
  5889  0252  1283               	bcf	3,5	;RP0=0, select bank0
  5890  0253  1303               	bcf	3,6	;RP1=0, select bank0
  5891  0254  00C1               	movwf	___ftmul@f2
  5892  0255  1683               	bsf	3,5	;RP0=1, select bank1
  5893  0256  1303               	bcf	3,6	;RP1=0, select bank1
  5894  0257  0839               	movf	(CalcMQ135@ratio3+1)^(0+128),w
  5895  0258  1283               	bcf	3,5	;RP0=0, select bank0
  5896  0259  1303               	bcf	3,6	;RP1=0, select bank0
  5897  025A  00C2               	movwf	___ftmul@f2+1
  5898  025B  1683               	bsf	3,5	;RP0=1, select bank1
  5899  025C  1303               	bcf	3,6	;RP1=0, select bank1
  5900  025D  083A               	movf	(CalcMQ135@ratio3+2)^(0+128),w
  5901  025E  1283               	bcf	3,5	;RP0=0, select bank0
  5902  025F  1303               	bcf	3,6	;RP1=0, select bank0
  5903  0260  00C3               	movwf	___ftmul@f2+2
  5904  0261  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5905  0266  1283               	bcf	3,5	;RP0=0, select bank0
  5906  0267  1303               	bcf	3,6	;RP1=0, select bank0
  5907  0268  083E               	movf	?___ftmul,w
  5908  0269  00B1               	movwf	___ftadd@f1
  5909  026A  083F               	movf	?___ftmul+1,w
  5910  026B  00B2               	movwf	___ftadd@f1+1
  5911  026C  0840               	movf	?___ftmul+2,w
  5912  026D  00B3               	movwf	___ftadd@f1+2
  5913  026E  1683               	bsf	3,5	;RP0=1, select bank1
  5914  026F  1303               	bcf	3,6	;RP1=0, select bank1
  5915  0270  0826               	movf	_CalcMQ135$682^(0+128),w
  5916  0271  1283               	bcf	3,5	;RP0=0, select bank0
  5917  0272  1303               	bcf	3,6	;RP1=0, select bank0
  5918  0273  00B4               	movwf	___ftadd@f2
  5919  0274  1683               	bsf	3,5	;RP0=1, select bank1
  5920  0275  1303               	bcf	3,6	;RP1=0, select bank1
  5921  0276  0827               	movf	(_CalcMQ135$682+1)^(0+128),w
  5922  0277  1283               	bcf	3,5	;RP0=0, select bank0
  5923  0278  1303               	bcf	3,6	;RP1=0, select bank0
  5924  0279  00B5               	movwf	___ftadd@f2+1
  5925  027A  1683               	bsf	3,5	;RP0=1, select bank1
  5926  027B  1303               	bcf	3,6	;RP1=0, select bank1
  5927  027C  0828               	movf	(_CalcMQ135$682+2)^(0+128),w
  5928  027D  1283               	bcf	3,5	;RP0=0, select bank0
  5929  027E  1303               	bcf	3,6	;RP1=0, select bank0
  5930  027F  00B6               	movwf	___ftadd@f2+2
  5931  0280  120A  158A  25CE  120A  118A  	fcall	___ftadd
  5932  0285  1283               	bcf	3,5	;RP0=0, select bank0
  5933  0286  1303               	bcf	3,6	;RP1=0, select bank0
  5934  0287  0831               	movf	?___ftadd,w
  5935  0288  1683               	bsf	3,5	;RP0=1, select bank1
  5936  0289  1303               	bcf	3,6	;RP1=0, select bank1
  5937  028A  00A9               	movwf	_CalcMQ135$683^(0+128)
  5938  028B  1283               	bcf	3,5	;RP0=0, select bank0
  5939  028C  1303               	bcf	3,6	;RP1=0, select bank0
  5940  028D  0832               	movf	?___ftadd+1,w
  5941  028E  1683               	bsf	3,5	;RP0=1, select bank1
  5942  028F  1303               	bcf	3,6	;RP1=0, select bank1
  5943  0290  00AA               	movwf	(_CalcMQ135$683+1)^(0+128)
  5944  0291  1283               	bcf	3,5	;RP0=0, select bank0
  5945  0292  1303               	bcf	3,6	;RP1=0, select bank0
  5946  0293  0833               	movf	?___ftadd+2,w
  5947  0294  1683               	bsf	3,5	;RP0=1, select bank1
  5948  0295  1303               	bcf	3,6	;RP1=0, select bank1
  5949  0296  00AB               	movwf	(_CalcMQ135$683+2)^(0+128)
  5950                           
  5951                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  5952                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  5953  0297  3074               	movlw	116
  5954  0298  1283               	bcf	3,5	;RP0=0, select bank0
  5955  0299  1303               	bcf	3,6	;RP1=0, select bank0
  5956  029A  00BE               	movwf	___ftmul@f1
  5957  029B  305A               	movlw	90
  5958  029C  00BF               	movwf	___ftmul@f1+1
  5959  029D  30BB               	movlw	187
  5960  029E  00C0               	movwf	___ftmul@f1+2
  5961  029F  1683               	bsf	3,5	;RP0=1, select bank1
  5962  02A0  1303               	bcf	3,6	;RP1=0, select bank1
  5963  02A1  083B               	movf	CalcMQ135@ratio4^(0+128),w
  5964  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  5965  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  5966  02A4  00C1               	movwf	___ftmul@f2
  5967  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  5968  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  5969  02A7  083C               	movf	(CalcMQ135@ratio4+1)^(0+128),w
  5970  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  5971  02A9  1303               	bcf	3,6	;RP1=0, select bank0
  5972  02AA  00C2               	movwf	___ftmul@f2+1
  5973  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  5974  02AC  1303               	bcf	3,6	;RP1=0, select bank1
  5975  02AD  083D               	movf	(CalcMQ135@ratio4+2)^(0+128),w
  5976  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  5977  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  5978  02B0  00C3               	movwf	___ftmul@f2+2
  5979  02B1  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5980  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  5981  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  5982  02B8  083E               	movf	?___ftmul,w
  5983  02B9  00B1               	movwf	___ftadd@f1
  5984  02BA  083F               	movf	?___ftmul+1,w
  5985  02BB  00B2               	movwf	___ftadd@f1+1
  5986  02BC  0840               	movf	?___ftmul+2,w
  5987  02BD  00B3               	movwf	___ftadd@f1+2
  5988  02BE  1683               	bsf	3,5	;RP0=1, select bank1
  5989  02BF  1303               	bcf	3,6	;RP1=0, select bank1
  5990  02C0  0829               	movf	_CalcMQ135$683^(0+128),w
  5991  02C1  1283               	bcf	3,5	;RP0=0, select bank0
  5992  02C2  1303               	bcf	3,6	;RP1=0, select bank0
  5993  02C3  00B4               	movwf	___ftadd@f2
  5994  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  5995  02C5  1303               	bcf	3,6	;RP1=0, select bank1
  5996  02C6  082A               	movf	(_CalcMQ135$683+1)^(0+128),w
  5997  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  5998  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  5999  02C9  00B5               	movwf	___ftadd@f2+1
  6000  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  6001  02CB  1303               	bcf	3,6	;RP1=0, select bank1
  6002  02CC  082B               	movf	(_CalcMQ135$683+2)^(0+128),w
  6003  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  6004  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  6005  02CF  00B6               	movwf	___ftadd@f2+2
  6006  02D0  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6007  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  6008  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  6009  02D7  0831               	movf	?___ftadd,w
  6010  02D8  1683               	bsf	3,5	;RP0=1, select bank1
  6011  02D9  1303               	bcf	3,6	;RP1=0, select bank1
  6012  02DA  00AC               	movwf	_CalcMQ135$684^(0+128)
  6013  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  6014  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  6015  02DD  0832               	movf	?___ftadd+1,w
  6016  02DE  1683               	bsf	3,5	;RP0=1, select bank1
  6017  02DF  1303               	bcf	3,6	;RP1=0, select bank1
  6018  02E0  00AD               	movwf	(_CalcMQ135$684+1)^(0+128)
  6019  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  6020  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  6021  02E3  0833               	movf	?___ftadd+2,w
  6022  02E4  1683               	bsf	3,5	;RP0=1, select bank1
  6023  02E5  1303               	bcf	3,6	;RP1=0, select bank1
  6024  02E6  00AE               	movwf	(_CalcMQ135$684+2)^(0+128)
  6025                           
  6026                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  6027                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  6028  02E7  3010               	movlw	16
  6029  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  6030  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  6031  02EA  00BE               	movwf	___ftmul@f1
  6032  02EB  30FC               	movlw	252
  6033  02EC  00BF               	movwf	___ftmul@f1+1
  6034  02ED  30BA               	movlw	186
  6035  02EE  00C0               	movwf	___ftmul@f1+2
  6036  02EF  1683               	bsf	3,5	;RP0=1, select bank1
  6037  02F0  1303               	bcf	3,6	;RP1=0, select bank1
  6038  02F1  083E               	movf	CalcMQ135@ratio5^(0+128),w
  6039  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  6040  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  6041  02F4  00C1               	movwf	___ftmul@f2
  6042  02F5  1683               	bsf	3,5	;RP0=1, select bank1
  6043  02F6  1303               	bcf	3,6	;RP1=0, select bank1
  6044  02F7  083F               	movf	(CalcMQ135@ratio5+1)^(0+128),w
  6045  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  6046  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  6047  02FA  00C2               	movwf	___ftmul@f2+1
  6048  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  6049  02FC  1303               	bcf	3,6	;RP1=0, select bank1
  6050  02FD  0840               	movf	(CalcMQ135@ratio5+2)^(0+128),w
  6051  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  6052  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  6053  0300  00C3               	movwf	___ftmul@f2+2
  6054  0301  120A  158A  24FB  120A  118A  	fcall	___ftmul
  6055  0306  1283               	bcf	3,5	;RP0=0, select bank0
  6056  0307  1303               	bcf	3,6	;RP1=0, select bank0
  6057  0308  083E               	movf	?___ftmul,w
  6058  0309  00B1               	movwf	___ftadd@f1
  6059  030A  083F               	movf	?___ftmul+1,w
  6060  030B  00B2               	movwf	___ftadd@f1+1
  6061  030C  0840               	movf	?___ftmul+2,w
  6062  030D  00B3               	movwf	___ftadd@f1+2
  6063  030E  1683               	bsf	3,5	;RP0=1, select bank1
  6064  030F  1303               	bcf	3,6	;RP1=0, select bank1
  6065  0310  082C               	movf	_CalcMQ135$684^(0+128),w
  6066  0311  1283               	bcf	3,5	;RP0=0, select bank0
  6067  0312  1303               	bcf	3,6	;RP1=0, select bank0
  6068  0313  00B4               	movwf	___ftadd@f2
  6069  0314  1683               	bsf	3,5	;RP0=1, select bank1
  6070  0315  1303               	bcf	3,6	;RP1=0, select bank1
  6071  0316  082D               	movf	(_CalcMQ135$684+1)^(0+128),w
  6072  0317  1283               	bcf	3,5	;RP0=0, select bank0
  6073  0318  1303               	bcf	3,6	;RP1=0, select bank0
  6074  0319  00B5               	movwf	___ftadd@f2+1
  6075  031A  1683               	bsf	3,5	;RP0=1, select bank1
  6076  031B  1303               	bcf	3,6	;RP1=0, select bank1
  6077  031C  082E               	movf	(_CalcMQ135$684+2)^(0+128),w
  6078  031D  1283               	bcf	3,5	;RP0=0, select bank0
  6079  031E  1303               	bcf	3,6	;RP1=0, select bank0
  6080  031F  00B6               	movwf	___ftadd@f2+2
  6081  0320  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6082  0325  1283               	bcf	3,5	;RP0=0, select bank0
  6083  0326  1303               	bcf	3,6	;RP1=0, select bank0
  6084  0327  0831               	movf	?___ftadd,w
  6085  0328  1683               	bsf	3,5	;RP0=1, select bank1
  6086  0329  1303               	bcf	3,6	;RP1=0, select bank1
  6087  032A  00AF               	movwf	_CalcMQ135$685^(0+128)
  6088  032B  1283               	bcf	3,5	;RP0=0, select bank0
  6089  032C  1303               	bcf	3,6	;RP1=0, select bank0
  6090  032D  0832               	movf	?___ftadd+1,w
  6091  032E  1683               	bsf	3,5	;RP0=1, select bank1
  6092  032F  1303               	bcf	3,6	;RP1=0, select bank1
  6093  0330  00B0               	movwf	(_CalcMQ135$685+1)^(0+128)
  6094  0331  1283               	bcf	3,5	;RP0=0, select bank0
  6095  0332  1303               	bcf	3,6	;RP1=0, select bank0
  6096  0333  0833               	movf	?___ftadd+2,w
  6097  0334  1683               	bsf	3,5	;RP0=1, select bank1
  6098  0335  1303               	bcf	3,6	;RP1=0, select bank1
  6099  0336  00B1               	movwf	(_CalcMQ135$685+2)^(0+128)
  6100                           
  6101                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  6102                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  6103  0337  30A8               	movlw	168
  6104  0338  1283               	bcf	3,5	;RP0=0, select bank0
  6105  0339  1303               	bcf	3,6	;RP1=0, select bank0
  6106  033A  00BE               	movwf	___ftmul@f1
  6107  033B  3090               	movlw	144
  6108  033C  00BF               	movwf	___ftmul@f1+1
  6109  033D  303F               	movlw	63
  6110  033E  00C0               	movwf	___ftmul@f1+2
  6111  033F  1683               	bsf	3,5	;RP0=1, select bank1
  6112  0340  1303               	bcf	3,6	;RP1=0, select bank1
  6113  0341  0823               	movf	CalcMQ135@ratio6^(0+128),w
  6114  0342  1283               	bcf	3,5	;RP0=0, select bank0
  6115  0343  1303               	bcf	3,6	;RP1=0, select bank0
  6116  0344  00C1               	movwf	___ftmul@f2
  6117  0345  1683               	bsf	3,5	;RP0=1, select bank1
  6118  0346  1303               	bcf	3,6	;RP1=0, select bank1
  6119  0347  0824               	movf	(CalcMQ135@ratio6+1)^(0+128),w
  6120  0348  1283               	bcf	3,5	;RP0=0, select bank0
  6121  0349  1303               	bcf	3,6	;RP1=0, select bank0
  6122  034A  00C2               	movwf	___ftmul@f2+1
  6123  034B  1683               	bsf	3,5	;RP0=1, select bank1
  6124  034C  1303               	bcf	3,6	;RP1=0, select bank1
  6125  034D  0825               	movf	(CalcMQ135@ratio6+2)^(0+128),w
  6126  034E  1283               	bcf	3,5	;RP0=0, select bank0
  6127  034F  1303               	bcf	3,6	;RP1=0, select bank0
  6128  0350  00C3               	movwf	___ftmul@f2+2
  6129  0351  120A  158A  24FB  120A  118A  	fcall	___ftmul
  6130  0356  1283               	bcf	3,5	;RP0=0, select bank0
  6131  0357  1303               	bcf	3,6	;RP1=0, select bank0
  6132  0358  083E               	movf	?___ftmul,w
  6133  0359  00B1               	movwf	___ftadd@f1
  6134  035A  083F               	movf	?___ftmul+1,w
  6135  035B  00B2               	movwf	___ftadd@f1+1
  6136  035C  0840               	movf	?___ftmul+2,w
  6137  035D  00B3               	movwf	___ftadd@f1+2
  6138  035E  1683               	bsf	3,5	;RP0=1, select bank1
  6139  035F  1303               	bcf	3,6	;RP1=0, select bank1
  6140  0360  082F               	movf	_CalcMQ135$685^(0+128),w
  6141  0361  1283               	bcf	3,5	;RP0=0, select bank0
  6142  0362  1303               	bcf	3,6	;RP1=0, select bank0
  6143  0363  00B4               	movwf	___ftadd@f2
  6144  0364  1683               	bsf	3,5	;RP0=1, select bank1
  6145  0365  1303               	bcf	3,6	;RP1=0, select bank1
  6146  0366  0830               	movf	(_CalcMQ135$685+1)^(0+128),w
  6147  0367  1283               	bcf	3,5	;RP0=0, select bank0
  6148  0368  1303               	bcf	3,6	;RP1=0, select bank0
  6149  0369  00B5               	movwf	___ftadd@f2+1
  6150  036A  1683               	bsf	3,5	;RP0=1, select bank1
  6151  036B  1303               	bcf	3,6	;RP1=0, select bank1
  6152  036C  0831               	movf	(_CalcMQ135$685+2)^(0+128),w
  6153  036D  1283               	bcf	3,5	;RP0=0, select bank0
  6154  036E  1303               	bcf	3,6	;RP1=0, select bank0
  6155  036F  00B6               	movwf	___ftadd@f2+2
  6156  0370  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6157  0375  1283               	bcf	3,5	;RP0=0, select bank0
  6158  0376  1303               	bcf	3,6	;RP1=0, select bank0
  6159  0377  0831               	movf	?___ftadd,w
  6160  0378  1683               	bsf	3,5	;RP0=1, select bank1
  6161  0379  1303               	bcf	3,6	;RP1=0, select bank1
  6162  037A  00B2               	movwf	_CalcMQ135$686^(0+128)
  6163  037B  1283               	bcf	3,5	;RP0=0, select bank0
  6164  037C  1303               	bcf	3,6	;RP1=0, select bank0
  6165  037D  0832               	movf	?___ftadd+1,w
  6166  037E  1683               	bsf	3,5	;RP0=1, select bank1
  6167  037F  1303               	bcf	3,6	;RP1=0, select bank1
  6168  0380  00B3               	movwf	(_CalcMQ135$686+1)^(0+128)
  6169  0381  1283               	bcf	3,5	;RP0=0, select bank0
  6170  0382  1303               	bcf	3,6	;RP1=0, select bank0
  6171  0383  0833               	movf	?___ftadd+2,w
  6172  0384  1683               	bsf	3,5	;RP0=1, select bank1
  6173  0385  1303               	bcf	3,6	;RP1=0, select bank1
  6174  0386  00B4               	movwf	(_CalcMQ135$686+2)^(0+128)
  6175                           
  6176                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  6177                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  6178  0387  3080               	movlw	128
  6179  0388  1283               	bcf	3,5	;RP0=0, select bank0
  6180  0389  1303               	bcf	3,6	;RP1=0, select bank0
  6181  038A  00B1               	movwf	___ftadd@f1
  6182  038B  30B7               	movlw	183
  6183  038C  00B2               	movwf	___ftadd@f1+1
  6184  038D  3039               	movlw	57
  6185  038E  00B3               	movwf	___ftadd@f1+2
  6186  038F  1683               	bsf	3,5	;RP0=1, select bank1
  6187  0390  1303               	bcf	3,6	;RP1=0, select bank1
  6188  0391  0832               	movf	_CalcMQ135$686^(0+128),w
  6189  0392  1283               	bcf	3,5	;RP0=0, select bank0
  6190  0393  1303               	bcf	3,6	;RP1=0, select bank0
  6191  0394  00B4               	movwf	___ftadd@f2
  6192  0395  1683               	bsf	3,5	;RP0=1, select bank1
  6193  0396  1303               	bcf	3,6	;RP1=0, select bank1
  6194  0397  0833               	movf	(_CalcMQ135$686+1)^(0+128),w
  6195  0398  1283               	bcf	3,5	;RP0=0, select bank0
  6196  0399  1303               	bcf	3,6	;RP1=0, select bank0
  6197  039A  00B5               	movwf	___ftadd@f2+1
  6198  039B  1683               	bsf	3,5	;RP0=1, select bank1
  6199  039C  1303               	bcf	3,6	;RP1=0, select bank1
  6200  039D  0834               	movf	(_CalcMQ135$686+2)^(0+128),w
  6201  039E  1283               	bcf	3,5	;RP0=0, select bank0
  6202  039F  1303               	bcf	3,6	;RP1=0, select bank0
  6203  03A0  00B6               	movwf	___ftadd@f2+2
  6204  03A1  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6205  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  6206  03A7  1303               	bcf	3,6	;RP1=0, select bank0
  6207  03A8  0831               	movf	?___ftadd,w
  6208  03A9  1683               	bsf	3,5	;RP0=1, select bank1
  6209  03AA  1303               	bcf	3,6	;RP1=0, select bank1
  6210  03AB  00C1               	movwf	CalcMQ135@co2^(0+128)
  6211  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  6212  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  6213  03AE  0832               	movf	?___ftadd+1,w
  6214  03AF  1683               	bsf	3,5	;RP0=1, select bank1
  6215  03B0  1303               	bcf	3,6	;RP1=0, select bank1
  6216  03B1  00C2               	movwf	(CalcMQ135@co2+1)^(0+128)
  6217  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  6218  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  6219  03B4  0833               	movf	?___ftadd+2,w
  6220  03B5  1683               	bsf	3,5	;RP0=1, select bank1
  6221  03B6  1303               	bcf	3,6	;RP1=0, select bank1
  6222  03B7  00C3               	movwf	(CalcMQ135@co2+2)^(0+128)
  6223                           
  6224                           ;mq135_module.h: 109: co2 *= 415.58;
  6225  03B8  30CA               	movlw	202
  6226  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  6227  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  6228  03BB  00BE               	movwf	___ftmul@f1
  6229  03BC  30CF               	movlw	207
  6230  03BD  00BF               	movwf	___ftmul@f1+1
  6231  03BE  3043               	movlw	67
  6232  03BF  00C0               	movwf	___ftmul@f1+2
  6233  03C0  1683               	bsf	3,5	;RP0=1, select bank1
  6234  03C1  1303               	bcf	3,6	;RP1=0, select bank1
  6235  03C2  0841               	movf	CalcMQ135@co2^(0+128),w
  6236  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  6237  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  6238  03C5  00C1               	movwf	___ftmul@f2
  6239  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  6240  03C7  1303               	bcf	3,6	;RP1=0, select bank1
  6241  03C8  0842               	movf	(CalcMQ135@co2+1)^(0+128),w
  6242  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  6243  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  6244  03CB  00C2               	movwf	___ftmul@f2+1
  6245  03CC  1683               	bsf	3,5	;RP0=1, select bank1
  6246  03CD  1303               	bcf	3,6	;RP1=0, select bank1
  6247  03CE  0843               	movf	(CalcMQ135@co2+2)^(0+128),w
  6248  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  6249  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  6250  03D1  00C3               	movwf	___ftmul@f2+2
  6251  03D2  120A  158A  24FB   	fcall	___ftmul
  6252  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  6253  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  6254  03D7  083E               	movf	?___ftmul,w
  6255  03D8  1683               	bsf	3,5	;RP0=1, select bank1
  6256  03D9  1303               	bcf	3,6	;RP1=0, select bank1
  6257  03DA  00C1               	movwf	CalcMQ135@co2^(0+128)
  6258  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  6259  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  6260  03DD  083F               	movf	?___ftmul+1,w
  6261  03DE  1683               	bsf	3,5	;RP0=1, select bank1
  6262  03DF  1303               	bcf	3,6	;RP1=0, select bank1
  6263  03E0  00C2               	movwf	(CalcMQ135@co2+1)^(0+128)
  6264  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  6265  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  6266  03E3  0840               	movf	?___ftmul+2,w
  6267  03E4  1683               	bsf	3,5	;RP0=1, select bank1
  6268  03E5  1303               	bcf	3,6	;RP1=0, select bank1
  6269  03E6  00C3               	movwf	(CalcMQ135@co2+2)^(0+128)
  6270                           
  6271                           ;mq135_module.h: 110: return co2;
  6272  03E7  0841               	movf	CalcMQ135@co2^(0+128),w
  6273  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  6274  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  6275  03EA  00DE               	movwf	?_CalcMQ135
  6276  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  6277  03EC  1303               	bcf	3,6	;RP1=0, select bank1
  6278  03ED  0842               	movf	(CalcMQ135@co2+1)^(0+128),w
  6279  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  6280  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  6281  03F0  00DF               	movwf	?_CalcMQ135+1
  6282  03F1  1683               	bsf	3,5	;RP0=1, select bank1
  6283  03F2  1303               	bcf	3,6	;RP1=0, select bank1
  6284  03F3  0843               	movf	(CalcMQ135@co2+2)^(0+128),w
  6285  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  6286  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  6287  03F6  00E0               	movwf	?_CalcMQ135+2
  6288  03F7  0008               	return
  6289  03F8                     __end_of_CalcMQ135:	
  6290                           
  6291                           	psect	text25
  6292  0CFB                     __ptext25:	
  6293 ;; *************** function ___ftmul *****************
  6294 ;; Defined at:
  6295 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;  f1              3   30[BANK0 ] float 
  6298 ;;  f2              3   33[BANK0 ] float 
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;  f3_as_produc    3   41[BANK0 ] unsigned um
  6301 ;;  sign            1   45[BANK0 ] unsigned char 
  6302 ;;  cntr            1   44[BANK0 ] unsigned char 
  6303 ;;  exp             1   40[BANK0 ] unsigned char 
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  3   30[BANK0 ] float 
  6306 ;; Registers used:
  6307 ;;		wreg, status,2, status,0, pclath, cstack
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6313 ;;      Params:         0       6       0       0       0
  6314 ;;      Locals:         0       6       0       0       0
  6315 ;;      Temps:          0       4       0       0       0
  6316 ;;      Totals:         0      16       0       0       0
  6317 ;;Total ram usage:       16 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; Hardware stack levels required when called:    3
  6320 ;; This function calls:
  6321 ;;		___ftpack
  6322 ;; This function is called by:
  6323 ;;		_displayPPM
  6324 ;;		_CalcMQ135
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           
  6329                           ;psect for function ___ftmul
  6330  0CFB                     ___ftmul:	
  6331                           
  6332                           ;incstack = 0
  6333                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6334  0CFB  1283               	bcf	3,5	;RP0=0, select bank0
  6335  0CFC  1303               	bcf	3,6	;RP1=0, select bank0
  6336  0CFD  083E               	movf	___ftmul@f1,w
  6337  0CFE  00C4               	movwf	??___ftmul
  6338  0CFF  083F               	movf	___ftmul@f1+1,w
  6339  0D00  00C5               	movwf	??___ftmul+1
  6340  0D01  0840               	movf	___ftmul@f1+2,w
  6341  0D02  00C6               	movwf	??___ftmul+2
  6342  0D03  1003               	clrc
  6343  0D04  0D45               	rlf	??___ftmul+1,w
  6344  0D05  0D46               	rlf	??___ftmul+2,w
  6345  0D06  00C7               	movwf	??___ftmul+3
  6346  0D07  0847               	movf	??___ftmul+3,w
  6347  0D08  00C8               	movwf	___ftmul@exp
  6348  0D09  08C8               	movf	___ftmul@exp,f
  6349  0D0A  1D03               	skipz
  6350  0D0B  2D13               	goto	l2255
  6351  0D0C  3000               	movlw	0
  6352  0D0D  00BE               	movwf	?___ftmul
  6353  0D0E  3000               	movlw	0
  6354  0D0F  00BF               	movwf	?___ftmul+1
  6355  0D10  3000               	movlw	0
  6356  0D11  00C0               	movwf	?___ftmul+2
  6357  0D12  0008               	return
  6358  0D13                     l2255:	
  6359  0D13  0841               	movf	___ftmul@f2,w
  6360  0D14  00C4               	movwf	??___ftmul
  6361  0D15  0842               	movf	___ftmul@f2+1,w
  6362  0D16  00C5               	movwf	??___ftmul+1
  6363  0D17  0843               	movf	___ftmul@f2+2,w
  6364  0D18  00C6               	movwf	??___ftmul+2
  6365  0D19  1003               	clrc
  6366  0D1A  0D45               	rlf	??___ftmul+1,w
  6367  0D1B  0D46               	rlf	??___ftmul+2,w
  6368  0D1C  00C7               	movwf	??___ftmul+3
  6369  0D1D  0847               	movf	??___ftmul+3,w
  6370  0D1E  00CD               	movwf	___ftmul@sign
  6371  0D1F  08CD               	movf	___ftmul@sign,f
  6372  0D20  1D03               	skipz
  6373  0D21  2D29               	goto	l2261
  6374  0D22  3000               	movlw	0
  6375  0D23  00BE               	movwf	?___ftmul
  6376  0D24  3000               	movlw	0
  6377  0D25  00BF               	movwf	?___ftmul+1
  6378  0D26  3000               	movlw	0
  6379  0D27  00C0               	movwf	?___ftmul+2
  6380  0D28  0008               	return
  6381  0D29                     l2261:	
  6382  0D29  084D               	movf	___ftmul@sign,w
  6383  0D2A  3E7B               	addlw	123
  6384  0D2B  00C4               	movwf	??___ftmul
  6385  0D2C  0844               	movf	??___ftmul,w
  6386  0D2D  07C8               	addwf	___ftmul@exp,f
  6387  0D2E  083E               	movf	___ftmul@f1,w
  6388  0D2F  00C4               	movwf	??___ftmul
  6389  0D30  083F               	movf	___ftmul@f1+1,w
  6390  0D31  00C5               	movwf	??___ftmul+1
  6391  0D32  0840               	movf	___ftmul@f1+2,w
  6392  0D33  00C6               	movwf	??___ftmul+2
  6393  0D34  3010               	movlw	16
  6394  0D35                     u2865:	
  6395  0D35  1003               	clrc
  6396  0D36  0CC6               	rrf	??___ftmul+2,f
  6397  0D37  0CC5               	rrf	??___ftmul+1,f
  6398  0D38  0CC4               	rrf	??___ftmul,f
  6399  0D39  3EFF               	addlw	-1
  6400  0D3A  1D03               	skipz
  6401  0D3B  2D35               	goto	u2865
  6402  0D3C  0844               	movf	??___ftmul,w
  6403  0D3D  00C7               	movwf	??___ftmul+3
  6404  0D3E  0847               	movf	??___ftmul+3,w
  6405  0D3F  00CD               	movwf	___ftmul@sign
  6406  0D40  0841               	movf	___ftmul@f2,w
  6407  0D41  00C4               	movwf	??___ftmul
  6408  0D42  0842               	movf	___ftmul@f2+1,w
  6409  0D43  00C5               	movwf	??___ftmul+1
  6410  0D44  0843               	movf	___ftmul@f2+2,w
  6411  0D45  00C6               	movwf	??___ftmul+2
  6412  0D46  3010               	movlw	16
  6413  0D47                     u2875:	
  6414  0D47  1003               	clrc
  6415  0D48  0CC6               	rrf	??___ftmul+2,f
  6416  0D49  0CC5               	rrf	??___ftmul+1,f
  6417  0D4A  0CC4               	rrf	??___ftmul,f
  6418  0D4B  3EFF               	addlw	-1
  6419  0D4C  1D03               	skipz
  6420  0D4D  2D47               	goto	u2875
  6421  0D4E  0844               	movf	??___ftmul,w
  6422  0D4F  00C7               	movwf	??___ftmul+3
  6423  0D50  0847               	movf	??___ftmul+3,w
  6424  0D51  06CD               	xorwf	___ftmul@sign,f
  6425  0D52  3080               	movlw	128
  6426  0D53  00C4               	movwf	??___ftmul
  6427  0D54  0844               	movf	??___ftmul,w
  6428  0D55  05CD               	andwf	___ftmul@sign,f
  6429  0D56  17BF               	bsf	___ftmul@f1+1,7
  6430  0D57  17C2               	bsf	___ftmul@f2+1,7
  6431  0D58  30FF               	movlw	255
  6432  0D59  05C1               	andwf	___ftmul@f2,f
  6433  0D5A  30FF               	movlw	255
  6434  0D5B  05C2               	andwf	___ftmul@f2+1,f
  6435  0D5C  3000               	movlw	0
  6436  0D5D  05C3               	andwf	___ftmul@f2+2,f
  6437  0D5E  3000               	movlw	0
  6438  0D5F  00C9               	movwf	___ftmul@f3_as_product
  6439  0D60  3000               	movlw	0
  6440  0D61  00CA               	movwf	___ftmul@f3_as_product+1
  6441  0D62  3000               	movlw	0
  6442  0D63  00CB               	movwf	___ftmul@f3_as_product+2
  6443  0D64  3007               	movlw	7
  6444  0D65  00C4               	movwf	??___ftmul
  6445  0D66  0844               	movf	??___ftmul,w
  6446  0D67  00CC               	movwf	___ftmul@cntr
  6447  0D68                     l2273:	
  6448  0D68  1C3E               	btfss	___ftmul@f1,0
  6449  0D69  2D78               	goto	l2277
  6450  0D6A  0841               	movf	___ftmul@f2,w
  6451  0D6B  07C9               	addwf	___ftmul@f3_as_product,f
  6452  0D6C  0842               	movf	___ftmul@f2+1,w
  6453  0D6D  1103               	clrz
  6454  0D6E  1803               	skipnc
  6455  0D6F  0A42               	incf	___ftmul@f2+1,w
  6456  0D70  1D03               	btfss	3,2
  6457  0D71  07CA               	addwf	___ftmul@f3_as_product+1,f
  6458  0D72  0843               	movf	___ftmul@f2+2,w
  6459  0D73  1103               	clrz
  6460  0D74  1803               	skipnc
  6461  0D75  0A43               	incf	___ftmul@f2+2,w
  6462  0D76  1D03               	btfss	3,2
  6463  0D77  07CB               	addwf	___ftmul@f3_as_product+2,f
  6464  0D78                     l2277:	
  6465  0D78  3001               	movlw	1
  6466  0D79                     u2905:	
  6467  0D79  1003               	clrc
  6468  0D7A  0CC0               	rrf	___ftmul@f1+2,f
  6469  0D7B  0CBF               	rrf	___ftmul@f1+1,f
  6470  0D7C  0CBE               	rrf	___ftmul@f1,f
  6471  0D7D  3EFF               	addlw	-1
  6472  0D7E  1D03               	skipz
  6473  0D7F  2D79               	goto	u2905
  6474  0D80  3001               	movlw	1
  6475  0D81                     u2915:	
  6476  0D81  1003               	clrc
  6477  0D82  0DC1               	rlf	___ftmul@f2,f
  6478  0D83  0DC2               	rlf	___ftmul@f2+1,f
  6479  0D84  0DC3               	rlf	___ftmul@f2+2,f
  6480  0D85  3EFF               	addlw	-1
  6481  0D86  1D03               	skipz
  6482  0D87  2D81               	goto	u2915
  6483  0D88  3001               	movlw	1
  6484  0D89  02CC               	subwf	___ftmul@cntr,f
  6485  0D8A  1D03               	btfss	3,2
  6486  0D8B  2D68               	goto	l2273
  6487  0D8C  3009               	movlw	9
  6488  0D8D  00C4               	movwf	??___ftmul
  6489  0D8E  0844               	movf	??___ftmul,w
  6490  0D8F  00CC               	movwf	___ftmul@cntr
  6491  0D90                     l2285:	
  6492  0D90  1C3E               	btfss	___ftmul@f1,0
  6493  0D91  2DA0               	goto	l2289
  6494  0D92  0841               	movf	___ftmul@f2,w
  6495  0D93  07C9               	addwf	___ftmul@f3_as_product,f
  6496  0D94  0842               	movf	___ftmul@f2+1,w
  6497  0D95  1103               	clrz
  6498  0D96  1803               	skipnc
  6499  0D97  0A42               	incf	___ftmul@f2+1,w
  6500  0D98  1D03               	btfss	3,2
  6501  0D99  07CA               	addwf	___ftmul@f3_as_product+1,f
  6502  0D9A  0843               	movf	___ftmul@f2+2,w
  6503  0D9B  1103               	clrz
  6504  0D9C  1803               	skipnc
  6505  0D9D  0A43               	incf	___ftmul@f2+2,w
  6506  0D9E  1D03               	btfss	3,2
  6507  0D9F  07CB               	addwf	___ftmul@f3_as_product+2,f
  6508  0DA0                     l2289:	
  6509  0DA0  3001               	movlw	1
  6510  0DA1                     u2955:	
  6511  0DA1  1003               	clrc
  6512  0DA2  0CC0               	rrf	___ftmul@f1+2,f
  6513  0DA3  0CBF               	rrf	___ftmul@f1+1,f
  6514  0DA4  0CBE               	rrf	___ftmul@f1,f
  6515  0DA5  3EFF               	addlw	-1
  6516  0DA6  1D03               	skipz
  6517  0DA7  2DA1               	goto	u2955
  6518  0DA8  3001               	movlw	1
  6519  0DA9                     u2965:	
  6520  0DA9  1003               	clrc
  6521  0DAA  0CCB               	rrf	___ftmul@f3_as_product+2,f
  6522  0DAB  0CCA               	rrf	___ftmul@f3_as_product+1,f
  6523  0DAC  0CC9               	rrf	___ftmul@f3_as_product,f
  6524  0DAD  3EFF               	addlw	-1
  6525  0DAE  1D03               	skipz
  6526  0DAF  2DA9               	goto	u2965
  6527  0DB0  3001               	movlw	1
  6528  0DB1  02CC               	subwf	___ftmul@cntr,f
  6529  0DB2  1D03               	btfss	3,2
  6530  0DB3  2D90               	goto	l2285
  6531  0DB4  0849               	movf	___ftmul@f3_as_product,w
  6532  0DB5  00A0               	movwf	___ftpack@arg
  6533  0DB6  084A               	movf	___ftmul@f3_as_product+1,w
  6534  0DB7  00A1               	movwf	___ftpack@arg+1
  6535  0DB8  084B               	movf	___ftmul@f3_as_product+2,w
  6536  0DB9  00A2               	movwf	___ftpack@arg+2
  6537  0DBA  0848               	movf	___ftmul@exp,w
  6538  0DBB  00C4               	movwf	??___ftmul
  6539  0DBC  0844               	movf	??___ftmul,w
  6540  0DBD  00A3               	movwf	___ftpack@exp
  6541  0DBE  084D               	movf	___ftmul@sign,w
  6542  0DBF  00C5               	movwf	??___ftmul+1
  6543  0DC0  0845               	movf	??___ftmul+1,w
  6544  0DC1  00A4               	movwf	___ftpack@sign
  6545  0DC2  120A  118A  278F   	fcall	___ftpack
  6546  0DC5  1283               	bcf	3,5	;RP0=0, select bank0
  6547  0DC6  1303               	bcf	3,6	;RP1=0, select bank0
  6548  0DC7  0820               	movf	?___ftpack,w
  6549  0DC8  00BE               	movwf	?___ftmul
  6550  0DC9  0821               	movf	?___ftpack+1,w
  6551  0DCA  00BF               	movwf	?___ftmul+1
  6552  0DCB  0822               	movf	?___ftpack+2,w
  6553  0DCC  00C0               	movwf	?___ftmul+2
  6554  0DCD  0008               	return
  6555  0DCE                     __end_of___ftmul:	
  6556                           
  6557                           	psect	text26
  6558  0A03                     __ptext26:	
  6559 ;; *************** function ___ftdiv *****************
  6560 ;; Defined at:
  6561 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;  f2              3   46[BANK0 ] float 
  6564 ;;  f1              3   49[BANK0 ] float 
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;  f3              3   57[BANK0 ] float 
  6567 ;;  sign            1   61[BANK0 ] unsigned char 
  6568 ;;  exp             1   60[BANK0 ] unsigned char 
  6569 ;;  cntr            1   56[BANK0 ] unsigned char 
  6570 ;; Return value:  Size  Location     Type
  6571 ;;                  3   46[BANK0 ] float 
  6572 ;; Registers used:
  6573 ;;		wreg, status,2, status,0, pclath, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6579 ;;      Params:         0       6       0       0       0
  6580 ;;      Locals:         0       6       0       0       0
  6581 ;;      Temps:          0       4       0       0       0
  6582 ;;      Totals:         0      16       0       0       0
  6583 ;;Total ram usage:       16 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:    3
  6586 ;; This function calls:
  6587 ;;		___ftpack
  6588 ;; This function is called by:
  6589 ;;		_CalcMQ135
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           
  6594                           ;psect for function ___ftdiv
  6595  0A03                     ___ftdiv:	
  6596                           
  6597                           ;incstack = 0
  6598                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6599  0A03  1283               	bcf	3,5	;RP0=0, select bank0
  6600  0A04  1303               	bcf	3,6	;RP1=0, select bank0
  6601  0A05  0851               	movf	___ftdiv@f1,w
  6602  0A06  00D4               	movwf	??___ftdiv
  6603  0A07  0852               	movf	___ftdiv@f1+1,w
  6604  0A08  00D5               	movwf	??___ftdiv+1
  6605  0A09  0853               	movf	___ftdiv@f1+2,w
  6606  0A0A  00D6               	movwf	??___ftdiv+2
  6607  0A0B  1003               	clrc
  6608  0A0C  0D55               	rlf	??___ftdiv+1,w
  6609  0A0D  0D56               	rlf	??___ftdiv+2,w
  6610  0A0E  00D7               	movwf	??___ftdiv+3
  6611  0A0F  0857               	movf	??___ftdiv+3,w
  6612  0A10  00DC               	movwf	___ftdiv@exp
  6613  0A11  08DC               	movf	___ftdiv@exp,f
  6614  0A12  1D03               	skipz
  6615  0A13  2A1B               	goto	l2213
  6616  0A14  3000               	movlw	0
  6617  0A15  00CE               	movwf	?___ftdiv
  6618  0A16  3000               	movlw	0
  6619  0A17  00CF               	movwf	?___ftdiv+1
  6620  0A18  3000               	movlw	0
  6621  0A19  00D0               	movwf	?___ftdiv+2
  6622  0A1A  0008               	return
  6623  0A1B                     l2213:	
  6624  0A1B  084E               	movf	___ftdiv@f2,w
  6625  0A1C  00D4               	movwf	??___ftdiv
  6626  0A1D  084F               	movf	___ftdiv@f2+1,w
  6627  0A1E  00D5               	movwf	??___ftdiv+1
  6628  0A1F  0850               	movf	___ftdiv@f2+2,w
  6629  0A20  00D6               	movwf	??___ftdiv+2
  6630  0A21  1003               	clrc
  6631  0A22  0D55               	rlf	??___ftdiv+1,w
  6632  0A23  0D56               	rlf	??___ftdiv+2,w
  6633  0A24  00D7               	movwf	??___ftdiv+3
  6634  0A25  0857               	movf	??___ftdiv+3,w
  6635  0A26  00DD               	movwf	___ftdiv@sign
  6636  0A27  08DD               	movf	___ftdiv@sign,f
  6637  0A28  1D03               	skipz
  6638  0A29  2A31               	goto	l2219
  6639  0A2A  3000               	movlw	0
  6640  0A2B  00CE               	movwf	?___ftdiv
  6641  0A2C  3000               	movlw	0
  6642  0A2D  00CF               	movwf	?___ftdiv+1
  6643  0A2E  3000               	movlw	0
  6644  0A2F  00D0               	movwf	?___ftdiv+2
  6645  0A30  0008               	return
  6646  0A31                     l2219:	
  6647  0A31  3000               	movlw	0
  6648  0A32  00D9               	movwf	___ftdiv@f3
  6649  0A33  3000               	movlw	0
  6650  0A34  00DA               	movwf	___ftdiv@f3+1
  6651  0A35  3000               	movlw	0
  6652  0A36  00DB               	movwf	___ftdiv@f3+2
  6653  0A37  3089               	movlw	137
  6654  0A38  075D               	addwf	___ftdiv@sign,w
  6655  0A39  00D4               	movwf	??___ftdiv
  6656  0A3A  0854               	movf	??___ftdiv,w
  6657  0A3B  02DC               	subwf	___ftdiv@exp,f
  6658  0A3C  0851               	movf	___ftdiv@f1,w
  6659  0A3D  00D4               	movwf	??___ftdiv
  6660  0A3E  0852               	movf	___ftdiv@f1+1,w
  6661  0A3F  00D5               	movwf	??___ftdiv+1
  6662  0A40  0853               	movf	___ftdiv@f1+2,w
  6663  0A41  00D6               	movwf	??___ftdiv+2
  6664  0A42  3010               	movlw	16
  6665  0A43                     u2785:	
  6666  0A43  1003               	clrc
  6667  0A44  0CD6               	rrf	??___ftdiv+2,f
  6668  0A45  0CD5               	rrf	??___ftdiv+1,f
  6669  0A46  0CD4               	rrf	??___ftdiv,f
  6670  0A47  3EFF               	addlw	-1
  6671  0A48  1D03               	skipz
  6672  0A49  2A43               	goto	u2785
  6673  0A4A  0854               	movf	??___ftdiv,w
  6674  0A4B  00D7               	movwf	??___ftdiv+3
  6675  0A4C  0857               	movf	??___ftdiv+3,w
  6676  0A4D  00DD               	movwf	___ftdiv@sign
  6677  0A4E  084E               	movf	___ftdiv@f2,w
  6678  0A4F  00D4               	movwf	??___ftdiv
  6679  0A50  084F               	movf	___ftdiv@f2+1,w
  6680  0A51  00D5               	movwf	??___ftdiv+1
  6681  0A52  0850               	movf	___ftdiv@f2+2,w
  6682  0A53  00D6               	movwf	??___ftdiv+2
  6683  0A54  3010               	movlw	16
  6684  0A55                     u2795:	
  6685  0A55  1003               	clrc
  6686  0A56  0CD6               	rrf	??___ftdiv+2,f
  6687  0A57  0CD5               	rrf	??___ftdiv+1,f
  6688  0A58  0CD4               	rrf	??___ftdiv,f
  6689  0A59  3EFF               	addlw	-1
  6690  0A5A  1D03               	skipz
  6691  0A5B  2A55               	goto	u2795
  6692  0A5C  0854               	movf	??___ftdiv,w
  6693  0A5D  00D7               	movwf	??___ftdiv+3
  6694  0A5E  0857               	movf	??___ftdiv+3,w
  6695  0A5F  06DD               	xorwf	___ftdiv@sign,f
  6696  0A60  3080               	movlw	128
  6697  0A61  00D4               	movwf	??___ftdiv
  6698  0A62  0854               	movf	??___ftdiv,w
  6699  0A63  05DD               	andwf	___ftdiv@sign,f
  6700  0A64  17D2               	bsf	___ftdiv@f1+1,7
  6701  0A65  30FF               	movlw	255
  6702  0A66  05D1               	andwf	___ftdiv@f1,f
  6703  0A67  30FF               	movlw	255
  6704  0A68  05D2               	andwf	___ftdiv@f1+1,f
  6705  0A69  3000               	movlw	0
  6706  0A6A  05D3               	andwf	___ftdiv@f1+2,f
  6707  0A6B  17CF               	bsf	___ftdiv@f2+1,7
  6708  0A6C  30FF               	movlw	255
  6709  0A6D  05CE               	andwf	___ftdiv@f2,f
  6710  0A6E  30FF               	movlw	255
  6711  0A6F  05CF               	andwf	___ftdiv@f2+1,f
  6712  0A70  3000               	movlw	0
  6713  0A71  05D0               	andwf	___ftdiv@f2+2,f
  6714  0A72  3018               	movlw	24
  6715  0A73  00D4               	movwf	??___ftdiv
  6716  0A74  0854               	movf	??___ftdiv,w
  6717  0A75  00D8               	movwf	___ftdiv@cntr
  6718  0A76                     l2233:	
  6719  0A76  3001               	movlw	1
  6720  0A77                     u2805:	
  6721  0A77  1003               	clrc
  6722  0A78  0DD9               	rlf	___ftdiv@f3,f
  6723  0A79  0DDA               	rlf	___ftdiv@f3+1,f
  6724  0A7A  0DDB               	rlf	___ftdiv@f3+2,f
  6725  0A7B  3EFF               	addlw	-1
  6726  0A7C  1D03               	skipz
  6727  0A7D  2A77               	goto	u2805
  6728  0A7E  0850               	movf	___ftdiv@f2+2,w
  6729  0A7F  0253               	subwf	___ftdiv@f1+2,w
  6730  0A80  1D03               	skipz
  6731  0A81  2A88               	goto	u2815
  6732  0A82  084F               	movf	___ftdiv@f2+1,w
  6733  0A83  0252               	subwf	___ftdiv@f1+1,w
  6734  0A84  1D03               	skipz
  6735  0A85  2A88               	goto	u2815
  6736  0A86  084E               	movf	___ftdiv@f2,w
  6737  0A87  0251               	subwf	___ftdiv@f1,w
  6738  0A88                     u2815:	
  6739  0A88  1C03               	skipc
  6740  0A89  2A95               	goto	l2241
  6741  0A8A  084E               	movf	___ftdiv@f2,w
  6742  0A8B  02D1               	subwf	___ftdiv@f1,f
  6743  0A8C  084F               	movf	___ftdiv@f2+1,w
  6744  0A8D  1C03               	skipc
  6745  0A8E  0F4F               	incfsz	___ftdiv@f2+1,w
  6746  0A8F  02D2               	subwf	___ftdiv@f1+1,f
  6747  0A90  0850               	movf	___ftdiv@f2+2,w
  6748  0A91  1C03               	skipc
  6749  0A92  0A50               	incf	___ftdiv@f2+2,w
  6750  0A93  02D3               	subwf	___ftdiv@f1+2,f
  6751  0A94  1459               	bsf	___ftdiv@f3,0
  6752  0A95                     l2241:	
  6753  0A95  3001               	movlw	1
  6754  0A96                     u2825:	
  6755  0A96  1003               	clrc
  6756  0A97  0DD1               	rlf	___ftdiv@f1,f
  6757  0A98  0DD2               	rlf	___ftdiv@f1+1,f
  6758  0A99  0DD3               	rlf	___ftdiv@f1+2,f
  6759  0A9A  3EFF               	addlw	-1
  6760  0A9B  1D03               	skipz
  6761  0A9C  2A96               	goto	u2825
  6762  0A9D  3001               	movlw	1
  6763  0A9E  02D8               	subwf	___ftdiv@cntr,f
  6764  0A9F  1D03               	btfss	3,2
  6765  0AA0  2A76               	goto	l2233
  6766  0AA1  0859               	movf	___ftdiv@f3,w
  6767  0AA2  00A0               	movwf	___ftpack@arg
  6768  0AA3  085A               	movf	___ftdiv@f3+1,w
  6769  0AA4  00A1               	movwf	___ftpack@arg+1
  6770  0AA5  085B               	movf	___ftdiv@f3+2,w
  6771  0AA6  00A2               	movwf	___ftpack@arg+2
  6772  0AA7  085C               	movf	___ftdiv@exp,w
  6773  0AA8  00D4               	movwf	??___ftdiv
  6774  0AA9  0854               	movf	??___ftdiv,w
  6775  0AAA  00A3               	movwf	___ftpack@exp
  6776  0AAB  085D               	movf	___ftdiv@sign,w
  6777  0AAC  00D5               	movwf	??___ftdiv+1
  6778  0AAD  0855               	movf	??___ftdiv+1,w
  6779  0AAE  00A4               	movwf	___ftpack@sign
  6780  0AAF  120A  118A  278F   	fcall	___ftpack
  6781  0AB2  1283               	bcf	3,5	;RP0=0, select bank0
  6782  0AB3  1303               	bcf	3,6	;RP1=0, select bank0
  6783  0AB4  0820               	movf	?___ftpack,w
  6784  0AB5  00CE               	movwf	?___ftdiv
  6785  0AB6  0821               	movf	?___ftpack+1,w
  6786  0AB7  00CF               	movwf	?___ftdiv+1
  6787  0AB8  0822               	movf	?___ftpack+2,w
  6788  0AB9  00D0               	movwf	?___ftdiv+2
  6789  0ABA  0008               	return
  6790  0ABB                     __end_of___ftdiv:	
  6791                           
  6792                           	psect	text27
  6793  0DCE                     __ptext27:	
  6794 ;; *************** function ___ftadd *****************
  6795 ;; Defined at:
  6796 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  6797 ;; Parameters:    Size  Location     Type
  6798 ;;  f1              3   17[BANK0 ] float 
  6799 ;;  f2              3   20[BANK0 ] float 
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  exp1            1   29[BANK0 ] unsigned char 
  6802 ;;  exp2            1   28[BANK0 ] unsigned char 
  6803 ;;  sign            1   27[BANK0 ] unsigned char 
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  3   17[BANK0 ] float 
  6806 ;; Registers used:
  6807 ;;		wreg, status,2, status,0, pclath, cstack
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6813 ;;      Params:         0       6       0       0       0
  6814 ;;      Locals:         0       3       0       0       0
  6815 ;;      Temps:          0       4       0       0       0
  6816 ;;      Totals:         0      13       0       0       0
  6817 ;;Total ram usage:       13 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:    3
  6820 ;; This function calls:
  6821 ;;		___ftpack
  6822 ;; This function is called by:
  6823 ;;		_displayPPM
  6824 ;;		_CalcMQ135
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           
  6829                           ;psect for function ___ftadd
  6830  0DCE                     ___ftadd:	
  6831                           
  6832                           ;incstack = 0
  6833                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6834  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  6835  0DCF  1303               	bcf	3,6	;RP1=0, select bank0
  6836  0DD0  0831               	movf	___ftadd@f1,w
  6837  0DD1  00B7               	movwf	??___ftadd
  6838  0DD2  0832               	movf	___ftadd@f1+1,w
  6839  0DD3  00B8               	movwf	??___ftadd+1
  6840  0DD4  0833               	movf	___ftadd@f1+2,w
  6841  0DD5  00B9               	movwf	??___ftadd+2
  6842  0DD6  1003               	clrc
  6843  0DD7  0D38               	rlf	??___ftadd+1,w
  6844  0DD8  0D39               	rlf	??___ftadd+2,w
  6845  0DD9  00BA               	movwf	??___ftadd+3
  6846  0DDA  083A               	movf	??___ftadd+3,w
  6847  0DDB  00BD               	movwf	___ftadd@exp1
  6848  0DDC  0834               	movf	___ftadd@f2,w
  6849  0DDD  00B7               	movwf	??___ftadd
  6850  0DDE  0835               	movf	___ftadd@f2+1,w
  6851  0DDF  00B8               	movwf	??___ftadd+1
  6852  0DE0  0836               	movf	___ftadd@f2+2,w
  6853  0DE1  00B9               	movwf	??___ftadd+2
  6854  0DE2  1003               	clrc
  6855  0DE3  0D38               	rlf	??___ftadd+1,w
  6856  0DE4  0D39               	rlf	??___ftadd+2,w
  6857  0DE5  00BA               	movwf	??___ftadd+3
  6858  0DE6  083A               	movf	??___ftadd+3,w
  6859  0DE7  00BC               	movwf	___ftadd@exp2
  6860  0DE8  083D               	movf	___ftadd@exp1,w
  6861  0DE9  1903               	btfsc	3,2
  6862  0DEA  2DF7               	goto	l2143
  6863  0DEB  083C               	movf	___ftadd@exp2,w
  6864  0DEC  023D               	subwf	___ftadd@exp1,w
  6865  0DED  1803               	skipnc
  6866  0DEE  2DFE               	goto	l2147
  6867  0DEF  033D               	decf	___ftadd@exp1,w
  6868  0DF0  3AFF               	xorlw	255
  6869  0DF1  073C               	addwf	___ftadd@exp2,w
  6870  0DF2  00B7               	movwf	??___ftadd
  6871  0DF3  3019               	movlw	25
  6872  0DF4  0237               	subwf	??___ftadd,w
  6873  0DF5  1C03               	skipc
  6874  0DF6  2DFE               	goto	l2147
  6875  0DF7                     l2143:	
  6876  0DF7  0834               	movf	___ftadd@f2,w
  6877  0DF8  00B1               	movwf	?___ftadd
  6878  0DF9  0835               	movf	___ftadd@f2+1,w
  6879  0DFA  00B2               	movwf	?___ftadd+1
  6880  0DFB  0836               	movf	___ftadd@f2+2,w
  6881  0DFC  00B3               	movwf	?___ftadd+2
  6882  0DFD  0008               	return
  6883  0DFE                     l2147:	
  6884  0DFE  083C               	movf	___ftadd@exp2,w
  6885  0DFF  1903               	btfsc	3,2
  6886  0E00  0008               	return
  6887  0E01  083D               	movf	___ftadd@exp1,w
  6888  0E02  023C               	subwf	___ftadd@exp2,w
  6889  0E03  1803               	skipnc
  6890  0E04  2E0D               	goto	l2153
  6891  0E05  033C               	decf	___ftadd@exp2,w
  6892  0E06  3AFF               	xorlw	255
  6893  0E07  073D               	addwf	___ftadd@exp1,w
  6894  0E08  00B7               	movwf	??___ftadd
  6895  0E09  3019               	movlw	25
  6896  0E0A  0237               	subwf	??___ftadd,w
  6897  0E0B  1803               	btfsc	3,0
  6898  0E0C  0008               	return
  6899  0E0D                     l2153:	
  6900  0E0D  3006               	movlw	6
  6901  0E0E  00B7               	movwf	??___ftadd
  6902  0E0F  0837               	movf	??___ftadd,w
  6903  0E10  00BB               	movwf	___ftadd@sign
  6904  0E11  1BB3               	btfsc	___ftadd@f1+2,7
  6905  0E12  17BB               	bsf	___ftadd@sign,7
  6906  0E13  1BB6               	btfsc	___ftadd@f2+2,7
  6907  0E14  173B               	bsf	___ftadd@sign,6
  6908  0E15  17B2               	bsf	___ftadd@f1+1,7
  6909  0E16  30FF               	movlw	255
  6910  0E17  05B1               	andwf	___ftadd@f1,f
  6911  0E18  30FF               	movlw	255
  6912  0E19  05B2               	andwf	___ftadd@f1+1,f
  6913  0E1A  3000               	movlw	0
  6914  0E1B  05B3               	andwf	___ftadd@f1+2,f
  6915  0E1C  17B5               	bsf	___ftadd@f2+1,7
  6916  0E1D  30FF               	movlw	255
  6917  0E1E  05B4               	andwf	___ftadd@f2,f
  6918  0E1F  30FF               	movlw	255
  6919  0E20  05B5               	andwf	___ftadd@f2+1,f
  6920  0E21  3000               	movlw	0
  6921  0E22  05B6               	andwf	___ftadd@f2+2,f
  6922  0E23  083C               	movf	___ftadd@exp2,w
  6923  0E24  023D               	subwf	___ftadd@exp1,w
  6924  0E25  1803               	skipnc
  6925  0E26  2E4D               	goto	l2175
  6926  0E27                     l2165:	
  6927  0E27  3001               	movlw	1
  6928  0E28                     u2615:	
  6929  0E28  1003               	clrc
  6930  0E29  0DB4               	rlf	___ftadd@f2,f
  6931  0E2A  0DB5               	rlf	___ftadd@f2+1,f
  6932  0E2B  0DB6               	rlf	___ftadd@f2+2,f
  6933  0E2C  3EFF               	addlw	-1
  6934  0E2D  1D03               	skipz
  6935  0E2E  2E28               	goto	u2615
  6936  0E2F  3001               	movlw	1
  6937  0E30  02BC               	subwf	___ftadd@exp2,f
  6938  0E31  083C               	movf	___ftadd@exp2,w
  6939  0E32  063D               	xorwf	___ftadd@exp1,w
  6940  0E33  1903               	skipnz
  6941  0E34  2E48               	goto	l2173
  6942  0E35  3001               	movlw	1
  6943  0E36  02BB               	subwf	___ftadd@sign,f
  6944  0E37  083B               	movf	___ftadd@sign,w
  6945  0E38  3907               	andlw	7
  6946  0E39  1903               	btfsc	3,2
  6947  0E3A  2E48               	goto	l2173
  6948  0E3B  2E27               	goto	l2165
  6949  0E3C                     l2171:	
  6950  0E3C  3001               	movlw	1
  6951  0E3D                     u2645:	
  6952  0E3D  1003               	clrc
  6953  0E3E  0CB3               	rrf	___ftadd@f1+2,f
  6954  0E3F  0CB2               	rrf	___ftadd@f1+1,f
  6955  0E40  0CB1               	rrf	___ftadd@f1,f
  6956  0E41  3EFF               	addlw	-1
  6957  0E42  1D03               	skipz
  6958  0E43  2E3D               	goto	u2645
  6959  0E44  3001               	movlw	1
  6960  0E45  00B7               	movwf	??___ftadd
  6961  0E46  0837               	movf	??___ftadd,w
  6962  0E47  07BD               	addwf	___ftadd@exp1,f
  6963  0E48                     l2173:	
  6964  0E48  083D               	movf	___ftadd@exp1,w
  6965  0E49  063C               	xorwf	___ftadd@exp2,w
  6966  0E4A  1903               	btfsc	3,2
  6967  0E4B  2E76               	goto	l629
  6968  0E4C  2E3C               	goto	l2171
  6969  0E4D                     l2175:	
  6970  0E4D  083D               	movf	___ftadd@exp1,w
  6971  0E4E  023C               	subwf	___ftadd@exp2,w
  6972  0E4F  1803               	skipnc
  6973  0E50  2E76               	goto	l629
  6974  0E51                     l2177:	
  6975  0E51  3001               	movlw	1
  6976  0E52                     u2675:	
  6977  0E52  1003               	clrc
  6978  0E53  0DB1               	rlf	___ftadd@f1,f
  6979  0E54  0DB2               	rlf	___ftadd@f1+1,f
  6980  0E55  0DB3               	rlf	___ftadd@f1+2,f
  6981  0E56  3EFF               	addlw	-1
  6982  0E57  1D03               	skipz
  6983  0E58  2E52               	goto	u2675
  6984  0E59  3001               	movlw	1
  6985  0E5A  02BD               	subwf	___ftadd@exp1,f
  6986  0E5B  083C               	movf	___ftadd@exp2,w
  6987  0E5C  063D               	xorwf	___ftadd@exp1,w
  6988  0E5D  1903               	skipnz
  6989  0E5E  2E72               	goto	l2185
  6990  0E5F  3001               	movlw	1
  6991  0E60  02BB               	subwf	___ftadd@sign,f
  6992  0E61  083B               	movf	___ftadd@sign,w
  6993  0E62  3907               	andlw	7
  6994  0E63  1903               	btfsc	3,2
  6995  0E64  2E72               	goto	l2185
  6996  0E65  2E51               	goto	l2177
  6997  0E66                     l2183:	
  6998  0E66  3001               	movlw	1
  6999  0E67                     u2705:	
  7000  0E67  1003               	clrc
  7001  0E68  0CB6               	rrf	___ftadd@f2+2,f
  7002  0E69  0CB5               	rrf	___ftadd@f2+1,f
  7003  0E6A  0CB4               	rrf	___ftadd@f2,f
  7004  0E6B  3EFF               	addlw	-1
  7005  0E6C  1D03               	skipz
  7006  0E6D  2E67               	goto	u2705
  7007  0E6E  3001               	movlw	1
  7008  0E6F  00B7               	movwf	??___ftadd
  7009  0E70  0837               	movf	??___ftadd,w
  7010  0E71  07BC               	addwf	___ftadd@exp2,f
  7011  0E72                     l2185:	
  7012  0E72  083D               	movf	___ftadd@exp1,w
  7013  0E73  063C               	xorwf	___ftadd@exp2,w
  7014  0E74  1D03               	skipz
  7015  0E75  2E66               	goto	l2183
  7016  0E76                     l629:	
  7017  0E76  1FBB               	btfss	___ftadd@sign,7
  7018  0E77  2E88               	goto	l2189
  7019  0E78  30FF               	movlw	255
  7020  0E79  06B1               	xorwf	___ftadd@f1,f
  7021  0E7A  30FF               	movlw	255
  7022  0E7B  06B2               	xorwf	___ftadd@f1+1,f
  7023  0E7C  30FF               	movlw	255
  7024  0E7D  06B3               	xorwf	___ftadd@f1+2,f
  7025  0E7E  3001               	movlw	1
  7026  0E7F  07B1               	addwf	___ftadd@f1,f
  7027  0E80  3000               	movlw	0
  7028  0E81  1803               	skipnc
  7029  0E82  3001               	movlw	1
  7030  0E83  07B2               	addwf	___ftadd@f1+1,f
  7031  0E84  3000               	movlw	0
  7032  0E85  1803               	skipnc
  7033  0E86  3001               	movlw	1
  7034  0E87  07B3               	addwf	___ftadd@f1+2,f
  7035  0E88                     l2189:	
  7036  0E88  1F3B               	btfss	___ftadd@sign,6
  7037  0E89  2E9A               	goto	l2193
  7038  0E8A  30FF               	movlw	255
  7039  0E8B  06B4               	xorwf	___ftadd@f2,f
  7040  0E8C  30FF               	movlw	255
  7041  0E8D  06B5               	xorwf	___ftadd@f2+1,f
  7042  0E8E  30FF               	movlw	255
  7043  0E8F  06B6               	xorwf	___ftadd@f2+2,f
  7044  0E90  3001               	movlw	1
  7045  0E91  07B4               	addwf	___ftadd@f2,f
  7046  0E92  3000               	movlw	0
  7047  0E93  1803               	skipnc
  7048  0E94  3001               	movlw	1
  7049  0E95  07B5               	addwf	___ftadd@f2+1,f
  7050  0E96  3000               	movlw	0
  7051  0E97  1803               	skipnc
  7052  0E98  3001               	movlw	1
  7053  0E99  07B6               	addwf	___ftadd@f2+2,f
  7054  0E9A                     l2193:	
  7055  0E9A  01BB               	clrf	___ftadd@sign
  7056  0E9B  0831               	movf	___ftadd@f1,w
  7057  0E9C  07B4               	addwf	___ftadd@f2,f
  7058  0E9D  0832               	movf	___ftadd@f1+1,w
  7059  0E9E  1103               	clrz
  7060  0E9F  1803               	skipnc
  7061  0EA0  0A32               	incf	___ftadd@f1+1,w
  7062  0EA1  1D03               	btfss	3,2
  7063  0EA2  07B5               	addwf	___ftadd@f2+1,f
  7064  0EA3  0833               	movf	___ftadd@f1+2,w
  7065  0EA4  1103               	clrz
  7066  0EA5  1803               	skipnc
  7067  0EA6  0A33               	incf	___ftadd@f1+2,w
  7068  0EA7  1D03               	btfss	3,2
  7069  0EA8  07B6               	addwf	___ftadd@f2+2,f
  7070  0EA9  1FB6               	btfss	___ftadd@f2+2,7
  7071  0EAA  2EBD               	goto	l2203
  7072  0EAB  30FF               	movlw	255
  7073  0EAC  06B4               	xorwf	___ftadd@f2,f
  7074  0EAD  30FF               	movlw	255
  7075  0EAE  06B5               	xorwf	___ftadd@f2+1,f
  7076  0EAF  30FF               	movlw	255
  7077  0EB0  06B6               	xorwf	___ftadd@f2+2,f
  7078  0EB1  3001               	movlw	1
  7079  0EB2  07B4               	addwf	___ftadd@f2,f
  7080  0EB3  3000               	movlw	0
  7081  0EB4  1803               	skipnc
  7082  0EB5  3001               	movlw	1
  7083  0EB6  07B5               	addwf	___ftadd@f2+1,f
  7084  0EB7  3000               	movlw	0
  7085  0EB8  1803               	skipnc
  7086  0EB9  3001               	movlw	1
  7087  0EBA  07B6               	addwf	___ftadd@f2+2,f
  7088  0EBB  01BB               	clrf	___ftadd@sign
  7089  0EBC  0ABB               	incf	___ftadd@sign,f
  7090  0EBD                     l2203:	
  7091  0EBD  0834               	movf	___ftadd@f2,w
  7092  0EBE  00A0               	movwf	___ftpack@arg
  7093  0EBF  0835               	movf	___ftadd@f2+1,w
  7094  0EC0  00A1               	movwf	___ftpack@arg+1
  7095  0EC1  0836               	movf	___ftadd@f2+2,w
  7096  0EC2  00A2               	movwf	___ftpack@arg+2
  7097  0EC3  083D               	movf	___ftadd@exp1,w
  7098  0EC4  00B7               	movwf	??___ftadd
  7099  0EC5  0837               	movf	??___ftadd,w
  7100  0EC6  00A3               	movwf	___ftpack@exp
  7101  0EC7  083B               	movf	___ftadd@sign,w
  7102  0EC8  00B8               	movwf	??___ftadd+1
  7103  0EC9  0838               	movf	??___ftadd+1,w
  7104  0ECA  00A4               	movwf	___ftpack@sign
  7105  0ECB  120A  118A  278F   	fcall	___ftpack
  7106  0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  7107  0ECF  1303               	bcf	3,6	;RP1=0, select bank0
  7108  0ED0  0820               	movf	?___ftpack,w
  7109  0ED1  00B1               	movwf	?___ftadd
  7110  0ED2  0821               	movf	?___ftpack+1,w
  7111  0ED3  00B2               	movwf	?___ftadd+1
  7112  0ED4  0822               	movf	?___ftpack+2,w
  7113  0ED5  00B3               	movwf	?___ftadd+2
  7114  0ED6  0008               	return
  7115  0ED7                     __end_of___ftadd:	
  7116                           
  7117                           	psect	text28
  7118  15C0                     __ptext28:	
  7119 ;; *************** function ___awtoft *****************
  7120 ;; Defined at:
  7121 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;  c               2    8[BANK0 ] int 
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;  sign            1   13[BANK0 ] unsigned char 
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  3    8[BANK0 ] float 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0, pclath, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7135 ;;      Params:         0       3       0       0       0
  7136 ;;      Locals:         0       1       0       0       0
  7137 ;;      Temps:          0       2       0       0       0
  7138 ;;      Totals:         0       6       0       0       0
  7139 ;;Total ram usage:        6 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    3
  7142 ;; This function calls:
  7143 ;;		___ftpack
  7144 ;; This function is called by:
  7145 ;;		_displayPPM
  7146 ;;		_CalcMQ135
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           
  7151                           ;psect for function ___awtoft
  7152  15C0                     ___awtoft:	
  7153                           
  7154                           ;incstack = 0
  7155                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7156  15C0  1283               	bcf	3,5	;RP0=0, select bank0
  7157  15C1  1303               	bcf	3,6	;RP1=0, select bank0
  7158  15C2  01AD               	clrf	___awtoft@sign
  7159  15C3  1FA9               	btfss	___awtoft@c+1,7
  7160  15C4  2DCC               	goto	l2131
  7161  15C5  09A8               	comf	___awtoft@c,f
  7162  15C6  09A9               	comf	___awtoft@c+1,f
  7163  15C7  0AA8               	incf	___awtoft@c,f
  7164  15C8  1903               	skipnz
  7165  15C9  0AA9               	incf	___awtoft@c+1,f
  7166  15CA  01AD               	clrf	___awtoft@sign
  7167  15CB  0AAD               	incf	___awtoft@sign,f
  7168  15CC                     l2131:	
  7169  15CC  0828               	movf	___awtoft@c,w
  7170  15CD  00A0               	movwf	___ftpack@arg
  7171  15CE  0829               	movf	___awtoft@c+1,w
  7172  15CF  00A1               	movwf	___ftpack@arg+1
  7173  15D0  01A2               	clrf	___ftpack@arg+2
  7174  15D1  308E               	movlw	142
  7175  15D2  00AB               	movwf	??___awtoft
  7176  15D3  082B               	movf	??___awtoft,w
  7177  15D4  00A3               	movwf	___ftpack@exp
  7178  15D5  082D               	movf	___awtoft@sign,w
  7179  15D6  00AC               	movwf	??___awtoft+1
  7180  15D7  082C               	movf	??___awtoft+1,w
  7181  15D8  00A4               	movwf	___ftpack@sign
  7182  15D9  120A  118A  278F   	fcall	___ftpack
  7183  15DC  1283               	bcf	3,5	;RP0=0, select bank0
  7184  15DD  1303               	bcf	3,6	;RP1=0, select bank0
  7185  15DE  0820               	movf	?___ftpack,w
  7186  15DF  00A8               	movwf	?___awtoft
  7187  15E0  0821               	movf	?___ftpack+1,w
  7188  15E1  00A9               	movwf	?___awtoft+1
  7189  15E2  0822               	movf	?___ftpack+2,w
  7190  15E3  00AA               	movwf	?___awtoft+2
  7191  15E4  0008               	return
  7192  15E5                     __end_of___awtoft:	
  7193                           
  7194                           	psect	text29
  7195  078F                     __ptext29:	
  7196 ;; *************** function ___ftpack *****************
  7197 ;; Defined at:
  7198 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  arg             3    0[BANK0 ] unsigned um
  7201 ;;  exp             1    3[BANK0 ] unsigned char 
  7202 ;;  sign            1    4[BANK0 ] unsigned char 
  7203 ;; Auto vars:     Size  Location     Type
  7204 ;;		None
  7205 ;; Return value:  Size  Location     Type
  7206 ;;                  3    0[BANK0 ] float 
  7207 ;; Registers used:
  7208 ;;		wreg, status,2, status,0
  7209 ;; Tracked objects:
  7210 ;;		On entry : 0/0
  7211 ;;		On exit  : 0/0
  7212 ;;		Unchanged: 0/0
  7213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7214 ;;      Params:         0       5       0       0       0
  7215 ;;      Locals:         0       0       0       0       0
  7216 ;;      Temps:          0       3       0       0       0
  7217 ;;      Totals:         0       8       0       0       0
  7218 ;;Total ram usage:        8 bytes
  7219 ;; Hardware stack levels used:    1
  7220 ;; Hardware stack levels required when called:    2
  7221 ;; This function calls:
  7222 ;;		Nothing
  7223 ;; This function is called by:
  7224 ;;		___awtoft
  7225 ;;		___ftadd
  7226 ;;		___ftdiv
  7227 ;;		___ftmul
  7228 ;; This function uses a non-reentrant model
  7229 ;;
  7230                           
  7231                           
  7232                           ;psect for function ___ftpack
  7233  078F                     ___ftpack:	
  7234                           
  7235                           ;incstack = 0
  7236                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7237  078F  1283               	bcf	3,5	;RP0=0, select bank0
  7238  0790  1303               	bcf	3,6	;RP1=0, select bank0
  7239  0791  0823               	movf	___ftpack@exp,w
  7240  0792  1903               	btfsc	3,2
  7241  0793  2F99               	goto	l1879
  7242  0794  0822               	movf	___ftpack@arg+2,w
  7243  0795  0421               	iorwf	___ftpack@arg+1,w
  7244  0796  0420               	iorwf	___ftpack@arg,w
  7245  0797  1D03               	skipz
  7246  0798  2FAC               	goto	l1885
  7247  0799                     l1879:	
  7248  0799  3000               	movlw	0
  7249  079A  00A0               	movwf	?___ftpack
  7250  079B  3000               	movlw	0
  7251  079C  00A1               	movwf	?___ftpack+1
  7252  079D  3000               	movlw	0
  7253  079E  00A2               	movwf	?___ftpack+2
  7254  079F  0008               	return
  7255  07A0                     l1883:	
  7256  07A0  3001               	movlw	1
  7257  07A1  00A5               	movwf	??___ftpack
  7258  07A2  0825               	movf	??___ftpack,w
  7259  07A3  07A3               	addwf	___ftpack@exp,f
  7260  07A4  3001               	movlw	1
  7261  07A5                     u2005:	
  7262  07A5  1003               	clrc
  7263  07A6  0CA2               	rrf	___ftpack@arg+2,f
  7264  07A7  0CA1               	rrf	___ftpack@arg+1,f
  7265  07A8  0CA0               	rrf	___ftpack@arg,f
  7266  07A9  3EFF               	addlw	-1
  7267  07AA  1D03               	skipz
  7268  07AB  2FA5               	goto	u2005
  7269  07AC                     l1885:	
  7270  07AC  30FE               	movlw	254
  7271  07AD  0522               	andwf	___ftpack@arg+2,w
  7272  07AE  1903               	btfsc	3,2
  7273  07AF  2FC7               	goto	l600
  7274  07B0  2FA0               	goto	l1883
  7275  07B1                     l1887:	
  7276  07B1  3001               	movlw	1
  7277  07B2  00A5               	movwf	??___ftpack
  7278  07B3  0825               	movf	??___ftpack,w
  7279  07B4  07A3               	addwf	___ftpack@exp,f
  7280  07B5  3001               	movlw	1
  7281  07B6  07A0               	addwf	___ftpack@arg,f
  7282  07B7  3000               	movlw	0
  7283  07B8  1803               	skipnc
  7284  07B9  3001               	movlw	1
  7285  07BA  07A1               	addwf	___ftpack@arg+1,f
  7286  07BB  3000               	movlw	0
  7287  07BC  1803               	skipnc
  7288  07BD  3001               	movlw	1
  7289  07BE  07A2               	addwf	___ftpack@arg+2,f
  7290  07BF  3001               	movlw	1
  7291  07C0                     u2025:	
  7292  07C0  1003               	clrc
  7293  07C1  0CA2               	rrf	___ftpack@arg+2,f
  7294  07C2  0CA1               	rrf	___ftpack@arg+1,f
  7295  07C3  0CA0               	rrf	___ftpack@arg,f
  7296  07C4  3EFF               	addlw	-1
  7297  07C5  1D03               	skipz
  7298  07C6  2FC0               	goto	u2025
  7299  07C7                     l600:	
  7300  07C7  30FF               	movlw	255
  7301  07C8  0522               	andwf	___ftpack@arg+2,w
  7302  07C9  1903               	btfsc	3,2
  7303  07CA  2FD6               	goto	l1895
  7304  07CB  2FB1               	goto	l1887
  7305  07CC                     l1893:	
  7306  07CC  3001               	movlw	1
  7307  07CD  02A3               	subwf	___ftpack@exp,f
  7308  07CE  3001               	movlw	1
  7309  07CF                     u2045:	
  7310  07CF  1003               	clrc
  7311  07D0  0DA0               	rlf	___ftpack@arg,f
  7312  07D1  0DA1               	rlf	___ftpack@arg+1,f
  7313  07D2  0DA2               	rlf	___ftpack@arg+2,f
  7314  07D3  3EFF               	addlw	-1
  7315  07D4  1D03               	skipz
  7316  07D5  2FCF               	goto	u2045
  7317  07D6                     l1895:	
  7318  07D6  1FA1               	btfss	___ftpack@arg+1,7
  7319  07D7  2FCC               	goto	l1893
  7320  07D8  1823               	btfsc	___ftpack@exp,0
  7321  07D9  2FE0               	goto	l606
  7322  07DA  30FF               	movlw	255
  7323  07DB  05A0               	andwf	___ftpack@arg,f
  7324  07DC  307F               	movlw	127
  7325  07DD  05A1               	andwf	___ftpack@arg+1,f
  7326  07DE  30FF               	movlw	255
  7327  07DF  05A2               	andwf	___ftpack@arg+2,f
  7328  07E0                     l606:	
  7329  07E0  1003               	clrc
  7330  07E1  0CA3               	rrf	___ftpack@exp,f
  7331  07E2  0823               	movf	___ftpack@exp,w
  7332  07E3  00A5               	movwf	??___ftpack
  7333  07E4  01A6               	clrf	??___ftpack+1
  7334  07E5  01A7               	clrf	??___ftpack+2
  7335  07E6  3010               	movlw	16
  7336  07E7                     u2075:	
  7337  07E7  1003               	clrc
  7338  07E8  0DA5               	rlf	??___ftpack,f
  7339  07E9  0DA6               	rlf	??___ftpack+1,f
  7340  07EA  0DA7               	rlf	??___ftpack+2,f
  7341  07EB  3EFF               	addlw	-1
  7342  07EC  1D03               	skipz
  7343  07ED  2FE7               	goto	u2075
  7344  07EE  0825               	movf	??___ftpack,w
  7345  07EF  04A0               	iorwf	___ftpack@arg,f
  7346  07F0  0826               	movf	??___ftpack+1,w
  7347  07F1  04A1               	iorwf	___ftpack@arg+1,f
  7348  07F2  0827               	movf	??___ftpack+2,w
  7349  07F3  04A2               	iorwf	___ftpack@arg+2,f
  7350  07F4  0824               	movf	___ftpack@sign,w
  7351  07F5  1903               	btfsc	3,2
  7352  07F6  0008               	return
  7353  07F7  17A2               	bsf	___ftpack@arg+2,7
  7354  07F8  0008               	return
  7355  07F9                     __end_of___ftpack:	
  7356                           
  7357                           	psect	text30
  7358  14AE                     __ptext30:	
  7359 ;; *************** function _runClock *****************
  7360 ;; Defined at:
  7361 ;;		line 33 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\time_scheduler.h
      +"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;		None
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;		None
  7366 ;; Return value:  Size  Location     Type
  7367 ;;		None               void
  7368 ;; Registers used:
  7369 ;;		wreg, status,2, status,0
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7375 ;;      Params:         0       0       0       0       0
  7376 ;;      Locals:         0       0       0       0       0
  7377 ;;      Temps:          0       2       0       0       0
  7378 ;;      Totals:         0       2       0       0       0
  7379 ;;Total ram usage:        2 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; Hardware stack levels required when called:    2
  7382 ;; This function calls:
  7383 ;;		Nothing
  7384 ;; This function is called by:
  7385 ;;		_main
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           
  7390                           ;psect for function _runClock
  7391  14AE                     _runClock:	
  7392                           
  7393                           ;time_scheduler.h: 36: minutes++;
  7394                           
  7395                           ;incstack = 0
  7396                           ; Regs used in _runClock: [wreg+status,2+status,0]
  7397  14AE  3001               	movlw	1
  7398  14AF  1283               	bcf	3,5	;RP0=0, select bank0
  7399  14B0  1303               	bcf	3,6	;RP1=0, select bank0
  7400  14B1  00A0               	movwf	??_runClock
  7401  14B2  0820               	movf	??_runClock,w
  7402  14B3  07F9               	addwf	_minutes,f	;volatile
  7403                           
  7404                           ;time_scheduler.h: 37: if (minutes >= 60)
  7405  14B4  303C               	movlw	60
  7406  14B5  0279               	subwf	_minutes,w	;volatile
  7407  14B6  1C03               	skipc
  7408  14B7  2CC1               	goto	l2601
  7409                           
  7410                           ;time_scheduler.h: 38: {
  7411                           ;time_scheduler.h: 39: minutes = 0;
  7412  14B8  01F9               	clrf	_minutes	;volatile
  7413                           
  7414                           ;time_scheduler.h: 40: hours++;
  7415  14B9  3001               	movlw	1
  7416  14BA  00A0               	movwf	??_runClock
  7417  14BB  0820               	movf	??_runClock,w
  7418  14BC  07FA               	addwf	_hours,f	;volatile
  7419                           
  7420                           ;time_scheduler.h: 41: if (hours >= 24)
  7421  14BD  3018               	movlw	24
  7422  14BE  027A               	subwf	_hours,w	;volatile
  7423  14BF  1803               	btfsc	3,0
  7424                           
  7425                           ;time_scheduler.h: 42: {
  7426                           ;time_scheduler.h: 43: hours = 0;
  7427  14C0  01FA               	clrf	_hours	;volatile
  7428  14C1                     l2601:	
  7429                           
  7430                           ;time_scheduler.h: 44: }
  7431                           ;time_scheduler.h: 45: }
  7432                           ;time_scheduler.h: 46: _delay((unsigned long)((100)*(4000000/4000.0)));
  7433  14C1  3082               	movlw	130
  7434  14C2  00A1               	movwf	??_runClock+1
  7435  14C3  30DD               	movlw	221
  7436  14C4  00A0               	movwf	??_runClock
  7437  14C5                     u4837:	
  7438  14C5  0BA0               	decfsz	??_runClock,f
  7439  14C6  2CC5               	goto	u4837
  7440  14C7  0BA1               	decfsz	??_runClock+1,f
  7441  14C8  2CC5               	goto	u4837
  7442  14C9  2CCA               	nop2
  7443  14CA  0008               	return
  7444  14CB                     __end_of_runClock:	
  7445                           
  7446                           	psect	text31
  7447  07F9                     __ptext31:	
  7448 ;; *************** function _initInterrupt *****************
  7449 ;; Defined at:
  7450 ;;		line 76 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  7451 ;; Parameters:    Size  Location     Type
  7452 ;;		None
  7453 ;; Auto vars:     Size  Location     Type
  7454 ;;		None
  7455 ;; Return value:  Size  Location     Type
  7456 ;;		None               void
  7457 ;; Registers used:
  7458 ;;		None
  7459 ;; Tracked objects:
  7460 ;;		On entry : 0/0
  7461 ;;		On exit  : 0/0
  7462 ;;		Unchanged: 0/0
  7463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7464 ;;      Params:         0       0       0       0       0
  7465 ;;      Locals:         0       0       0       0       0
  7466 ;;      Temps:          0       0       0       0       0
  7467 ;;      Totals:         0       0       0       0       0
  7468 ;;Total ram usage:        0 bytes
  7469 ;; Hardware stack levels used:    1
  7470 ;; Hardware stack levels required when called:    2
  7471 ;; This function calls:
  7472 ;;		Nothing
  7473 ;; This function is called by:
  7474 ;;		_main
  7475 ;; This function uses a non-reentrant model
  7476 ;;
  7477                           
  7478                           
  7479                           ;psect for function _initInterrupt
  7480  07F9                     _initInterrupt:	
  7481                           
  7482                           ;main.c: 78: GIE = 1;
  7483                           
  7484                           ;incstack = 0
  7485                           ; Regs used in _initInterrupt: []
  7486  07F9  178B               	bsf	11,7	;volatile
  7487                           
  7488                           ;main.c: 79: INTE = 1;
  7489  07FA  160B               	bsf	11,4	;volatile
  7490                           
  7491                           ;main.c: 80: INTF = 0;
  7492  07FB  108B               	bcf	11,1	;volatile
  7493                           
  7494                           ;main.c: 81: INTEDG = 0;
  7495  07FC  1683               	bsf	3,5	;RP0=1, select bank1
  7496  07FD  1303               	bcf	3,6	;RP1=0, select bank1
  7497  07FE  1301               	bcf	1,6	;volatile
  7498  07FF  0008               	return
  7499  0800                     __end_of_initInterrupt:	
  7500                           
  7501                           	psect	text32
  7502  13DA                     __ptext32:	
  7503 ;; *************** function _initADC *****************
  7504 ;; Defined at:
  7505 ;;		line 63 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  7506 ;; Parameters:    Size  Location     Type
  7507 ;;		None
  7508 ;; Auto vars:     Size  Location     Type
  7509 ;;		None
  7510 ;; Return value:  Size  Location     Type
  7511 ;;		None               void
  7512 ;; Registers used:
  7513 ;;		wreg
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/0
  7516 ;;		On exit  : 0/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7519 ;;      Params:         0       0       0       0       0
  7520 ;;      Locals:         0       0       0       0       0
  7521 ;;      Temps:          0       0       0       0       0
  7522 ;;      Totals:         0       0       0       0       0
  7523 ;;Total ram usage:        0 bytes
  7524 ;; Hardware stack levels used:    1
  7525 ;; Hardware stack levels required when called:    2
  7526 ;; This function calls:
  7527 ;;		Nothing
  7528 ;; This function is called by:
  7529 ;;		_main
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           
  7534                           ;psect for function _initADC
  7535  13DA                     _initADC:	
  7536                           
  7537                           ;main.c: 65: ADCON1 = 0x80;
  7538                           
  7539                           ;incstack = 0
  7540                           ; Regs used in _initADC: [wreg]
  7541  13DA  3080               	movlw	128
  7542  13DB  1683               	bsf	3,5	;RP0=1, select bank1
  7543  13DC  1303               	bcf	3,6	;RP1=0, select bank1
  7544  13DD  009F               	movwf	31	;volatile
  7545                           
  7546                           ;main.c: 66: ADCON0 = 0x01;
  7547  13DE  3001               	movlw	1
  7548  13DF  1283               	bcf	3,5	;RP0=0, select bank0
  7549  13E0  1303               	bcf	3,6	;RP1=0, select bank0
  7550  13E1  009F               	movwf	31	;volatile
  7551  13E2  0008               	return
  7552  13E3                     __end_of_initADC:	
  7553                           
  7554                           	psect	text33
  7555  145A                     __ptext33:	
  7556 ;; *************** function _handleTemp *****************
  7557 ;; Defined at:
  7558 ;;		line 31 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\temp_module.h"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;		None
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;		None
  7563 ;; Return value:  Size  Location     Type
  7564 ;;                  1    wreg      unsigned char 
  7565 ;; Registers used:
  7566 ;;		wreg, status,2, btemp+1
  7567 ;; Tracked objects:
  7568 ;;		On entry : 0/0
  7569 ;;		On exit  : 0/0
  7570 ;;		Unchanged: 0/0
  7571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7572 ;;      Params:         0       0       0       0       0
  7573 ;;      Locals:         0       0       0       0       0
  7574 ;;      Temps:          0       0       0       0       0
  7575 ;;      Totals:         0       0       0       0       0
  7576 ;;Total ram usage:        0 bytes
  7577 ;; Hardware stack levels used:    1
  7578 ;; Hardware stack levels required when called:    2
  7579 ;; This function calls:
  7580 ;;		Nothing
  7581 ;; This function is called by:
  7582 ;;		_main
  7583 ;; This function uses a non-reentrant model
  7584 ;;
  7585                           
  7586                           
  7587                           ;psect for function _handleTemp
  7588  145A                     _handleTemp:	
  7589                           
  7590                           ;temp_module.h: 33: if (tempBuffer > 32)
  7591                           
  7592                           ;incstack = 0
  7593                           ; Regs used in _handleTemp: [wreg+status,2+btemp+1]
  7594  145A  1683               	bsf	3,5	;RP0=1, select bank1
  7595  145B  1303               	bcf	3,6	;RP1=0, select bank1
  7596  145C  084B               	movf	(_tempBuffer+1)^(0+128),w
  7597  145D  3A80               	xorlw	128
  7598  145E  00FF               	movwf	127
  7599  145F  3080               	movlw	128
  7600  1460  027F               	subwf	127,w
  7601  1461  1D03               	skipz
  7602  1462  2C65               	goto	u4705
  7603  1463  3021               	movlw	33
  7604  1464  024A               	subwf	_tempBuffer^(0+128),w
  7605  1465                     u4705:	
  7606  1465  1C03               	skipc
  7607  1466  2C6F               	goto	l236
  7608                           
  7609                           ;temp_module.h: 34: {
  7610                           ;temp_module.h: 35: RC5 = 1;
  7611  1467  1283               	bcf	3,5	;RP0=0, select bank0
  7612  1468  1303               	bcf	3,6	;RP1=0, select bank0
  7613  1469  1687               	bsf	7,5	;volatile
  7614                           
  7615                           ;temp_module.h: 36: tempFlag = 1;
  7616  146A  1683               	bsf	3,5	;RP0=1, select bank1
  7617  146B  1303               	bcf	3,6	;RP1=0, select bank1
  7618  146C  01D1               	clrf	_tempFlag^(0+128)
  7619  146D  0AD1               	incf	_tempFlag^(0+128),f
  7620                           
  7621                           ;temp_module.h: 38: }
  7622                           
  7623                           ;temp_module.h: 37: return 1;
  7624                           ;	Return value of _handleTemp is never used
  7625  146E  0008               	return
  7626  146F                     l236:	
  7627                           
  7628                           ;temp_module.h: 39: else
  7629                           ;temp_module.h: 40: {
  7630                           ;temp_module.h: 41: RC5 = 0;
  7631  146F  1283               	bcf	3,5	;RP0=0, select bank0
  7632  1470  1303               	bcf	3,6	;RP1=0, select bank0
  7633  1471  1287               	bcf	7,5	;volatile
  7634                           
  7635                           ;temp_module.h: 42: tempFlag = 0;
  7636  1472  1683               	bsf	3,5	;RP0=1, select bank1
  7637  1473  1303               	bcf	3,6	;RP1=0, select bank1
  7638  1474  01D1               	clrf	_tempFlag^(0+128)
  7639                           
  7640                           ;temp_module.h: 43: return 0;
  7641                           ;	Return value of _handleTemp is never used
  7642  1475  0008               	return
  7643  1476                     __end_of_handleTemp:	
  7644                           
  7645                           	psect	text34
  7646  1668                     __ptext34:	
  7647 ;; *************** function _handlePPM *****************
  7648 ;; Defined at:
  7649 ;;		line 54 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\mq135_module.h"
  7650 ;; Parameters:    Size  Location     Type
  7651 ;;		None
  7652 ;; Auto vars:     Size  Location     Type
  7653 ;;		None
  7654 ;; Return value:  Size  Location     Type
  7655 ;;                  1    wreg      unsigned char 
  7656 ;; Registers used:
  7657 ;;		wreg, status,2, status,0, pclath, cstack
  7658 ;; Tracked objects:
  7659 ;;		On entry : 0/0
  7660 ;;		On exit  : 0/0
  7661 ;;		Unchanged: 0/0
  7662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7663 ;;      Params:         0       0       0       0       0
  7664 ;;      Locals:         0       0       0       0       0
  7665 ;;      Temps:          0       0       0       0       0
  7666 ;;      Totals:         0       0       0       0       0
  7667 ;;Total ram usage:        0 bytes
  7668 ;; Hardware stack levels used:    1
  7669 ;; Hardware stack levels required when called:    3
  7670 ;; This function calls:
  7671 ;;		___ftge
  7672 ;; This function is called by:
  7673 ;;		_main
  7674 ;; This function uses a non-reentrant model
  7675 ;;
  7676                           
  7677                           
  7678                           ;psect for function _handlePPM
  7679  1668                     _handlePPM:	
  7680                           
  7681                           ;mq135_module.h: 56: if (PPM > 9)
  7682                           
  7683                           ;incstack = 0
  7684                           ; Regs used in _handlePPM: [wreg+status,2+status,0+pclath+cstack]
  7685  1668  3000               	movlw	0
  7686  1669  1283               	bcf	3,5	;RP0=0, select bank0
  7687  166A  1303               	bcf	3,6	;RP1=0, select bank0
  7688  166B  00A0               	movwf	___ftge@ff1
  7689  166C  3010               	movlw	16
  7690  166D  00A1               	movwf	___ftge@ff1+1
  7691  166E  3041               	movlw	65
  7692  166F  00A2               	movwf	___ftge@ff1+2
  7693  1670  1683               	bsf	3,5	;RP0=1, select bank1
  7694  1671  1303               	bcf	3,6	;RP1=0, select bank1
  7695  1672  0847               	movf	_PPM^(0+128),w	;volatile
  7696  1673  1283               	bcf	3,5	;RP0=0, select bank0
  7697  1674  1303               	bcf	3,6	;RP1=0, select bank0
  7698  1675  00A3               	movwf	___ftge@ff2
  7699  1676  1683               	bsf	3,5	;RP0=1, select bank1
  7700  1677  1303               	bcf	3,6	;RP1=0, select bank1
  7701  1678  0848               	movf	(_PPM+1)^(0+128),w	;volatile
  7702  1679  1283               	bcf	3,5	;RP0=0, select bank0
  7703  167A  1303               	bcf	3,6	;RP1=0, select bank0
  7704  167B  00A4               	movwf	___ftge@ff2+1
  7705  167C  1683               	bsf	3,5	;RP0=1, select bank1
  7706  167D  1303               	bcf	3,6	;RP1=0, select bank1
  7707  167E  0849               	movf	(_PPM+2)^(0+128),w	;volatile
  7708  167F  1283               	bcf	3,5	;RP0=0, select bank0
  7709  1680  1303               	bcf	3,6	;RP1=0, select bank0
  7710  1681  00A5               	movwf	___ftge@ff2+2
  7711  1682  160A  118A  2742  160A  118A  	fcall	___ftge
  7712  1687  1803               	btfsc	3,0
  7713  1688  2E91               	goto	l103
  7714                           
  7715                           ;mq135_module.h: 57: {
  7716                           ;mq135_module.h: 58: RC3 = 1;
  7717  1689  1283               	bcf	3,5	;RP0=0, select bank0
  7718  168A  1303               	bcf	3,6	;RP1=0, select bank0
  7719  168B  1587               	bsf	7,3	;volatile
  7720                           
  7721                           ;mq135_module.h: 59: ppmFlag = 1;
  7722  168C  1683               	bsf	3,5	;RP0=1, select bank1
  7723  168D  1303               	bcf	3,6	;RP1=0, select bank1
  7724  168E  01CF               	clrf	_ppmFlag^(0+128)
  7725  168F  0ACF               	incf	_ppmFlag^(0+128),f
  7726                           
  7727                           ;mq135_module.h: 61: }
  7728                           
  7729                           ;mq135_module.h: 60: return 1;
  7730                           ;	Return value of _handlePPM is never used
  7731  1690  0008               	return
  7732  1691                     l103:	
  7733                           
  7734                           ;mq135_module.h: 62: else
  7735                           ;mq135_module.h: 63: {
  7736                           ;mq135_module.h: 64: RC3 = 0;
  7737  1691  1283               	bcf	3,5	;RP0=0, select bank0
  7738  1692  1303               	bcf	3,6	;RP1=0, select bank0
  7739  1693  1187               	bcf	7,3	;volatile
  7740                           
  7741                           ;mq135_module.h: 65: ppmFlag = 0;
  7742  1694  1683               	bsf	3,5	;RP0=1, select bank1
  7743  1695  1303               	bcf	3,6	;RP1=0, select bank1
  7744  1696  01CF               	clrf	_ppmFlag^(0+128)
  7745                           
  7746                           ;mq135_module.h: 66: return 0;
  7747                           ;	Return value of _handlePPM is never used
  7748  1697  0008               	return
  7749  1698                     __end_of_handlePPM:	
  7750                           
  7751                           	psect	text35
  7752  1742                     __ptext35:	
  7753 ;; *************** function ___ftge *****************
  7754 ;; Defined at:
  7755 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;  ff1             3    0[BANK0 ] float 
  7758 ;;  ff2             3    3[BANK0 ] float 
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;		None
  7761 ;; Return value:  Size  Location     Type
  7762 ;;		None               void
  7763 ;; Registers used:
  7764 ;;		wreg, status,2, status,0
  7765 ;; Tracked objects:
  7766 ;;		On entry : 0/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7770 ;;      Params:         0       6       0       0       0
  7771 ;;      Locals:         0       0       0       0       0
  7772 ;;      Temps:          0       6       0       0       0
  7773 ;;      Totals:         0      12       0       0       0
  7774 ;;Total ram usage:       12 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; Hardware stack levels required when called:    2
  7777 ;; This function calls:
  7778 ;;		Nothing
  7779 ;; This function is called by:
  7780 ;;		_handlePPM
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           
  7785                           ;psect for function ___ftge
  7786  1742                     ___ftge:	
  7787                           
  7788                           ;incstack = 0
  7789                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7790  1742  1283               	bcf	3,5	;RP0=0, select bank0
  7791  1743  1303               	bcf	3,6	;RP1=0, select bank0
  7792  1744  1FA2               	btfss	___ftge@ff1+2,7
  7793  1745  2F6B               	goto	l2561
  7794  1746  3000               	movlw	0
  7795  1747  00A6               	movwf	??___ftge
  7796  1748  3000               	movlw	0
  7797  1749  00A7               	movwf	??___ftge+1
  7798  174A  3080               	movlw	128
  7799  174B  00A8               	movwf	??___ftge+2
  7800  174C  0920               	comf	___ftge@ff1,w
  7801  174D  00A9               	movwf	??___ftge+3
  7802  174E  0921               	comf	___ftge@ff1+1,w
  7803  174F  00AA               	movwf	??___ftge+4
  7804  1750  0922               	comf	___ftge@ff1+2,w
  7805  1751  00AB               	movwf	??___ftge+5
  7806  1752  0AA9               	incf	??___ftge+3,f
  7807  1753  1903               	skipnz
  7808  1754  0AAA               	incf	??___ftge+4,f
  7809  1755  1903               	skipnz
  7810  1756  0AAB               	incf	??___ftge+5,f
  7811  1757  0829               	movf	??___ftge+3,w
  7812  1758  07A6               	addwf	??___ftge,f
  7813  1759  082A               	movf	??___ftge+4,w
  7814  175A  1803               	skipnc
  7815  175B  0F2A               	incfsz	??___ftge+4,w
  7816  175C  2F5E               	goto	u3531
  7817  175D  2F5F               	goto	u3532
  7818  175E                     u3531:	
  7819  175E  07A7               	addwf	??___ftge+1,f
  7820  175F                     u3532:	
  7821  175F  082B               	movf	??___ftge+5,w
  7822  1760  1803               	skipnc
  7823  1761  0F2B               	incfsz	??___ftge+5,w
  7824  1762  2F64               	goto	u3533
  7825  1763  2F65               	goto	u3534
  7826  1764                     u3533:	
  7827  1764  07A8               	addwf	??___ftge+2,f
  7828  1765                     u3534:	
  7829  1765  0826               	movf	??___ftge,w
  7830  1766  00A0               	movwf	___ftge@ff1
  7831  1767  0827               	movf	??___ftge+1,w
  7832  1768  00A1               	movwf	___ftge@ff1+1
  7833  1769  0828               	movf	??___ftge+2,w
  7834  176A  00A2               	movwf	___ftge@ff1+2
  7835  176B                     l2561:	
  7836  176B  1FA5               	btfss	___ftge@ff2+2,7
  7837  176C  2F92               	goto	l2565
  7838  176D  3000               	movlw	0
  7839  176E  00A6               	movwf	??___ftge
  7840  176F  3000               	movlw	0
  7841  1770  00A7               	movwf	??___ftge+1
  7842  1771  3080               	movlw	128
  7843  1772  00A8               	movwf	??___ftge+2
  7844  1773  0923               	comf	___ftge@ff2,w
  7845  1774  00A9               	movwf	??___ftge+3
  7846  1775  0924               	comf	___ftge@ff2+1,w
  7847  1776  00AA               	movwf	??___ftge+4
  7848  1777  0925               	comf	___ftge@ff2+2,w
  7849  1778  00AB               	movwf	??___ftge+5
  7850  1779  0AA9               	incf	??___ftge+3,f
  7851  177A  1903               	skipnz
  7852  177B  0AAA               	incf	??___ftge+4,f
  7853  177C  1903               	skipnz
  7854  177D  0AAB               	incf	??___ftge+5,f
  7855  177E  0829               	movf	??___ftge+3,w
  7856  177F  07A6               	addwf	??___ftge,f
  7857  1780  082A               	movf	??___ftge+4,w
  7858  1781  1803               	skipnc
  7859  1782  0F2A               	incfsz	??___ftge+4,w
  7860  1783  2F85               	goto	u3551
  7861  1784  2F86               	goto	u3552
  7862  1785                     u3551:	
  7863  1785  07A7               	addwf	??___ftge+1,f
  7864  1786                     u3552:	
  7865  1786  082B               	movf	??___ftge+5,w
  7866  1787  1803               	skipnc
  7867  1788  0F2B               	incfsz	??___ftge+5,w
  7868  1789  2F8B               	goto	u3553
  7869  178A  2F8C               	goto	u3554
  7870  178B                     u3553:	
  7871  178B  07A8               	addwf	??___ftge+2,f
  7872  178C                     u3554:	
  7873  178C  0826               	movf	??___ftge,w
  7874  178D  00A3               	movwf	___ftge@ff2
  7875  178E  0827               	movf	??___ftge+1,w
  7876  178F  00A4               	movwf	___ftge@ff2+1
  7877  1790  0828               	movf	??___ftge+2,w
  7878  1791  00A5               	movwf	___ftge@ff2+2
  7879  1792                     l2565:	
  7880  1792  3080               	movlw	128
  7881  1793  06A2               	xorwf	___ftge@ff1+2,f
  7882  1794  3080               	movlw	128
  7883  1795  06A5               	xorwf	___ftge@ff2+2,f
  7884  1796  0825               	movf	___ftge@ff2+2,w
  7885  1797  0222               	subwf	___ftge@ff1+2,w
  7886  1798  1D03               	skipz
  7887  1799  0008               	return
  7888  179A  0824               	movf	___ftge@ff2+1,w
  7889  179B  0221               	subwf	___ftge@ff1+1,w
  7890  179C  1D03               	skipz
  7891  179D  0008               	return
  7892  179E  0823               	movf	___ftge@ff2,w
  7893  179F  0220               	subwf	___ftge@ff1,w
  7894  17A0  0008               	return
  7895  17A1                     __end_of___ftge:	
  7896                           
  7897                           	psect	text36
  7898  0852                     __ptext36:	
  7899 ;; *************** function _checkTime *****************
  7900 ;; Defined at:
  7901 ;;		line 208 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\time_scheduler.
      +h"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;		None
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;		None
  7906 ;; Return value:  Size  Location     Type
  7907 ;;		None               void
  7908 ;; Registers used:
  7909 ;;		wreg
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7915 ;;      Params:         0       0       0       0       0
  7916 ;;      Locals:         0       0       0       0       0
  7917 ;;      Temps:          0       0       0       0       0
  7918 ;;      Totals:         0       0       0       0       0
  7919 ;;Total ram usage:        0 bytes
  7920 ;; Hardware stack levels used:    1
  7921 ;; Hardware stack levels required when called:    2
  7922 ;; This function calls:
  7923 ;;		Nothing
  7924 ;; This function is called by:
  7925 ;;		_main
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           
  7930                           ;psect for function _checkTime
  7931  0852                     _checkTime:	
  7932                           
  7933                           ;time_scheduler.h: 210: if (hours == savedHoursEnd && minutes == savedMinutesEnd)
  7934                           
  7935                           ;incstack = 0
  7936                           ; Regs used in _checkTime: [wreg]
  7937  0852  087A               	movf	_hours,w	;volatile
  7938  0853  1283               	bcf	3,5	;RP0=0, select bank0
  7939  0854  1303               	bcf	3,6	;RP1=0, select bank0
  7940  0855  066F               	xorwf	_savedHoursEnd,w	;volatile
  7941  0856  1D03               	skipz
  7942  0857  2862               	goto	l3177
  7943  0858  0879               	movf	_minutes,w	;volatile
  7944  0859  1683               	bsf	3,5	;RP0=1, select bank1
  7945  085A  1303               	bcf	3,6	;RP1=0, select bank1
  7946  085B  065D               	xorwf	_savedMinutesEnd^(0+128),w	;volatile
  7947  085C  1D03               	skipz
  7948  085D  2862               	goto	l3177
  7949                           
  7950                           ;time_scheduler.h: 211: {
  7951                           ;time_scheduler.h: 212: RC4 = 1;
  7952  085E  1283               	bcf	3,5	;RP0=0, select bank0
  7953  085F  1303               	bcf	3,6	;RP1=0, select bank0
  7954  0860  1607               	bsf	7,4	;volatile
  7955                           
  7956                           ;time_scheduler.h: 213: }
  7957  0861  0008               	return
  7958  0862                     l3177:	
  7959                           
  7960                           ;time_scheduler.h: 214: else if (savedHoursEnd > savedHoursStart)
  7961  0862  1283               	bcf	3,5	;RP0=0, select bank0
  7962  0863  086F               	movf	_savedHoursEnd,w	;volatile
  7963  0864  1683               	bsf	3,5	;RP0=1, select bank1
  7964  0865  1303               	bcf	3,6	;RP1=0, select bank1
  7965  0866  025C               	subwf	_savedHoursStart^(0+128),w	;volatile
  7966  0867  1803               	skipnc
  7967  0868  288B               	goto	l3191
  7968                           
  7969                           ;time_scheduler.h: 215: {
  7970                           ;time_scheduler.h: 217: if ((hours > savedHoursStart || (hours == savedHoursStart && min
      +                          utes >= savedMinutesStart)) &&
  7971                           ;time_scheduler.h: 218: (hours < savedHoursEnd || (hours == savedHoursEnd && minutes < s
      +                          avedMinutesEnd)))
  7972  0869  087A               	movf	_hours,w	;volatile
  7973  086A  025C               	subwf	_savedHoursStart^(0+128),w	;volatile
  7974  086B  1C03               	skipc
  7975  086C  2875               	goto	l3185
  7976  086D  087A               	movf	_hours,w	;volatile
  7977  086E  065C               	xorwf	_savedHoursStart^(0+128),w	;volatile
  7978  086F  1D03               	skipz
  7979  0870  2888               	goto	l204
  7980  0871  085E               	movf	_savedMinutesStart^(0+128),w	;volatile
  7981  0872  0279               	subwf	_minutes,w	;volatile
  7982  0873  1C03               	skipc
  7983  0874  2888               	goto	l204
  7984  0875                     l3185:	
  7985  0875  1283               	bcf	3,5	;RP0=0, select bank0
  7986  0876  1303               	bcf	3,6	;RP1=0, select bank0
  7987  0877  086F               	movf	_savedHoursEnd,w	;volatile
  7988  0878  027A               	subwf	_hours,w	;volatile
  7989  0879  1C03               	skipc
  7990  087A  2885               	goto	l208
  7991  087B  087A               	movf	_hours,w	;volatile
  7992  087C  066F               	xorwf	_savedHoursEnd,w	;volatile
  7993  087D  1D03               	skipz
  7994  087E  2888               	goto	l204
  7995  087F  1683               	bsf	3,5	;RP0=1, select bank1
  7996  0880  1303               	bcf	3,6	;RP1=0, select bank1
  7997  0881  085D               	movf	_savedMinutesEnd^(0+128),w	;volatile
  7998  0882  0279               	subwf	_minutes,w	;volatile
  7999  0883  1803               	skipnc
  8000  0884  2888               	goto	l204
  8001  0885                     l208:	
  8002                           
  8003                           ;time_scheduler.h: 219: {
  8004                           ;time_scheduler.h: 220: RC4 = 1;
  8005  0885  1283               	bcf	3,5	;RP0=0, select bank0
  8006  0886  1607               	bsf	7,4	;volatile
  8007                           
  8008                           ;time_scheduler.h: 221: }
  8009  0887  0008               	return
  8010  0888                     l204:	
  8011                           
  8012                           ;time_scheduler.h: 222: else
  8013                           ;time_scheduler.h: 223: {
  8014                           ;time_scheduler.h: 224: RC4 = 0;
  8015  0888  1283               	bcf	3,5	;RP0=0, select bank0
  8016  0889  1207               	bcf	7,4	;volatile
  8017                           
  8018                           ;time_scheduler.h: 225: }
  8019                           ;time_scheduler.h: 226: }
  8020  088A  0008               	return
  8021  088B                     l3191:	
  8022                           
  8023                           ;time_scheduler.h: 227: else if (savedHoursEnd < savedHoursStart)
  8024  088B  1683               	bsf	3,5	;RP0=1, select bank1
  8025  088C  1303               	bcf	3,6	;RP1=0, select bank1
  8026  088D  085C               	movf	_savedHoursStart^(0+128),w	;volatile
  8027  088E  1283               	bcf	3,5	;RP0=0, select bank0
  8028  088F  1303               	bcf	3,6	;RP1=0, select bank0
  8029  0890  026F               	subwf	_savedHoursEnd,w	;volatile
  8030  0891  1803               	skipnc
  8031  0892  28B7               	goto	l3205
  8032                           
  8033                           ;time_scheduler.h: 228: {
  8034                           ;time_scheduler.h: 230: if ((hours > savedHoursStart || (hours == savedHoursStart && min
      +                          utes >= savedMinutesStart)) ||
  8035                           ;time_scheduler.h: 231: (hours < savedHoursEnd || (hours == savedHoursEnd && minutes < s
      +                          avedMinutesEnd)))
  8036  0893  087A               	movf	_hours,w	;volatile
  8037  0894  1683               	bsf	3,5	;RP0=1, select bank1
  8038  0895  1303               	bcf	3,6	;RP1=0, select bank1
  8039  0896  025C               	subwf	_savedHoursStart^(0+128),w	;volatile
  8040  0897  1C03               	skipc
  8041  0898  28B1               	goto	l214
  8042  0899  087A               	movf	_hours,w	;volatile
  8043  089A  065C               	xorwf	_savedHoursStart^(0+128),w	;volatile
  8044  089B  1D03               	skipz
  8045  089C  28A1               	goto	l3199
  8046  089D  085E               	movf	_savedMinutesStart^(0+128),w	;volatile
  8047  089E  0279               	subwf	_minutes,w	;volatile
  8048  089F  1803               	skipnc
  8049  08A0  28B1               	goto	l214
  8050  08A1                     l3199:	
  8051  08A1  1283               	bcf	3,5	;RP0=0, select bank0
  8052  08A2  1303               	bcf	3,6	;RP1=0, select bank0
  8053  08A3  086F               	movf	_savedHoursEnd,w	;volatile
  8054  08A4  027A               	subwf	_hours,w	;volatile
  8055  08A5  1C03               	skipc
  8056  08A6  28B1               	goto	l214
  8057  08A7  087A               	movf	_hours,w	;volatile
  8058  08A8  066F               	xorwf	_savedHoursEnd,w	;volatile
  8059  08A9  1D03               	skipz
  8060  08AA  28B4               	goto	l212
  8061  08AB  1683               	bsf	3,5	;RP0=1, select bank1
  8062  08AC  1303               	bcf	3,6	;RP1=0, select bank1
  8063  08AD  085D               	movf	_savedMinutesEnd^(0+128),w	;volatile
  8064  08AE  0279               	subwf	_minutes,w	;volatile
  8065  08AF  1803               	skipnc
  8066  08B0  28B4               	goto	l212
  8067  08B1                     l214:	
  8068                           
  8069                           ;time_scheduler.h: 232: {
  8070                           ;time_scheduler.h: 233: RC4 = 1;
  8071  08B1  1283               	bcf	3,5	;RP0=0, select bank0
  8072  08B2  1607               	bsf	7,4	;volatile
  8073                           
  8074                           ;time_scheduler.h: 234: }
  8075  08B3  0008               	return
  8076  08B4                     l212:	
  8077                           
  8078                           ;time_scheduler.h: 235: else
  8079                           ;time_scheduler.h: 236: {
  8080                           ;time_scheduler.h: 237: RC4 = 0;
  8081  08B4  1283               	bcf	3,5	;RP0=0, select bank0
  8082  08B5  1207               	bcf	7,4	;volatile
  8083                           
  8084                           ;time_scheduler.h: 238: }
  8085                           ;time_scheduler.h: 239: }
  8086  08B6  0008               	return
  8087  08B7                     l3205:	
  8088                           
  8089                           ;time_scheduler.h: 240: else
  8090                           ;time_scheduler.h: 241: {
  8091                           ;time_scheduler.h: 242: if (minutes >= savedMinutesStart && minutes < savedMinutesEnd)
  8092  08B7  1683               	bsf	3,5	;RP0=1, select bank1
  8093  08B8  1303               	bcf	3,6	;RP1=0, select bank1
  8094  08B9  085E               	movf	_savedMinutesStart^(0+128),w	;volatile
  8095  08BA  0279               	subwf	_minutes,w	;volatile
  8096  08BB  1C03               	skipc
  8097  08BC  28C5               	goto	l221
  8098  08BD  085D               	movf	_savedMinutesEnd^(0+128),w	;volatile
  8099  08BE  0279               	subwf	_minutes,w	;volatile
  8100  08BF  1803               	skipnc
  8101  08C0  28C5               	goto	l221
  8102                           
  8103                           ;time_scheduler.h: 243: {
  8104                           ;time_scheduler.h: 244: RC4 = 1;
  8105  08C1  1283               	bcf	3,5	;RP0=0, select bank0
  8106  08C2  1303               	bcf	3,6	;RP1=0, select bank0
  8107  08C3  1607               	bsf	7,4	;volatile
  8108                           
  8109                           ;time_scheduler.h: 245: }
  8110  08C4  0008               	return
  8111  08C5                     l221:	
  8112                           
  8113                           ;time_scheduler.h: 246: else
  8114                           ;time_scheduler.h: 247: {
  8115                           ;time_scheduler.h: 248: RC4 = 0;
  8116  08C5  1283               	bcf	3,5	;RP0=0, select bank0
  8117  08C6  1303               	bcf	3,6	;RP1=0, select bank0
  8118  08C7  1207               	bcf	7,4	;volatile
  8119  08C8  0008               	return
  8120  08C9                     __end_of_checkTime:	
  8121                           
  8122                           	psect	text37
  8123  1698                     __ptext37:	
  8124 ;; *************** function _checkSelect *****************
  8125 ;; Defined at:
  8126 ;;		line 190 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  8127 ;; Parameters:    Size  Location     Type
  8128 ;;		None
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;  currentRB1St    2    4[BANK0 ] int 
  8131 ;; Return value:  Size  Location     Type
  8132 ;;		None               void
  8133 ;; Registers used:
  8134 ;;		wreg, status,2, status,0, pclath, cstack
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8140 ;;      Params:         0       0       0       0       0
  8141 ;;      Locals:         0       2       0       0       0
  8142 ;;      Temps:          0       2       0       0       0
  8143 ;;      Totals:         0       4       0       0       0
  8144 ;;Total ram usage:        4 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:    3
  8147 ;; This function calls:
  8148 ;;		_instCTRL
  8149 ;; This function is called by:
  8150 ;;		_main
  8151 ;; This function uses a non-reentrant model
  8152 ;;
  8153                           
  8154                           
  8155                           ;psect for function _checkSelect
  8156  1698                     _checkSelect:	
  8157                           
  8158                           ;main.c: 192: static int lastRB1State = 0;
  8159                           ;main.c: 193: int currentRB1State = RB1;
  8160                           
  8161                           ;incstack = 0
  8162                           ; Regs used in _checkSelect: [wreg+status,2+status,0+pclath+cstack]
  8163  1698  1003               	clrc
  8164  1699  1283               	bcf	3,5	;RP0=0, select bank0
  8165  169A  1303               	bcf	3,6	;RP1=0, select bank0
  8166  169B  1886               	btfsc	6,1	;volatile
  8167  169C  1403               	setc
  8168  169D  3000               	movlw	0
  8169  169E  1803               	skipnc
  8170  169F  3001               	movlw	1
  8171  16A0  00A2               	movwf	??_checkSelect
  8172  16A1  01A3               	clrf	??_checkSelect+1
  8173  16A2  0822               	movf	??_checkSelect,w
  8174  16A3  00A4               	movwf	checkSelect@currentRB1State
  8175  16A4  0823               	movf	??_checkSelect+1,w
  8176  16A5  00A5               	movwf	checkSelect@currentRB1State+1
  8177                           
  8178                           ;main.c: 194: if (currentRB1State == 1 && lastRB1State == 0)
  8179  16A6  3001               	movlw	1
  8180  16A7  0624               	xorwf	checkSelect@currentRB1State,w
  8181  16A8  0425               	iorwf	checkSelect@currentRB1State+1,w
  8182  16A9  1D03               	skipz
  8183  16AA  2EBD               	goto	l2669
  8184  16AB  1683               	bsf	3,5	;RP0=1, select bank1
  8185  16AC  1303               	bcf	3,6	;RP1=0, select bank1
  8186  16AD  084D               	movf	(checkSelect@lastRB1State+1)^(0+128),w
  8187  16AE  044C               	iorwf	checkSelect@lastRB1State^(0+128),w
  8188  16AF  1D03               	skipz
  8189  16B0  2EBD               	goto	l2669
  8190                           
  8191                           ;main.c: 195: {
  8192                           ;main.c: 196: select ^= 1;
  8193  16B1  3001               	movlw	1
  8194  16B2  1283               	bcf	3,5	;RP0=0, select bank0
  8195  16B3  1303               	bcf	3,6	;RP1=0, select bank0
  8196  16B4  00A2               	movwf	??_checkSelect
  8197  16B5  0822               	movf	??_checkSelect,w
  8198  16B6  1683               	bsf	3,5	;RP0=1, select bank1
  8199  16B7  1303               	bcf	3,6	;RP1=0, select bank1
  8200  16B8  06D0               	xorwf	_select^(0+128),f	;volatile
  8201                           
  8202                           ;main.c: 198: instCTRL(0x01);
  8203  16B9  3001               	movlw	1
  8204  16BA  160A  118A  241F   	fcall	_instCTRL
  8205  16BD                     l2669:	
  8206                           
  8207                           ;main.c: 199: }
  8208                           ;main.c: 200: lastRB1State = currentRB1State;
  8209  16BD  1283               	bcf	3,5	;RP0=0, select bank0
  8210  16BE  1303               	bcf	3,6	;RP1=0, select bank0
  8211  16BF  0825               	movf	checkSelect@currentRB1State+1,w
  8212  16C0  1683               	bsf	3,5	;RP0=1, select bank1
  8213  16C1  1303               	bcf	3,6	;RP1=0, select bank1
  8214  16C2  01CD               	clrf	(checkSelect@lastRB1State+1)^(0+128)
  8215  16C3  07CD               	addwf	(checkSelect@lastRB1State+1)^(0+128),f
  8216  16C4  1283               	bcf	3,5	;RP0=0, select bank0
  8217  16C5  1303               	bcf	3,6	;RP1=0, select bank0
  8218  16C6  0824               	movf	checkSelect@currentRB1State,w
  8219  16C7  1683               	bsf	3,5	;RP0=1, select bank1
  8220  16C8  1303               	bcf	3,6	;RP1=0, select bank1
  8221  16C9  01CC               	clrf	checkSelect@lastRB1State^(0+128)
  8222  16CA  07CC               	addwf	checkSelect@lastRB1State^(0+128),f
  8223  16CB  0008               	return
  8224  16CC                     __end_of_checkSelect:	
  8225                           
  8226                           	psect	text38
  8227  14EB                     __ptext38:	
  8228 ;; *************** function _checkMode *****************
  8229 ;; Defined at:
  8230 ;;		line 179 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  8231 ;; Parameters:    Size  Location     Type
  8232 ;;		None
  8233 ;; Auto vars:     Size  Location     Type
  8234 ;;		None
  8235 ;; Return value:  Size  Location     Type
  8236 ;;		None               void
  8237 ;; Registers used:
  8238 ;;		wreg, status,2, status,0, pclath, cstack
  8239 ;; Tracked objects:
  8240 ;;		On entry : 0/0
  8241 ;;		On exit  : 0/0
  8242 ;;		Unchanged: 0/0
  8243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8244 ;;      Params:         0       0       0       0       0
  8245 ;;      Locals:         0       0       0       0       0
  8246 ;;      Temps:          0       2       0       0       0
  8247 ;;      Totals:         0       2       0       0       0
  8248 ;;Total ram usage:        2 bytes
  8249 ;; Hardware stack levels used:    1
  8250 ;; Hardware stack levels required when called:    3
  8251 ;; This function calls:
  8252 ;;		_instCTRL
  8253 ;; This function is called by:
  8254 ;;		_main
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           
  8259                           ;psect for function _checkMode
  8260  14EB                     _checkMode:	
  8261                           
  8262                           ;main.c: 181: if (lastMode != mode)
  8263                           
  8264                           ;incstack = 0
  8265                           ; Regs used in _checkMode: [wreg+status,2+status,0+pclath+cstack]
  8266  14EB  087C               	movf	_lastMode,w
  8267  14EC  1683               	bsf	3,5	;RP0=1, select bank1
  8268  14ED  1303               	bcf	3,6	;RP1=0, select bank1
  8269  14EE  064E               	xorwf	_mode^(0+128),w
  8270  14EF  1903               	skipnz
  8271  14F0  0008               	return
  8272                           
  8273                           ;main.c: 182: {
  8274                           ;main.c: 184: instCTRL(0x01);
  8275  14F1  3001               	movlw	1
  8276  14F2  160A  118A  241F  160A  118A  	fcall	_instCTRL
  8277                           
  8278                           ;main.c: 185: _delay((unsigned long)((50)*(4000000/4000.0)));
  8279  14F7  3041               	movlw	65
  8280  14F8  1283               	bcf	3,5	;RP0=0, select bank0
  8281  14F9  1303               	bcf	3,6	;RP1=0, select bank0
  8282  14FA  00A3               	movwf	??_checkMode+1
  8283  14FB  30EE               	movlw	238
  8284  14FC  00A2               	movwf	??_checkMode
  8285  14FD                     u4847:	
  8286  14FD  0BA2               	decfsz	??_checkMode,f
  8287  14FE  2CFD               	goto	u4847
  8288  14FF  0BA3               	decfsz	??_checkMode+1,f
  8289  1500  2CFD               	goto	u4847
  8290  1501  0000               	nop
  8291                           
  8292                           ;main.c: 186: lastMode = mode;
  8293  1502  1683               	bsf	3,5	;RP0=1, select bank1
  8294  1503  1303               	bcf	3,6	;RP1=0, select bank1
  8295  1504  084E               	movf	_mode^(0+128),w
  8296  1505  1283               	bcf	3,5	;RP0=0, select bank0
  8297  1506  1303               	bcf	3,6	;RP1=0, select bank0
  8298  1507  00A2               	movwf	??_checkMode
  8299  1508  0822               	movf	??_checkMode,w
  8300  1509  00FC               	movwf	_lastMode
  8301  150A  0008               	return
  8302  150B                     __end_of_checkMode:	
  8303                           
  8304                           	psect	text39
  8305  141F                     __ptext39:	
  8306 ;; *************** function _instCTRL *****************
  8307 ;; Defined at:
  8308 ;;		line 17 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\lcd_functions.h"
  8309 ;; Parameters:    Size  Location     Type
  8310 ;;  CMD             1    wreg     unsigned char 
  8311 ;; Auto vars:     Size  Location     Type
  8312 ;;  CMD             1    1[BANK0 ] unsigned char 
  8313 ;; Return value:  Size  Location     Type
  8314 ;;		None               void
  8315 ;; Registers used:
  8316 ;;		wreg
  8317 ;; Tracked objects:
  8318 ;;		On entry : 0/0
  8319 ;;		On exit  : 0/0
  8320 ;;		Unchanged: 0/0
  8321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8322 ;;      Params:         0       0       0       0       0
  8323 ;;      Locals:         0       1       0       0       0
  8324 ;;      Temps:          0       1       0       0       0
  8325 ;;      Totals:         0       2       0       0       0
  8326 ;;Total ram usage:        2 bytes
  8327 ;; Hardware stack levels used:    1
  8328 ;; Hardware stack levels required when called:    2
  8329 ;; This function calls:
  8330 ;;		Nothing
  8331 ;; This function is called by:
  8332 ;;		_initLCD
  8333 ;;		_printToLCD
  8334 ;;		_startUpLCD
  8335 ;;		_updateState
  8336 ;;		_checkMode
  8337 ;;		_checkSelect
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           
  8342                           ;psect for function _instCTRL
  8343  141F                     _instCTRL:	
  8344                           
  8345                           ;incstack = 0
  8346                           ; Regs used in _instCTRL: [wreg]
  8347                           ;instCTRL@CMD stored from wreg
  8348  141F  1283               	bcf	3,5	;RP0=0, select bank0
  8349  1420  1303               	bcf	3,6	;RP1=0, select bank0
  8350  1421  00A1               	movwf	instCTRL@CMD
  8351                           
  8352                           ;lcd_functions.h: 19: PORTD = CMD;
  8353  1422  0821               	movf	instCTRL@CMD,w
  8354  1423  0088               	movwf	8	;volatile
  8355                           
  8356                           ;lcd_functions.h: 20: RC0 = 0;
  8357  1424  1007               	bcf	7,0	;volatile
  8358                           
  8359                           ;lcd_functions.h: 21: RC1 = 0;
  8360  1425  1087               	bcf	7,1	;volatile
  8361                           
  8362                           ;lcd_functions.h: 22: RC2 = 1;
  8363  1426  1507               	bsf	7,2	;volatile
  8364                           
  8365                           ;lcd_functions.h: 23: _delay((unsigned long)((1)*(4000000/4000.0)));
  8366  1427  30F9               	movlw	249
  8367  1428  00A0               	movwf	??_instCTRL
  8368  1429                     u4857:	
  8369  1429  0000               	nop
  8370  142A  0BA0               	decfsz	??_instCTRL,f
  8371  142B  2C29               	goto	u4857
  8372  142C  2C2D               	nop2	;nop
  8373  142D  0000               	nop
  8374                           
  8375                           ;lcd_functions.h: 24: RC2 = 0;
  8376  142E  1283               	bcf	3,5	;RP0=0, select bank0
  8377  142F  1303               	bcf	3,6	;RP1=0, select bank0
  8378  1430  1107               	bcf	7,2	;volatile
  8379  1431  0008               	return
  8380  1432                     __end_of_instCTRL:	
  8381                           
  8382                           	psect	text40
  8383  1639                     __ptext40:	
  8384 ;; *************** function _calculateTemp *****************
  8385 ;; Defined at:
  8386 ;;		line 19 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\temp_module.h"
  8387 ;; Parameters:    Size  Location     Type
  8388 ;;  adcValue        2   14[BANK0 ] unsigned int 
  8389 ;; Auto vars:     Size  Location     Type
  8390 ;;		None
  8391 ;; Return value:  Size  Location     Type
  8392 ;;		None               void
  8393 ;; Registers used:
  8394 ;;		wreg, status,2, status,0, pclath, cstack
  8395 ;; Tracked objects:
  8396 ;;		On entry : 0/0
  8397 ;;		On exit  : 0/0
  8398 ;;		Unchanged: 0/0
  8399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8400 ;;      Params:         0       2       0       0       0
  8401 ;;      Locals:         0       0       0       0       0
  8402 ;;      Temps:          0       0       0       0       0
  8403 ;;      Totals:         0       2       0       0       0
  8404 ;;Total ram usage:        2 bytes
  8405 ;; Hardware stack levels used:    1
  8406 ;; Hardware stack levels required when called:    3
  8407 ;; This function calls:
  8408 ;;		___lwdiv
  8409 ;;		___wmul
  8410 ;; This function is called by:
  8411 ;;		_main
  8412 ;; This function uses a non-reentrant model
  8413 ;;
  8414                           
  8415                           
  8416                           ;psect for function _calculateTemp
  8417  1639                     _calculateTemp:	
  8418                           
  8419                           ;temp_module.h: 21: tempBuffer = (adcValue * 500) / 1023;
  8420                           
  8421                           ;incstack = 0
  8422                           ; Regs used in _calculateTemp: [wreg+status,2+status,0+pclath+cstack]
  8423  1639  30FF               	movlw	255
  8424  163A  1283               	bcf	3,5	;RP0=0, select bank0
  8425  163B  1303               	bcf	3,6	;RP1=0, select bank0
  8426  163C  00A6               	movwf	___lwdiv@divisor
  8427  163D  3003               	movlw	3
  8428  163E  00A7               	movwf	___lwdiv@divisor+1
  8429  163F  082F               	movf	calculateTemp@adcValue+1,w
  8430  1640  01A1               	clrf	___wmul@multiplier+1
  8431  1641  07A1               	addwf	___wmul@multiplier+1,f
  8432  1642  082E               	movf	calculateTemp@adcValue,w
  8433  1643  01A0               	clrf	___wmul@multiplier
  8434  1644  07A0               	addwf	___wmul@multiplier,f
  8435  1645  30F4               	movlw	244
  8436  1646  00A2               	movwf	___wmul@multiplicand
  8437  1647  3001               	movlw	1
  8438  1648  00A3               	movwf	___wmul@multiplicand+1
  8439  1649  160A  118A  259B  160A  118A  	fcall	___wmul
  8440  164E  1283               	bcf	3,5	;RP0=0, select bank0
  8441  164F  1303               	bcf	3,6	;RP1=0, select bank0
  8442  1650  0821               	movf	?___wmul+1,w
  8443  1651  01A9               	clrf	___lwdiv@dividend+1
  8444  1652  07A9               	addwf	___lwdiv@dividend+1,f
  8445  1653  0820               	movf	?___wmul,w
  8446  1654  01A8               	clrf	___lwdiv@dividend
  8447  1655  07A8               	addwf	___lwdiv@dividend,f
  8448  1656  160A  118A  2702   	fcall	___lwdiv
  8449  1659  1283               	bcf	3,5	;RP0=0, select bank0
  8450  165A  1303               	bcf	3,6	;RP1=0, select bank0
  8451  165B  0827               	movf	?___lwdiv+1,w
  8452  165C  1683               	bsf	3,5	;RP0=1, select bank1
  8453  165D  1303               	bcf	3,6	;RP1=0, select bank1
  8454  165E  01CB               	clrf	(_tempBuffer+1)^(0+128)
  8455  165F  07CB               	addwf	(_tempBuffer+1)^(0+128),f
  8456  1660  1283               	bcf	3,5	;RP0=0, select bank0
  8457  1661  1303               	bcf	3,6	;RP1=0, select bank0
  8458  1662  0826               	movf	?___lwdiv,w
  8459  1663  1683               	bsf	3,5	;RP0=1, select bank1
  8460  1664  1303               	bcf	3,6	;RP1=0, select bank1
  8461  1665  01CA               	clrf	_tempBuffer^(0+128)
  8462  1666  07CA               	addwf	_tempBuffer^(0+128),f
  8463  1667  0008               	return
  8464  1668                     __end_of_calculateTemp:	
  8465                           
  8466                           	psect	text41
  8467  159B                     __ptext41:	
  8468 ;; *************** function ___wmul *****************
  8469 ;; Defined at:
  8470 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  8471 ;; Parameters:    Size  Location     Type
  8472 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8473 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8474 ;; Auto vars:     Size  Location     Type
  8475 ;;  product         2    4[BANK0 ] unsigned int 
  8476 ;; Return value:  Size  Location     Type
  8477 ;;                  2    0[BANK0 ] unsigned int 
  8478 ;; Registers used:
  8479 ;;		wreg, status,2, status,0
  8480 ;; Tracked objects:
  8481 ;;		On entry : 0/0
  8482 ;;		On exit  : 0/0
  8483 ;;		Unchanged: 0/0
  8484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8485 ;;      Params:         0       4       0       0       0
  8486 ;;      Locals:         0       2       0       0       0
  8487 ;;      Temps:          0       0       0       0       0
  8488 ;;      Totals:         0       6       0       0       0
  8489 ;;Total ram usage:        6 bytes
  8490 ;; Hardware stack levels used:    1
  8491 ;; Hardware stack levels required when called:    2
  8492 ;; This function calls:
  8493 ;;		Nothing
  8494 ;; This function is called by:
  8495 ;;		_calculateTemp
  8496 ;;		_sprintf
  8497 ;; This function uses a non-reentrant model
  8498 ;;
  8499                           
  8500                           
  8501                           ;psect for function ___wmul
  8502  159B                     ___wmul:	
  8503                           
  8504                           ;incstack = 0
  8505                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8506  159B  1283               	bcf	3,5	;RP0=0, select bank0
  8507  159C  1303               	bcf	3,6	;RP1=0, select bank0
  8508  159D  01A4               	clrf	___wmul@product
  8509  159E  01A5               	clrf	___wmul@product+1
  8510  159F                     l2825:	
  8511  159F  1C20               	btfss	___wmul@multiplier,0
  8512  15A0  2DA7               	goto	l439
  8513  15A1  0822               	movf	___wmul@multiplicand,w
  8514  15A2  07A4               	addwf	___wmul@product,f
  8515  15A3  1803               	skipnc
  8516  15A4  0AA5               	incf	___wmul@product+1,f
  8517  15A5  0823               	movf	___wmul@multiplicand+1,w
  8518  15A6  07A5               	addwf	___wmul@product+1,f
  8519  15A7                     l439:	
  8520  15A7  3001               	movlw	1
  8521  15A8                     u3865:	
  8522  15A8  1003               	clrc
  8523  15A9  0DA2               	rlf	___wmul@multiplicand,f
  8524  15AA  0DA3               	rlf	___wmul@multiplicand+1,f
  8525  15AB  3EFF               	addlw	-1
  8526  15AC  1D03               	skipz
  8527  15AD  2DA8               	goto	u3865
  8528  15AE  3001               	movlw	1
  8529  15AF                     u3875:	
  8530  15AF  1003               	clrc
  8531  15B0  0CA1               	rrf	___wmul@multiplier+1,f
  8532  15B1  0CA0               	rrf	___wmul@multiplier,f
  8533  15B2  3EFF               	addlw	-1
  8534  15B3  1D03               	skipz
  8535  15B4  2DAF               	goto	u3875
  8536  15B5  0821               	movf	___wmul@multiplier+1,w
  8537  15B6  0420               	iorwf	___wmul@multiplier,w
  8538  15B7  1D03               	skipz
  8539  15B8  2D9F               	goto	l2825
  8540  15B9  0825               	movf	___wmul@product+1,w
  8541  15BA  01A1               	clrf	?___wmul+1
  8542  15BB  07A1               	addwf	?___wmul+1,f
  8543  15BC  0824               	movf	___wmul@product,w
  8544  15BD  01A0               	clrf	?___wmul
  8545  15BE  07A0               	addwf	?___wmul,f
  8546  15BF  0008               	return
  8547  15C0                     __end_of___wmul:	
  8548                           
  8549                           	psect	text42
  8550  1702                     __ptext42:	
  8551 ;; *************** function ___lwdiv *****************
  8552 ;; Defined at:
  8553 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  8554 ;; Parameters:    Size  Location     Type
  8555 ;;  divisor         2    6[BANK0 ] unsigned int 
  8556 ;;  dividend        2    8[BANK0 ] unsigned int 
  8557 ;; Auto vars:     Size  Location     Type
  8558 ;;  quotient        2   11[BANK0 ] unsigned int 
  8559 ;;  counter         1   13[BANK0 ] unsigned char 
  8560 ;; Return value:  Size  Location     Type
  8561 ;;                  2    6[BANK0 ] unsigned int 
  8562 ;; Registers used:
  8563 ;;		wreg, status,2, status,0
  8564 ;; Tracked objects:
  8565 ;;		On entry : 0/0
  8566 ;;		On exit  : 0/0
  8567 ;;		Unchanged: 0/0
  8568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8569 ;;      Params:         0       4       0       0       0
  8570 ;;      Locals:         0       3       0       0       0
  8571 ;;      Temps:          0       1       0       0       0
  8572 ;;      Totals:         0       8       0       0       0
  8573 ;;Total ram usage:        8 bytes
  8574 ;; Hardware stack levels used:    1
  8575 ;; Hardware stack levels required when called:    2
  8576 ;; This function calls:
  8577 ;;		Nothing
  8578 ;; This function is called by:
  8579 ;;		_calculateTemp
  8580 ;;		_sprintf
  8581 ;; This function uses a non-reentrant model
  8582 ;;
  8583                           
  8584                           
  8585                           ;psect for function ___lwdiv
  8586  1702                     ___lwdiv:	
  8587                           
  8588                           ;incstack = 0
  8589                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8590  1702  1283               	bcf	3,5	;RP0=0, select bank0
  8591  1703  1303               	bcf	3,6	;RP1=0, select bank0
  8592  1704  01AB               	clrf	___lwdiv@quotient
  8593  1705  01AC               	clrf	___lwdiv@quotient+1
  8594  1706  0827               	movf	___lwdiv@divisor+1,w
  8595  1707  0426               	iorwf	___lwdiv@divisor,w
  8596  1708  1903               	skipnz
  8597  1709  2F3B               	goto	l1927
  8598  170A  01AD               	clrf	___lwdiv@counter
  8599  170B  0AAD               	incf	___lwdiv@counter,f
  8600  170C                     l1915:	
  8601  170C  1BA7               	btfsc	___lwdiv@divisor+1,7
  8602  170D  2F1A               	goto	l1917
  8603  170E  3001               	movlw	1
  8604  170F                     u2105:	
  8605  170F  1003               	clrc
  8606  1710  0DA6               	rlf	___lwdiv@divisor,f
  8607  1711  0DA7               	rlf	___lwdiv@divisor+1,f
  8608  1712  3EFF               	addlw	-1
  8609  1713  1D03               	skipz
  8610  1714  2F0F               	goto	u2105
  8611  1715  3001               	movlw	1
  8612  1716  00AA               	movwf	??___lwdiv
  8613  1717  082A               	movf	??___lwdiv,w
  8614  1718  07AD               	addwf	___lwdiv@counter,f
  8615  1719  2F0C               	goto	l1915
  8616  171A                     l1917:	
  8617  171A  3001               	movlw	1
  8618  171B                     u2125:	
  8619  171B  1003               	clrc
  8620  171C  0DAB               	rlf	___lwdiv@quotient,f
  8621  171D  0DAC               	rlf	___lwdiv@quotient+1,f
  8622  171E  3EFF               	addlw	-1
  8623  171F  1D03               	skipz
  8624  1720  2F1B               	goto	u2125
  8625  1721  0827               	movf	___lwdiv@divisor+1,w
  8626  1722  0229               	subwf	___lwdiv@dividend+1,w
  8627  1723  1D03               	skipz
  8628  1724  2F27               	goto	u2135
  8629  1725  0826               	movf	___lwdiv@divisor,w
  8630  1726  0228               	subwf	___lwdiv@dividend,w
  8631  1727                     u2135:	
  8632  1727  1C03               	skipc
  8633  1728  2F30               	goto	l1923
  8634  1729  0826               	movf	___lwdiv@divisor,w
  8635  172A  02A8               	subwf	___lwdiv@dividend,f
  8636  172B  0827               	movf	___lwdiv@divisor+1,w
  8637  172C  1C03               	skipc
  8638  172D  03A9               	decf	___lwdiv@dividend+1,f
  8639  172E  02A9               	subwf	___lwdiv@dividend+1,f
  8640  172F  142B               	bsf	___lwdiv@quotient,0
  8641  1730                     l1923:	
  8642  1730  3001               	movlw	1
  8643  1731                     u2145:	
  8644  1731  1003               	clrc
  8645  1732  0CA7               	rrf	___lwdiv@divisor+1,f
  8646  1733  0CA6               	rrf	___lwdiv@divisor,f
  8647  1734  3EFF               	addlw	-1
  8648  1735  1D03               	skipz
  8649  1736  2F31               	goto	u2145
  8650  1737  3001               	movlw	1
  8651  1738  02AD               	subwf	___lwdiv@counter,f
  8652  1739  1D03               	btfss	3,2
  8653  173A  2F1A               	goto	l1917
  8654  173B                     l1927:	
  8655  173B  082C               	movf	___lwdiv@quotient+1,w
  8656  173C  01A7               	clrf	?___lwdiv+1
  8657  173D  07A7               	addwf	?___lwdiv+1,f
  8658  173E  082B               	movf	___lwdiv@quotient,w
  8659  173F  01A6               	clrf	?___lwdiv
  8660  1740  07A6               	addwf	?___lwdiv,f
  8661  1741  0008               	return
  8662  1742                     __end_of___lwdiv:	
  8663                           
  8664                           	psect	text43
  8665  14CB                     __ptext43:	
  8666 ;; *************** function _ISR *****************
  8667 ;; Defined at:
  8668 ;;		line 84 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  8669 ;; Parameters:    Size  Location     Type
  8670 ;;		None
  8671 ;; Auto vars:     Size  Location     Type
  8672 ;;		None
  8673 ;; Return value:  Size  Location     Type
  8674 ;;		None               void
  8675 ;; Registers used:
  8676 ;;		wreg, status,2, status,0, pclath, cstack
  8677 ;; Tracked objects:
  8678 ;;		On entry : 0/0
  8679 ;;		On exit  : 0/0
  8680 ;;		Unchanged: 0/0
  8681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8682 ;;      Params:         0       0       0       0       0
  8683 ;;      Locals:         0       0       0       0       0
  8684 ;;      Temps:          5       0       0       0       0
  8685 ;;      Totals:         5       0       0       0       0
  8686 ;;Total ram usage:        5 bytes
  8687 ;; Hardware stack levels used:    1
  8688 ;; Hardware stack levels required when called:    1
  8689 ;; This function calls:
  8690 ;;		i1_instCTRL
  8691 ;; This function is called by:
  8692 ;;		Interrupt level 1
  8693 ;; This function uses a non-reentrant model
  8694 ;;
  8695                           
  8696                           
  8697                           ;psect for function _ISR
  8698  14CB                     _ISR:	
  8699                           
  8700                           ;main.c: 86: GIE = 0;
  8701  14CB  138B               	bcf	11,7	;volatile
  8702                           
  8703                           ;main.c: 87: if (INTF == 1)
  8704  14CC  1C8B               	btfss	11,1	;volatile
  8705  14CD  2CD7               	goto	i1l2807
  8706                           
  8707                           ;main.c: 88: {
  8708                           ;main.c: 89: INTF = 0;
  8709  14CE  108B               	bcf	11,1	;volatile
  8710                           
  8711                           ;main.c: 90: mode = (mode + 1) % 4;
  8712  14CF  1683               	bsf	3,5	;RP0=1, select bank1
  8713  14D0  1303               	bcf	3,6	;RP1=0, select bank1
  8714  14D1  084E               	movf	_mode^(0+128),w
  8715  14D2  3E01               	addlw	1
  8716  14D3  3903               	andlw	3
  8717  14D4  00F2               	movwf	??_ISR
  8718  14D5  0872               	movf	??_ISR,w
  8719  14D6  00CE               	movwf	_mode^(0+128)
  8720  14D7                     i1l2807:	
  8721                           
  8722                           ;main.c: 91: }
  8723                           ;main.c: 92: instCTRL(0x01);
  8724  14D7  3001               	movlw	1
  8725  14D8  160A  118A  240C  160A  118A  	fcall	i1_instCTRL
  8726                           
  8727                           ;main.c: 93: GIE = 1;
  8728  14DD  178B               	bsf	11,7	;volatile
  8729  14DE  0876               	movf	??_ISR+4,w
  8730  14DF  1283               	bcf	3,5	;RP0=0, select bank0
  8731  14E0  1303               	bcf	3,6	;RP1=0, select bank0
  8732  14E1  00FF               	movwf	127
  8733  14E2  0875               	movf	??_ISR+3,w
  8734  14E3  008A               	movwf	10
  8735  14E4  0874               	movf	??_ISR+2,w
  8736  14E5  0084               	movwf	4
  8737  14E6  0E73               	swapf	(??_ISR+1)^(0+-128),w
  8738  14E7  0083               	movwf	3
  8739  14E8  0EFE               	swapf	126,f
  8740  14E9  0E7E               	swapf	126,w
  8741  14EA  0009               	retfie
  8742  14EB                     __end_of_ISR:	
  8743                           
  8744                           	psect	intentry
  8745  0004                     __pintentry:	
  8746                           ;incstack = 0
  8747                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  8748                           
  8749  0004                     interrupt_function:	
  8750  007E                     saved_w	set	btemp
  8751  0004  00FE               	movwf	btemp
  8752  0005  0E03               	swapf	3,w
  8753  0006  00F3               	movwf	??_ISR+1
  8754  0007  0804               	movf	4,w
  8755  0008  00F4               	movwf	??_ISR+2
  8756  0009  080A               	movf	10,w
  8757  000A  00F5               	movwf	??_ISR+3
  8758  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8759  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8760  000D  087F               	movf	btemp+1,w
  8761  000E  00F6               	movwf	??_ISR+4
  8762  000F  160A  118A  2CCB   	ljmp	_ISR
  8763                           
  8764                           	psect	text44
  8765  140C                     __ptext44:	
  8766 ;; *************** function i1_instCTRL *****************
  8767 ;; Defined at:
  8768 ;;		line 17 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\lcd_functions.h"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;  CMD             1    wreg     unsigned char 
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;  CMD             1    1[COMMON] unsigned char 
  8773 ;; Return value:  Size  Location     Type
  8774 ;;		None               void
  8775 ;; Registers used:
  8776 ;;		wreg
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8782 ;;      Params:         0       0       0       0       0
  8783 ;;      Locals:         1       0       0       0       0
  8784 ;;      Temps:          1       0       0       0       0
  8785 ;;      Totals:         2       0       0       0       0
  8786 ;;Total ram usage:        2 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; This function calls:
  8789 ;;		Nothing
  8790 ;; This function is called by:
  8791 ;;		_ISR
  8792 ;; This function uses a non-reentrant model
  8793 ;;
  8794                           
  8795                           
  8796                           ;psect for function i1_instCTRL
  8797  140C                     i1_instCTRL:	
  8798                           
  8799                           ;incstack = 0
  8800                           ; Regs used in i1_instCTRL: [wreg]
  8801                           ;i1instCTRL@CMD stored from wreg
  8802  140C  00F1               	movwf	i1instCTRL@CMD
  8803                           
  8804                           ;lcd_functions.h: 19: PORTD = CMD;
  8805  140D  0871               	movf	i1instCTRL@CMD,w
  8806  140E  1283               	bcf	3,5	;RP0=0, select bank0
  8807  140F  1303               	bcf	3,6	;RP1=0, select bank0
  8808  1410  0088               	movwf	8	;volatile
  8809                           
  8810                           ;lcd_functions.h: 20: RC0 = 0;
  8811  1411  1007               	bcf	7,0	;volatile
  8812                           
  8813                           ;lcd_functions.h: 21: RC1 = 0;
  8814  1412  1087               	bcf	7,1	;volatile
  8815                           
  8816                           ;lcd_functions.h: 22: RC2 = 1;
  8817  1413  1507               	bsf	7,2	;volatile
  8818                           
  8819                           ;lcd_functions.h: 23: _delay((unsigned long)((1)*(4000000/4000.0)));
  8820  1414  30F9               	movlw	249
  8821  1415  00F0               	movwf	??i1_instCTRL
  8822  1416                     u486_27:	
  8823  1416  0000               	nop
  8824  1417  0BF0               	decfsz	??i1_instCTRL,f
  8825  1418  2C16               	goto	u486_27
  8826  1419  2C1A               	nop2	;nop
  8827  141A  0000               	nop
  8828                           
  8829                           ;lcd_functions.h: 24: RC2 = 0;
  8830  141B  1283               	bcf	3,5	;RP0=0, select bank0
  8831  141C  1303               	bcf	3,6	;RP1=0, select bank0
  8832  141D  1107               	bcf	7,2	;volatile
  8833  141E  0008               	return
  8834  141F                     __end_ofi1_instCTRL:	
  8835  007E                     btemp	set	126	;btemp
  8836  007E                     wtemp	set	126
  8837  007E                     wtemp0	set	126
  8838  0080                     wtemp1	set	128
  8839  0082                     wtemp2	set	130
  8840  0084                     wtemp3	set	132
  8841  0086                     wtemp4	set	134
  8842  0088                     wtemp5	set	136
  8843  007F                     wtemp6	set	127
  8844  007E                     ttemp	set	126
  8845  007E                     ttemp0	set	126
  8846  0081                     ttemp1	set	129
  8847  0084                     ttemp2	set	132
  8848  0087                     ttemp3	set	135
  8849  007F                     ttemp4	set	127
  8850  007E                     ltemp	set	126
  8851  007E                     ltemp0	set	126
  8852  0082                     ltemp1	set	130
  8853  0086                     ltemp2	set	134
  8854  0080                     ltemp3	set	128


Data Sizes:
    Strings     242
    Constant    10
    Data        7
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      13
    BANK0            80     79      80
    BANK1            80     39      63
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_26(CODE[13]), STR_25(CODE[14]), STR_19(CODE[11]), STR_18(CODE[10]), 
		 -> STR_17(CODE[10]), STR_16(CODE[10]), STR_15(CODE[10]), STR_14(CODE[10]), 
		 -> STR_13(CODE[10]), STR_12(CODE[10]), STR_11(CODE[10]), STR_10(CODE[10]), 
		 -> STR_9(CODE[10]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[16]), 
		 -> STR_3(CODE[9]), STR_2(CODE[3]), STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> updateState@buffer(BANK0[10]), displayTemp@buffer(BANK0[20]), debugInfo(BANK1[10]), displayTime@timeFormat(BANK0[16]), 
		 -> displayPPM@strBuffer(BANK1[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S245$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    displayPPM@bufPtr	PTR unsigned char  size(1) Largest target is 20
		 -> displayPPM@strBuffer(BANK1[20]), 

    printToLCD@str	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_34(CODE[11]), STR_33(CODE[12]), STR_32(CODE[10]), STR_31(CODE[14]), 
		 -> STR_30(CODE[12]), STR_29(CODE[10]), STR_28(CODE[16]), STR_27(CODE[15]), 
		 -> updateState@buffer(BANK0[10]), STR_24(CODE[15]), STR_23(CODE[7]), STR_22(CODE[7]), 
		 -> STR_21(CODE[8]), STR_20(CODE[9]), displayTemp@buffer(BANK0[20]), debugInfo(BANK1[10]), 
		 -> displayTime@timeFormat(BANK0[16]), STR_5(CODE[8]), STR_4(CODE[8]), displayPPM@strBuffer(BANK1[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_instCTRL

Critical Paths under _main in BANK0

    _main->_updateState
    _updateState->_displayTemp
    _updateState->_displayTime
    _setMinutesStart->_sprintf
    _setMinutesEnd->_sprintf
    _setHoursStart->_sprintf
    _setHoursEnd->_sprintf
    _printStatusTMP->_printToLCD
    _printStatusPPM->_printToLCD
    _displayTime->_sprintf
    _displayTemp->_sprintf
    _displayPPM->___fttol
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___fttol->___ftmul
    ___ftneg->___awtoft
    _startUpLCD->_printToLCD
    _printToLCD->_dataCTRL
    _printToLCD->_instCTRL
    _initLCD->_instCTRL
    _runMQ135->_CalcMQ135
    _CalcMQ135->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _handlePPM->___ftge
    _checkSelect->_instCTRL
    _checkMode->_instCTRL
    _calculateTemp->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _updateState->_displayPPM
    _runMQ135->_CalcMQ135

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   80695
                                             76 BANK0      3     3      0
                      _calculateTemp
                          _checkMode
                        _checkSelect
                          _checkTime
                          _handlePPM
                         _handleTemp
                            _initADC
                      _initInterrupt
                            _readADC
                           _runClock
                           _runMQ135
                  _setPortDirections
                         _startUpLCD
                        _updateState
 ---------------------------------------------------------------------------------
 (1) _updateState                                         14    14      0   65958
                                             62 BANK0     14    14      0
                         _displayPPM
                        _displayTemp
                        _displayTime
                           _instCTRL
                     _printStatusPPM
                     _printStatusTMP
                         _printToLCD
                        _setHoursEnd
                      _setHoursStart
                      _setMinutesEnd
                    _setMinutesStart
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setMinutesStart                                      2     2      0    7128
                                             42 BANK0      2     2      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setMinutesEnd                                        2     2      0    7128
                                             42 BANK0      2     2      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setHoursStart                                        2     2      0    7128
                                             42 BANK0      2     2      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setHoursEnd                                          2     2      0    7128
                                             42 BANK0      2     2      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1144
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _printStatusTMP                                       1     1      0    1731
                                              4 BANK0      1     1      0
                         _printToLCD
 ---------------------------------------------------------------------------------
 (2) _printStatusPPM                                       1     1      0    1731
                                              4 BANK0      1     1      0
                         _printToLCD
 ---------------------------------------------------------------------------------
 (2) _displayTime                                         20    20      0    6094
                                             42 BANK0     20    20      0
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _displayTemp                                         20    20      0    6094
                                             42 BANK0     20    20      0
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _displayPPM                                          26    26      0   15618
                                             60 BANK0      1     1      0
                                              0 BANK1     25    25      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    16      6    4315
                                             20 BANK0     22    16      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     265
                                             14 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     358
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     130
                                             14 BANK0      3     0      3
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _startUpLCD                                           0     0      0    1713
                            _initLCD
                           _instCTRL
                         _printToLCD
 ---------------------------------------------------------------------------------
 (3) _printToLCD                                           2     0      2    1669
                                              2 BANK0      2     0      2
                           _dataCTRL
                           _instCTRL
 ---------------------------------------------------------------------------------
 (4) _dataCTRL                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0      22
                                              2 BANK0      1     1      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (1) _setPortDirections                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _runMQ135                                             0     0      0   11805
                          _CalcMQ135
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              5     3      2      22
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _CalcMQ135                                           42    39      3   11783
                                             62 BANK0      3     0      3
                                              0 BANK1     39    39      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3495
                                             30 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2177
                                             46 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3347
                                             17 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    1882
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1685
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _runClock                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleTemp                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handlePPM                                            0     0      0     242
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     242
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (1) _checkTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkSelect                                          4     4      0      67
                                              2 BANK0      4     4      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (1) _checkMode                                            2     2      0      22
                                              2 BANK0      2     2      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (4) _instCTRL                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _calculateTemp                                        2     0      2     866
                                             14 BANK0      2     0      2
                            ___lwdiv
                             ___wmul
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     374
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  5     5      0      22
                                              2 COMMON     5     5      0
                         i1_instCTRL
 ---------------------------------------------------------------------------------
 (6) i1_instCTRL                                           2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculateTemp
     ___lwdiv
       ___wmul (ARG)
     ___wmul
     _readADC (ARG)
   _checkMode
     _instCTRL
   _checkSelect
     _instCTRL
   _checkTime
   _handlePPM
     ___ftge
   _handleTemp
   _initADC
   _initInterrupt
   _readADC
   _runClock
   _runMQ135
     _CalcMQ135
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       _readADC (ARG)
     _readADC
   _setPortDirections
   _startUpLCD
     _initLCD
       _instCTRL
     _instCTRL
     _printToLCD
       _dataCTRL
       _instCTRL
   _updateState
     _displayPPM
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _displayTemp
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _displayTime
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _instCTRL
     _printStatusPPM
       _printToLCD
         _dataCTRL
         _instCTRL
     _printStatusTMP
       _printToLCD
         _dataCTRL
         _instCTRL
     _printToLCD
       _dataCTRL
       _instCTRL
     _setHoursEnd
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _setHoursStart
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _setMinutesEnd
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _setMinutesStart
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _sprintf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _isdigit

 _ISR (ROOT)
   i1_instCTRL

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     27      3F       7       78.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4F      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9C      12        0.0%
ABS                  0      0      9C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue May 14 17:59:50 2024

                         pc 0002                ?_displayTemp 0070                ?_displayTime 0070  
               __CFG_CP$OFF 0000                          l71 1601                          fsr 0004  
       ___wmul@multiplicand 0022    __size_of_setMinutesStart 00C0                ___ftadd@exp1 003D  
              ___ftadd@exp2 003C                ___ftadd@sign 003B                         l103 1691  
                       l212 08B4                         l204 0888                         l221 08C5  
                       l214 08B1                         l208 0885                         l320 0433  
                       l161 09DA                         l147 0B52                         l236 146F  
                       l175 0CD2                         l600 07C7                         l338 050A  
                       l189 0C12                         l606 07E0                         l294 078E  
                       l439 15A7                         l629 0E76                         _GIE 005F  
                       _RB1 0031                         _RC0 0038                         _RC1 0039  
                       _RC2 003A                         _RC3 003B                         _RC4 003C  
                       _RC5 003D                __CFG_CPD$OFF 0000                         _ISR 14CB  
                       _PPM 00C7                         _key 0077                         fsr0 0004  
                       indf 0000                ___awmod@sign 0026                __CFG_FOSC$HS 0000  
             printToLCD@str 0022                __CFG_LVP$OFF 0000                        ?_ISR 0070  
              ___ftdiv@cntr 0058                ___ftdiv@sign 005D                        l2111 0838  
                      l2105 081C                        l2131 15CC                        l2203 0EBD  
                      l2107 082A                        l2115 0843                        l2213 0A1B  
                      l3101 0CB7                        l2143 0DF7                        l3007 1485  
                      l2119 084B                        l3111 0CF1                        l2153 0E0D  
                      l2241 0A95                        l2233 0A76                        l2313 08E3  
                      l3041 0B63                        l3033 0B37                        l2171 0E3C  
                      l2147 0DFE                        l2219 0A31                        l2331 0915  
                      l3027 0B0F                        l3043 0B71                        l3205 08B7  
                      l2173 0E48                        l2165 0E27                        l2261 0D29  
                      l2341 093D                        l2333 0925                        l2093 080F  
                      l3061 09A3                        l3109 0CE3                        l3301 0711  
                      l2183 0E66                        l2175 0E4D                        l2255 0D13  
                      l2343 0940                        l3143 0C23                        l3135 0BF7  
                      l2601 14C1                        l2193 0E9A                        l2185 0E72  
                      l2177 0E51                        l2273 0D68                        l2097 0816  
                      l3129 0BCF                        l3145 0C31                        l2347 094E  
                      l2339 0932                        l3155 14A1                        l3075 09EB  
                      l3067 09C3                        l3307 072C                        l3315 0747  
                      l3251 060A                        l2189 0E88                        l2285 0D90  
                      l2277 0D78                        l3077 09F9                        l3317 0752  
                      l3191 088B                        l3095 0C8F                        l3247 05F8  
                      l3185 0875                        l3177 0862                        l2561 176B  
                      l2289 0DA0                        l3281 06BE                        l3265 0681  
                      l3329 077E                        l1923 1730                        l1915 170C  
                      l3275 06A1                        l3339 17C4                        l1917 171A  
                      l2565 1792                        l1941 16E2                        l3277 06AC  
                      l1927 173B                        l3199 08A1                        l3287 06D9  
                      l3295 06F4                        l2825 159F                        l2841 1614  
                      l1945 16F0                        l3297 06FF                        l1883 07A0  
                      l1939 16D4                        l2819 140A                        l2931 0564  
                      l2907 0529                        l2669 16BD                        l1893 07CC  
                      l1885 07AC                        l1949 16FB                        l2909 052D  
                      l2861 0445                        l1895 07D6                        l1887 07B1  
                      l1879 0799                        l2919 0544                        l2855 042F  
                      l2929 0560                        l2961 05EA                        l2865 0459  
                      l2939 057F                        l2947 0594                        l2891 04D7  
                      l2875 049B                        l2859 0438                        l2957 0598  
                      l2877 04B8                        l2887 04D1                        l2959 0401  
                      l2899 04FC                        l2999 0FDA                        STR_1 1105  
                      STR_2 110B                        STR_3 10CD                        STR_4 10E7  
                      STR_5 10EF                        STR_6 102C                        STR_7 10B9  
                      STR_8 10AF                        STR_9 10C3                  i1_instCTRL 140C  
                      u2005 07A5                        u2105 170F                        u2025 07C0  
                      u2125 171B                        u2045 07CF                        u3005 08EA  
                      u2205 16F1                        u2135 1727                        u2145 1731  
                      u2075 07E7                        u3035 0916                        u2175 16D7  
                      u3065 0934                        u4105 0FC5                        u2195 16E8  
                      u2615 0E28                        u3095 15EF                        u2455 081F  
                      u4135 0AC0                        u2705 0E67                        u4225 095C  
                      u4145 0ACD                        u3531 175E                        u2475 0830  
                      u4235 0969                        u4315 0C40                        u3532 175F  
                      u3533 1764                        u2645 0E3D                        u2805 0A77  
                      u2485 0839                        u4405 0B80                        u4325 0C4D  
                      u3534 1765                        u3551 1785                        u2815 0A88  
                      u4415 0B8D                        u3552 1786                        u3553 178B  
                      u2825 0A96                        u2905 0D79                        u3554 178C  
                      u2675 0E52                        u2915 0D81                        _INTE 005C  
                      _INTF 0059                        u4705 1465                        u2785 0A43  
                      u2865 0D35                        u2795 0A55                        u2955 0DA1  
                      u2875 0D47                        u2965 0DA9                        u4717 17BD  
                      u4807 143C                        u4727 0C5B                        u3865 15A8  
                      u4817 1539                        u4737 0CEB                        u3875 15AF  
                      u4827 15FB                        u3955 04F2                        u4747 0B9B  
                      u4837 14C5                        u4757 0C2B                        u4847 14FD  
                      u4767 0ADB                        u4857 1429                        u4777 0B6B  
                      u3995 0519                        u4787 0977                        u4797 09F3  
              __CFG_WRT$OFF 0000                        _main 17A1                ___ftpack@arg 0020  
                      _mode 00CE                ___ftpack@exp 0023                        btemp 007E  
             __CFG_BOREN$ON 0000                        ltemp 007E                        start 0012  
                      ttemp 007E                        wtemp 007E       displayPPM@ppmFraction 00B6  
              ___ftmul@cntr 004C                ___ftmul@sign 004D                       ??_ISR 0072  
              ___fttol@exp1 005B                ___fttol@lval 0057                       ?_main 0070  
           __end_of___ftadd 0ED7                       STR_10 10B9                       STR_11 10AF  
                     STR_12 10C3                       STR_20 10D6                       STR_13 10B9  
                     STR_21 10DF                       STR_14 10AF                       STR_22 10FE  
                     STR_30 1083                       STR_15 10C3                       STR_23 10F7  
                     STR_31 105A                       STR_32 10A5                       STR_16 10B9  
                     STR_24 103C                       STR_33 1083                       STR_17 10AF  
                     STR_25 1068               __CFG_WDTE$OFF 0000                       STR_18 10C3  
                     STR_34 108F                       STR_26 1076                       STR_19 109A  
                     STR_27 104B                       STR_28 101C             __end_of___awmod 0852  
                     STR_29 10A5             __end_of___ftdiv 0ABB             __end_of___ftneg 13ED  
           __end_of___ftmul 0DCE             __end_of___fttol 0957             __end_of___lwdiv 1742  
           __end_of___lwmod 1702                       _PORTA 0005                       _PORTB 0006  
                     _PORTC 0007                       _PORTD 0008                       _TRISA 0085  
                     _TRISB 0086                       _TRISC 0087                       _TRISD 0088  
      __size_of_checkSelect 0034                CalcMQ135@co2 00C1             __end_of_initADC 13E3  
           __end_of_readADC 160E             __end_of_initLCD 1553               ___awtoft@sign 002D  
           __end_of_dpowers 101C             __end_of_isdigit 140C                       _hours 007A  
             ___ftpack@sign 0024                       pclath 000A                       ltemp0 007E  
                     ltemp1 0082                       ltemp2 0086                       ltemp3 0080  
        __size_of_CalcMQ135 03A7                       ttemp0 007E                       ttemp1 0081  
                     ttemp2 0084                       ttemp3 0087                       ttemp4 007F  
                     status 0003                       wtemp0 007E                       wtemp1 0080  
                     wtemp2 0082                       wtemp3 0084                       wtemp4 0086  
                     wtemp5 0088                       wtemp6 007F             __end_of_sprintf 05F7  
     __end_of_setHoursStart 0B7B       __end_of_setMinutesEnd 0C3B             __initialization 0015  
        displayPPM@ppmWhole 00B4      __size_of_initInterrupt 0007                __end_of_main 1800  
     printStatusPPM@handler 0024  checkSelect@currentRB1State 0024                      ??_main 006C  
             ___fttol@sign1 0056                ?_setHoursEnd 0070           ??_setMinutesStart 004A  
                    _ADCON0 001F                      _ADCON1 009F                      _ADRESH 001E  
                    _ADRESL 009E            __end_of___awtoft 15E5            __end_of___ftpack 07F9  
               ?i1_instCTRL 0070                      i1l2807 14D7                      _INTEDG 040E  
          __end_of_dataCTRL 1445                      u486_27 1416                 instCTRL@CMD 0021  
            __CFG_PWRTE$OFF 0000       printStatusTMP@handler 0024                      ___ftge 1742  
         _setPortDirections 13ED                      ___wmul 159B                   ??___ftadd 0037  
                 ??___awmod 0024                   ??___ftdiv 0054                   ??___ftneg 0031  
                 ??___ftmul 0044                   ??___fttol 0052                   ??___lwdiv 002A  
                 ??___lwmod 0032            ??_printStatusPPM 0024            ??_printStatusTMP 0024  
          __end_of_instCTRL 1432       displayTime@timeFormat 004E          ?_setPortDirections 0070  
           ___awmod@divisor 0020                      _select 00D0             ___awmod@counter 0025  
         __end_of_CalcMQ135 03F8        __size_of_displayTemp 0024        __size_of_displayTime 0024  
                 ??_initADC 0020       ___ftmul@f3_as_product 0049                   ??_readADC 0022  
                 ??_initLCD 0022            __end_of_runMQ135 152F                __pdataCOMMON 007A  
                 ??_isdigit 0020         ??_setPortDirections 0020                      saved_w 007E  
          __end_of_runClock 14CB               _initInterrupt 07F9                   ??_sprintf 003A  
   __end_of__initialization 004D                  ___ftadd@f1 0031                  ___ftadd@f2 0034  
                ___ftge@ff1 0020                  ___ftge@ff2 0023       calculateTemp@adcValue 002E  
                ___ftdiv@f1 0051                  ___ftdiv@f2 004E                  ___ftdiv@f3 0059  
                ___ftneg@f1 002E                  ___awtoft@c 0028   __end_of_setPortDirections 13FC  
                ___ftmul@f1 003E                  ___ftmul@f2 0041                ?_updateState 0070  
                ___fttol@f1 004E              __pcstackCOMMON 0070                __pidataBANK0 0003  
              __pidataBANK1 13CF          __size_of_checkMode 0020          __size_of_checkTime 0077  
       __size_ofi1_instCTRL 0013          __size_of_handlePPM 0030         displayPPM@strBuffer 00A0  
   checkSelect@lastRB1State 00CC              ?_initInterrupt 0070           updateState@buffer 0062  
              sprintf@width 0046                  __pbssBANK1 00C7                  __pmaintext 17A1  
                   ?___ftge 0020                     ?___wmul 0020                  __pintentry 0004  
                _handleTemp 145A                   ?___awtoft 0028                   ?___ftpack 0020  
                 ?_dataCTRL 0070      __size_of_calculateTemp 002F                     _GO_DONE 00FA  
                _displayPPM 0ED7        __size_of_setHoursEnd 00AC           __end_of_checkMode 150B  
         __end_of_checkTime 08C9                  __stringtab 1000                   ?_instCTRL 0070  
         __end_of_handlePPM 1698                   ?_runMQ135 0070  __size_of_setPortDirections 000F  
            CalcMQ135@ratio 00C4             _savedHoursStart 00DC                   ?_runClock 0070  
           __size_of___ftge 005F                     ___ftadd 0DCE                     ___awmod 0803  
                   ___ftdiv 0A03                     ___ftneg 13E3             __size_of___wmul 0025  
                   ___ftmul 0CFB                     ___fttol 08C9                     ___lwdiv 1702  
                   ___lwmod 16CC             _savedMinutesEnd 00DD             _setMinutesStart 0C3B  
                ??___awtoft 002B                  ??___ftpack 0025               ??_checkSelect 0022  
                   __ptext1 05F7                     __ptext2 0C3B                     __ptext3 0B7B  
                   __ptext4 0ABB                     __ptext5 0957                     __ptext6 0803  
                   __ptext7 1492                     __ptext8 1476                     __ptext9 1577  
                   _initADC 13DA                  ??_dataCTRL 0020                     _readADC 15E5  
                   _initLCD 152F                __size_of_ISR 0020             ??_initInterrupt 0020  
                   _dpowers 1012                     _isdigit 13FC            ___awmod@dividend 0022  
                   _ppmFlag 00CF                     _minutes 0079                     _sprintf 03F8  
                   clrloop0 13D3                ??i1_instCTRL 0070        end_of_initialization 004D  
                ??_instCTRL 0020               _calculateTemp 1639                  _tempBuffer 00CA  
                ??_runMQ135 0061                  ??_runClock 0020        __size_of_updateState 0198  
              __pstringtext 1000                 ?_handleTemp 0070                  _printToLCD 160E  
        __end_ofi1_instCTRL 141F      __size_of_setHoursStart 00C0           displayTemp@buffer 004A  
                 _CalcMQ135 0051         __end_of_checkSelect 16CC                 ?_displayPPM 0070  
    __size_of_setMinutesEnd 00C0                  _startUpLCD 1445              ?_calculateTemp 002E  
               ___ftdiv@exp 005C            displayPPM@bufPtr 00B8            CalcMQ135@RAW_ADC 005E  
   __end_of_setMinutesStart 0CFB                 ___ftmul@exp 0048               ??_displayTemp 004A  
             ??_displayTime 004A              __end_of___ftge 17A1              __end_of___wmul 15C0  
             __pidataCOMMON 0800         start_initialization 0015                  ?_CalcMQ135 005E  
               __end_of_ISR 14EB                _lastKeyState 007B         __size_of_handleTemp 001C  
             _setHoursStart 0ABB               _savedHoursEnd 006F               _setMinutesEnd 0B7B  
          CalcMQ135@voltage 00A0                    ??___ftge 0026                    ??___wmul 0024  
       __size_of_displayPPM 0129                 __pdataBANK0 006F                 __pdataBANK1 00DC  
               ?_printToLCD 0022                 _checkSelect 1698           __size_of___awtoft 0025  
         __size_of___ftpack 006A         __end_of_displayTemp 1577         __end_of_displayTime 159B  
               __pbssCOMMON 0077                   ___latbits 0002               __pcstackBANK0 0020  
             __pcstackBANK1 00A0           __size_of_dataCTRL 0013     __size_of_printStatusPPM 001C  
   __size_of_printStatusTMP 001C         __end_of__stringdata 110E                 ?_startUpLCD 0070  
           ??_calculateTemp 0030                 sprintf@ccnt 003F                 sprintf@_val 0041  
         _savedMinutesStart 00DE                 sprintf@flag 0045                 sprintf@prec 003E  
                 _checkMode 14EB                   _checkTime 0852              ?_setHoursStart 0070  
                 _debugInfo 00D2           __size_of_instCTRL 0013            ___lwdiv@dividend 0028  
            ?_setMinutesEnd 0070            ?_setMinutesStart 0070                   _handlePPM 1668  
         __size_of_runMQ135 0024                    ?___ftadd 0031                    ?___awmod 0020  
                  ?___ftdiv 004E                    ?___ftneg 002E                    ?___ftmul 003E  
                  ?___fttol 004E                    ?___lwdiv 0026                    ?___lwmod 002E  
         __size_of_runClock 001D                    ?_initADC 0070                    ?_readADC 0020  
                  ?_initLCD 0070                    ?_isdigit 0070               ??_setHoursEnd 004A  
               ??_CalcMQ135 0061            ___lwdiv@quotient 002B                    ?_sprintf 0034  
         interrupt_function 0004              ___wmul@product 0024                  ?_checkMode 0070  
                ?_checkTime 0070         __size_of_printToLCD 002B                   clear_ram0 13D2  
             i1instCTRL@CMD 0071                 dataCTRL@DAT 0021                  ?_handlePPM 0070  
               _displayTemp 1553                 _displayTime 1577         __size_of_startUpLCD 0015  
              ??_handleTemp 0020                 __stringbase 1012                 __stringdata 101C  
         ___wmul@multiplier 0020       __end_of_initInterrupt 0800                ??_displayPPM 005C  
       __end_of_setHoursEnd 0A03             ??_setHoursStart 004A          __end_of_handleTemp 1476  
           ??_setMinutesEnd 004A             CalcMQ135@ratio2 00B5             CalcMQ135@ratio3 00B8  
           CalcMQ135@ratio4 00BB             CalcMQ135@ratio5 00BE             CalcMQ135@ratio6 00A3  
             ??_updateState 005E          __end_of_displayPPM 1000            __size_of___ftadd 0109  
          __size_of___awmod 004F            __size_of___ftdiv 00B8            __size_of___ftneg 000A  
          __size_of___ftmul 00D3            __size_of___fttol 008E            __size_of___lwdiv 0040  
          __size_of___lwmod 0036              readADC@channel 0024                    ___awtoft 15C0  
                  ___ftpack 078F          __end_of__stringtab 1012                 _isdigit$441 0020  
                  _dataCTRL 1432            __size_of_initADC 0009            __size_of_readADC 0029  
          __size_of_initLCD 0024            __size_of_isdigit 0010              _printStatusPPM 1476  
            _printStatusTMP 1492             ___lwdiv@divisor 0026             ___lwdiv@counter 002D  
                  __ptext10 1553                    __ptext11 0ED7                    __ptext20 152F  
                  __ptext12 03F8                    __ptext21 13ED                    __ptext13 13FC  
                  __ptext30 14AE                    __ptext22 150B                    __ptext14 16CC  
                  __ptext31 07F9                    __ptext23 15E5                    __ptext15 08C9  
                  __ptext40 1639                    __ptext32 13DA                    __ptext24 0051  
                  __ptext16 13E3                    __ptext41 159B                    __ptext33 145A  
                  __ptext25 0CFB                    __ptext17 1445                    __ptext42 1702  
                  __ptext34 1668                    __ptext26 0A03                    __ptext18 160E  
                  __ptext43 14CB                    __ptext35 1742                    __ptext27 0DCE  
                  __ptext19 1432                    __ptext44 140C                    __ptext36 0852  
                  __ptext28 15C0                    __ptext37 1698                    __ptext29 078F  
                  __ptext38 14EB                    __ptext39 141F            __size_of_sprintf 01FF  
                  _keyValid 0078                    _lastMode 007C                    _instCTRL 141F  
             __size_of_main 005F                 ??_checkMode 0022                 ??_checkTime 0020  
                  _runMQ135 150B                    _tempFlag 00D1                 ??_handlePPM 002C  
                  _runClock 14AE         __end_of_updateState 078F                ??_printToLCD 0024  
              ?_checkSelect 0070      __end_of_printStatusPPM 1492      __end_of_printStatusTMP 14AE  
               _setHoursEnd 0957                    isdigit@c 0021                ??_startUpLCD 0024  
                  intlevel1 0000                   sprintf@ap 003D                   sprintf@sp 0049  
          ___lwmod@dividend 0030          __end_of_printToLCD 1639                   stringcode 100A  
        __end_of_startUpLCD 145A               _CalcMQ135$682 00A6               _CalcMQ135$683 00A9  
             _CalcMQ135$684 00AC               _CalcMQ135$685 00AF               _CalcMQ135$686 00B2  
                  sprintf@c 0048                    sprintf@f 0034             ?_printStatusPPM 0070  
           ?_printStatusTMP 0070             ___lwmod@divisor 002E             ___lwmod@counter 0033  
                  stringtab 1000       __end_of_calculateTemp 1668                 _updateState 05F7  
