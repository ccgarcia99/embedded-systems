

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue May 14 22:56:36 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	dabs	1,0x7E,2
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0015                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  0087                     	;# 
   105  0088                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  009F                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126                           
   127                           	psect	idataCOMMON
   128  07FC                     __pidataCOMMON:	
   129                           
   130                           ;initializer for _hours
   131  07FC  3404               	retlw	4
   132                           
   133                           ;initializer for _lastKeyState
   134  07FD  34FF               	retlw	255
   135                           
   136                           	psect	idataBANK1
   137  1248                     __pidataBANK1:	
   138                           
   139                           ;initializer for _lastMode
   140  1248  34FF               	retlw	255
   141                           
   142                           ;initializer for _savedHoursEnd
   143  1249  340A               	retlw	10
   144                           
   145                           ;initializer for _savedHoursStart
   146  124A  3409               	retlw	9
   147                           
   148                           ;initializer for _savedMinutesEnd
   149  124B  341E               	retlw	30
   150                           
   151                           ;initializer for _savedMinutesStart
   152  124C  341E               	retlw	30
   153                           
   154                           ;initializer for _message1
   155  124D  3454               	retlw	84
   156  124E  3445               	retlw	69
   157  124F  344D               	retlw	77
   158  1250  3450               	retlw	80
   159  1251  343A               	retlw	58
   160  1252  3420               	retlw	32
   161  1253  3400               	retlw	0
   162                           
   163                           	psect	idataBANK3
   164  1226                     __pidataBANK3:	
   165                           
   166                           ;initializer for _message2
   167  1226  3448               	retlw	72
   168  1227  344D               	retlw	77
   169  1228  3444               	retlw	68
   170  1229  3454               	retlw	84
   171  122A  343A               	retlw	58
   172  122B  3420               	retlw	32
   173  122C  3400               	retlw	0
   174                           
   175                           	psect	stringtext
   176  0800                     __pstringtext:	
   177  0800                     stringtab:	
   178  0800                     __stringtab:	
   179                           
   180                           ;	String table - string pointers are 2 bytes each
   181  0800  1BFF               	btfsc	btemp+1,7
   182  0801  280A               	ljmp	stringcode
   183  0802  1383               	bcf	3,7
   184  0803  187F               	btfsc	btemp+1,0
   185  0804  1783               	bsf	3,7
   186  0805  0800               	movf	0,w
   187  0806  0A84               	incf	4,f
   188  0807  1903               	skipnz
   189  0808  0AFF               	incf	btemp+1,f
   190  0809  0008               	return
   191  080A                     stringcode:	
   192  080A  087F               	movf	btemp+1,w
   193  080B  397F               	andlw	127
   194  080C  008A               	movwf	10
   195  080D  0804               	movf	4,w
   196  080E  0A84               	incf	4,f
   197  080F  1903               	skipnz
   198  0810  0AFF               	incf	btemp+1,f
   199  0811  0082               	movwf	2
   200  0812                     __stringbase:	
   201  0812                     __end_of__stringtab:	
   202  0812                     _dpowers:	
   203  0812  3401               	retlw	1
   204  0813  3400               	retlw	0
   205  0814  340A               	retlw	10
   206  0815  3400               	retlw	0
   207  0816  3464               	retlw	100
   208  0817  3400               	retlw	0
   209  0818  34E8               	retlw	232
   210  0819  3403               	retlw	3
   211  081A  3410               	retlw	16
   212  081B  3427               	retlw	39
   213  081C                     __end_of_dpowers:	
   214  001F                     _ADCON0	set	31
   215  001E                     _ADRESH	set	30
   216  0005                     _PORTA	set	5
   217  0006                     _PORTB	set	6
   218  0007                     _PORTC	set	7
   219  0008                     _PORTD	set	8
   220  005F                     _GIE	set	95
   221  00FA                     _GO_DONE	set	250
   222  005C                     _INTE	set	92
   223  0059                     _INTF	set	89
   224  0031                     _RB1	set	49
   225  0032                     _RB2	set	50
   226  0038                     _RC0	set	56
   227  0039                     _RC1	set	57
   228  003A                     _RC2	set	58
   229  003B                     _RC3	set	59
   230  003C                     _RC4	set	60
   231  003D                     _RC5	set	61
   232  009F                     _ADCON1	set	159
   233  009E                     _ADRESL	set	158
   234  0085                     _TRISA	set	133
   235  0086                     _TRISB	set	134
   236  0087                     _TRISC	set	135
   237  0088                     _TRISD	set	136
   238  040E                     _INTEDG	set	1038
   239  0432                     _TRISB2	set	1074
   240  081C                     __stringdata:	
   241  081C                     STR_24:	
   242  081C  344E               	retlw	78	;'N'
   243  081D  344F               	retlw	79	;'O'
   244  081E  3420               	retlw	32	;' '
   245  081F  3453               	retlw	83	;'S'
   246  0820  3449               	retlw	73	;'I'
   247  0821  3447               	retlw	71	;'G'
   248  0822  344E               	retlw	78	;'N'
   249  0823  3441               	retlw	65	;'A'
   250  0824  344C               	retlw	76	;'L'
   251  0825  3420               	retlw	32	;' '
   252  0826  342D               	retlw	45	;'-'
   253  0827  343E               	retlw	62	;'>'
   254  0828  3420               	retlw	32	;' '
   255  0829  3444               	retlw	68	;'D'
   256  082A  3448               	retlw	72	;'H'
   257  082B  3454               	retlw	84	;'T'
   258  082C  3431               	retlw	49	;'1'
   259  082D  3431               	retlw	49	;'1'
   260  082E  3400               	retlw	0
   261  082F                     STR_33:	
   262  082F  3453               	retlw	83	;'S'
   263  0830  3445               	retlw	69	;'E'
   264  0831  3454               	retlw	84	;'T'
   265  0832  3420               	retlw	32	;' '
   266  0833  3448               	retlw	72	;'H'
   267  0834  3452               	retlw	82	;'R'
   268  0835  3453               	retlw	83	;'S'
   269  0836  3420               	retlw	32	;' '
   270  0837  342D               	retlw	45	;'-'
   271  0838  3420               	retlw	32	;' '
   272  0839  3453               	retlw	83	;'S'
   273  083A  3454               	retlw	84	;'T'
   274  083B  3441               	retlw	65	;'A'
   275  083C  3452               	retlw	82	;'R'
   276  083D  3454               	retlw	84	;'T'
   277  083E  3400               	retlw	0
   278  083F                     STR_6:	
   279  083F  3454               	retlw	84	;'T'
   280  0840  3469               	retlw	105	;'i'
   281  0841  346D               	retlw	109	;'m'
   282  0842  3465               	retlw	101	;'e'
   283  0843  343A               	retlw	58	;':'
   284  0844  3420               	retlw	32	;' '
   285  0845  3425               	retlw	37	;'%'
   286  0846  3430               	retlw	48	;'0'
   287  0847  3432               	retlw	50	;'2'
   288  0848  3464               	retlw	100	;'d'
   289  0849  343A               	retlw	58	;':'
   290  084A  3425               	retlw	37	;'%'
   291  084B  3430               	retlw	48	;'0'
   292  084C  3432               	retlw	50	;'2'
   293  084D  3464               	retlw	100	;'d'
   294  084E  3400               	retlw	0
   295  084F                     STR_29:	
   296  084F  3444               	retlw	68	;'D'
   297  0850  3449               	retlw	73	;'I'
   298  0851  3453               	retlw	83	;'S'
   299  0852  3450               	retlw	80	;'P'
   300  0853  3420               	retlw	32	;' '
   301  0854  3443               	retlw	67	;'C'
   302  0855  344D               	retlw	77	;'M'
   303  0856  344D               	retlw	77	;'M'
   304  0857  344F               	retlw	79	;'O'
   305  0858  344E               	retlw	78	;'N'
   306  0859  3420               	retlw	32	;' '
   307  085A  3450               	retlw	80	;'P'
   308  085B  3447               	retlw	71	;'G'
   309  085C  3431               	retlw	49	;'1'
   310  085D  3400               	retlw	0
   311  085E                     STR_32:	
   312  085E  3444               	retlw	68	;'D'
   313  085F  3449               	retlw	73	;'I'
   314  0860  3453               	retlw	83	;'S'
   315  0861  3450               	retlw	80	;'P'
   316  0862  3420               	retlw	32	;' '
   317  0863  3443               	retlw	67	;'C'
   318  0864  344D               	retlw	77	;'M'
   319  0865  344D               	retlw	77	;'M'
   320  0866  344F               	retlw	79	;'O'
   321  0867  344E               	retlw	78	;'N'
   322  0868  3420               	retlw	32	;' '
   323  0869  3450               	retlw	80	;'P'
   324  086A  3447               	retlw	71	;'G'
   325  086B  3432               	retlw	50	;'2'
   326  086C  3400               	retlw	0
   327  086D                     STR_36:	
   328  086D  3453               	retlw	83	;'S'
   329  086E  3445               	retlw	69	;'E'
   330  086F  3454               	retlw	84	;'T'
   331  0870  3420               	retlw	32	;' '
   332  0871  3448               	retlw	72	;'H'
   333  0872  3452               	retlw	82	;'R'
   334  0873  3453               	retlw	83	;'S'
   335  0874  3420               	retlw	32	;' '
   336  0875  342D               	retlw	45	;'-'
   337  0876  3420               	retlw	32	;' '
   338  0877  3445               	retlw	69	;'E'
   339  0878  344E               	retlw	78	;'N'
   340  0879  3444               	retlw	68	;'D'
   341  087A  3400               	retlw	0
   342  087B                     STR_30:	
   343  087B  3453               	retlw	83	;'S'
   344  087C  3454               	retlw	84	;'T'
   345  087D  3452               	retlw	82	;'R'
   346  087E  3454               	retlw	84	;'T'
   347  087F  343A               	retlw	58	;':'
   348  0880  3420               	retlw	32	;' '
   349  0881  3425               	retlw	37	;'%'
   350  0882  3432               	retlw	50	;'2'
   351  0883  3464               	retlw	100	;'d'
   352  0884  343A               	retlw	58	;':'
   353  0885  3425               	retlw	37	;'%'
   354  0886  3432               	retlw	50	;'2'
   355  0887  3464               	retlw	100	;'d'
   356  0888  3400               	retlw	0
   357  0889                     STR_31:	
   358  0889  3445               	retlw	69	;'E'
   359  088A  344E               	retlw	78	;'N'
   360  088B  3444               	retlw	68	;'D'
   361  088C  343A               	retlw	58	;':'
   362  088D  3420               	retlw	32	;' '
   363  088E  3425               	retlw	37	;'%'
   364  088F  3432               	retlw	50	;'2'
   365  0890  3464               	retlw	100	;'d'
   366  0891  343A               	retlw	58	;':'
   367  0892  3425               	retlw	37	;'%'
   368  0893  3432               	retlw	50	;'2'
   369  0894  3464               	retlw	100	;'d'
   370  0895  3400               	retlw	0
   371  0896                     STR_35:	
   372  0896  3453               	retlw	83	;'S'
   373  0897  3445               	retlw	69	;'E'
   374  0898  3454               	retlw	84	;'T'
   375  0899  3420               	retlw	32	;' '
   376  089A  344D               	retlw	77	;'M'
   377  089B  3449               	retlw	73	;'I'
   378  089C  344E               	retlw	78	;'N'
   379  089D  3455               	retlw	85	;'U'
   380  089E  3454               	retlw	84	;'T'
   381  089F  3445               	retlw	69	;'E'
   382  08A0  3453               	retlw	83	;'S'
   383  08A1  3400               	retlw	0
   384  08A2                     STR_39:	
   385  08A2  3449               	retlw	73	;'I'
   386  08A3  344F               	retlw	79	;'O'
   387  08A4  3420               	retlw	32	;' '
   388  08A5  3453               	retlw	83	;'S'
   389  08A6  3454               	retlw	84	;'T'
   390  08A7  3441               	retlw	65	;'A'
   391  08A8  3454               	retlw	84	;'T'
   392  08A9  3455               	retlw	85	;'U'
   393  08AA  3453               	retlw	83	;'S'
   394  08AB  343A               	retlw	58	;':'
   395  08AC  3400               	retlw	0
   396  08AD                     STR_19:	
   397  08AD  3454               	retlw	84	;'T'
   398  08AE  3465               	retlw	101	;'e'
   399  08AF  346D               	retlw	109	;'m'
   400  08B0  3470               	retlw	112	;'p'
   401  08B1  343A               	retlw	58	;':'
   402  08B2  3420               	retlw	32	;' '
   403  08B3  3425               	retlw	37	;'%'
   404  08B4  3464               	retlw	100	;'d'
   405  08B5  3420               	retlw	32	;' '
   406  08B6  3443               	retlw	67	;'C'
   407  08B7  3400               	retlw	0
   408  08B8                     STR_22:	
   409  08B8  3453               	retlw	83	;'S'
   410  08B9  3449               	retlw	73	;'I'
   411  08BA  3447               	retlw	71	;'G'
   412  08BB  344E               	retlw	78	;'N'
   413  08BC  3441               	retlw	65	;'A'
   414  08BD  344C               	retlw	76	;'L'
   415  08BE  3420               	retlw	32	;' '
   416  08BF  344F               	retlw	79	;'O'
   417  08C0  344B               	retlw	75	;'K'
   418  08C1  3400               	retlw	0
   419  08C2                     STR_34:	
   420  08C2  3453               	retlw	83	;'S'
   421  08C3  3445               	retlw	69	;'E'
   422  08C4  3454               	retlw	84	;'T'
   423  08C5  3420               	retlw	32	;' '
   424  08C6  3448               	retlw	72	;'H'
   425  08C7  344F               	retlw	79	;'O'
   426  08C8  3455               	retlw	85	;'U'
   427  08C9  3452               	retlw	82	;'R'
   428  08CA  3453               	retlw	83	;'S'
   429  08CB  3400               	retlw	0
   430  08CC                     STR_8:	
   431  08CC  3444               	retlw	68	;'D'
   432  08CD  3445               	retlw	69	;'E'
   433  08CE  3443               	retlw	67	;'C'
   434  08CF  343A               	retlw	58	;':'
   435  08D0  3420               	retlw	32	;' '
   436  08D1  3425               	retlw	37	;'%'
   437  08D2  3430               	retlw	48	;'0'
   438  08D3  3432               	retlw	50	;'2'
   439  08D4  3464               	retlw	100	;'d'
   440  08D5  3400               	retlw	0
   441  08D6                     STR_7:	
   442  08D6  3449               	retlw	73	;'I'
   443  08D7  344E               	retlw	78	;'N'
   444  08D8  3443               	retlw	67	;'C'
   445  08D9  343A               	retlw	58	;':'
   446  08DA  3420               	retlw	32	;' '
   447  08DB  3425               	retlw	37	;'%'
   448  08DC  3430               	retlw	48	;'0'
   449  08DD  3432               	retlw	50	;'2'
   450  08DE  3464               	retlw	100	;'d'
   451  08DF  3400               	retlw	0
   452  08E0                     STR_9:	
   453  08E0  3453               	retlw	83	;'S'
   454  08E1  3445               	retlw	69	;'E'
   455  08E2  3454               	retlw	84	;'T'
   456  08E3  343A               	retlw	58	;':'
   457  08E4  3420               	retlw	32	;' '
   458  08E5  3425               	retlw	37	;'%'
   459  08E6  3430               	retlw	48	;'0'
   460  08E7  3432               	retlw	50	;'2'
   461  08E8  3464               	retlw	100	;'d'
   462  08E9  3400               	retlw	0
   463  08EA                     STR_3:	
   464  08EA  3425               	retlw	37	;'%'
   465  08EB  3464               	retlw	100	;'d'
   466  08EC  3420               	retlw	32	;' '
   467  08ED  3470               	retlw	112	;'p'
   468  08EE  3470               	retlw	112	;'p'
   469  08EF  346D               	retlw	109	;'m'
   470  08F0  3420               	retlw	32	;' '
   471  08F1  3420               	retlw	32	;' '
   472  08F2  3400               	retlw	0
   473  08F3                     STR_20:	
   474  08F3  3456               	retlw	86	;'V'
   475  08F4  3445               	retlw	69	;'E'
   476  08F5  344E               	retlw	78	;'N'
   477  08F6  3454               	retlw	84	;'T'
   478  08F7  3420               	retlw	32	;' '
   479  08F8  344F               	retlw	79	;'O'
   480  08F9  344E               	retlw	78	;'N'
   481  08FA  3420               	retlw	32	;' '
   482  08FB  3400               	retlw	0
   483  08FC                     STR_21:	
   484  08FC  3446               	retlw	70	;'F'
   485  08FD  3441               	retlw	65	;'A'
   486  08FE  344E               	retlw	78	;'N'
   487  08FF  3420               	retlw	32	;' '
   488  0900  344F               	retlw	79	;'O'
   489  0901  3446               	retlw	70	;'F'
   490  0902  3446               	retlw	70	;'F'
   491  0903  3400               	retlw	0
   492  0904                     STR_4:	
   493  0904  3450               	retlw	80	;'P'
   494  0905  3455               	retlw	85	;'U'
   495  0906  3452               	retlw	82	;'R'
   496  0907  3446               	retlw	70	;'F'
   497  0908  3420               	retlw	32	;' '
   498  0909  3448               	retlw	72	;'H'
   499  090A  3449               	retlw	73	;'I'
   500  090B  3400               	retlw	0
   501  090C                     STR_5:	
   502  090C  3450               	retlw	80	;'P'
   503  090D  3455               	retlw	85	;'U'
   504  090E  3452               	retlw	82	;'R'
   505  090F  3446               	retlw	70	;'F'
   506  0910  3420               	retlw	32	;' '
   507  0911  344C               	retlw	76	;'L'
   508  0912  344F               	retlw	79	;'O'
   509  0913  3400               	retlw	0
   510  0914                     STR_28:	
   511  0914  344D               	retlw	77	;'M'
   512  0915  344F               	retlw	79	;'O'
   513  0916  3444               	retlw	68	;'D'
   514  0917  3445               	retlw	69	;'E'
   515  0918  343A               	retlw	58	;':'
   516  0919  3420               	retlw	32	;' '
   517  091A  3400               	retlw	0
   518  091B                     STR_27:	
   519  091B  3450               	retlw	80	;'P'
   520  091C  3457               	retlw	87	;'W'
   521  091D  3452               	retlw	82	;'R'
   522  091E  3420               	retlw	32	;' '
   523  091F  344F               	retlw	79	;'O'
   524  0920  344E               	retlw	78	;'N'
   525  0921  3400               	retlw	0
   526  0922                     STR_1:	
   527  0922  3443               	retlw	67	;'C'
   528  0923  344F               	retlw	79	;'O'
   529  0924  3432               	retlw	50	;'2'
   530  0925  343A               	retlw	58	;':'
   531  0926  3420               	retlw	32	;' '
   532  0927  3400               	retlw	0
   533  0928                     STR_25:	
   534  0928  3425               	retlw	37	;'%'
   535  0929  3464               	retlw	100	;'d'
   536  092A  342E               	retlw	46	;'.'
   537  092B  3425               	retlw	37	;'%'
   538  092C  3464               	retlw	100	;'d'
   539  092D  3400               	retlw	0
   540  092E                     STR_23:	
   541  092E  3445               	retlw	69	;'E'
   542  092F  3472               	retlw	114	;'r'
   543  0930  3472               	retlw	114	;'r'
   544  0931  346F               	retlw	111	;'o'
   545  0932  3472               	retlw	114	;'r'
   546  0933  3400               	retlw	0
   547  0934                     __end_of__stringdata:	
   548                           
   549                           ; #config settings
   550  0000                     
   551                           	psect	cinit
   552  0015                     start_initialization:	
   553  0015                     __initialization:	
   554                           
   555                           ; Clear objects allocated to COMMON
   556  0015  01F7               	clrf	__pbssCOMMON& (0+127)
   557  0016  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   558  0017  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   559  0018  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   560  0019  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
   561                           
   562                           ; Clear objects allocated to BANK1
   563  001A  1383               	bcf	3,7	;select IRP bank0
   564  001B  30CA               	movlw	low __pbssBANK1
   565  001C  0084               	movwf	4
   566  001D  30E3               	movlw	low (__pbssBANK1+25)
   567  001E  160A  118A  222D  120A  118A  	fcall	clear_ram0
   568                           
   569                           ; Initialize objects allocated to BANK3
   570  0023  1783               	bsf	3,7	;select IRP bank2
   571  0024  3097               	movlw	low (__pdataBANK3+7)
   572  0025  00FD               	movwf	btemp+-1
   573  0026  3012               	movlw	high __pidataBANK3
   574  0027  00FE               	movwf	btemp
   575  0028  3026               	movlw	low __pidataBANK3
   576  0029  00FF               	movwf	btemp+1
   577  002A  3090               	movlw	low __pdataBANK3
   578  002B  0084               	movwf	4
   579  002C  160A  118A  2268  120A  118A  	fcall	init_ram0
   580                           
   581                           ; Initialize objects allocated to BANK1
   582  0031  1383               	bcf	3,7	;select IRP bank0
   583  0032  30EF               	movlw	low (__pdataBANK1+12)
   584  0033  00FD               	movwf	btemp+-1
   585  0034  3012               	movlw	high __pidataBANK1
   586  0035  00FE               	movwf	btemp
   587  0036  3048               	movlw	low __pidataBANK1
   588  0037  00FF               	movwf	btemp+1
   589  0038  30E3               	movlw	low __pdataBANK1
   590  0039  0084               	movwf	4
   591  003A  160A  118A  2268  120A  118A  	fcall	init_ram0
   592                           
   593                           ; Initialize objects allocated to COMMON
   594  003F  120A  118A  27FC  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   595  0044  00FC               	movwf	__pdataCOMMON& (0+127)
   596  0045  120A  118A  27FD   	fcall	__pidataCOMMON+1	;fetch initializer
   597  0048  00FD               	movwf	(__pdataCOMMON+1)& (0+127)
   598  0049                     end_of_initialization:	
   599                           ;End of C runtime variable initialization code
   600                           
   601  0049                     __end_of__initialization:	
   602  0049  0183               	clrf	3
   603  004A  160A  118A  2E37   	ljmp	_main	;jump to C main() function
   604                           
   605                           	psect	bssCOMMON
   606  0077                     __pbssCOMMON:	
   607  0077                     _T_byte1:	
   608  0077                     	ds	1
   609  0078                     _T_byte2:	
   610  0078                     	ds	1
   611  0079                     _key:	
   612  0079                     	ds	1
   613  007A                     _keyValid:	
   614  007A                     	ds	1
   615  007B                     _minutes:	
   616  007B                     	ds	1
   617                           
   618                           	psect	dataCOMMON
   619  007C                     __pdataCOMMON:	
   620  007C                     _hours:	
   621  007C                     	ds	1
   622  007D                     _lastKeyState:	
   623  007D                     	ds	1
   624                           
   625                           	psect	bssBANK1
   626  00CA                     __pbssBANK1:	
   627  00CA                     _PPM:	
   628  00CA                     	ds	3
   629  00CD                     _tempBuffer:	
   630  00CD                     	ds	2
   631  00CF                     checkSelect@lastRB1State:	
   632  00CF                     	ds	2
   633  00D1                     _CheckSum:	
   634  00D1                     	ds	1
   635  00D2                     _RH_byte1:	
   636  00D2                     	ds	1
   637  00D3                     _RH_byte2:	
   638  00D3                     	ds	1
   639  00D4                     _checkbit:	
   640  00D4                     	ds	1
   641  00D5                     _mode:	
   642  00D5                     	ds	1
   643  00D6                     _ppmFlag:	
   644  00D6                     	ds	1
   645  00D7                     _select:	
   646  00D7                     	ds	1
   647  00D8                     _tempFlag:	
   648  00D8                     	ds	1
   649  00D9                     _debugInfo:	
   650  00D9                     	ds	10
   651                           
   652                           	psect	dataBANK1
   653  00E3                     __pdataBANK1:	
   654  00E3                     _lastMode:	
   655  00E3                     	ds	1
   656  00E4                     _savedHoursEnd:	
   657  00E4                     	ds	1
   658  00E5                     _savedHoursStart:	
   659  00E5                     	ds	1
   660  00E6                     _savedMinutesEnd:	
   661  00E6                     	ds	1
   662  00E7                     _savedMinutesStart:	
   663  00E7                     	ds	1
   664  00E8                     _message1:	
   665  00E8                     	ds	7
   666                           
   667                           	psect	dataBANK3
   668  0190                     __pdataBANK3:	
   669  0190                     _message2:	
   670  0190                     	ds	7
   671                           
   672                           	psect	clrtext
   673  122D                     clear_ram0:	
   674                           ;	Called with FSR containing the base address, and
   675                           ;	W with the last address+1
   676                           
   677  122D  0064               	clrwdt	;clear the watchdog before getting into this loop
   678  122E                     clrloop0:	
   679  122E  0180               	clrf	0	;clear RAM location pointed to by FSR
   680  122F  0A84               	incf	4,f	;increment pointer
   681  1230  0604               	xorwf	4,w	;XOR with final address
   682  1231  1903               	btfsc	3,2	;have we reached the end yet?
   683  1232  3400               	retlw	0	;all done for this memory range, return
   684  1233  0604               	xorwf	4,w	;XOR again to restore value
   685  1234  2A2E               	goto	clrloop0	;do the next byte
   686                           
   687                           	psect	inittext
   688  1264                     init_fetch0:	
   689                           ;	Called with low address in FSR and high address in W
   690                           
   691  1264  087E               	movf	126,w
   692  1265  008A               	movwf	10
   693  1266  087F               	movf	127,w
   694  1267  0082               	movwf	2
   695  1268                     init_ram0:	
   696                           ;Called with:
   697                           ;	high address of idata address in btemp 
   698                           ;	low address of idata address in btemp+1 
   699                           ;	low address of data in FSR
   700                           ;	high address + 1 of data in btemp-1
   701                           
   702  1268  2264  160A  118A   	fcall	init_fetch0
   703  126B  0080               	movwf	0
   704  126C  0A84               	incf	4,f
   705  126D  0804               	movf	4,w
   706  126E  067D               	xorwf	125,w
   707  126F  1903               	btfsc	3,2
   708  1270  3400               	retlw	0
   709  1271  0AFF               	incf	127,f
   710  1272  1903               	btfsc	3,2
   711  1273  0AFE               	incf	126,f
   712  1274  2A68               	goto	init_ram0
   713                           
   714                           	psect	cstackBANK1
   715  00A0                     __pcstackBANK1:	
   716  00A0                     CalcMQ135@voltage:	
   717  00A0                     displayPPM@strBuffer:	
   718                           ; 3 bytes @ 0x0
   719                           
   720                           
   721                           ; 20 bytes @ 0x0
   722  00A0                     	ds	3
   723  00A3                     CalcMQ135@ratio6:	
   724                           
   725                           ; 3 bytes @ 0x3
   726  00A3                     	ds	3
   727  00A6                     _CalcMQ135$723:	
   728                           
   729                           ; 3 bytes @ 0x6
   730  00A6                     	ds	3
   731  00A9                     _CalcMQ135$724:	
   732                           
   733                           ; 3 bytes @ 0x9
   734  00A9                     	ds	3
   735  00AC                     _CalcMQ135$725:	
   736                           
   737                           ; 3 bytes @ 0xC
   738  00AC                     	ds	3
   739  00AF                     _CalcMQ135$726:	
   740                           
   741                           ; 3 bytes @ 0xF
   742  00AF                     	ds	3
   743  00B2                     _CalcMQ135$727:	
   744                           
   745                           ; 3 bytes @ 0x12
   746  00B2                     	ds	2
   747  00B4                     displayPPM@ppmWhole:	
   748                           
   749                           ; 2 bytes @ 0x14
   750  00B4                     	ds	1
   751  00B5                     CalcMQ135@ratio2:	
   752                           
   753                           ; 3 bytes @ 0x15
   754  00B5                     	ds	1
   755  00B6                     displayPPM@ppmFraction:	
   756                           
   757                           ; 2 bytes @ 0x16
   758  00B6                     	ds	2
   759  00B8                     displayPPM@bufPtr:	
   760  00B8                     CalcMQ135@ratio3:	
   761                           ; 1 bytes @ 0x18
   762                           
   763                           
   764                           ; 3 bytes @ 0x18
   765  00B8                     	ds	3
   766  00BB                     CalcMQ135@ratio4:	
   767                           
   768                           ; 3 bytes @ 0x1B
   769  00BB                     	ds	3
   770  00BE                     CalcMQ135@ratio5:	
   771                           
   772                           ; 3 bytes @ 0x1E
   773  00BE                     	ds	3
   774  00C1                     CalcMQ135@co2:	
   775                           
   776                           ; 3 bytes @ 0x21
   777  00C1                     	ds	3
   778  00C4                     CalcMQ135@ratio:	
   779                           
   780                           ; 3 bytes @ 0x24
   781  00C4                     	ds	3
   782  00C7                     ??_main:	
   783                           
   784                           ; 0 bytes @ 0x27
   785  00C7                     	ds	3
   786                           
   787                           	psect	cstackCOMMON
   788  0070                     __pcstackCOMMON:	
   789  0070                     ?_setPortDirections:	
   790  0070                     ?_initADC:	
   791                           ; 0 bytes @ 0x0
   792                           
   793  0070                     ?_initInterrupt:	
   794                           ; 0 bytes @ 0x0
   795                           
   796  0070                     ?_startUpLCD:	
   797                           ; 0 bytes @ 0x0
   798                           
   799  0070                     ?_checkSelect:	
   800                           ; 0 bytes @ 0x0
   801                           
   802  0070                     ?_checkMode:	
   803                           ; 0 bytes @ 0x0
   804                           
   805  0070                     ?_updateState:	
   806                           ; 0 bytes @ 0x0
   807                           
   808  0070                     ?_isdigit:	
   809                           ; 0 bytes @ 0x0
   810                           
   811  0070                     ?_instCTRL:	
   812                           ; 1 bit 
   813                           
   814  0070                     ?_dataCTRL:	
   815                           ; 0 bytes @ 0x0
   816                           
   817  0070                     ?_initLCD:	
   818                           ; 0 bytes @ 0x0
   819                           
   820  0070                     ?_runMQ135:	
   821                           ; 0 bytes @ 0x0
   822                           
   823  0070                     ?_displayPPM:	
   824                           ; 0 bytes @ 0x0
   825                           
   826  0070                     ?_printStatusPPM:	
   827                           ; 0 bytes @ 0x0
   828                           
   829  0070                     ?_runClock:	
   830                           ; 0 bytes @ 0x0
   831                           
   832  0070                     ?_displayTime:	
   833                           ; 0 bytes @ 0x0
   834                           
   835  0070                     ?_setHoursStart:	
   836                           ; 0 bytes @ 0x0
   837                           
   838  0070                     ?_setHoursEnd:	
   839                           ; 0 bytes @ 0x0
   840                           
   841  0070                     ?_setMinutesStart:	
   842                           ; 0 bytes @ 0x0
   843                           
   844  0070                     ?_setMinutesEnd:	
   845                           ; 0 bytes @ 0x0
   846                           
   847  0070                     ?_checkTime:	
   848                           ; 0 bytes @ 0x0
   849                           
   850  0070                     ?_printStatusTMP:	
   851                           ; 0 bytes @ 0x0
   852                           
   853  0070                     ?_displayDHT11Stat:	
   854                           ; 0 bytes @ 0x0
   855                           
   856  0070                     ?_main:	
   857                           ; 0 bytes @ 0x0
   858                           
   859  0070                     ?_ISR:	
   860                           ; 0 bytes @ 0x0
   861                           
   862  0070                     ?i1_instCTRL:	
   863                           ; 0 bytes @ 0x0
   864                           
   865  0070                     ??i1_instCTRL:	
   866                           ; 0 bytes @ 0x0
   867                           
   868  0070                     ?_handlePPM:	
   869                           ; 0 bytes @ 0x0
   870                           
   871  0070                     ?_handleTemp:	
   872                           ; 1 bytes @ 0x0
   873                           
   874                           
   875                           ; 1 bytes @ 0x0
   876  0070                     	ds	1
   877  0071                     i1instCTRL@CMD:	
   878                           
   879                           ; 1 bytes @ 0x1
   880  0071                     	ds	1
   881  0072                     ??_ISR:	
   882                           
   883                           ; 0 bytes @ 0x2
   884  0072                     	ds	5
   885                           
   886                           	psect	cstackBANK0
   887  0020                     __pcstackBANK0:	
   888  0020                     ??_setPortDirections:	
   889  0020                     ??_initADC:	
   890                           ; 0 bytes @ 0x0
   891                           
   892  0020                     ??_initInterrupt:	
   893                           ; 0 bytes @ 0x0
   894                           
   895  0020                     ??_isdigit:	
   896                           ; 0 bytes @ 0x0
   897                           
   898  0020                     ??_instCTRL:	
   899                           ; 0 bytes @ 0x0
   900                           
   901  0020                     ??_dataCTRL:	
   902                           ; 0 bytes @ 0x0
   903                           
   904  0020                     ??_runClock:	
   905                           ; 0 bytes @ 0x0
   906                           
   907  0020                     ??_checkTime:	
   908                           ; 0 bytes @ 0x0
   909                           
   910  0020                     ??_handleTemp:	
   911                           ; 0 bytes @ 0x0
   912                           
   913  0020                     ?___ftge:	
   914                           ; 0 bytes @ 0x0
   915                           
   916  0020                     ?_readADC:	
   917                           ; 1 bit 
   918                           
   919  0020                     ?___wmul:	
   920                           ; 2 bytes @ 0x0
   921                           
   922  0020                     ?___awmod:	
   923                           ; 2 bytes @ 0x0
   924                           
   925  0020                     ?___ftpack:	
   926                           ; 2 bytes @ 0x0
   927                           
   928  0020                     _isdigit$476:	
   929                           ; 3 bytes @ 0x0
   930                           
   931  0020                     ___wmul@multiplier:	
   932                           ; 1 bytes @ 0x0
   933                           
   934  0020                     ___awmod@divisor:	
   935                           ; 2 bytes @ 0x0
   936                           
   937  0020                     ___ftpack@arg:	
   938                           ; 2 bytes @ 0x0
   939                           
   940  0020                     ___ftge@ff1:	
   941                           ; 3 bytes @ 0x0
   942                           
   943                           
   944                           ; 3 bytes @ 0x0
   945  0020                     	ds	1
   946  0021                     instCTRL@CMD:	
   947  0021                     dataCTRL@DAT:	
   948                           ; 1 bytes @ 0x1
   949                           
   950  0021                     isdigit@c:	
   951                           ; 1 bytes @ 0x1
   952                           
   953                           
   954                           ; 1 bytes @ 0x1
   955  0021                     	ds	1
   956  0022                     ??_checkSelect:	
   957  0022                     ??_checkMode:	
   958                           ; 0 bytes @ 0x2
   959                           
   960  0022                     ??_readADC:	
   961                           ; 0 bytes @ 0x2
   962                           
   963  0022                     ??_initLCD:	
   964                           ; 0 bytes @ 0x2
   965                           
   966  0022                     ?_printToLCD:	
   967                           ; 0 bytes @ 0x2
   968                           
   969  0022                     printToLCD@str:	
   970                           ; 0 bytes @ 0x2
   971                           
   972  0022                     ___wmul@multiplicand:	
   973                           ; 2 bytes @ 0x2
   974                           
   975  0022                     ___awmod@dividend:	
   976                           ; 2 bytes @ 0x2
   977                           
   978                           
   979                           ; 2 bytes @ 0x2
   980  0022                     	ds	1
   981  0023                     ___ftpack@exp:	
   982  0023                     ___ftge@ff2:	
   983                           ; 1 bytes @ 0x3
   984                           
   985                           
   986                           ; 3 bytes @ 0x3
   987  0023                     	ds	1
   988  0024                     ??_startUpLCD:	
   989  0024                     ??_printToLCD:	
   990                           ; 0 bytes @ 0x4
   991                           
   992  0024                     ??_printStatusPPM:	
   993                           ; 0 bytes @ 0x4
   994                           
   995  0024                     ??_printStatusTMP:	
   996                           ; 0 bytes @ 0x4
   997                           
   998  0024                     ??___wmul:	
   999                           ; 0 bytes @ 0x4
  1000                           
  1001  0024                     ??___awmod:	
  1002                           ; 0 bytes @ 0x4
  1003                           
  1004  0024                     readADC@channel:	
  1005                           ; 0 bytes @ 0x4
  1006                           
  1007  0024                     printStatusPPM@handler:	
  1008                           ; 1 bytes @ 0x4
  1009                           
  1010  0024                     printStatusTMP@handler:	
  1011                           ; 1 bytes @ 0x4
  1012                           
  1013  0024                     ___ftpack@sign:	
  1014                           ; 1 bytes @ 0x4
  1015                           
  1016  0024                     checkSelect@currentRB1State:	
  1017                           ; 1 bytes @ 0x4
  1018                           
  1019  0024                     ___wmul@product:	
  1020                           ; 2 bytes @ 0x4
  1021                           
  1022                           
  1023                           ; 2 bytes @ 0x4
  1024  0024                     	ds	1
  1025  0025                     ??___ftpack:	
  1026  0025                     ___awmod@counter:	
  1027                           ; 0 bytes @ 0x5
  1028                           
  1029                           
  1030                           ; 1 bytes @ 0x5
  1031  0025                     	ds	1
  1032  0026                     ??___ftge:	
  1033  0026                     ?___lwdiv:	
  1034                           ; 0 bytes @ 0x6
  1035                           
  1036  0026                     ___awmod@sign:	
  1037                           ; 2 bytes @ 0x6
  1038                           
  1039  0026                     ___lwdiv@divisor:	
  1040                           ; 1 bytes @ 0x6
  1041                           
  1042                           
  1043                           ; 2 bytes @ 0x6
  1044  0026                     	ds	2
  1045  0028                     ?___awtoft:	
  1046  0028                     ___awtoft@c:	
  1047                           ; 3 bytes @ 0x8
  1048                           
  1049  0028                     ___lwdiv@dividend:	
  1050                           ; 2 bytes @ 0x8
  1051                           
  1052                           
  1053                           ; 2 bytes @ 0x8
  1054  0028                     	ds	2
  1055  002A                     ??___lwdiv:	
  1056                           
  1057                           ; 0 bytes @ 0xA
  1058  002A                     	ds	1
  1059  002B                     ??___awtoft:	
  1060  002B                     ___lwdiv@quotient:	
  1061                           ; 0 bytes @ 0xB
  1062                           
  1063                           
  1064                           ; 2 bytes @ 0xB
  1065  002B                     	ds	1
  1066  002C                     ??_handlePPM:	
  1067                           
  1068                           ; 0 bytes @ 0xC
  1069  002C                     	ds	1
  1070  002D                     ___awtoft@sign:	
  1071  002D                     ___lwdiv@counter:	
  1072                           ; 1 bytes @ 0xD
  1073                           
  1074                           
  1075                           ; 1 bytes @ 0xD
  1076  002D                     	ds	1
  1077  002E                     ?_calculateTemp:	
  1078  002E                     ?___lwmod:	
  1079                           ; 0 bytes @ 0xE
  1080                           
  1081  002E                     ?___ftneg:	
  1082                           ; 2 bytes @ 0xE
  1083                           
  1084  002E                     calculateTemp@adcValue:	
  1085                           ; 3 bytes @ 0xE
  1086                           
  1087  002E                     ___lwmod@divisor:	
  1088                           ; 2 bytes @ 0xE
  1089                           
  1090  002E                     ___ftneg@f1:	
  1091                           ; 2 bytes @ 0xE
  1092                           
  1093                           
  1094                           ; 3 bytes @ 0xE
  1095  002E                     	ds	2
  1096  0030                     ??_calculateTemp:	
  1097  0030                     ___lwmod@dividend:	
  1098                           ; 0 bytes @ 0x10
  1099                           
  1100                           
  1101                           ; 2 bytes @ 0x10
  1102  0030                     	ds	1
  1103  0031                     ??___ftneg:	
  1104  0031                     ?___ftadd:	
  1105                           ; 0 bytes @ 0x11
  1106                           
  1107  0031                     ___ftadd@f1:	
  1108                           ; 3 bytes @ 0x11
  1109                           
  1110                           
  1111                           ; 3 bytes @ 0x11
  1112  0031                     	ds	1
  1113  0032                     ??___lwmod:	
  1114                           
  1115                           ; 0 bytes @ 0x12
  1116  0032                     	ds	1
  1117  0033                     ___lwmod@counter:	
  1118                           
  1119                           ; 1 bytes @ 0x13
  1120  0033                     	ds	1
  1121  0034                     ?_sprintf:	
  1122  0034                     sprintf@f:	
  1123                           ; 2 bytes @ 0x14
  1124                           
  1125  0034                     ___ftadd@f2:	
  1126                           ; 2 bytes @ 0x14
  1127                           
  1128                           
  1129                           ; 3 bytes @ 0x14
  1130  0034                     	ds	3
  1131  0037                     ??___ftadd:	
  1132                           
  1133                           ; 0 bytes @ 0x17
  1134  0037                     	ds	3
  1135  003A                     ??_sprintf:	
  1136                           
  1137                           ; 0 bytes @ 0x1A
  1138  003A                     	ds	1
  1139  003B                     ___ftadd@sign:	
  1140                           
  1141                           ; 1 bytes @ 0x1B
  1142  003B                     	ds	1
  1143  003C                     ___ftadd@exp2:	
  1144                           
  1145                           ; 1 bytes @ 0x1C
  1146  003C                     	ds	1
  1147  003D                     sprintf@ap:	
  1148  003D                     ___ftadd@exp1:	
  1149                           ; 1 bytes @ 0x1D
  1150                           
  1151                           
  1152                           ; 1 bytes @ 0x1D
  1153  003D                     	ds	1
  1154  003E                     ?___ftmul:	
  1155  003E                     sprintf@prec:	
  1156                           ; 3 bytes @ 0x1E
  1157                           
  1158  003E                     ___ftmul@f1:	
  1159                           ; 1 bytes @ 0x1E
  1160                           
  1161                           
  1162                           ; 3 bytes @ 0x1E
  1163  003E                     	ds	1
  1164  003F                     sprintf@ccnt:	
  1165                           
  1166                           ; 2 bytes @ 0x1F
  1167  003F                     	ds	2
  1168  0041                     ___ftmul@f2:	
  1169  0041                     sprintf@_val:	
  1170                           ; 3 bytes @ 0x21
  1171                           
  1172                           
  1173                           ; 4 bytes @ 0x21
  1174  0041                     	ds	3
  1175  0044                     ??___ftmul:	
  1176                           
  1177                           ; 0 bytes @ 0x24
  1178  0044                     	ds	1
  1179  0045                     sprintf@flag:	
  1180                           
  1181                           ; 1 bytes @ 0x25
  1182  0045                     	ds	1
  1183  0046                     sprintf@width:	
  1184                           
  1185                           ; 2 bytes @ 0x26
  1186  0046                     	ds	2
  1187  0048                     sprintf@c:	
  1188  0048                     ___ftmul@exp:	
  1189                           ; 1 bytes @ 0x28
  1190                           
  1191                           
  1192                           ; 1 bytes @ 0x28
  1193  0048                     	ds	1
  1194  0049                     sprintf@sp:	
  1195  0049                     ___ftmul@f3_as_product:	
  1196                           ; 1 bytes @ 0x29
  1197                           
  1198                           
  1199                           ; 3 bytes @ 0x29
  1200  0049                     	ds	1
  1201  004A                     ??_displayTime:	
  1202  004A                     ??_setHoursStart:	
  1203                           ; 0 bytes @ 0x2A
  1204                           
  1205  004A                     ??_setHoursEnd:	
  1206                           ; 0 bytes @ 0x2A
  1207                           
  1208  004A                     ??_setMinutesStart:	
  1209                           ; 0 bytes @ 0x2A
  1210                           
  1211  004A                     ??_setMinutesEnd:	
  1212                           ; 0 bytes @ 0x2A
  1213                           
  1214  004A                     ??_displayDHT11Stat:	
  1215                           ; 0 bytes @ 0x2A
  1216                           
  1217                           
  1218                           ; 0 bytes @ 0x2A
  1219  004A                     	ds	2
  1220  004C                     ___ftmul@cntr:	
  1221                           
  1222                           ; 1 bytes @ 0x2C
  1223  004C                     	ds	1
  1224  004D                     ___ftmul@sign:	
  1225                           
  1226                           ; 1 bytes @ 0x2D
  1227  004D                     	ds	1
  1228  004E                     ?___ftdiv:	
  1229  004E                     ?___fttol:	
  1230                           ; 3 bytes @ 0x2E
  1231                           
  1232  004E                     ___ftdiv@f2:	
  1233                           ; 4 bytes @ 0x2E
  1234                           
  1235  004E                     ___fttol@f1:	
  1236                           ; 3 bytes @ 0x2E
  1237                           
  1238  004E                     displayTime@timeFormat:	
  1239                           ; 3 bytes @ 0x2E
  1240                           
  1241  004E                     displayDHT11Stat@buffer:	
  1242                           ; 16 bytes @ 0x2E
  1243                           
  1244                           
  1245                           ; 20 bytes @ 0x2E
  1246  004E                     	ds	3
  1247  0051                     ___ftdiv@f1:	
  1248                           
  1249                           ; 3 bytes @ 0x31
  1250  0051                     	ds	1
  1251  0052                     ??___fttol:	
  1252                           
  1253                           ; 0 bytes @ 0x32
  1254  0052                     	ds	2
  1255  0054                     ??___ftdiv:	
  1256                           
  1257                           ; 0 bytes @ 0x34
  1258  0054                     	ds	2
  1259  0056                     ___fttol@sign1:	
  1260                           
  1261                           ; 1 bytes @ 0x36
  1262  0056                     	ds	1
  1263  0057                     ___fttol@lval:	
  1264                           
  1265                           ; 4 bytes @ 0x37
  1266  0057                     	ds	1
  1267  0058                     ___ftdiv@cntr:	
  1268                           
  1269                           ; 1 bytes @ 0x38
  1270  0058                     	ds	1
  1271  0059                     ___ftdiv@f3:	
  1272                           
  1273                           ; 3 bytes @ 0x39
  1274  0059                     	ds	2
  1275  005B                     ___fttol@exp1:	
  1276                           
  1277                           ; 1 bytes @ 0x3B
  1278  005B                     	ds	1
  1279  005C                     ??_displayPPM:	
  1280  005C                     ___ftdiv@exp:	
  1281                           ; 0 bytes @ 0x3C
  1282                           
  1283                           
  1284                           ; 1 bytes @ 0x3C
  1285  005C                     	ds	1
  1286  005D                     ___ftdiv@sign:	
  1287                           
  1288                           ; 1 bytes @ 0x3D
  1289  005D                     	ds	1
  1290  005E                     ?_CalcMQ135:	
  1291  005E                     CalcMQ135@RAW_ADC:	
  1292                           ; 3 bytes @ 0x3E
  1293                           
  1294                           
  1295                           ; 2 bytes @ 0x3E
  1296  005E                     	ds	3
  1297  0061                     ??_CalcMQ135:	
  1298  0061                     ??_runMQ135:	
  1299                           ; 0 bytes @ 0x41
  1300                           
  1301                           
  1302                           ; 0 bytes @ 0x41
  1303  0061                     	ds	1
  1304  0062                     ??_updateState:	
  1305                           
  1306                           ; 0 bytes @ 0x42
  1307  0062                     	ds	4
  1308  0066                     updateState@buffer:	
  1309                           
  1310                           ; 10 bytes @ 0x46
  1311  0066                     	ds	10
  1312                           
  1313                           	psect	maintext
  1314  1637                     __pmaintext:	
  1315 ;;
  1316 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1317 ;;
  1318 ;; *************** function _main *****************
  1319 ;; Defined at:
  1320 ;;		line 29 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;		None
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;		None
  1325 ;; Return value:  Size  Location     Type
  1326 ;;		None               void
  1327 ;; Registers used:
  1328 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 17F/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1334 ;;      Params:         0       0       0       0       0
  1335 ;;      Locals:         0       0       0       0       0
  1336 ;;      Temps:          0       0       3       0       0
  1337 ;;      Totals:         0       0       3       0       0
  1338 ;;Total ram usage:        3 bytes
  1339 ;; Hardware stack levels required when called:    6
  1340 ;; This function calls:
  1341 ;;		_calculateTemp
  1342 ;;		_checkMode
  1343 ;;		_checkSelect
  1344 ;;		_checkTime
  1345 ;;		_handlePPM
  1346 ;;		_handleTemp
  1347 ;;		_initADC
  1348 ;;		_initInterrupt
  1349 ;;		_instCTRL
  1350 ;;		_readADC
  1351 ;;		_runClock
  1352 ;;		_runMQ135
  1353 ;;		_setPortDirections
  1354 ;;		_startUpLCD
  1355 ;;		_updateState
  1356 ;; This function is called by:
  1357 ;;		Startup code after reset
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361                           
  1362                           ;psect for function _main
  1363  1637                     _main:	
  1364                           
  1365                           ;main.c: 31: setPortDirections();
  1366                           
  1367                           ;incstack = 0
  1368                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1369  1637  120A  158A  2134  160A  118A  	fcall	_setPortDirections
  1370                           
  1371                           ;main.c: 32: initADC();
  1372  163C  160A  118A  2235  160A  118A  	fcall	_initADC
  1373                           
  1374                           ;main.c: 33: initInterrupt();
  1375  1641  160A  118A  221F  160A  118A  	fcall	_initInterrupt
  1376                           
  1377                           ;main.c: 34: startUpLCD();
  1378  1646  160A  118A  22AE  160A  118A  	fcall	_startUpLCD
  1379                           
  1380                           ;main.c: 35: _delay((unsigned long)((250)*(4000000/4000.0)));
  1381  164B  3002               	movlw	2
  1382  164C  1683               	bsf	3,5	;RP0=1, select bank1
  1383  164D  1303               	bcf	3,6	;RP1=0, select bank1
  1384  164E  00C9               	movwf	(??_main^(0+128)+2)
  1385  164F  3045               	movlw	69
  1386  1650  00C8               	movwf	(??_main^(0+128)+1)
  1387  1651  30A9               	movlw	169
  1388  1652  00C7               	movwf	??_main^(0+128)
  1389  1653                     u4917:	
  1390  1653  0BC7               	decfsz	??_main^(0+128),f
  1391  1654  2E53               	goto	u4917
  1392  1655  0BC8               	decfsz	(??_main^(0+128)+1),f
  1393  1656  2E53               	goto	u4917
  1394  1657  0BC9               	decfsz	(??_main^(0+128)+2),f
  1395  1658  2E53               	goto	u4917
  1396  1659  2E5A               	nop2
  1397                           
  1398                           ;main.c: 36: instCTRL(0x80);
  1399  165A  3080               	movlw	128
  1400  165B  160A  118A  2288  160A  118A  	fcall	_instCTRL
  1401  1660                     l3596:	
  1402                           ;main.c: 37: while (1)
  1403                           
  1404                           
  1405                           ;main.c: 38: {
  1406                           ;main.c: 39: runClock();
  1407  1660  160A  118A  2317  160A  118A  	fcall	_runClock
  1408                           
  1409                           ;main.c: 40: checkTime();
  1410  1665  160A  118A  2706  160A  118A  	fcall	_checkTime
  1411                           
  1412                           ;main.c: 41: runMQ135();
  1413  166A  160A  118A  2376  160A  118A  	fcall	_runMQ135
  1414                           
  1415                           ;main.c: 42: handlePPM();
  1416  166F  160A  118A  24AF  160A  118A  	fcall	_handlePPM
  1417                           
  1418                           ;main.c: 43: calculateTemp(readADC(1));
  1419  1674  3001               	movlw	1
  1420  1675  160A  118A  242C  160A  118A  	fcall	_readADC
  1421  167A  1283               	bcf	3,5	;RP0=0, select bank0
  1422  167B  1303               	bcf	3,6	;RP1=0, select bank0
  1423  167C  0821               	movf	?_readADC+1,w
  1424  167D  01AF               	clrf	calculateTemp@adcValue+1
  1425  167E  07AF               	addwf	calculateTemp@adcValue+1,f
  1426  167F  0820               	movf	?_readADC,w
  1427  1680  01AE               	clrf	calculateTemp@adcValue
  1428  1681  07AE               	addwf	calculateTemp@adcValue,f
  1429  1682  160A  118A  2480  160A  118A  	fcall	_calculateTemp
  1430                           
  1431                           ;main.c: 44: handleTemp();
  1432  1687  160A  118A  22C3  160A  118A  	fcall	_handleTemp
  1433                           
  1434                           ;main.c: 46: checkSelect();
  1435  168C  160A  118A  24DF  160A  118A  	fcall	_checkSelect
  1436                           
  1437                           ;main.c: 47: checkMode();
  1438  1691  160A  118A  2354  160A  118A  	fcall	_checkMode
  1439                           
  1440                           ;main.c: 48: updateState();
  1441  1696  120A  118A  25F3  160A  118A  	fcall	_updateState
  1442  169B  2E60               	goto	l3596
  1443  169C                     __end_of_main:	
  1444                           
  1445                           	psect	text1
  1446  05F3                     __ptext1:	
  1447 ;; *************** function _updateState *****************
  1448 ;; Defined at:
  1449 ;;		line 99 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;		None
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;  buffer         10   70[BANK0 ] unsigned char [10]
  1454 ;; Return value:  Size  Location     Type
  1455 ;;		None               void
  1456 ;; Registers used:
  1457 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1463 ;;      Params:         0       0       0       0       0
  1464 ;;      Locals:         0      10       0       0       0
  1465 ;;      Temps:          0       4       0       0       0
  1466 ;;      Totals:         0      14       0       0       0
  1467 ;;Total ram usage:       14 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    5
  1470 ;; This function calls:
  1471 ;;		_displayDHT11Stat
  1472 ;;		_displayPPM
  1473 ;;		_displayTime
  1474 ;;		_instCTRL
  1475 ;;		_printStatusPPM
  1476 ;;		_printStatusTMP
  1477 ;;		_printToLCD
  1478 ;;		_setHoursEnd
  1479 ;;		_setHoursStart
  1480 ;;		_setMinutesEnd
  1481 ;;		_setMinutesStart
  1482 ;;		_sprintf
  1483 ;; This function is called by:
  1484 ;;		_main
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           
  1489                           ;psect for function _updateState
  1490  05F3                     _updateState:	
  1491                           
  1492                           ;main.c: 101: char buffer[10];
  1493                           ;main.c: 102: switch (mode)
  1494                           
  1495                           ;incstack = 0
  1496                           ; Regs used in _updateState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1497  05F3  2F7E               	goto	l3558
  1498  05F4                     l3476:	
  1499                           ;main.c: 103: {
  1500                           ;main.c: 104: case DISP_CMN:
  1501                           
  1502                           
  1503                           ;main.c: 105: instCTRL(0x80);
  1504  05F4  3080               	movlw	128
  1505  05F5  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1506                           
  1507                           ;main.c: 106: printToLCD("MODE: ");
  1508  05FA  3014               	movlw	low (STR_28| (0+32768))
  1509  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  1510  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  1511  05FD  00A2               	movwf	printToLCD@str
  1512  05FE  3089               	movlw	high (STR_28| (0+32768))
  1513  05FF  00A3               	movwf	printToLCD@str+1
  1514  0600  160A  118A  2455  120A  118A  	fcall	_printToLCD
  1515                           
  1516                           ;main.c: 107: switch (select)
  1517  0605  2EA1               	goto	l3504
  1518  0606                     l3480:	
  1519                           ;main.c: 108: {
  1520                           ;main.c: 109: case 0:
  1521                           
  1522                           
  1523                           ;main.c: 110: printToLCD("DISP CMMON PG1");
  1524  0606  304F               	movlw	low (STR_29| (0+32768))
  1525  0607  1283               	bcf	3,5	;RP0=0, select bank0
  1526  0608  1303               	bcf	3,6	;RP1=0, select bank0
  1527  0609  00A2               	movwf	printToLCD@str
  1528  060A  3088               	movlw	high (STR_29| (0+32768))
  1529  060B  00A3               	movwf	printToLCD@str+1
  1530  060C  160A  118A  2455  120A  118A  	fcall	_printToLCD
  1531                           
  1532                           ;main.c: 111: instCTRL(0xC0);
  1533  0611  30C0               	movlw	192
  1534  0612  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1535                           
  1536                           ;main.c: 112: displayTime();
  1537  0617  160A  118A  23BE  120A  118A  	fcall	_displayTime
  1538                           
  1539                           ;main.c: 113: instCTRL(0x94);
  1540  061C  3094               	movlw	148
  1541  061D  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1542                           
  1543                           ;main.c: 114: sprintf(buffer, "STRT: %2d:%2d", savedHoursStart, savedMinutesStart);
  1544  0622  307B               	movlw	low (STR_30| (0+32768))
  1545  0623  1283               	bcf	3,5	;RP0=0, select bank0
  1546  0624  1303               	bcf	3,6	;RP1=0, select bank0
  1547  0625  00B4               	movwf	sprintf@f
  1548  0626  3088               	movlw	high (STR_30| (0+32768))
  1549  0627  00B5               	movwf	sprintf@f+1
  1550  0628  1683               	bsf	3,5	;RP0=1, select bank1
  1551  0629  1303               	bcf	3,6	;RP1=0, select bank1
  1552  062A  0865               	movf	_savedHoursStart^(0+128),w	;volatile
  1553  062B  1283               	bcf	3,5	;RP0=0, select bank0
  1554  062C  1303               	bcf	3,6	;RP1=0, select bank0
  1555  062D  00E2               	movwf	??_updateState
  1556  062E  01E3               	clrf	??_updateState+1
  1557  062F  0862               	movf	??_updateState,w
  1558  0630  00B6               	movwf	?_sprintf+2
  1559  0631  0863               	movf	??_updateState+1,w
  1560  0632  00B7               	movwf	?_sprintf+3
  1561  0633  1683               	bsf	3,5	;RP0=1, select bank1
  1562  0634  1303               	bcf	3,6	;RP1=0, select bank1
  1563  0635  0867               	movf	_savedMinutesStart^(0+128),w	;volatile
  1564  0636  1283               	bcf	3,5	;RP0=0, select bank0
  1565  0637  1303               	bcf	3,6	;RP1=0, select bank0
  1566  0638  00E4               	movwf	??_updateState+2
  1567  0639  01E5               	clrf	??_updateState+3
  1568  063A  0864               	movf	??_updateState+2,w
  1569  063B  00B8               	movwf	?_sprintf+4
  1570  063C  0865               	movf	??_updateState+3,w
  1571  063D  00B9               	movwf	?_sprintf+5
  1572  063E  3066               	movlw	updateState@buffer& (0+255)
  1573  063F  120A  118A  23F4  120A  118A  	fcall	_sprintf
  1574                           
  1575                           ;main.c: 115: printToLCD(buffer);
  1576  0644  3066               	movlw	updateState@buffer& (0+255)
  1577  0645  1283               	bcf	3,5	;RP0=0, select bank0
  1578  0646  1303               	bcf	3,6	;RP1=0, select bank0
  1579  0647  00A2               	movwf	printToLCD@str
  1580  0648  3000               	movlw	0
  1581  0649  00A3               	movwf	printToLCD@str+1
  1582  064A  160A  118A  2455  120A  118A  	fcall	_printToLCD
  1583                           
  1584                           ;main.c: 116: instCTRL(0xD4);
  1585  064F  30D4               	movlw	212
  1586  0650  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1587                           
  1588                           ;main.c: 117: sprintf(buffer, "END: %2d:%2d", savedHoursEnd, savedMinutesEnd);
  1589  0655  3089               	movlw	low (STR_31| (0+32768))
  1590  0656  1283               	bcf	3,5	;RP0=0, select bank0
  1591  0657  1303               	bcf	3,6	;RP1=0, select bank0
  1592  0658  00B4               	movwf	sprintf@f
  1593  0659  3088               	movlw	high (STR_31| (0+32768))
  1594  065A  00B5               	movwf	sprintf@f+1
  1595  065B  1683               	bsf	3,5	;RP0=1, select bank1
  1596  065C  1303               	bcf	3,6	;RP1=0, select bank1
  1597  065D  0864               	movf	_savedHoursEnd^(0+128),w	;volatile
  1598  065E  1283               	bcf	3,5	;RP0=0, select bank0
  1599  065F  1303               	bcf	3,6	;RP1=0, select bank0
  1600  0660  00E2               	movwf	??_updateState
  1601  0661  01E3               	clrf	??_updateState+1
  1602  0662  0862               	movf	??_updateState,w
  1603  0663  00B6               	movwf	?_sprintf+2
  1604  0664  0863               	movf	??_updateState+1,w
  1605  0665  00B7               	movwf	?_sprintf+3
  1606  0666  1683               	bsf	3,5	;RP0=1, select bank1
  1607  0667  1303               	bcf	3,6	;RP1=0, select bank1
  1608  0668  0866               	movf	_savedMinutesEnd^(0+128),w	;volatile
  1609  0669  1283               	bcf	3,5	;RP0=0, select bank0
  1610  066A  1303               	bcf	3,6	;RP1=0, select bank0
  1611  066B  00E4               	movwf	??_updateState+2
  1612  066C  01E5               	clrf	??_updateState+3
  1613  066D  0864               	movf	??_updateState+2,w
  1614  066E  00B8               	movwf	?_sprintf+4
  1615  066F  0865               	movf	??_updateState+3,w
  1616  0670  00B9               	movwf	?_sprintf+5
  1617  0671  3066               	movlw	updateState@buffer& (0+255)
  1618  0672  120A  118A  23F4  120A  118A  	fcall	_sprintf
  1619                           
  1620                           ;main.c: 118: printToLCD(buffer);
  1621  0677  3066               	movlw	updateState@buffer& (0+255)
  1622  0678  1283               	bcf	3,5	;RP0=0, select bank0
  1623  0679  1303               	bcf	3,6	;RP1=0, select bank0
  1624  067A  00A2               	movwf	printToLCD@str
  1625  067B  3000               	movlw	0
  1626  067C  00A3               	movwf	printToLCD@str+1
  1627  067D  160A  118A  2455   	fcall	_printToLCD
  1628                           
  1629                           ;main.c: 119: break;
  1630  0680  0008               	return
  1631  0681                     l3494:	
  1632                           ;main.c: 120: case 1:
  1633                           
  1634                           
  1635                           ;main.c: 121: printToLCD("DISP CMMON PG2");
  1636  0681  305E               	movlw	low (STR_32| (0+32768))
  1637  0682  1283               	bcf	3,5	;RP0=0, select bank0
  1638  0683  1303               	bcf	3,6	;RP1=0, select bank0
  1639  0684  00A2               	movwf	printToLCD@str
  1640  0685  3088               	movlw	high (STR_32| (0+32768))
  1641  0686  00A3               	movwf	printToLCD@str+1
  1642  0687  160A  118A  2455  120A  118A  	fcall	_printToLCD
  1643                           
  1644                           ;main.c: 122: instCTRL(0xC0);
  1645  068C  30C0               	movlw	192
  1646  068D  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1647                           
  1648                           ;main.c: 123: displayPPM();
  1649  0692  120A  158A  26D7  120A  118A  	fcall	_displayPPM
  1650                           
  1651                           ;main.c: 124: instCTRL(0x94);
  1652  0697  3094               	movlw	148
  1653  0698  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1654                           
  1655                           ;main.c: 127: displayDHT11Stat();
  1656  069D  120A  118A  278F   	fcall	_displayDHT11Stat
  1657                           
  1658                           ;main.c: 129: }
  1659                           
  1660                           ;main.c: 128: break;
  1661  06A0  0008               	return
  1662  06A1                     l3504:	
  1663  06A1  1683               	bsf	3,5	;RP0=1, select bank1
  1664  06A2  1303               	bcf	3,6	;RP1=0, select bank1
  1665  06A3  0857               	movf	_select^(0+128),w	;volatile
  1666                           
  1667                           ; Switch size 1, requested type "space"
  1668                           ; Number of cases is 2, Range of values is 0 to 1
  1669                           ; switch strategies available:
  1670                           ; Name         Instructions Cycles
  1671                           ; simple_byte            7     4 (average)
  1672                           ; direct_byte           14     8 (fixed)
  1673                           ; jumptable            260     6 (fixed)
  1674                           ;	Chosen strategy is simple_byte
  1675  06A4  3A00               	xorlw	0	; case 0
  1676  06A5  1903               	skipnz
  1677  06A6  2E06               	goto	l3480
  1678  06A7  3A01               	xorlw	1	; case 1
  1679  06A8  1903               	skipnz
  1680  06A9  2E81               	goto	l3494
  1681  06AA  2F8E               	goto	l351
  1682                           
  1683                           ;main.c: 130: break;
  1684  06AB  0008               	return
  1685  06AC                     l3506:	
  1686                           ;main.c: 131: case SET_ACTV_START:
  1687                           
  1688                           
  1689                           ;main.c: 132: instCTRL(0x80);
  1690  06AC  3080               	movlw	128
  1691  06AD  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1692                           
  1693                           ;main.c: 133: printToLCD("SET HRS - START");
  1694  06B2  302F               	movlw	low (STR_33| (0+32768))
  1695  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  1696  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  1697  06B5  00A2               	movwf	printToLCD@str
  1698  06B6  3088               	movlw	high (STR_33| (0+32768))
  1699  06B7  00A3               	movwf	printToLCD@str+1
  1700  06B8  160A  118A  2455  120A  118A  	fcall	_printToLCD
  1701                           
  1702                           ;main.c: 134: switch (select)
  1703  06BD  2EF4               	goto	l3524
  1704  06BE                     l3510:	
  1705                           ;main.c: 135: {
  1706                           ;main.c: 136: case 0:
  1707                           
  1708                           
  1709                           ;main.c: 137: instCTRL(0xC0);
  1710  06BE  30C0               	movlw	192
  1711  06BF  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1712                           
  1713                           ;main.c: 138: printToLCD("SET HOURS");
  1714  06C4  30C2               	movlw	low (STR_34| (0+32768))
  1715  06C5  1283               	bcf	3,5	;RP0=0, select bank0
  1716  06C6  1303               	bcf	3,6	;RP1=0, select bank0
  1717  06C7  00A2               	movwf	printToLCD@str
  1718  06C8  3088               	movlw	high (STR_34| (0+32768))
  1719  06C9  00A3               	movwf	printToLCD@str+1
  1720  06CA  160A  118A  2455  120A  118A  	fcall	_printToLCD
  1721                           
  1722                           ;main.c: 139: instCTRL(0x94);
  1723  06CF  3094               	movlw	148
  1724  06D0  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1725                           
  1726                           ;main.c: 140: setHoursStart();
  1727  06D5  120A  158A  22BB   	fcall	_setHoursStart
  1728                           
  1729                           ;main.c: 141: break;
  1730  06D8  0008               	return
  1731  06D9                     l3516:	
  1732                           ;main.c: 142: case 1:
  1733                           
  1734                           
  1735                           ;main.c: 143: instCTRL(0xC0);
  1736  06D9  30C0               	movlw	192
  1737  06DA  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1738                           
  1739                           ;main.c: 144: printToLCD("SET MINUTES");
  1740  06DF  3096               	movlw	low (STR_35| (0+32768))
  1741  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  1742  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  1743  06E2  00A2               	movwf	printToLCD@str
  1744  06E3  3088               	movlw	high (STR_35| (0+32768))
  1745  06E4  00A3               	movwf	printToLCD@str+1
  1746  06E5  160A  118A  2455  120A  118A  	fcall	_printToLCD
  1747                           
  1748                           ;main.c: 145: instCTRL(0x94);
  1749  06EA  3094               	movlw	148
  1750  06EB  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1751                           
  1752                           ;main.c: 146: setMinutesStart();
  1753  06F0  120A  158A  243B   	fcall	_setMinutesStart
  1754                           
  1755                           ;main.c: 148: }
  1756                           
  1757                           ;main.c: 147: break;
  1758  06F3  0008               	return
  1759  06F4                     l3524:	
  1760  06F4  1683               	bsf	3,5	;RP0=1, select bank1
  1761  06F5  1303               	bcf	3,6	;RP1=0, select bank1
  1762  06F6  0857               	movf	_select^(0+128),w	;volatile
  1763                           
  1764                           ; Switch size 1, requested type "space"
  1765                           ; Number of cases is 2, Range of values is 0 to 1
  1766                           ; switch strategies available:
  1767                           ; Name         Instructions Cycles
  1768                           ; simple_byte            7     4 (average)
  1769                           ; direct_byte           14     8 (fixed)
  1770                           ; jumptable            260     6 (fixed)
  1771                           ;	Chosen strategy is simple_byte
  1772  06F7  3A00               	xorlw	0	; case 0
  1773  06F8  1903               	skipnz
  1774  06F9  2EBE               	goto	l3510
  1775  06FA  3A01               	xorlw	1	; case 1
  1776  06FB  1903               	skipnz
  1777  06FC  2ED9               	goto	l3516
  1778  06FD  2F8E               	goto	l351
  1779                           
  1780                           ;main.c: 149: break;
  1781  06FE  0008               	return
  1782  06FF                     l3526:	
  1783                           ;main.c: 150: case SET_ACTV_END:
  1784                           
  1785                           
  1786                           ;main.c: 151: instCTRL(0x80);
  1787  06FF  3080               	movlw	128
  1788  0700  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1789                           
  1790                           ;main.c: 152: printToLCD("SET HRS - END");
  1791  0705  306D               	movlw	low (STR_36| (0+32768))
  1792  0706  1283               	bcf	3,5	;RP0=0, select bank0
  1793  0707  1303               	bcf	3,6	;RP1=0, select bank0
  1794  0708  00A2               	movwf	printToLCD@str
  1795  0709  3088               	movlw	high (STR_36| (0+32768))
  1796  070A  00A3               	movwf	printToLCD@str+1
  1797  070B  160A  118A  2455  120A  118A  	fcall	_printToLCD
  1798                           
  1799                           ;main.c: 153: switch (select)
  1800  0710  2F47               	goto	l3544
  1801  0711                     l3530:	
  1802                           ;main.c: 154: {
  1803                           ;main.c: 155: case 0:
  1804                           
  1805                           
  1806                           ;main.c: 156: instCTRL(0xC0);
  1807  0711  30C0               	movlw	192
  1808  0712  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1809                           
  1810                           ;main.c: 157: printToLCD("SET HOURS");
  1811  0717  30C2               	movlw	low (STR_34| (0+32768))
  1812  0718  1283               	bcf	3,5	;RP0=0, select bank0
  1813  0719  1303               	bcf	3,6	;RP1=0, select bank0
  1814  071A  00A2               	movwf	printToLCD@str
  1815  071B  3088               	movlw	high (STR_34| (0+32768))
  1816  071C  00A3               	movwf	printToLCD@str+1
  1817  071D  160A  118A  2455  120A  118A  	fcall	_printToLCD
  1818                           
  1819                           ;main.c: 158: instCTRL(0x94);
  1820  0722  3094               	movlw	148
  1821  0723  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1822                           
  1823                           ;main.c: 159: setHoursEnd();
  1824  0728  120A  158A  21FB   	fcall	_setHoursEnd
  1825                           
  1826                           ;main.c: 160: break;
  1827  072B  0008               	return
  1828  072C                     l3536:	
  1829                           ;main.c: 161: case 1:
  1830                           
  1831                           
  1832                           ;main.c: 162: instCTRL(0xC0);
  1833  072C  30C0               	movlw	192
  1834  072D  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1835                           
  1836                           ;main.c: 163: printToLCD("SET MINUTES");
  1837  0732  3096               	movlw	low (STR_35| (0+32768))
  1838  0733  1283               	bcf	3,5	;RP0=0, select bank0
  1839  0734  1303               	bcf	3,6	;RP1=0, select bank0
  1840  0735  00A2               	movwf	printToLCD@str
  1841  0736  3088               	movlw	high (STR_35| (0+32768))
  1842  0737  00A3               	movwf	printToLCD@str+1
  1843  0738  160A  118A  2455  120A  118A  	fcall	_printToLCD
  1844                           
  1845                           ;main.c: 164: instCTRL(0x94);
  1846  073D  3094               	movlw	148
  1847  073E  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1848                           
  1849                           ;main.c: 165: setMinutesEnd();
  1850  0743  120A  158A  237B   	fcall	_setMinutesEnd
  1851                           
  1852                           ;main.c: 167: }
  1853                           
  1854                           ;main.c: 166: break;
  1855  0746  0008               	return
  1856  0747                     l3544:	
  1857  0747  1683               	bsf	3,5	;RP0=1, select bank1
  1858  0748  1303               	bcf	3,6	;RP1=0, select bank1
  1859  0749  0857               	movf	_select^(0+128),w	;volatile
  1860                           
  1861                           ; Switch size 1, requested type "space"
  1862                           ; Number of cases is 2, Range of values is 0 to 1
  1863                           ; switch strategies available:
  1864                           ; Name         Instructions Cycles
  1865                           ; simple_byte            7     4 (average)
  1866                           ; direct_byte           14     8 (fixed)
  1867                           ; jumptable            260     6 (fixed)
  1868                           ;	Chosen strategy is simple_byte
  1869  074A  3A00               	xorlw	0	; case 0
  1870  074B  1903               	skipnz
  1871  074C  2F11               	goto	l3530
  1872  074D  3A01               	xorlw	1	; case 1
  1873  074E  1903               	skipnz
  1874  074F  2F2C               	goto	l3536
  1875  0750  2F8E               	goto	l351
  1876                           
  1877                           ;main.c: 168: break;
  1878  0751  0008               	return
  1879  0752                     l3546:	
  1880                           ;main.c: 169: case CHCK_IO:
  1881                           
  1882                           
  1883                           ;main.c: 170: instCTRL(0x80);
  1884  0752  3080               	movlw	128
  1885  0753  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1886                           
  1887                           ;main.c: 171: printToLCD("IO STATUS:");
  1888  0758  30A2               	movlw	low (STR_39| (0+32768))
  1889  0759  1283               	bcf	3,5	;RP0=0, select bank0
  1890  075A  1303               	bcf	3,6	;RP1=0, select bank0
  1891  075B  00A2               	movwf	printToLCD@str
  1892  075C  3088               	movlw	high (STR_39| (0+32768))
  1893  075D  00A3               	movwf	printToLCD@str+1
  1894  075E  160A  118A  2455  120A  118A  	fcall	_printToLCD
  1895                           
  1896                           ;main.c: 172: instCTRL(0xC0);
  1897  0763  30C0               	movlw	192
  1898  0764  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1899                           
  1900                           ;main.c: 173: printStatusTMP(tempFlag);
  1901  0769  1683               	bsf	3,5	;RP0=1, select bank1
  1902  076A  1303               	bcf	3,6	;RP1=0, select bank1
  1903  076B  0858               	movf	_tempFlag^(0+128),w
  1904  076C  160A  118A  22FB  120A  118A  	fcall	_printStatusTMP
  1905                           
  1906                           ;main.c: 174: instCTRL(0x94);
  1907  0771  3094               	movlw	148
  1908  0772  160A  118A  2288  120A  118A  	fcall	_instCTRL
  1909                           
  1910                           ;main.c: 175: printStatusPPM(ppmFlag);
  1911  0777  1683               	bsf	3,5	;RP0=1, select bank1
  1912  0778  1303               	bcf	3,6	;RP1=0, select bank1
  1913  0779  0856               	movf	_ppmFlag^(0+128),w
  1914  077A  160A  118A  22DF   	fcall	_printStatusPPM
  1915                           
  1916                           ;main.c: 179: }
  1917                           
  1918                           ;main.c: 178: break;
  1919                           
  1920                           ;main.c: 177: default:
  1921                           
  1922                           ;main.c: 176: break;
  1923  077D  0008               	return
  1924  077E                     l3558:	
  1925  077E  1683               	bsf	3,5	;RP0=1, select bank1
  1926  077F  1303               	bcf	3,6	;RP1=0, select bank1
  1927  0780  0855               	movf	_mode^(0+128),w
  1928                           
  1929                           ; Switch size 1, requested type "space"
  1930                           ; Number of cases is 4, Range of values is 0 to 3
  1931                           ; switch strategies available:
  1932                           ; Name         Instructions Cycles
  1933                           ; simple_byte           13     7 (average)
  1934                           ; direct_byte           20     8 (fixed)
  1935                           ; jumptable            260     6 (fixed)
  1936                           ;	Chosen strategy is simple_byte
  1937  0781  3A00               	xorlw	0	; case 0
  1938  0782  1903               	skipnz
  1939  0783  2DF4               	goto	l3476
  1940  0784  3A01               	xorlw	1	; case 1
  1941  0785  1903               	skipnz
  1942  0786  2EAC               	goto	l3506
  1943  0787  3A03               	xorlw	3	; case 2
  1944  0788  1903               	skipnz
  1945  0789  2EFF               	goto	l3526
  1946  078A  3A01               	xorlw	1	; case 3
  1947  078B  1903               	skipnz
  1948  078C  2F52               	goto	l3546
  1949  078D  2F8E               	goto	l351
  1950  078E                     l351:	
  1951  078E  0008               	return
  1952  078F                     __end_of_updateState:	
  1953                           
  1954                           	psect	text2
  1955  0C3B                     __ptext2:	
  1956 ;; *************** function _setMinutesStart *****************
  1957 ;; Defined at:
  1958 ;;		line 132 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\time_scheduler.
      +h"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;		None
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;		None
  1963 ;; Return value:  Size  Location     Type
  1964 ;;		None               void
  1965 ;; Registers used:
  1966 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1972 ;;      Params:         0       0       0       0       0
  1973 ;;      Locals:         0       0       0       0       0
  1974 ;;      Temps:          0       2       0       0       0
  1975 ;;      Totals:         0       2       0       0       0
  1976 ;;Total ram usage:        2 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    4
  1979 ;; This function calls:
  1980 ;;		___awmod
  1981 ;;		_printToLCD
  1982 ;;		_sprintf
  1983 ;; This function is called by:
  1984 ;;		_updateState
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           
  1989                           ;psect for function _setMinutesStart
  1990  0C3B                     _setMinutesStart:	
  1991                           
  1992                           ;time_scheduler.h: 134: keyValid = (PORTB & 0x08) >> 3;
  1993                           
  1994                           ;incstack = 0
  1995                           ; Regs used in _setMinutesStart: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1996  0C3B  1283               	bcf	3,5	;RP0=0, select bank0
  1997  0C3C  1303               	bcf	3,6	;RP1=0, select bank0
  1998  0C3D  0806               	movf	6,w	;volatile
  1999  0C3E  00CA               	movwf	??_setMinutesStart
  2000  0C3F  3003               	movlw	3
  2001  0C40                     u4495:	
  2002  0C40  1003               	clrc
  2003  0C41  0CCA               	rrf	??_setMinutesStart,f
  2004  0C42  3EFF               	addlw	-1
  2005  0C43  1D03               	skipz
  2006  0C44  2C40               	goto	u4495
  2007  0C45  084A               	movf	??_setMinutesStart,w
  2008  0C46  3901               	andlw	1
  2009  0C47  00CB               	movwf	??_setMinutesStart+1
  2010  0C48  084B               	movf	??_setMinutesStart+1,w
  2011  0C49  00FA               	movwf	_keyValid
  2012                           
  2013                           ;time_scheduler.h: 135: key = (PORTB & 0xF0) >> 4;
  2014  0C4A  0806               	movf	6,w	;volatile
  2015  0C4B  00CA               	movwf	??_setMinutesStart
  2016  0C4C  3004               	movlw	4
  2017  0C4D                     u4505:	
  2018  0C4D  1003               	clrc
  2019  0C4E  0CCA               	rrf	??_setMinutesStart,f
  2020  0C4F  3EFF               	addlw	-1
  2021  0C50  1D03               	skipz
  2022  0C51  2C4D               	goto	u4505
  2023  0C52  084A               	movf	??_setMinutesStart,w
  2024  0C53  390F               	andlw	15
  2025  0C54  00CB               	movwf	??_setMinutesStart+1
  2026  0C55  084B               	movf	??_setMinutesStart+1,w
  2027  0C56  00F9               	movwf	_key
  2028                           
  2029                           ;time_scheduler.h: 137: _delay((unsigned long)((50)*(4000000/4000.0)));
  2030  0C57  3041               	movlw	65
  2031  0C58  00CB               	movwf	??_setMinutesStart+1
  2032  0C59  30EE               	movlw	238
  2033  0C5A  00CA               	movwf	??_setMinutesStart
  2034  0C5B                     u4927:	
  2035  0C5B  0BCA               	decfsz	??_setMinutesStart,f
  2036  0C5C  2C5B               	goto	u4927
  2037  0C5D  0BCB               	decfsz	??_setMinutesStart+1,f
  2038  0C5E  2C5B               	goto	u4927
  2039  0C5F  0000               	nop
  2040                           
  2041                           ;time_scheduler.h: 139: if (keyValid && key != lastKeyState)
  2042  0C60  087A               	movf	_keyValid,w
  2043  0C61  1903               	btfsc	3,2
  2044  0C62  2CF1               	goto	l3332
  2045  0C63  0879               	movf	_key,w
  2046  0C64  067D               	xorwf	_lastKeyState,w
  2047  0C65  1903               	skipnz
  2048  0C66  2CF1               	goto	l3332
  2049                           
  2050                           ;time_scheduler.h: 140: {
  2051                           ;time_scheduler.h: 141: if (key == 0b00001100)
  2052  0C67  0879               	movf	_key,w
  2053  0C68  3A0C               	xorlw	12
  2054  0C69  1D03               	skipz
  2055  0C6A  2C8F               	goto	l3316
  2056                           
  2057                           ;time_scheduler.h: 142: {
  2058                           ;time_scheduler.h: 143: savedMinutesStart = (savedMinutesStart + 5) % 60;
  2059  0C6B  303C               	movlw	60
  2060  0C6C  1283               	bcf	3,5	;RP0=0, select bank0
  2061  0C6D  1303               	bcf	3,6	;RP1=0, select bank0
  2062  0C6E  00A0               	movwf	___awmod@divisor
  2063  0C6F  3000               	movlw	0
  2064  0C70  00A1               	movwf	___awmod@divisor+1
  2065  0C71  1683               	bsf	3,5	;RP0=1, select bank1
  2066  0C72  1303               	bcf	3,6	;RP1=0, select bank1
  2067  0C73  0867               	movf	_savedMinutesStart^(0+128),w	;volatile
  2068  0C74  3E05               	addlw	5
  2069  0C75  1283               	bcf	3,5	;RP0=0, select bank0
  2070  0C76  1303               	bcf	3,6	;RP1=0, select bank0
  2071  0C77  00A2               	movwf	___awmod@dividend
  2072  0C78  3000               	movlw	0
  2073  0C79  1803               	skipnc
  2074  0C7A  3001               	movlw	1
  2075  0C7B  00A3               	movwf	___awmod@dividend+1
  2076  0C7C  160A  118A  2589  120A  158A  	fcall	___awmod
  2077  0C81  1283               	bcf	3,5	;RP0=0, select bank0
  2078  0C82  1303               	bcf	3,6	;RP1=0, select bank0
  2079  0C83  0820               	movf	?___awmod,w
  2080  0C84  00CA               	movwf	??_setMinutesStart
  2081  0C85  084A               	movf	??_setMinutesStart,w
  2082  0C86  1683               	bsf	3,5	;RP0=1, select bank1
  2083  0C87  1303               	bcf	3,6	;RP1=0, select bank1
  2084  0C88  00E7               	movwf	_savedMinutesStart^(0+128)	;volatile
  2085                           
  2086                           ;time_scheduler.h: 144: sprintf(debugInfo, "INC: %02d", savedMinutesStart);
  2087  0C89  30D6               	movlw	low (STR_7| (0+32768))
  2088  0C8A  1283               	bcf	3,5	;RP0=0, select bank0
  2089  0C8B  1303               	bcf	3,6	;RP1=0, select bank0
  2090  0C8C  00B4               	movwf	sprintf@f
  2091  0C8D  3088               	movlw	high (STR_7| (0+32768))
  2092  0C8E  2CC0               	goto	L1
  2093  0C8F                     l3316:	
  2094                           ;time_scheduler.h: 145: }
  2095                           
  2096                           
  2097                           ;time_scheduler.h: 146: else if (key == 0b00001110)
  2098  0C8F  0879               	movf	_key,w
  2099  0C90  3A0E               	xorlw	14
  2100  0C91  1D03               	skipz
  2101  0C92  2CB7               	goto	l3322
  2102                           
  2103                           ;time_scheduler.h: 147: {
  2104                           ;time_scheduler.h: 148: savedMinutesStart = (savedMinutesStart - 5 + 60) % 60;
  2105  0C93  303C               	movlw	60
  2106  0C94  1283               	bcf	3,5	;RP0=0, select bank0
  2107  0C95  1303               	bcf	3,6	;RP1=0, select bank0
  2108  0C96  00A0               	movwf	___awmod@divisor
  2109  0C97  3000               	movlw	0
  2110  0C98  00A1               	movwf	___awmod@divisor+1
  2111  0C99  1683               	bsf	3,5	;RP0=1, select bank1
  2112  0C9A  1303               	bcf	3,6	;RP1=0, select bank1
  2113  0C9B  0867               	movf	_savedMinutesStart^(0+128),w	;volatile
  2114  0C9C  3E37               	addlw	55
  2115  0C9D  1283               	bcf	3,5	;RP0=0, select bank0
  2116  0C9E  1303               	bcf	3,6	;RP1=0, select bank0
  2117  0C9F  00A2               	movwf	___awmod@dividend
  2118  0CA0  3000               	movlw	0
  2119  0CA1  1803               	skipnc
  2120  0CA2  3001               	movlw	1
  2121  0CA3  00A3               	movwf	___awmod@dividend+1
  2122  0CA4  160A  118A  2589  120A  158A  	fcall	___awmod
  2123  0CA9  1283               	bcf	3,5	;RP0=0, select bank0
  2124  0CAA  1303               	bcf	3,6	;RP1=0, select bank0
  2125  0CAB  0820               	movf	?___awmod,w
  2126  0CAC  00CA               	movwf	??_setMinutesStart
  2127  0CAD  084A               	movf	??_setMinutesStart,w
  2128  0CAE  1683               	bsf	3,5	;RP0=1, select bank1
  2129  0CAF  1303               	bcf	3,6	;RP1=0, select bank1
  2130  0CB0  00E7               	movwf	_savedMinutesStart^(0+128)	;volatile
  2131                           
  2132                           ;time_scheduler.h: 149: sprintf(debugInfo, "DEC: %02d", savedMinutesStart);
  2133  0CB1  30CC               	movlw	low (STR_8| (0+32768))
  2134  0CB2  1283               	bcf	3,5	;RP0=0, select bank0
  2135  0CB3  1303               	bcf	3,6	;RP1=0, select bank0
  2136  0CB4  00B4               	movwf	sprintf@f
  2137  0CB5  3088               	movlw	high (STR_8| (0+32768))
  2138  0CB6  2CC0               	goto	L1
  2139  0CB7                     l3322:	
  2140                           ;time_scheduler.h: 150: }
  2141                           
  2142                           
  2143                           ;time_scheduler.h: 151: else if (key == 0b00001101)
  2144  0CB7  0879               	movf	_key,w
  2145  0CB8  3A0D               	xorlw	13
  2146  0CB9  1D03               	skipz
  2147  0CBA  2CD2               	goto	l185
  2148                           
  2149                           ;time_scheduler.h: 152: {
  2150                           ;time_scheduler.h: 153: sprintf(debugInfo, "SET: %02d", savedMinutesStart);
  2151  0CBB  30E0               	movlw	low (STR_9| (0+32768))
  2152  0CBC  1283               	bcf	3,5	;RP0=0, select bank0
  2153  0CBD  1303               	bcf	3,6	;RP1=0, select bank0
  2154  0CBE  00B4               	movwf	sprintf@f
  2155  0CBF  3088               	movlw	high (STR_9| (0+32768))
  2156  0CC0                     L1:	
  2157  0CC0  00B5               	movwf	sprintf@f+1
  2158  0CC1  1683               	bsf	3,5	;RP0=1, select bank1
  2159  0CC2  1303               	bcf	3,6	;RP1=0, select bank1
  2160  0CC3  0867               	movf	_savedMinutesStart^(0+128),w	;volatile
  2161  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  2162  0CC5  1303               	bcf	3,6	;RP1=0, select bank0
  2163  0CC6  00CA               	movwf	??_setMinutesStart
  2164  0CC7  01CB               	clrf	??_setMinutesStart+1
  2165  0CC8  084A               	movf	??_setMinutesStart,w
  2166  0CC9  00B6               	movwf	?_sprintf+2
  2167  0CCA  084B               	movf	??_setMinutesStart+1,w
  2168  0CCB  00B7               	movwf	?_sprintf+3
  2169  0CCC  30D9               	movlw	_debugInfo& (0+255)
  2170  0CCD  120A  118A  23F4  120A  158A  	fcall	_sprintf
  2171  0CD2                     l185:	
  2172                           
  2173                           ;time_scheduler.h: 154: }
  2174                           ;time_scheduler.h: 156: printToLCD(debugInfo);
  2175  0CD2  30D9               	movlw	_debugInfo& (0+255)
  2176  0CD3  1283               	bcf	3,5	;RP0=0, select bank0
  2177  0CD4  1303               	bcf	3,6	;RP1=0, select bank0
  2178  0CD5  00A2               	movwf	printToLCD@str
  2179  0CD6  3000               	movlw	0
  2180  0CD7  00A3               	movwf	printToLCD@str+1
  2181  0CD8  160A  118A  2455  120A  158A  	fcall	_printToLCD
  2182                           
  2183                           ;time_scheduler.h: 157: lastKeyState = key;
  2184  0CDD  0879               	movf	_key,w
  2185  0CDE  1283               	bcf	3,5	;RP0=0, select bank0
  2186  0CDF  1303               	bcf	3,6	;RP1=0, select bank0
  2187  0CE0  00CA               	movwf	??_setMinutesStart
  2188  0CE1  084A               	movf	??_setMinutesStart,w
  2189  0CE2  00FD               	movwf	_lastKeyState
  2190  0CE3                     l3330:	
  2191                           ;time_scheduler.h: 159: while ((PORTB & 0x08) != 0)
  2192                           
  2193  0CE3  1283               	bcf	3,5	;RP0=0, select bank0
  2194  0CE4  1303               	bcf	3,6	;RP1=0, select bank0
  2195  0CE5  1D86               	btfss	6,3	;volatile
  2196  0CE6  0008               	return
  2197                           
  2198                           ;time_scheduler.h: 160: {
  2199                           ;time_scheduler.h: 161: _delay((unsigned long)((10)*(4000000/4000.0)));
  2200  0CE7  300D               	movlw	13
  2201  0CE8  00CB               	movwf	??_setMinutesStart+1
  2202  0CE9  30FB               	movlw	251
  2203  0CEA  00CA               	movwf	??_setMinutesStart
  2204  0CEB                     u4937:	
  2205  0CEB  0BCA               	decfsz	??_setMinutesStart,f
  2206  0CEC  2CEB               	goto	u4937
  2207  0CED  0BCB               	decfsz	??_setMinutesStart+1,f
  2208  0CEE  2CEB               	goto	u4937
  2209  0CEF  2CF0               	nop2
  2210  0CF0  2CE3               	goto	l3330
  2211  0CF1                     l3332:	
  2212                           ;time_scheduler.h: 162: }
  2213                           ;time_scheduler.h: 163: }
  2214                           
  2215                           
  2216                           ;time_scheduler.h: 164: else if (!keyValid)
  2217  0CF1  08FA               	movf	_keyValid,f
  2218  0CF2  1D03               	skipz
  2219  0CF3  0008               	return
  2220                           
  2221                           ;time_scheduler.h: 165: {
  2222                           ;time_scheduler.h: 166: lastKeyState = 0xFF;
  2223  0CF4  30FF               	movlw	255
  2224  0CF5  1283               	bcf	3,5	;RP0=0, select bank0
  2225  0CF6  1303               	bcf	3,6	;RP1=0, select bank0
  2226  0CF7  00CA               	movwf	??_setMinutesStart
  2227  0CF8  084A               	movf	??_setMinutesStart,w
  2228  0CF9  00FD               	movwf	_lastKeyState
  2229  0CFA  0008               	return
  2230  0CFB                     __end_of_setMinutesStart:	
  2231                           
  2232                           	psect	text3
  2233  0B7B                     __ptext3:	
  2234 ;; *************** function _setMinutesEnd *****************
  2235 ;; Defined at:
  2236 ;;		line 170 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\time_scheduler.
      +h"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;		None
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;		None
  2241 ;; Return value:  Size  Location     Type
  2242 ;;		None               void
  2243 ;; Registers used:
  2244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2250 ;;      Params:         0       0       0       0       0
  2251 ;;      Locals:         0       0       0       0       0
  2252 ;;      Temps:          0       2       0       0       0
  2253 ;;      Totals:         0       2       0       0       0
  2254 ;;Total ram usage:        2 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    4
  2257 ;; This function calls:
  2258 ;;		___awmod
  2259 ;;		_printToLCD
  2260 ;;		_sprintf
  2261 ;; This function is called by:
  2262 ;;		_updateState
  2263 ;; This function uses a non-reentrant model
  2264 ;;
  2265                           
  2266                           
  2267                           ;psect for function _setMinutesEnd
  2268  0B7B                     _setMinutesEnd:	
  2269                           
  2270                           ;time_scheduler.h: 172: keyValid = (PORTB & 0x08) >> 3;
  2271                           
  2272                           ;incstack = 0
  2273                           ; Regs used in _setMinutesEnd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2274  0B7B  1283               	bcf	3,5	;RP0=0, select bank0
  2275  0B7C  1303               	bcf	3,6	;RP1=0, select bank0
  2276  0B7D  0806               	movf	6,w	;volatile
  2277  0B7E  00CA               	movwf	??_setMinutesEnd
  2278  0B7F  3003               	movlw	3
  2279  0B80                     u4585:	
  2280  0B80  1003               	clrc
  2281  0B81  0CCA               	rrf	??_setMinutesEnd,f
  2282  0B82  3EFF               	addlw	-1
  2283  0B83  1D03               	skipz
  2284  0B84  2B80               	goto	u4585
  2285  0B85  084A               	movf	??_setMinutesEnd,w
  2286  0B86  3901               	andlw	1
  2287  0B87  00CB               	movwf	??_setMinutesEnd+1
  2288  0B88  084B               	movf	??_setMinutesEnd+1,w
  2289  0B89  00FA               	movwf	_keyValid
  2290                           
  2291                           ;time_scheduler.h: 173: key = (PORTB & 0xF0) >> 4;
  2292  0B8A  0806               	movf	6,w	;volatile
  2293  0B8B  00CA               	movwf	??_setMinutesEnd
  2294  0B8C  3004               	movlw	4
  2295  0B8D                     u4595:	
  2296  0B8D  1003               	clrc
  2297  0B8E  0CCA               	rrf	??_setMinutesEnd,f
  2298  0B8F  3EFF               	addlw	-1
  2299  0B90  1D03               	skipz
  2300  0B91  2B8D               	goto	u4595
  2301  0B92  084A               	movf	??_setMinutesEnd,w
  2302  0B93  390F               	andlw	15
  2303  0B94  00CB               	movwf	??_setMinutesEnd+1
  2304  0B95  084B               	movf	??_setMinutesEnd+1,w
  2305  0B96  00F9               	movwf	_key
  2306                           
  2307                           ;time_scheduler.h: 175: _delay((unsigned long)((50)*(4000000/4000.0)));
  2308  0B97  3041               	movlw	65
  2309  0B98  00CB               	movwf	??_setMinutesEnd+1
  2310  0B99  30EE               	movlw	238
  2311  0B9A  00CA               	movwf	??_setMinutesEnd
  2312  0B9B                     u4947:	
  2313  0B9B  0BCA               	decfsz	??_setMinutesEnd,f
  2314  0B9C  2B9B               	goto	u4947
  2315  0B9D  0BCB               	decfsz	??_setMinutesEnd+1,f
  2316  0B9E  2B9B               	goto	u4947
  2317  0B9F  0000               	nop
  2318                           
  2319                           ;time_scheduler.h: 177: if (keyValid && key != lastKeyState)
  2320  0BA0  087A               	movf	_keyValid,w
  2321  0BA1  1903               	btfsc	3,2
  2322  0BA2  2C31               	goto	l3366
  2323  0BA3  0879               	movf	_key,w
  2324  0BA4  067D               	xorwf	_lastKeyState,w
  2325  0BA5  1903               	skipnz
  2326  0BA6  2C31               	goto	l3366
  2327                           
  2328                           ;time_scheduler.h: 178: {
  2329                           ;time_scheduler.h: 179: if (key == 0b00001100)
  2330  0BA7  0879               	movf	_key,w
  2331  0BA8  3A0C               	xorlw	12
  2332  0BA9  1D03               	skipz
  2333  0BAA  2BCF               	goto	l3350
  2334                           
  2335                           ;time_scheduler.h: 180: {
  2336                           ;time_scheduler.h: 181: savedMinutesEnd = (savedMinutesEnd + 5) % 60;
  2337  0BAB  303C               	movlw	60
  2338  0BAC  1283               	bcf	3,5	;RP0=0, select bank0
  2339  0BAD  1303               	bcf	3,6	;RP1=0, select bank0
  2340  0BAE  00A0               	movwf	___awmod@divisor
  2341  0BAF  3000               	movlw	0
  2342  0BB0  00A1               	movwf	___awmod@divisor+1
  2343  0BB1  1683               	bsf	3,5	;RP0=1, select bank1
  2344  0BB2  1303               	bcf	3,6	;RP1=0, select bank1
  2345  0BB3  0866               	movf	_savedMinutesEnd^(0+128),w	;volatile
  2346  0BB4  3E05               	addlw	5
  2347  0BB5  1283               	bcf	3,5	;RP0=0, select bank0
  2348  0BB6  1303               	bcf	3,6	;RP1=0, select bank0
  2349  0BB7  00A2               	movwf	___awmod@dividend
  2350  0BB8  3000               	movlw	0
  2351  0BB9  1803               	skipnc
  2352  0BBA  3001               	movlw	1
  2353  0BBB  00A3               	movwf	___awmod@dividend+1
  2354  0BBC  160A  118A  2589  120A  158A  	fcall	___awmod
  2355  0BC1  1283               	bcf	3,5	;RP0=0, select bank0
  2356  0BC2  1303               	bcf	3,6	;RP1=0, select bank0
  2357  0BC3  0820               	movf	?___awmod,w
  2358  0BC4  00CA               	movwf	??_setMinutesEnd
  2359  0BC5  084A               	movf	??_setMinutesEnd,w
  2360  0BC6  1683               	bsf	3,5	;RP0=1, select bank1
  2361  0BC7  1303               	bcf	3,6	;RP1=0, select bank1
  2362  0BC8  00E6               	movwf	_savedMinutesEnd^(0+128)	;volatile
  2363                           
  2364                           ;time_scheduler.h: 182: sprintf(debugInfo, "INC: %02d", savedMinutesEnd);
  2365  0BC9  30D6               	movlw	low (STR_7| (0+32768))
  2366  0BCA  1283               	bcf	3,5	;RP0=0, select bank0
  2367  0BCB  1303               	bcf	3,6	;RP1=0, select bank0
  2368  0BCC  00B4               	movwf	sprintf@f
  2369  0BCD  3088               	movlw	high (STR_7| (0+32768))
  2370  0BCE  2C00               	goto	L2
  2371  0BCF                     l3350:	
  2372                           ;time_scheduler.h: 183: }
  2373                           
  2374                           
  2375                           ;time_scheduler.h: 184: else if (key == 0b00001110)
  2376  0BCF  0879               	movf	_key,w
  2377  0BD0  3A0E               	xorlw	14
  2378  0BD1  1D03               	skipz
  2379  0BD2  2BF7               	goto	l3356
  2380                           
  2381                           ;time_scheduler.h: 185: {
  2382                           ;time_scheduler.h: 186: savedMinutesEnd = (savedMinutesEnd - 5 + 60) % 60;
  2383  0BD3  303C               	movlw	60
  2384  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  2385  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
  2386  0BD6  00A0               	movwf	___awmod@divisor
  2387  0BD7  3000               	movlw	0
  2388  0BD8  00A1               	movwf	___awmod@divisor+1
  2389  0BD9  1683               	bsf	3,5	;RP0=1, select bank1
  2390  0BDA  1303               	bcf	3,6	;RP1=0, select bank1
  2391  0BDB  0866               	movf	_savedMinutesEnd^(0+128),w	;volatile
  2392  0BDC  3E37               	addlw	55
  2393  0BDD  1283               	bcf	3,5	;RP0=0, select bank0
  2394  0BDE  1303               	bcf	3,6	;RP1=0, select bank0
  2395  0BDF  00A2               	movwf	___awmod@dividend
  2396  0BE0  3000               	movlw	0
  2397  0BE1  1803               	skipnc
  2398  0BE2  3001               	movlw	1
  2399  0BE3  00A3               	movwf	___awmod@dividend+1
  2400  0BE4  160A  118A  2589  120A  158A  	fcall	___awmod
  2401  0BE9  1283               	bcf	3,5	;RP0=0, select bank0
  2402  0BEA  1303               	bcf	3,6	;RP1=0, select bank0
  2403  0BEB  0820               	movf	?___awmod,w
  2404  0BEC  00CA               	movwf	??_setMinutesEnd
  2405  0BED  084A               	movf	??_setMinutesEnd,w
  2406  0BEE  1683               	bsf	3,5	;RP0=1, select bank1
  2407  0BEF  1303               	bcf	3,6	;RP1=0, select bank1
  2408  0BF0  00E6               	movwf	_savedMinutesEnd^(0+128)	;volatile
  2409                           
  2410                           ;time_scheduler.h: 187: sprintf(debugInfo, "DEC: %02d", savedMinutesEnd);
  2411  0BF1  30CC               	movlw	low (STR_8| (0+32768))
  2412  0BF2  1283               	bcf	3,5	;RP0=0, select bank0
  2413  0BF3  1303               	bcf	3,6	;RP1=0, select bank0
  2414  0BF4  00B4               	movwf	sprintf@f
  2415  0BF5  3088               	movlw	high (STR_8| (0+32768))
  2416  0BF6  2C00               	goto	L2
  2417  0BF7                     l3356:	
  2418                           ;time_scheduler.h: 188: }
  2419                           
  2420                           
  2421                           ;time_scheduler.h: 189: else if (key == 0b00001101)
  2422  0BF7  0879               	movf	_key,w
  2423  0BF8  3A0D               	xorlw	13
  2424  0BF9  1D03               	skipz
  2425  0BFA  2C12               	goto	l199
  2426                           
  2427                           ;time_scheduler.h: 190: {
  2428                           ;time_scheduler.h: 191: sprintf(debugInfo, "SET: %02d", savedMinutesEnd);
  2429  0BFB  30E0               	movlw	low (STR_9| (0+32768))
  2430  0BFC  1283               	bcf	3,5	;RP0=0, select bank0
  2431  0BFD  1303               	bcf	3,6	;RP1=0, select bank0
  2432  0BFE  00B4               	movwf	sprintf@f
  2433  0BFF  3088               	movlw	high (STR_9| (0+32768))
  2434  0C00                     L2:	
  2435  0C00  00B5               	movwf	sprintf@f+1
  2436  0C01  1683               	bsf	3,5	;RP0=1, select bank1
  2437  0C02  1303               	bcf	3,6	;RP1=0, select bank1
  2438  0C03  0866               	movf	_savedMinutesEnd^(0+128),w	;volatile
  2439  0C04  1283               	bcf	3,5	;RP0=0, select bank0
  2440  0C05  1303               	bcf	3,6	;RP1=0, select bank0
  2441  0C06  00CA               	movwf	??_setMinutesEnd
  2442  0C07  01CB               	clrf	??_setMinutesEnd+1
  2443  0C08  084A               	movf	??_setMinutesEnd,w
  2444  0C09  00B6               	movwf	?_sprintf+2
  2445  0C0A  084B               	movf	??_setMinutesEnd+1,w
  2446  0C0B  00B7               	movwf	?_sprintf+3
  2447  0C0C  30D9               	movlw	_debugInfo& (0+255)
  2448  0C0D  120A  118A  23F4  120A  158A  	fcall	_sprintf
  2449  0C12                     l199:	
  2450                           
  2451                           ;time_scheduler.h: 192: }
  2452                           ;time_scheduler.h: 194: printToLCD(debugInfo);
  2453  0C12  30D9               	movlw	_debugInfo& (0+255)
  2454  0C13  1283               	bcf	3,5	;RP0=0, select bank0
  2455  0C14  1303               	bcf	3,6	;RP1=0, select bank0
  2456  0C15  00A2               	movwf	printToLCD@str
  2457  0C16  3000               	movlw	0
  2458  0C17  00A3               	movwf	printToLCD@str+1
  2459  0C18  160A  118A  2455  120A  158A  	fcall	_printToLCD
  2460                           
  2461                           ;time_scheduler.h: 195: lastKeyState = key;
  2462  0C1D  0879               	movf	_key,w
  2463  0C1E  1283               	bcf	3,5	;RP0=0, select bank0
  2464  0C1F  1303               	bcf	3,6	;RP1=0, select bank0
  2465  0C20  00CA               	movwf	??_setMinutesEnd
  2466  0C21  084A               	movf	??_setMinutesEnd,w
  2467  0C22  00FD               	movwf	_lastKeyState
  2468  0C23                     l3364:	
  2469                           ;time_scheduler.h: 197: while ((PORTB & 0x08) != 0)
  2470                           
  2471  0C23  1283               	bcf	3,5	;RP0=0, select bank0
  2472  0C24  1303               	bcf	3,6	;RP1=0, select bank0
  2473  0C25  1D86               	btfss	6,3	;volatile
  2474  0C26  0008               	return
  2475                           
  2476                           ;time_scheduler.h: 198: {
  2477                           ;time_scheduler.h: 199: _delay((unsigned long)((10)*(4000000/4000.0)));
  2478  0C27  300D               	movlw	13
  2479  0C28  00CB               	movwf	??_setMinutesEnd+1
  2480  0C29  30FB               	movlw	251
  2481  0C2A  00CA               	movwf	??_setMinutesEnd
  2482  0C2B                     u4957:	
  2483  0C2B  0BCA               	decfsz	??_setMinutesEnd,f
  2484  0C2C  2C2B               	goto	u4957
  2485  0C2D  0BCB               	decfsz	??_setMinutesEnd+1,f
  2486  0C2E  2C2B               	goto	u4957
  2487  0C2F  2C30               	nop2
  2488  0C30  2C23               	goto	l3364
  2489  0C31                     l3366:	
  2490                           ;time_scheduler.h: 200: }
  2491                           ;time_scheduler.h: 201: }
  2492                           
  2493                           
  2494                           ;time_scheduler.h: 202: else if (!keyValid)
  2495  0C31  08FA               	movf	_keyValid,f
  2496  0C32  1D03               	skipz
  2497  0C33  0008               	return
  2498                           
  2499                           ;time_scheduler.h: 203: {
  2500                           ;time_scheduler.h: 204: lastKeyState = 0xFF;
  2501  0C34  30FF               	movlw	255
  2502  0C35  1283               	bcf	3,5	;RP0=0, select bank0
  2503  0C36  1303               	bcf	3,6	;RP1=0, select bank0
  2504  0C37  00CA               	movwf	??_setMinutesEnd
  2505  0C38  084A               	movf	??_setMinutesEnd,w
  2506  0C39  00FD               	movwf	_lastKeyState
  2507  0C3A  0008               	return
  2508  0C3B                     __end_of_setMinutesEnd:	
  2509                           
  2510                           	psect	text4
  2511  0ABB                     __ptext4:	
  2512 ;; *************** function _setHoursStart *****************
  2513 ;; Defined at:
  2514 ;;		line 55 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\time_scheduler.h
      +"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;		None
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;		None
  2519 ;; Return value:  Size  Location     Type
  2520 ;;		None               void
  2521 ;; Registers used:
  2522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2528 ;;      Params:         0       0       0       0       0
  2529 ;;      Locals:         0       0       0       0       0
  2530 ;;      Temps:          0       2       0       0       0
  2531 ;;      Totals:         0       2       0       0       0
  2532 ;;Total ram usage:        2 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    4
  2535 ;; This function calls:
  2536 ;;		___awmod
  2537 ;;		_printToLCD
  2538 ;;		_sprintf
  2539 ;; This function is called by:
  2540 ;;		_updateState
  2541 ;; This function uses a non-reentrant model
  2542 ;;
  2543                           
  2544                           
  2545                           ;psect for function _setHoursStart
  2546  0ABB                     _setHoursStart:	
  2547                           
  2548                           ;time_scheduler.h: 57: keyValid = (PORTB & 0x08) >> 3;
  2549                           
  2550                           ;incstack = 0
  2551                           ; Regs used in _setHoursStart: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2552  0ABB  1283               	bcf	3,5	;RP0=0, select bank0
  2553  0ABC  1303               	bcf	3,6	;RP1=0, select bank0
  2554  0ABD  0806               	movf	6,w	;volatile
  2555  0ABE  00CA               	movwf	??_setHoursStart
  2556  0ABF  3003               	movlw	3
  2557  0AC0                     u4315:	
  2558  0AC0  1003               	clrc
  2559  0AC1  0CCA               	rrf	??_setHoursStart,f
  2560  0AC2  3EFF               	addlw	-1
  2561  0AC3  1D03               	skipz
  2562  0AC4  2AC0               	goto	u4315
  2563  0AC5  084A               	movf	??_setHoursStart,w
  2564  0AC6  3901               	andlw	1
  2565  0AC7  00CB               	movwf	??_setHoursStart+1
  2566  0AC8  084B               	movf	??_setHoursStart+1,w
  2567  0AC9  00FA               	movwf	_keyValid
  2568                           
  2569                           ;time_scheduler.h: 58: key = (PORTB & 0xF0) >> 4;
  2570  0ACA  0806               	movf	6,w	;volatile
  2571  0ACB  00CA               	movwf	??_setHoursStart
  2572  0ACC  3004               	movlw	4
  2573  0ACD                     u4325:	
  2574  0ACD  1003               	clrc
  2575  0ACE  0CCA               	rrf	??_setHoursStart,f
  2576  0ACF  3EFF               	addlw	-1
  2577  0AD0  1D03               	skipz
  2578  0AD1  2ACD               	goto	u4325
  2579  0AD2  084A               	movf	??_setHoursStart,w
  2580  0AD3  390F               	andlw	15
  2581  0AD4  00CB               	movwf	??_setHoursStart+1
  2582  0AD5  084B               	movf	??_setHoursStart+1,w
  2583  0AD6  00F9               	movwf	_key
  2584                           
  2585                           ;time_scheduler.h: 60: _delay((unsigned long)((50)*(4000000/4000.0)));
  2586  0AD7  3041               	movlw	65
  2587  0AD8  00CB               	movwf	??_setHoursStart+1
  2588  0AD9  30EE               	movlw	238
  2589  0ADA  00CA               	movwf	??_setHoursStart
  2590  0ADB                     u4967:	
  2591  0ADB  0BCA               	decfsz	??_setHoursStart,f
  2592  0ADC  2ADB               	goto	u4967
  2593  0ADD  0BCB               	decfsz	??_setHoursStart+1,f
  2594  0ADE  2ADB               	goto	u4967
  2595  0ADF  0000               	nop
  2596                           
  2597                           ;time_scheduler.h: 62: if (keyValid && key != lastKeyState)
  2598  0AE0  087A               	movf	_keyValid,w
  2599  0AE1  1903               	btfsc	3,2
  2600  0AE2  2B71               	goto	l3264
  2601  0AE3  0879               	movf	_key,w
  2602  0AE4  067D               	xorwf	_lastKeyState,w
  2603  0AE5  1903               	skipnz
  2604  0AE6  2B71               	goto	l3264
  2605                           
  2606                           ;time_scheduler.h: 63: {
  2607                           ;time_scheduler.h: 64: if (key == 0b00001100)
  2608  0AE7  0879               	movf	_key,w
  2609  0AE8  3A0C               	xorlw	12
  2610  0AE9  1D03               	skipz
  2611  0AEA  2B0F               	goto	l3248
  2612                           
  2613                           ;time_scheduler.h: 65: {
  2614                           ;time_scheduler.h: 66: savedHoursStart = (savedHoursStart + 1) % 24;
  2615  0AEB  3018               	movlw	24
  2616  0AEC  1283               	bcf	3,5	;RP0=0, select bank0
  2617  0AED  1303               	bcf	3,6	;RP1=0, select bank0
  2618  0AEE  00A0               	movwf	___awmod@divisor
  2619  0AEF  3000               	movlw	0
  2620  0AF0  00A1               	movwf	___awmod@divisor+1
  2621  0AF1  1683               	bsf	3,5	;RP0=1, select bank1
  2622  0AF2  1303               	bcf	3,6	;RP1=0, select bank1
  2623  0AF3  0865               	movf	_savedHoursStart^(0+128),w	;volatile
  2624  0AF4  3E01               	addlw	1
  2625  0AF5  1283               	bcf	3,5	;RP0=0, select bank0
  2626  0AF6  1303               	bcf	3,6	;RP1=0, select bank0
  2627  0AF7  00A2               	movwf	___awmod@dividend
  2628  0AF8  3000               	movlw	0
  2629  0AF9  1803               	skipnc
  2630  0AFA  3001               	movlw	1
  2631  0AFB  00A3               	movwf	___awmod@dividend+1
  2632  0AFC  160A  118A  2589  120A  158A  	fcall	___awmod
  2633  0B01  1283               	bcf	3,5	;RP0=0, select bank0
  2634  0B02  1303               	bcf	3,6	;RP1=0, select bank0
  2635  0B03  0820               	movf	?___awmod,w
  2636  0B04  00CA               	movwf	??_setHoursStart
  2637  0B05  084A               	movf	??_setHoursStart,w
  2638  0B06  1683               	bsf	3,5	;RP0=1, select bank1
  2639  0B07  1303               	bcf	3,6	;RP1=0, select bank1
  2640  0B08  00E5               	movwf	_savedHoursStart^(0+128)	;volatile
  2641                           
  2642                           ;time_scheduler.h: 67: sprintf(debugInfo, "INC: %02d", savedHoursStart);
  2643  0B09  30D6               	movlw	low (STR_7| (0+32768))
  2644  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  2645  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  2646  0B0C  00B4               	movwf	sprintf@f
  2647  0B0D  3088               	movlw	high (STR_7| (0+32768))
  2648  0B0E  2B40               	goto	L3
  2649  0B0F                     l3248:	
  2650                           ;time_scheduler.h: 68: }
  2651                           
  2652                           
  2653                           ;time_scheduler.h: 69: else if (key == 0b00001110)
  2654  0B0F  0879               	movf	_key,w
  2655  0B10  3A0E               	xorlw	14
  2656  0B11  1D03               	skipz
  2657  0B12  2B37               	goto	l3254
  2658                           
  2659                           ;time_scheduler.h: 70: {
  2660                           ;time_scheduler.h: 71: savedHoursStart = (savedHoursStart - 1 + 24) % 24;
  2661  0B13  3018               	movlw	24
  2662  0B14  1283               	bcf	3,5	;RP0=0, select bank0
  2663  0B15  1303               	bcf	3,6	;RP1=0, select bank0
  2664  0B16  00A0               	movwf	___awmod@divisor
  2665  0B17  3000               	movlw	0
  2666  0B18  00A1               	movwf	___awmod@divisor+1
  2667  0B19  1683               	bsf	3,5	;RP0=1, select bank1
  2668  0B1A  1303               	bcf	3,6	;RP1=0, select bank1
  2669  0B1B  0865               	movf	_savedHoursStart^(0+128),w	;volatile
  2670  0B1C  3E17               	addlw	23
  2671  0B1D  1283               	bcf	3,5	;RP0=0, select bank0
  2672  0B1E  1303               	bcf	3,6	;RP1=0, select bank0
  2673  0B1F  00A2               	movwf	___awmod@dividend
  2674  0B20  3000               	movlw	0
  2675  0B21  1803               	skipnc
  2676  0B22  3001               	movlw	1
  2677  0B23  00A3               	movwf	___awmod@dividend+1
  2678  0B24  160A  118A  2589  120A  158A  	fcall	___awmod
  2679  0B29  1283               	bcf	3,5	;RP0=0, select bank0
  2680  0B2A  1303               	bcf	3,6	;RP1=0, select bank0
  2681  0B2B  0820               	movf	?___awmod,w
  2682  0B2C  00CA               	movwf	??_setHoursStart
  2683  0B2D  084A               	movf	??_setHoursStart,w
  2684  0B2E  1683               	bsf	3,5	;RP0=1, select bank1
  2685  0B2F  1303               	bcf	3,6	;RP1=0, select bank1
  2686  0B30  00E5               	movwf	_savedHoursStart^(0+128)	;volatile
  2687                           
  2688                           ;time_scheduler.h: 72: sprintf(debugInfo, "DEC: %02d", savedHoursStart);
  2689  0B31  30CC               	movlw	low (STR_8| (0+32768))
  2690  0B32  1283               	bcf	3,5	;RP0=0, select bank0
  2691  0B33  1303               	bcf	3,6	;RP1=0, select bank0
  2692  0B34  00B4               	movwf	sprintf@f
  2693  0B35  3088               	movlw	high (STR_8| (0+32768))
  2694  0B36  2B40               	goto	L3
  2695  0B37                     l3254:	
  2696                           ;time_scheduler.h: 73: }
  2697                           
  2698                           
  2699                           ;time_scheduler.h: 74: else if (key == 0b00001101)
  2700  0B37  0879               	movf	_key,w
  2701  0B38  3A0D               	xorlw	13
  2702  0B39  1D03               	skipz
  2703  0B3A  2B52               	goto	l157
  2704                           
  2705                           ;time_scheduler.h: 75: {
  2706                           ;time_scheduler.h: 76: sprintf(debugInfo, "SET: %02d", savedHoursStart);
  2707  0B3B  30E0               	movlw	low (STR_9| (0+32768))
  2708  0B3C  1283               	bcf	3,5	;RP0=0, select bank0
  2709  0B3D  1303               	bcf	3,6	;RP1=0, select bank0
  2710  0B3E  00B4               	movwf	sprintf@f
  2711  0B3F  3088               	movlw	high (STR_9| (0+32768))
  2712  0B40                     L3:	
  2713  0B40  00B5               	movwf	sprintf@f+1
  2714  0B41  1683               	bsf	3,5	;RP0=1, select bank1
  2715  0B42  1303               	bcf	3,6	;RP1=0, select bank1
  2716  0B43  0865               	movf	_savedHoursStart^(0+128),w	;volatile
  2717  0B44  1283               	bcf	3,5	;RP0=0, select bank0
  2718  0B45  1303               	bcf	3,6	;RP1=0, select bank0
  2719  0B46  00CA               	movwf	??_setHoursStart
  2720  0B47  01CB               	clrf	??_setHoursStart+1
  2721  0B48  084A               	movf	??_setHoursStart,w
  2722  0B49  00B6               	movwf	?_sprintf+2
  2723  0B4A  084B               	movf	??_setHoursStart+1,w
  2724  0B4B  00B7               	movwf	?_sprintf+3
  2725  0B4C  30D9               	movlw	_debugInfo& (0+255)
  2726  0B4D  120A  118A  23F4  120A  158A  	fcall	_sprintf
  2727  0B52                     l157:	
  2728                           
  2729                           ;time_scheduler.h: 78: }
  2730                           ;time_scheduler.h: 80: printToLCD(debugInfo);
  2731  0B52  30D9               	movlw	_debugInfo& (0+255)
  2732  0B53  1283               	bcf	3,5	;RP0=0, select bank0
  2733  0B54  1303               	bcf	3,6	;RP1=0, select bank0
  2734  0B55  00A2               	movwf	printToLCD@str
  2735  0B56  3000               	movlw	0
  2736  0B57  00A3               	movwf	printToLCD@str+1
  2737  0B58  160A  118A  2455  120A  158A  	fcall	_printToLCD
  2738                           
  2739                           ;time_scheduler.h: 81: lastKeyState = key;
  2740  0B5D  0879               	movf	_key,w
  2741  0B5E  1283               	bcf	3,5	;RP0=0, select bank0
  2742  0B5F  1303               	bcf	3,6	;RP1=0, select bank0
  2743  0B60  00CA               	movwf	??_setHoursStart
  2744  0B61  084A               	movf	??_setHoursStart,w
  2745  0B62  00FD               	movwf	_lastKeyState
  2746  0B63                     l3262:	
  2747                           ;time_scheduler.h: 83: while ((PORTB & 0x08) != 0)
  2748                           
  2749  0B63  1283               	bcf	3,5	;RP0=0, select bank0
  2750  0B64  1303               	bcf	3,6	;RP1=0, select bank0
  2751  0B65  1D86               	btfss	6,3	;volatile
  2752  0B66  0008               	return
  2753                           
  2754                           ;time_scheduler.h: 84: {
  2755                           ;time_scheduler.h: 85: _delay((unsigned long)((10)*(4000000/4000.0)));
  2756  0B67  300D               	movlw	13
  2757  0B68  00CB               	movwf	??_setHoursStart+1
  2758  0B69  30FB               	movlw	251
  2759  0B6A  00CA               	movwf	??_setHoursStart
  2760  0B6B                     u4977:	
  2761  0B6B  0BCA               	decfsz	??_setHoursStart,f
  2762  0B6C  2B6B               	goto	u4977
  2763  0B6D  0BCB               	decfsz	??_setHoursStart+1,f
  2764  0B6E  2B6B               	goto	u4977
  2765  0B6F  2B70               	nop2
  2766  0B70  2B63               	goto	l3262
  2767  0B71                     l3264:	
  2768                           ;time_scheduler.h: 86: }
  2769                           ;time_scheduler.h: 87: }
  2770                           
  2771                           
  2772                           ;time_scheduler.h: 88: else if (!keyValid)
  2773  0B71  08FA               	movf	_keyValid,f
  2774  0B72  1D03               	skipz
  2775  0B73  0008               	return
  2776                           
  2777                           ;time_scheduler.h: 89: {
  2778                           ;time_scheduler.h: 90: lastKeyState = 0xFF;
  2779  0B74  30FF               	movlw	255
  2780  0B75  1283               	bcf	3,5	;RP0=0, select bank0
  2781  0B76  1303               	bcf	3,6	;RP1=0, select bank0
  2782  0B77  00CA               	movwf	??_setHoursStart
  2783  0B78  084A               	movf	??_setHoursStart,w
  2784  0B79  00FD               	movwf	_lastKeyState
  2785  0B7A  0008               	return
  2786  0B7B                     __end_of_setHoursStart:	
  2787                           
  2788                           	psect	text5
  2789  09FB                     __ptext5:	
  2790 ;; *************** function _setHoursEnd *****************
  2791 ;; Defined at:
  2792 ;;		line 94 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\time_scheduler.h
      +"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;		None
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;		None
  2797 ;; Return value:  Size  Location     Type
  2798 ;;		None               void
  2799 ;; Registers used:
  2800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2806 ;;      Params:         0       0       0       0       0
  2807 ;;      Locals:         0       0       0       0       0
  2808 ;;      Temps:          0       2       0       0       0
  2809 ;;      Totals:         0       2       0       0       0
  2810 ;;Total ram usage:        2 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    4
  2813 ;; This function calls:
  2814 ;;		___awmod
  2815 ;;		_printToLCD
  2816 ;;		_sprintf
  2817 ;; This function is called by:
  2818 ;;		_updateState
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           
  2823                           ;psect for function _setHoursEnd
  2824  09FB                     _setHoursEnd:	
  2825                           
  2826                           ;time_scheduler.h: 96: keyValid = (PORTB & 0x08) >> 3;
  2827                           
  2828                           ;incstack = 0
  2829                           ; Regs used in _setHoursEnd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2830  09FB  1283               	bcf	3,5	;RP0=0, select bank0
  2831  09FC  1303               	bcf	3,6	;RP1=0, select bank0
  2832  09FD  0806               	movf	6,w	;volatile
  2833  09FE  00CA               	movwf	??_setHoursEnd
  2834  09FF  3003               	movlw	3
  2835  0A00                     u4405:	
  2836  0A00  1003               	clrc
  2837  0A01  0CCA               	rrf	??_setHoursEnd,f
  2838  0A02  3EFF               	addlw	-1
  2839  0A03  1D03               	skipz
  2840  0A04  2A00               	goto	u4405
  2841  0A05  084A               	movf	??_setHoursEnd,w
  2842  0A06  3901               	andlw	1
  2843  0A07  00CB               	movwf	??_setHoursEnd+1
  2844  0A08  084B               	movf	??_setHoursEnd+1,w
  2845  0A09  00FA               	movwf	_keyValid
  2846                           
  2847                           ;time_scheduler.h: 97: key = (PORTB & 0xF0) >> 4;
  2848  0A0A  0806               	movf	6,w	;volatile
  2849  0A0B  00CA               	movwf	??_setHoursEnd
  2850  0A0C  3004               	movlw	4
  2851  0A0D                     u4415:	
  2852  0A0D  1003               	clrc
  2853  0A0E  0CCA               	rrf	??_setHoursEnd,f
  2854  0A0F  3EFF               	addlw	-1
  2855  0A10  1D03               	skipz
  2856  0A11  2A0D               	goto	u4415
  2857  0A12  084A               	movf	??_setHoursEnd,w
  2858  0A13  390F               	andlw	15
  2859  0A14  00CB               	movwf	??_setHoursEnd+1
  2860  0A15  084B               	movf	??_setHoursEnd+1,w
  2861  0A16  00F9               	movwf	_key
  2862                           
  2863                           ;time_scheduler.h: 99: _delay((unsigned long)((50)*(4000000/4000.0)));
  2864  0A17  3041               	movlw	65
  2865  0A18  00CB               	movwf	??_setHoursEnd+1
  2866  0A19  30EE               	movlw	238
  2867  0A1A  00CA               	movwf	??_setHoursEnd
  2868  0A1B                     u4987:	
  2869  0A1B  0BCA               	decfsz	??_setHoursEnd,f
  2870  0A1C  2A1B               	goto	u4987
  2871  0A1D  0BCB               	decfsz	??_setHoursEnd+1,f
  2872  0A1E  2A1B               	goto	u4987
  2873  0A1F  0000               	nop
  2874                           
  2875                           ;time_scheduler.h: 101: if (keyValid && key != lastKeyState)
  2876  0A20  087A               	movf	_keyValid,w
  2877  0A21  1903               	btfsc	3,2
  2878  0A22  2AB1               	goto	l3298
  2879  0A23  0879               	movf	_key,w
  2880  0A24  067D               	xorwf	_lastKeyState,w
  2881  0A25  1903               	skipnz
  2882  0A26  2AB1               	goto	l3298
  2883                           
  2884                           ;time_scheduler.h: 102: {
  2885                           ;time_scheduler.h: 103: if (key == 0b00001100)
  2886  0A27  0879               	movf	_key,w
  2887  0A28  3A0C               	xorlw	12
  2888  0A29  1D03               	skipz
  2889  0A2A  2A4F               	goto	l3282
  2890                           
  2891                           ;time_scheduler.h: 104: {
  2892                           ;time_scheduler.h: 105: savedHoursEnd = (savedHoursEnd + 1) % 24;
  2893  0A2B  3018               	movlw	24
  2894  0A2C  1283               	bcf	3,5	;RP0=0, select bank0
  2895  0A2D  1303               	bcf	3,6	;RP1=0, select bank0
  2896  0A2E  00A0               	movwf	___awmod@divisor
  2897  0A2F  3000               	movlw	0
  2898  0A30  00A1               	movwf	___awmod@divisor+1
  2899  0A31  1683               	bsf	3,5	;RP0=1, select bank1
  2900  0A32  1303               	bcf	3,6	;RP1=0, select bank1
  2901  0A33  0864               	movf	_savedHoursEnd^(0+128),w	;volatile
  2902  0A34  3E01               	addlw	1
  2903  0A35  1283               	bcf	3,5	;RP0=0, select bank0
  2904  0A36  1303               	bcf	3,6	;RP1=0, select bank0
  2905  0A37  00A2               	movwf	___awmod@dividend
  2906  0A38  3000               	movlw	0
  2907  0A39  1803               	skipnc
  2908  0A3A  3001               	movlw	1
  2909  0A3B  00A3               	movwf	___awmod@dividend+1
  2910  0A3C  160A  118A  2589  120A  158A  	fcall	___awmod
  2911  0A41  1283               	bcf	3,5	;RP0=0, select bank0
  2912  0A42  1303               	bcf	3,6	;RP1=0, select bank0
  2913  0A43  0820               	movf	?___awmod,w
  2914  0A44  00CA               	movwf	??_setHoursEnd
  2915  0A45  084A               	movf	??_setHoursEnd,w
  2916  0A46  1683               	bsf	3,5	;RP0=1, select bank1
  2917  0A47  1303               	bcf	3,6	;RP1=0, select bank1
  2918  0A48  00E4               	movwf	_savedHoursEnd^(0+128)	;volatile
  2919                           
  2920                           ;time_scheduler.h: 106: sprintf(debugInfo, "INC: %02d", savedHoursEnd);
  2921  0A49  30D6               	movlw	low (STR_7| (0+32768))
  2922  0A4A  1283               	bcf	3,5	;RP0=0, select bank0
  2923  0A4B  1303               	bcf	3,6	;RP1=0, select bank0
  2924  0A4C  00B4               	movwf	sprintf@f
  2925  0A4D  3088               	movlw	high (STR_7| (0+32768))
  2926  0A4E  2A80               	goto	L4
  2927  0A4F                     l3282:	
  2928                           ;time_scheduler.h: 107: }
  2929                           
  2930                           
  2931                           ;time_scheduler.h: 108: else if (key == 0b00001110)
  2932  0A4F  0879               	movf	_key,w
  2933  0A50  3A0E               	xorlw	14
  2934  0A51  1D03               	skipz
  2935  0A52  2A77               	goto	l3288
  2936                           
  2937                           ;time_scheduler.h: 109: {
  2938                           ;time_scheduler.h: 110: savedHoursEnd = (savedHoursEnd - 1 + 24) % 24;
  2939  0A53  3018               	movlw	24
  2940  0A54  1283               	bcf	3,5	;RP0=0, select bank0
  2941  0A55  1303               	bcf	3,6	;RP1=0, select bank0
  2942  0A56  00A0               	movwf	___awmod@divisor
  2943  0A57  3000               	movlw	0
  2944  0A58  00A1               	movwf	___awmod@divisor+1
  2945  0A59  1683               	bsf	3,5	;RP0=1, select bank1
  2946  0A5A  1303               	bcf	3,6	;RP1=0, select bank1
  2947  0A5B  0864               	movf	_savedHoursEnd^(0+128),w	;volatile
  2948  0A5C  3E17               	addlw	23
  2949  0A5D  1283               	bcf	3,5	;RP0=0, select bank0
  2950  0A5E  1303               	bcf	3,6	;RP1=0, select bank0
  2951  0A5F  00A2               	movwf	___awmod@dividend
  2952  0A60  3000               	movlw	0
  2953  0A61  1803               	skipnc
  2954  0A62  3001               	movlw	1
  2955  0A63  00A3               	movwf	___awmod@dividend+1
  2956  0A64  160A  118A  2589  120A  158A  	fcall	___awmod
  2957  0A69  1283               	bcf	3,5	;RP0=0, select bank0
  2958  0A6A  1303               	bcf	3,6	;RP1=0, select bank0
  2959  0A6B  0820               	movf	?___awmod,w
  2960  0A6C  00CA               	movwf	??_setHoursEnd
  2961  0A6D  084A               	movf	??_setHoursEnd,w
  2962  0A6E  1683               	bsf	3,5	;RP0=1, select bank1
  2963  0A6F  1303               	bcf	3,6	;RP1=0, select bank1
  2964  0A70  00E4               	movwf	_savedHoursEnd^(0+128)	;volatile
  2965                           
  2966                           ;time_scheduler.h: 111: sprintf(debugInfo, "DEC: %02d", savedHoursEnd);
  2967  0A71  30CC               	movlw	low (STR_8| (0+32768))
  2968  0A72  1283               	bcf	3,5	;RP0=0, select bank0
  2969  0A73  1303               	bcf	3,6	;RP1=0, select bank0
  2970  0A74  00B4               	movwf	sprintf@f
  2971  0A75  3088               	movlw	high (STR_8| (0+32768))
  2972  0A76  2A80               	goto	L4
  2973  0A77                     l3288:	
  2974                           ;time_scheduler.h: 112: }
  2975                           
  2976                           
  2977                           ;time_scheduler.h: 113: else if (key == 0b00001101)
  2978  0A77  0879               	movf	_key,w
  2979  0A78  3A0D               	xorlw	13
  2980  0A79  1D03               	skipz
  2981  0A7A  2A92               	goto	l171
  2982                           
  2983                           ;time_scheduler.h: 114: {
  2984                           ;time_scheduler.h: 115: sprintf(debugInfo, "SET: %02d", savedHoursEnd);
  2985  0A7B  30E0               	movlw	low (STR_9| (0+32768))
  2986  0A7C  1283               	bcf	3,5	;RP0=0, select bank0
  2987  0A7D  1303               	bcf	3,6	;RP1=0, select bank0
  2988  0A7E  00B4               	movwf	sprintf@f
  2989  0A7F  3088               	movlw	high (STR_9| (0+32768))
  2990  0A80                     L4:	
  2991  0A80  00B5               	movwf	sprintf@f+1
  2992  0A81  1683               	bsf	3,5	;RP0=1, select bank1
  2993  0A82  1303               	bcf	3,6	;RP1=0, select bank1
  2994  0A83  0864               	movf	_savedHoursEnd^(0+128),w	;volatile
  2995  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  2996  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  2997  0A86  00CA               	movwf	??_setHoursEnd
  2998  0A87  01CB               	clrf	??_setHoursEnd+1
  2999  0A88  084A               	movf	??_setHoursEnd,w
  3000  0A89  00B6               	movwf	?_sprintf+2
  3001  0A8A  084B               	movf	??_setHoursEnd+1,w
  3002  0A8B  00B7               	movwf	?_sprintf+3
  3003  0A8C  30D9               	movlw	_debugInfo& (0+255)
  3004  0A8D  120A  118A  23F4  120A  158A  	fcall	_sprintf
  3005  0A92                     l171:	
  3006                           
  3007                           ;time_scheduler.h: 116: }
  3008                           ;time_scheduler.h: 118: printToLCD(debugInfo);
  3009  0A92  30D9               	movlw	_debugInfo& (0+255)
  3010  0A93  1283               	bcf	3,5	;RP0=0, select bank0
  3011  0A94  1303               	bcf	3,6	;RP1=0, select bank0
  3012  0A95  00A2               	movwf	printToLCD@str
  3013  0A96  3000               	movlw	0
  3014  0A97  00A3               	movwf	printToLCD@str+1
  3015  0A98  160A  118A  2455  120A  158A  	fcall	_printToLCD
  3016                           
  3017                           ;time_scheduler.h: 119: lastKeyState = key;
  3018  0A9D  0879               	movf	_key,w
  3019  0A9E  1283               	bcf	3,5	;RP0=0, select bank0
  3020  0A9F  1303               	bcf	3,6	;RP1=0, select bank0
  3021  0AA0  00CA               	movwf	??_setHoursEnd
  3022  0AA1  084A               	movf	??_setHoursEnd,w
  3023  0AA2  00FD               	movwf	_lastKeyState
  3024  0AA3                     l3296:	
  3025                           ;time_scheduler.h: 121: while ((PORTB & 0x08) != 0)
  3026                           
  3027  0AA3  1283               	bcf	3,5	;RP0=0, select bank0
  3028  0AA4  1303               	bcf	3,6	;RP1=0, select bank0
  3029  0AA5  1D86               	btfss	6,3	;volatile
  3030  0AA6  0008               	return
  3031                           
  3032                           ;time_scheduler.h: 122: {
  3033                           ;time_scheduler.h: 123: _delay((unsigned long)((10)*(4000000/4000.0)));
  3034  0AA7  300D               	movlw	13
  3035  0AA8  00CB               	movwf	??_setHoursEnd+1
  3036  0AA9  30FB               	movlw	251
  3037  0AAA  00CA               	movwf	??_setHoursEnd
  3038  0AAB                     u4997:	
  3039  0AAB  0BCA               	decfsz	??_setHoursEnd,f
  3040  0AAC  2AAB               	goto	u4997
  3041  0AAD  0BCB               	decfsz	??_setHoursEnd+1,f
  3042  0AAE  2AAB               	goto	u4997
  3043  0AAF  2AB0               	nop2
  3044  0AB0  2AA3               	goto	l3296
  3045  0AB1                     l3298:	
  3046                           ;time_scheduler.h: 124: }
  3047                           ;time_scheduler.h: 125: }
  3048                           
  3049                           
  3050                           ;time_scheduler.h: 126: else if (!keyValid)
  3051  0AB1  08FA               	movf	_keyValid,f
  3052  0AB2  1D03               	skipz
  3053  0AB3  0008               	return
  3054                           
  3055                           ;time_scheduler.h: 127: {
  3056                           ;time_scheduler.h: 128: lastKeyState = 0xFF;
  3057  0AB4  30FF               	movlw	255
  3058  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  3059  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  3060  0AB7  00CA               	movwf	??_setHoursEnd
  3061  0AB8  084A               	movf	??_setHoursEnd,w
  3062  0AB9  00FD               	movwf	_lastKeyState
  3063  0ABA  0008               	return
  3064  0ABB                     __end_of_setHoursEnd:	
  3065                           
  3066                           	psect	text6
  3067  1589                     __ptext6:	
  3068 ;; *************** function ___awmod *****************
  3069 ;; Defined at:
  3070 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;  divisor         2    0[BANK0 ] int 
  3073 ;;  dividend        2    2[BANK0 ] int 
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;  sign            1    6[BANK0 ] unsigned char 
  3076 ;;  counter         1    5[BANK0 ] unsigned char 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  2    0[BANK0 ] int 
  3079 ;; Registers used:
  3080 ;;		wreg, status,2, status,0
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3086 ;;      Params:         0       4       0       0       0
  3087 ;;      Locals:         0       2       0       0       0
  3088 ;;      Temps:          0       1       0       0       0
  3089 ;;      Totals:         0       7       0       0       0
  3090 ;;Total ram usage:        7 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:    2
  3093 ;; This function calls:
  3094 ;;		Nothing
  3095 ;; This function is called by:
  3096 ;;		_setHoursStart
  3097 ;;		_setHoursEnd
  3098 ;;		_setMinutesStart
  3099 ;;		_setMinutesEnd
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           
  3104                           ;psect for function ___awmod
  3105  1589                     ___awmod:	
  3106                           
  3107                           ;incstack = 0
  3108                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3109  1589  1283               	bcf	3,5	;RP0=0, select bank0
  3110  158A  1303               	bcf	3,6	;RP1=0, select bank0
  3111  158B  01A6               	clrf	___awmod@sign
  3112  158C  1FA3               	btfss	___awmod@dividend+1,7
  3113  158D  2D95               	goto	l2232
  3114  158E  09A2               	comf	___awmod@dividend,f
  3115  158F  09A3               	comf	___awmod@dividend+1,f
  3116  1590  0AA2               	incf	___awmod@dividend,f
  3117  1591  1903               	skipnz
  3118  1592  0AA3               	incf	___awmod@dividend+1,f
  3119  1593  01A6               	clrf	___awmod@sign
  3120  1594  0AA6               	incf	___awmod@sign,f
  3121  1595                     l2232:	
  3122  1595  1FA1               	btfss	___awmod@divisor+1,7
  3123  1596  2D9C               	goto	l2236
  3124  1597  09A0               	comf	___awmod@divisor,f
  3125  1598  09A1               	comf	___awmod@divisor+1,f
  3126  1599  0AA0               	incf	___awmod@divisor,f
  3127  159A  1903               	skipnz
  3128  159B  0AA1               	incf	___awmod@divisor+1,f
  3129  159C                     l2236:	
  3130  159C  0821               	movf	___awmod@divisor+1,w
  3131  159D  0420               	iorwf	___awmod@divisor,w
  3132  159E  1903               	skipnz
  3133  159F  2DC9               	goto	l2254
  3134  15A0  01A5               	clrf	___awmod@counter
  3135  15A1  0AA5               	incf	___awmod@counter,f
  3136  15A2                     l2244:	
  3137  15A2  1BA1               	btfsc	___awmod@divisor+1,7
  3138  15A3  2DB0               	goto	l2246
  3139  15A4  3001               	movlw	1
  3140  15A5                     u2545:	
  3141  15A5  1003               	clrc
  3142  15A6  0DA0               	rlf	___awmod@divisor,f
  3143  15A7  0DA1               	rlf	___awmod@divisor+1,f
  3144  15A8  3EFF               	addlw	-1
  3145  15A9  1D03               	skipz
  3146  15AA  2DA5               	goto	u2545
  3147  15AB  3001               	movlw	1
  3148  15AC  00A4               	movwf	??___awmod
  3149  15AD  0824               	movf	??___awmod,w
  3150  15AE  07A5               	addwf	___awmod@counter,f
  3151  15AF  2DA2               	goto	l2244
  3152  15B0                     l2246:	
  3153  15B0  0821               	movf	___awmod@divisor+1,w
  3154  15B1  0223               	subwf	___awmod@dividend+1,w
  3155  15B2  1D03               	skipz
  3156  15B3  2DB6               	goto	u2565
  3157  15B4  0820               	movf	___awmod@divisor,w
  3158  15B5  0222               	subwf	___awmod@dividend,w
  3159  15B6                     u2565:	
  3160  15B6  1C03               	skipc
  3161  15B7  2DBE               	goto	l2250
  3162  15B8  0820               	movf	___awmod@divisor,w
  3163  15B9  02A2               	subwf	___awmod@dividend,f
  3164  15BA  0821               	movf	___awmod@divisor+1,w
  3165  15BB  1C03               	skipc
  3166  15BC  03A3               	decf	___awmod@dividend+1,f
  3167  15BD  02A3               	subwf	___awmod@dividend+1,f
  3168  15BE                     l2250:	
  3169  15BE  3001               	movlw	1
  3170  15BF                     u2575:	
  3171  15BF  1003               	clrc
  3172  15C0  0CA1               	rrf	___awmod@divisor+1,f
  3173  15C1  0CA0               	rrf	___awmod@divisor,f
  3174  15C2  3EFF               	addlw	-1
  3175  15C3  1D03               	skipz
  3176  15C4  2DBF               	goto	u2575
  3177  15C5  3001               	movlw	1
  3178  15C6  02A5               	subwf	___awmod@counter,f
  3179  15C7  1D03               	btfss	3,2
  3180  15C8  2DB0               	goto	l2246
  3181  15C9                     l2254:	
  3182  15C9  0826               	movf	___awmod@sign,w
  3183  15CA  1903               	btfsc	3,2
  3184  15CB  2DD1               	goto	l2258
  3185  15CC  09A2               	comf	___awmod@dividend,f
  3186  15CD  09A3               	comf	___awmod@dividend+1,f
  3187  15CE  0AA2               	incf	___awmod@dividend,f
  3188  15CF  1903               	skipnz
  3189  15D0  0AA3               	incf	___awmod@dividend+1,f
  3190  15D1                     l2258:	
  3191  15D1  0823               	movf	___awmod@dividend+1,w
  3192  15D2  01A1               	clrf	?___awmod+1
  3193  15D3  07A1               	addwf	?___awmod+1,f
  3194  15D4  0822               	movf	___awmod@dividend,w
  3195  15D5  01A0               	clrf	?___awmod
  3196  15D6  07A0               	addwf	?___awmod,f
  3197  15D7  0008               	return
  3198  15D8                     __end_of___awmod:	
  3199                           
  3200                           	psect	text7
  3201  12FB                     __ptext7:	
  3202 ;; *************** function _printStatusTMP *****************
  3203 ;; Defined at:
  3204 ;;		line 47 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\temp_module.h"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;  handler         1    wreg     unsigned char 
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;  handler         1    4[BANK0 ] unsigned char 
  3209 ;; Return value:  Size  Location     Type
  3210 ;;		None               void
  3211 ;; Registers used:
  3212 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3218 ;;      Params:         0       0       0       0       0
  3219 ;;      Locals:         0       1       0       0       0
  3220 ;;      Temps:          0       0       0       0       0
  3221 ;;      Totals:         0       1       0       0       0
  3222 ;;Total ram usage:        1 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:    4
  3225 ;; This function calls:
  3226 ;;		_printToLCD
  3227 ;; This function is called by:
  3228 ;;		_updateState
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           
  3233                           ;psect for function _printStatusTMP
  3234  12FB                     _printStatusTMP:	
  3235                           
  3236                           ;incstack = 0
  3237                           ; Regs used in _printStatusTMP: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3238                           ;printStatusTMP@handler stored from wreg
  3239  12FB  1283               	bcf	3,5	;RP0=0, select bank0
  3240  12FC  1303               	bcf	3,6	;RP1=0, select bank0
  3241  12FD  00A4               	movwf	printStatusTMP@handler
  3242                           
  3243                           ;temp_module.h: 49: if (handler == 1)
  3244  12FE  0824               	movf	printStatusTMP@handler,w
  3245  12FF  3A01               	xorlw	1
  3246  1300  1D03               	skipz
  3247  1301  2B0A               	goto	l3374
  3248                           
  3249                           ;temp_module.h: 50: {
  3250                           ;temp_module.h: 51: printToLCD("VENT ON ");
  3251  1302  30F3               	movlw	low (STR_20| (0+32768))
  3252  1303  00A2               	movwf	printToLCD@str
  3253  1304  3088               	movlw	high (STR_20| (0+32768))
  3254  1305  00A3               	movwf	printToLCD@str+1
  3255  1306  160A  118A  2455   	fcall	_printToLCD
  3256                           
  3257                           ;temp_module.h: 52: }
  3258  1309  0008               	return
  3259  130A                     l3374:	
  3260                           
  3261                           ;temp_module.h: 53: else if (handler == 0)
  3262  130A  1283               	bcf	3,5	;RP0=0, select bank0
  3263  130B  1303               	bcf	3,6	;RP1=0, select bank0
  3264  130C  08A4               	movf	printStatusTMP@handler,f
  3265  130D  1D03               	skipz
  3266  130E  0008               	return
  3267                           
  3268                           ;temp_module.h: 54: {
  3269                           ;temp_module.h: 55: printToLCD("FAN OFF");
  3270  130F  30FC               	movlw	low (STR_21| (0+32768))
  3271  1310  00A2               	movwf	printToLCD@str
  3272  1311  3088               	movlw	high (STR_21| (0+32768))
  3273  1312  00A3               	movwf	printToLCD@str+1
  3274  1313  160A  118A  2455   	fcall	_printToLCD
  3275  1316  0008               	return
  3276  1317                     __end_of_printStatusTMP:	
  3277                           
  3278                           	psect	text8
  3279  12DF                     __ptext8:	
  3280 ;; *************** function _printStatusPPM *****************
  3281 ;; Defined at:
  3282 ;;		line 70 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\mq135_module.h"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;  handler         1    wreg     unsigned char 
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;  handler         1    4[BANK0 ] unsigned char 
  3287 ;; Return value:  Size  Location     Type
  3288 ;;		None               void
  3289 ;; Registers used:
  3290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3296 ;;      Params:         0       0       0       0       0
  3297 ;;      Locals:         0       1       0       0       0
  3298 ;;      Temps:          0       0       0       0       0
  3299 ;;      Totals:         0       1       0       0       0
  3300 ;;Total ram usage:        1 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    4
  3303 ;; This function calls:
  3304 ;;		_printToLCD
  3305 ;; This function is called by:
  3306 ;;		_updateState
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           
  3311                           ;psect for function _printStatusPPM
  3312  12DF                     _printStatusPPM:	
  3313                           
  3314                           ;incstack = 0
  3315                           ; Regs used in _printStatusPPM: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3316                           ;printStatusPPM@handler stored from wreg
  3317  12DF  1283               	bcf	3,5	;RP0=0, select bank0
  3318  12E0  1303               	bcf	3,6	;RP1=0, select bank0
  3319  12E1  00A4               	movwf	printStatusPPM@handler
  3320                           
  3321                           ;mq135_module.h: 72: if (handler == 1)
  3322  12E2  0824               	movf	printStatusPPM@handler,w
  3323  12E3  3A01               	xorlw	1
  3324  12E4  1D03               	skipz
  3325  12E5  2AEE               	goto	l3228
  3326                           
  3327                           ;mq135_module.h: 73: {
  3328                           ;mq135_module.h: 74: printToLCD("PURF HI");
  3329  12E6  3004               	movlw	low (STR_4| (0+32768))
  3330  12E7  00A2               	movwf	printToLCD@str
  3331  12E8  3089               	movlw	high (STR_4| (0+32768))
  3332  12E9  00A3               	movwf	printToLCD@str+1
  3333  12EA  160A  118A  2455   	fcall	_printToLCD
  3334                           
  3335                           ;mq135_module.h: 75: }
  3336  12ED  0008               	return
  3337  12EE                     l3228:	
  3338                           
  3339                           ;mq135_module.h: 76: else if (handler == 0)
  3340  12EE  1283               	bcf	3,5	;RP0=0, select bank0
  3341  12EF  1303               	bcf	3,6	;RP1=0, select bank0
  3342  12F0  08A4               	movf	printStatusPPM@handler,f
  3343  12F1  1D03               	skipz
  3344  12F2  0008               	return
  3345                           
  3346                           ;mq135_module.h: 77: {
  3347                           ;mq135_module.h: 78: printToLCD("PURF LO");
  3348  12F3  300C               	movlw	low (STR_5| (0+32768))
  3349  12F4  00A2               	movwf	printToLCD@str
  3350  12F5  3089               	movlw	high (STR_5| (0+32768))
  3351  12F6  00A3               	movwf	printToLCD@str+1
  3352  12F7  160A  118A  2455   	fcall	_printToLCD
  3353  12FA  0008               	return
  3354  12FB                     __end_of_printStatusPPM:	
  3355                           
  3356                           	psect	text9
  3357  13BE                     __ptext9:	
  3358 ;; *************** function _displayTime *****************
  3359 ;; Defined at:
  3360 ;;		line 49 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\time_scheduler.h
      +"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;		None
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;  timeFormat     16   46[BANK0 ] unsigned char [16]
  3365 ;; Return value:  Size  Location     Type
  3366 ;;		None               void
  3367 ;; Registers used:
  3368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3374 ;;      Params:         0       0       0       0       0
  3375 ;;      Locals:         0      16       0       0       0
  3376 ;;      Temps:          0       4       0       0       0
  3377 ;;      Totals:         0      20       0       0       0
  3378 ;;Total ram usage:       20 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    4
  3381 ;; This function calls:
  3382 ;;		_printToLCD
  3383 ;;		_sprintf
  3384 ;; This function is called by:
  3385 ;;		_updateState
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           
  3390                           ;psect for function _displayTime
  3391  13BE                     _displayTime:	
  3392                           
  3393                           ;time_scheduler.h: 51: char timeFormat[16];
  3394                           ;time_scheduler.h: 52: sprintf(timeFormat, "Time: %02d:%02d", hours, minutes);
  3395                           
  3396                           ;incstack = 0
  3397                           ; Regs used in _displayTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3398  13BE  303F               	movlw	low (STR_6| (0+32768))
  3399  13BF  1283               	bcf	3,5	;RP0=0, select bank0
  3400  13C0  1303               	bcf	3,6	;RP1=0, select bank0
  3401  13C1  00B4               	movwf	sprintf@f
  3402  13C2  3088               	movlw	high (STR_6| (0+32768))
  3403  13C3  00B5               	movwf	sprintf@f+1
  3404  13C4  087C               	movf	_hours,w	;volatile
  3405  13C5  00CA               	movwf	??_displayTime
  3406  13C6  01CB               	clrf	??_displayTime+1
  3407  13C7  084A               	movf	??_displayTime,w
  3408  13C8  00B6               	movwf	?_sprintf+2
  3409  13C9  084B               	movf	??_displayTime+1,w
  3410  13CA  00B7               	movwf	?_sprintf+3
  3411  13CB  087B               	movf	_minutes,w	;volatile
  3412  13CC  00CC               	movwf	??_displayTime+2
  3413  13CD  01CD               	clrf	??_displayTime+3
  3414  13CE  084C               	movf	??_displayTime+2,w
  3415  13CF  00B8               	movwf	?_sprintf+4
  3416  13D0  084D               	movf	??_displayTime+3,w
  3417  13D1  00B9               	movwf	?_sprintf+5
  3418  13D2  304E               	movlw	displayTime@timeFormat& (0+255)
  3419  13D3  120A  118A  23F4  160A  118A  	fcall	_sprintf
  3420                           
  3421                           ;time_scheduler.h: 53: printToLCD(timeFormat);
  3422  13D8  304E               	movlw	displayTime@timeFormat& (0+255)
  3423  13D9  1283               	bcf	3,5	;RP0=0, select bank0
  3424  13DA  1303               	bcf	3,6	;RP1=0, select bank0
  3425  13DB  00A2               	movwf	printToLCD@str
  3426  13DC  3000               	movlw	0
  3427  13DD  00A3               	movwf	printToLCD@str+1
  3428  13DE  160A  118A  2455   	fcall	_printToLCD
  3429  13E1  0008               	return
  3430  13E2                     __end_of_displayTime:	
  3431                           
  3432                           	psect	text10
  3433  0ED7                     __ptext10:	
  3434 ;; *************** function _displayPPM *****************
  3435 ;; Defined at:
  3436 ;;		line 37 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\mq135_module.h"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;  strBuffer      20    0[BANK1 ] unsigned char [20]
  3441 ;;  ppmFraction     2   22[BANK1 ] int 
  3442 ;;  ppmWhole        2   20[BANK1 ] int 
  3443 ;;  bufPtr          1   24[BANK1 ] PTR unsigned char 
  3444 ;;		 -> displayPPM@strBuffer(20), 
  3445 ;; Return value:  Size  Location     Type
  3446 ;;		None               void
  3447 ;; Registers used:
  3448 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 0/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3454 ;;      Params:         0       0       0       0       0
  3455 ;;      Locals:         0       0      25       0       0
  3456 ;;      Temps:          0       1       0       0       0
  3457 ;;      Totals:         0       1      25       0       0
  3458 ;;Total ram usage:       26 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    4
  3461 ;; This function calls:
  3462 ;;		___awtoft
  3463 ;;		___ftadd
  3464 ;;		___ftmul
  3465 ;;		___ftneg
  3466 ;;		___fttol
  3467 ;;		_printToLCD
  3468 ;;		_sprintf
  3469 ;; This function is called by:
  3470 ;;		_updateState
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           
  3475                           ;psect for function _displayPPM
  3476  0ED7                     _displayPPM:	
  3477                           
  3478                           ;mq135_module.h: 39: char strBuffer[20];
  3479                           ;mq135_module.h: 40: int ppmWhole = (int)PPM;
  3480                           
  3481                           ;incstack = 0
  3482                           ; Regs used in _displayPPM: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3483  0ED7  1683               	bsf	3,5	;RP0=1, select bank1
  3484  0ED8  1303               	bcf	3,6	;RP1=0, select bank1
  3485  0ED9  084A               	movf	_PPM^(0+128),w	;volatile
  3486  0EDA  1283               	bcf	3,5	;RP0=0, select bank0
  3487  0EDB  1303               	bcf	3,6	;RP1=0, select bank0
  3488  0EDC  00CE               	movwf	___fttol@f1
  3489  0EDD  1683               	bsf	3,5	;RP0=1, select bank1
  3490  0EDE  1303               	bcf	3,6	;RP1=0, select bank1
  3491  0EDF  084B               	movf	(_PPM+1)^(0+128),w	;volatile
  3492  0EE0  1283               	bcf	3,5	;RP0=0, select bank0
  3493  0EE1  1303               	bcf	3,6	;RP1=0, select bank0
  3494  0EE2  00CF               	movwf	___fttol@f1+1
  3495  0EE3  1683               	bsf	3,5	;RP0=1, select bank1
  3496  0EE4  1303               	bcf	3,6	;RP1=0, select bank1
  3497  0EE5  084C               	movf	(_PPM+2)^(0+128),w	;volatile
  3498  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  3499  0EE7  1303               	bcf	3,6	;RP1=0, select bank0
  3500  0EE8  00D0               	movwf	___fttol@f1+2
  3501  0EE9  160A  118A  2772  120A  158A  	fcall	___fttol
  3502  0EEE  1283               	bcf	3,5	;RP0=0, select bank0
  3503  0EEF  1303               	bcf	3,6	;RP1=0, select bank0
  3504  0EF0  084F               	movf	?___fttol+1,w
  3505  0EF1  1683               	bsf	3,5	;RP0=1, select bank1
  3506  0EF2  1303               	bcf	3,6	;RP1=0, select bank1
  3507  0EF3  01B5               	clrf	(displayPPM@ppmWhole+1)^(0+128)
  3508  0EF4  07B5               	addwf	(displayPPM@ppmWhole+1)^(0+128),f
  3509  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  3510  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  3511  0EF7  084E               	movf	?___fttol,w
  3512  0EF8  1683               	bsf	3,5	;RP0=1, select bank1
  3513  0EF9  1303               	bcf	3,6	;RP1=0, select bank1
  3514  0EFA  01B4               	clrf	displayPPM@ppmWhole^(0+128)
  3515  0EFB  07B4               	addwf	displayPPM@ppmWhole^(0+128),f
  3516                           
  3517                           ;mq135_module.h: 41: int ppmFraction = (int)((PPM - ppmWhole) * 100);
  3518  0EFC  0835               	movf	(displayPPM@ppmWhole+1)^(0+128),w
  3519  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  3520  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0EFF  01A9               	clrf	___awtoft@c+1
  3522  0F00  07A9               	addwf	___awtoft@c+1,f
  3523  0F01  1683               	bsf	3,5	;RP0=1, select bank1
  3524  0F02  1303               	bcf	3,6	;RP1=0, select bank1
  3525  0F03  0834               	movf	displayPPM@ppmWhole^(0+128),w
  3526  0F04  1283               	bcf	3,5	;RP0=0, select bank0
  3527  0F05  1303               	bcf	3,6	;RP1=0, select bank0
  3528  0F06  01A8               	clrf	___awtoft@c
  3529  0F07  07A8               	addwf	___awtoft@c,f
  3530  0F08  160A  118A  2407  120A  158A  	fcall	___awtoft
  3531  0F0D  1283               	bcf	3,5	;RP0=0, select bank0
  3532  0F0E  1303               	bcf	3,6	;RP1=0, select bank0
  3533  0F0F  0828               	movf	?___awtoft,w
  3534  0F10  00AE               	movwf	___ftneg@f1
  3535  0F11  0829               	movf	?___awtoft+1,w
  3536  0F12  00AF               	movwf	___ftneg@f1+1
  3537  0F13  082A               	movf	?___awtoft+2,w
  3538  0F14  00B0               	movwf	___ftneg@f1+2
  3539  0F15  160A  118A  223E  120A  158A  	fcall	___ftneg
  3540  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  3541  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  3542  0F1C  082E               	movf	?___ftneg,w
  3543  0F1D  00B4               	movwf	___ftadd@f2
  3544  0F1E  082F               	movf	?___ftneg+1,w
  3545  0F1F  00B5               	movwf	___ftadd@f2+1
  3546  0F20  0830               	movf	?___ftneg+2,w
  3547  0F21  00B6               	movwf	___ftadd@f2+2
  3548  0F22  1683               	bsf	3,5	;RP0=1, select bank1
  3549  0F23  1303               	bcf	3,6	;RP1=0, select bank1
  3550  0F24  084A               	movf	_PPM^(0+128),w	;volatile
  3551  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  3552  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  3553  0F27  00B1               	movwf	___ftadd@f1
  3554  0F28  1683               	bsf	3,5	;RP0=1, select bank1
  3555  0F29  1303               	bcf	3,6	;RP1=0, select bank1
  3556  0F2A  084B               	movf	(_PPM+1)^(0+128),w	;volatile
  3557  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  3558  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  3559  0F2D  00B2               	movwf	___ftadd@f1+1
  3560  0F2E  1683               	bsf	3,5	;RP0=1, select bank1
  3561  0F2F  1303               	bcf	3,6	;RP1=0, select bank1
  3562  0F30  084C               	movf	(_PPM+2)^(0+128),w	;volatile
  3563  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  3564  0F32  1303               	bcf	3,6	;RP1=0, select bank0
  3565  0F33  00B3               	movwf	___ftadd@f1+2
  3566  0F34  120A  158A  25CE  120A  158A  	fcall	___ftadd
  3567  0F39  1283               	bcf	3,5	;RP0=0, select bank0
  3568  0F3A  1303               	bcf	3,6	;RP1=0, select bank0
  3569  0F3B  0831               	movf	?___ftadd,w
  3570  0F3C  00C1               	movwf	___ftmul@f2
  3571  0F3D  0832               	movf	?___ftadd+1,w
  3572  0F3E  00C2               	movwf	___ftmul@f2+1
  3573  0F3F  0833               	movf	?___ftadd+2,w
  3574  0F40  00C3               	movwf	___ftmul@f2+2
  3575  0F41  3000               	movlw	0
  3576  0F42  00BE               	movwf	___ftmul@f1
  3577  0F43  30C8               	movlw	200
  3578  0F44  00BF               	movwf	___ftmul@f1+1
  3579  0F45  3042               	movlw	66
  3580  0F46  00C0               	movwf	___ftmul@f1+2
  3581  0F47  120A  158A  24FB  120A  158A  	fcall	___ftmul
  3582  0F4C  1283               	bcf	3,5	;RP0=0, select bank0
  3583  0F4D  1303               	bcf	3,6	;RP1=0, select bank0
  3584  0F4E  083E               	movf	?___ftmul,w
  3585  0F4F  00CE               	movwf	___fttol@f1
  3586  0F50  083F               	movf	?___ftmul+1,w
  3587  0F51  00CF               	movwf	___fttol@f1+1
  3588  0F52  0840               	movf	?___ftmul+2,w
  3589  0F53  00D0               	movwf	___fttol@f1+2
  3590  0F54  160A  118A  2772  120A  158A  	fcall	___fttol
  3591  0F59  1283               	bcf	3,5	;RP0=0, select bank0
  3592  0F5A  1303               	bcf	3,6	;RP1=0, select bank0
  3593  0F5B  084F               	movf	?___fttol+1,w
  3594  0F5C  1683               	bsf	3,5	;RP0=1, select bank1
  3595  0F5D  1303               	bcf	3,6	;RP1=0, select bank1
  3596  0F5E  01B7               	clrf	(displayPPM@ppmFraction+1)^(0+128)
  3597  0F5F  07B7               	addwf	(displayPPM@ppmFraction+1)^(0+128),f
  3598  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  3599  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  3600  0F62  084E               	movf	?___fttol,w
  3601  0F63  1683               	bsf	3,5	;RP0=1, select bank1
  3602  0F64  1303               	bcf	3,6	;RP1=0, select bank1
  3603  0F65  01B6               	clrf	displayPPM@ppmFraction^(0+128)
  3604  0F66  07B6               	addwf	displayPPM@ppmFraction^(0+128),f
  3605                           
  3606                           ;mq135_module.h: 44: char *bufPtr = strBuffer;
  3607  0F67  30A0               	movlw	displayPPM@strBuffer& (0+255)
  3608  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  3609  0F69  1303               	bcf	3,6	;RP1=0, select bank0
  3610  0F6A  00DC               	movwf	??_displayPPM
  3611  0F6B  085C               	movf	??_displayPPM,w
  3612  0F6C  1683               	bsf	3,5	;RP0=1, select bank1
  3613  0F6D  1303               	bcf	3,6	;RP1=0, select bank1
  3614  0F6E  00B8               	movwf	displayPPM@bufPtr^(0+128)
  3615                           
  3616                           ;mq135_module.h: 45: bufPtr += sprintf(bufPtr, "CO2: ");
  3617  0F6F  3022               	movlw	low (STR_1| (0+32768))
  3618  0F70  1283               	bcf	3,5	;RP0=0, select bank0
  3619  0F71  1303               	bcf	3,6	;RP1=0, select bank0
  3620  0F72  00B4               	movwf	sprintf@f
  3621  0F73  3089               	movlw	high (STR_1| (0+32768))
  3622  0F74  00B5               	movwf	sprintf@f+1
  3623  0F75  1683               	bsf	3,5	;RP0=1, select bank1
  3624  0F76  1303               	bcf	3,6	;RP1=0, select bank1
  3625  0F77  0838               	movf	displayPPM@bufPtr^(0+128),w
  3626  0F78  120A  118A  23F4  120A  158A  	fcall	_sprintf
  3627  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  3628  0F7E  1303               	bcf	3,6	;RP1=0, select bank0
  3629  0F7F  0834               	movf	?_sprintf,w
  3630  0F80  00DC               	movwf	??_displayPPM
  3631  0F81  085C               	movf	??_displayPPM,w
  3632  0F82  1683               	bsf	3,5	;RP0=1, select bank1
  3633  0F83  1303               	bcf	3,6	;RP1=0, select bank1
  3634  0F84  07B8               	addwf	displayPPM@bufPtr^(0+128),f
  3635                           
  3636                           ;mq135_module.h: 46: bufPtr += sprintf(bufPtr, "%d", ppmWhole);
  3637  0F85  302B               	movlw	low ((STR_25+3)| (0+32768))
  3638  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  3639  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  3640  0F88  00B4               	movwf	sprintf@f
  3641  0F89  3089               	movlw	high ((STR_25+3)| (0+32768))
  3642  0F8A  00B5               	movwf	sprintf@f+1
  3643  0F8B  1683               	bsf	3,5	;RP0=1, select bank1
  3644  0F8C  1303               	bcf	3,6	;RP1=0, select bank1
  3645  0F8D  0835               	movf	(displayPPM@ppmWhole+1)^(0+128),w
  3646  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  3647  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  3648  0F90  01B7               	clrf	?_sprintf+3
  3649  0F91  07B7               	addwf	?_sprintf+3,f
  3650  0F92  1683               	bsf	3,5	;RP0=1, select bank1
  3651  0F93  1303               	bcf	3,6	;RP1=0, select bank1
  3652  0F94  0834               	movf	displayPPM@ppmWhole^(0+128),w
  3653  0F95  1283               	bcf	3,5	;RP0=0, select bank0
  3654  0F96  1303               	bcf	3,6	;RP1=0, select bank0
  3655  0F97  01B6               	clrf	?_sprintf+2
  3656  0F98  07B6               	addwf	?_sprintf+2,f
  3657  0F99  1683               	bsf	3,5	;RP0=1, select bank1
  3658  0F9A  1303               	bcf	3,6	;RP1=0, select bank1
  3659  0F9B  0838               	movf	displayPPM@bufPtr^(0+128),w
  3660  0F9C  120A  118A  23F4  120A  158A  	fcall	_sprintf
  3661  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  3662  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  3663  0FA3  0834               	movf	?_sprintf,w
  3664  0FA4  00DC               	movwf	??_displayPPM
  3665  0FA5  085C               	movf	??_displayPPM,w
  3666  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  3667  0FA7  1303               	bcf	3,6	;RP1=0, select bank1
  3668  0FA8  07B8               	addwf	displayPPM@bufPtr^(0+128),f
  3669                           
  3670                           ;mq135_module.h: 47: *bufPtr++ = '.';
  3671  0FA9  302E               	movlw	46
  3672  0FAA  1283               	bcf	3,5	;RP0=0, select bank0
  3673  0FAB  1303               	bcf	3,6	;RP1=0, select bank0
  3674  0FAC  00DC               	movwf	??_displayPPM
  3675  0FAD  1683               	bsf	3,5	;RP0=1, select bank1
  3676  0FAE  1303               	bcf	3,6	;RP1=0, select bank1
  3677  0FAF  0838               	movf	displayPPM@bufPtr^(0+128),w
  3678  0FB0  0084               	movwf	4
  3679  0FB1  1283               	bcf	3,5	;RP0=0, select bank0
  3680  0FB2  1303               	bcf	3,6	;RP1=0, select bank0
  3681  0FB3  085C               	movf	??_displayPPM,w
  3682  0FB4  1383               	bcf	3,7	;select IRP bank0
  3683  0FB5  0080               	movwf	0
  3684  0FB6  3001               	movlw	1
  3685  0FB7  00DC               	movwf	??_displayPPM
  3686  0FB8  085C               	movf	??_displayPPM,w
  3687  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  3688  0FBA  1303               	bcf	3,6	;RP1=0, select bank1
  3689  0FBB  07B8               	addwf	displayPPM@bufPtr^(0+128),f
  3690                           
  3691                           ;mq135_module.h: 48: if (ppmFraction < 10)
  3692  0FBC  0837               	movf	(displayPPM@ppmFraction+1)^(0+128),w
  3693  0FBD  3A80               	xorlw	128
  3694  0FBE  00FF               	movwf	127
  3695  0FBF  3080               	movlw	128
  3696  0FC0  027F               	subwf	127,w
  3697  0FC1  1D03               	skipz
  3698  0FC2  2FC5               	goto	u4285
  3699  0FC3  300A               	movlw	10
  3700  0FC4  0236               	subwf	displayPPM@ppmFraction^(0+128),w
  3701  0FC5                     u4285:	
  3702  0FC5  1803               	skipnc
  3703  0FC6  2FDA               	goto	l3220
  3704                           
  3705                           ;mq135_module.h: 49: *bufPtr++ = '0';
  3706  0FC7  3030               	movlw	48
  3707  0FC8  1283               	bcf	3,5	;RP0=0, select bank0
  3708  0FC9  1303               	bcf	3,6	;RP1=0, select bank0
  3709  0FCA  00DC               	movwf	??_displayPPM
  3710  0FCB  1683               	bsf	3,5	;RP0=1, select bank1
  3711  0FCC  1303               	bcf	3,6	;RP1=0, select bank1
  3712  0FCD  0838               	movf	displayPPM@bufPtr^(0+128),w
  3713  0FCE  0084               	movwf	4
  3714  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  3715  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  3716  0FD1  085C               	movf	??_displayPPM,w
  3717  0FD2  1383               	bcf	3,7	;select IRP bank0
  3718  0FD3  0080               	movwf	0
  3719  0FD4  3001               	movlw	1
  3720  0FD5  00DC               	movwf	??_displayPPM
  3721  0FD6  085C               	movf	??_displayPPM,w
  3722  0FD7  1683               	bsf	3,5	;RP0=1, select bank1
  3723  0FD8  1303               	bcf	3,6	;RP1=0, select bank1
  3724  0FD9  07B8               	addwf	displayPPM@bufPtr^(0+128),f
  3725  0FDA                     l3220:	
  3726                           
  3727                           ;mq135_module.h: 50: sprintf(bufPtr, "%d ppm  ", ppmFraction);
  3728  0FDA  30EA               	movlw	low (STR_3| (0+32768))
  3729  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  3730  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
  3731  0FDD  00B4               	movwf	sprintf@f
  3732  0FDE  3088               	movlw	high (STR_3| (0+32768))
  3733  0FDF  00B5               	movwf	sprintf@f+1
  3734  0FE0  1683               	bsf	3,5	;RP0=1, select bank1
  3735  0FE1  1303               	bcf	3,6	;RP1=0, select bank1
  3736  0FE2  0837               	movf	(displayPPM@ppmFraction+1)^(0+128),w
  3737  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  3738  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  3739  0FE5  01B7               	clrf	?_sprintf+3
  3740  0FE6  07B7               	addwf	?_sprintf+3,f
  3741  0FE7  1683               	bsf	3,5	;RP0=1, select bank1
  3742  0FE8  1303               	bcf	3,6	;RP1=0, select bank1
  3743  0FE9  0836               	movf	displayPPM@ppmFraction^(0+128),w
  3744  0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  3745  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  3746  0FEC  01B6               	clrf	?_sprintf+2
  3747  0FED  07B6               	addwf	?_sprintf+2,f
  3748  0FEE  1683               	bsf	3,5	;RP0=1, select bank1
  3749  0FEF  1303               	bcf	3,6	;RP1=0, select bank1
  3750  0FF0  0838               	movf	displayPPM@bufPtr^(0+128),w
  3751  0FF1  120A  118A  23F4  120A  158A  	fcall	_sprintf
  3752                           
  3753                           ;mq135_module.h: 51: printToLCD(strBuffer);
  3754  0FF6  30A0               	movlw	displayPPM@strBuffer& (0+255)
  3755  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  3756  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  3757  0FF9  00A2               	movwf	printToLCD@str
  3758  0FFA  3000               	movlw	0
  3759  0FFB  00A3               	movwf	printToLCD@str+1
  3760  0FFC  160A  118A  2455   	fcall	_printToLCD
  3761  0FFF  0008               	return
  3762  1000                     __end_of_displayPPM:	
  3763                           
  3764                           	psect	text11
  3765  1772                     __ptext11:	
  3766 ;; *************** function ___fttol *****************
  3767 ;; Defined at:
  3768 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;  f1              3   46[BANK0 ] float 
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;  lval            4   55[BANK0 ] unsigned long 
  3773 ;;  exp1            1   59[BANK0 ] unsigned char 
  3774 ;;  sign1           1   54[BANK0 ] unsigned char 
  3775 ;; Return value:  Size  Location     Type
  3776 ;;                  4   46[BANK0 ] long 
  3777 ;; Registers used:
  3778 ;;		wreg, status,2, status,0
  3779 ;; Tracked objects:
  3780 ;;		On entry : 0/0
  3781 ;;		On exit  : 0/0
  3782 ;;		Unchanged: 0/0
  3783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3784 ;;      Params:         0       4       0       0       0
  3785 ;;      Locals:         0       6       0       0       0
  3786 ;;      Temps:          0       4       0       0       0
  3787 ;;      Totals:         0      14       0       0       0
  3788 ;;Total ram usage:       14 bytes
  3789 ;; Hardware stack levels used:    1
  3790 ;; Hardware stack levels required when called:    2
  3791 ;; This function calls:
  3792 ;;		Nothing
  3793 ;; This function is called by:
  3794 ;;		_displayPPM
  3795 ;; This function uses a non-reentrant model
  3796 ;;
  3797                           
  3798                           
  3799                           ;psect for function ___fttol
  3800  1772                     ___fttol:	
  3801                           
  3802                           ;incstack = 0
  3803                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3804  1772  1283               	bcf	3,5	;RP0=0, select bank0
  3805  1773  1303               	bcf	3,6	;RP1=0, select bank0
  3806  1774  084E               	movf	___fttol@f1,w
  3807  1775  00D2               	movwf	??___fttol
  3808  1776  084F               	movf	___fttol@f1+1,w
  3809  1777  00D3               	movwf	??___fttol+1
  3810  1778  0850               	movf	___fttol@f1+2,w
  3811  1779  00D4               	movwf	??___fttol+2
  3812  177A  1003               	clrc
  3813  177B  0D53               	rlf	??___fttol+1,w
  3814  177C  0D54               	rlf	??___fttol+2,w
  3815  177D  00D5               	movwf	??___fttol+3
  3816  177E  0855               	movf	??___fttol+3,w
  3817  177F  00DB               	movwf	___fttol@exp1
  3818  1780  08DB               	movf	___fttol@exp1,f
  3819  1781  1D03               	skipz
  3820  1782  2F8C               	goto	l2452
  3821  1783  3000               	movlw	0
  3822  1784  00D1               	movwf	?___fttol+3
  3823  1785  3000               	movlw	0
  3824  1786  00D0               	movwf	?___fttol+2
  3825  1787  3000               	movlw	0
  3826  1788  00CF               	movwf	?___fttol+1
  3827  1789  3000               	movlw	0
  3828  178A  00CE               	movwf	?___fttol
  3829  178B  0008               	return
  3830  178C                     l2452:	
  3831  178C  084E               	movf	___fttol@f1,w
  3832  178D  00D2               	movwf	??___fttol
  3833  178E  084F               	movf	___fttol@f1+1,w
  3834  178F  00D3               	movwf	??___fttol+1
  3835  1790  0850               	movf	___fttol@f1+2,w
  3836  1791  00D4               	movwf	??___fttol+2
  3837  1792  3017               	movlw	23
  3838  1793                     u3095:	
  3839  1793  1003               	clrc
  3840  1794  0CD4               	rrf	??___fttol+2,f
  3841  1795  0CD3               	rrf	??___fttol+1,f
  3842  1796  0CD2               	rrf	??___fttol,f
  3843  1797  3EFF               	addlw	-1
  3844  1798  1D03               	skipz
  3845  1799  2F93               	goto	u3095
  3846  179A  0852               	movf	??___fttol,w
  3847  179B  00D5               	movwf	??___fttol+3
  3848  179C  0855               	movf	??___fttol+3,w
  3849  179D  00D6               	movwf	___fttol@sign1
  3850  179E  17CF               	bsf	___fttol@f1+1,7
  3851  179F  30FF               	movlw	255
  3852  17A0  05CE               	andwf	___fttol@f1,f
  3853  17A1  30FF               	movlw	255
  3854  17A2  05CF               	andwf	___fttol@f1+1,f
  3855  17A3  3000               	movlw	0
  3856  17A4  05D0               	andwf	___fttol@f1+2,f
  3857  17A5  084E               	movf	___fttol@f1,w
  3858  17A6  00D7               	movwf	___fttol@lval
  3859  17A7  084F               	movf	___fttol@f1+1,w
  3860  17A8  00D8               	movwf	___fttol@lval+1
  3861  17A9  0850               	movf	___fttol@f1+2,w
  3862  17AA  00D9               	movwf	___fttol@lval+2
  3863  17AB  01DA               	clrf	___fttol@lval+3
  3864  17AC  308E               	movlw	142
  3865  17AD  02DB               	subwf	___fttol@exp1,f
  3866  17AE  1FDB               	btfss	___fttol@exp1,7
  3867  17AF  2FCE               	goto	l2472
  3868  17B0  085B               	movf	___fttol@exp1,w
  3869  17B1  3A80               	xorlw	128
  3870  17B2  3E8F               	addlw	143
  3871  17B3  1803               	skipnc
  3872  17B4  2FBE               	goto	l2470
  3873  17B5  3000               	movlw	0
  3874  17B6  00D1               	movwf	?___fttol+3
  3875  17B7  3000               	movlw	0
  3876  17B8  00D0               	movwf	?___fttol+2
  3877  17B9  3000               	movlw	0
  3878  17BA  00CF               	movwf	?___fttol+1
  3879  17BB  3000               	movlw	0
  3880  17BC  00CE               	movwf	?___fttol
  3881  17BD  0008               	return
  3882  17BE                     l2470:	
  3883  17BE  3001               	movlw	1
  3884  17BF                     u3125:	
  3885  17BF  1003               	clrc
  3886  17C0  0CDA               	rrf	___fttol@lval+3,f
  3887  17C1  0CD9               	rrf	___fttol@lval+2,f
  3888  17C2  0CD8               	rrf	___fttol@lval+1,f
  3889  17C3  0CD7               	rrf	___fttol@lval,f
  3890  17C4  3EFF               	addlw	-1
  3891  17C5  1D03               	skipz
  3892  17C6  2FBF               	goto	u3125
  3893  17C7  3001               	movlw	1
  3894  17C8  00D2               	movwf	??___fttol
  3895  17C9  0852               	movf	??___fttol,w
  3896  17CA  07DB               	addwf	___fttol@exp1,f
  3897  17CB  1903               	btfsc	3,2
  3898  17CC  2FE9               	goto	l2482
  3899  17CD  2FBE               	goto	l2470
  3900  17CE                     l2472:	
  3901  17CE  3018               	movlw	24
  3902  17CF  025B               	subwf	___fttol@exp1,w
  3903  17D0  1C03               	skipc
  3904  17D1  2FE6               	goto	l2480
  3905  17D2  3000               	movlw	0
  3906  17D3  00D1               	movwf	?___fttol+3
  3907  17D4  3000               	movlw	0
  3908  17D5  00D0               	movwf	?___fttol+2
  3909  17D6  3000               	movlw	0
  3910  17D7  00CF               	movwf	?___fttol+1
  3911  17D8  3000               	movlw	0
  3912  17D9  00CE               	movwf	?___fttol
  3913  17DA  0008               	return
  3914  17DB                     l2478:	
  3915  17DB  3001               	movlw	1
  3916  17DC  00D2               	movwf	??___fttol
  3917  17DD                     u3155:	
  3918  17DD  1003               	clrc
  3919  17DE  0DD7               	rlf	___fttol@lval,f
  3920  17DF  0DD8               	rlf	___fttol@lval+1,f
  3921  17E0  0DD9               	rlf	___fttol@lval+2,f
  3922  17E1  0DDA               	rlf	___fttol@lval+3,f
  3923  17E2  0BD2               	decfsz	??___fttol,f
  3924  17E3  2FDD               	goto	u3155
  3925  17E4  3001               	movlw	1
  3926  17E5  02DB               	subwf	___fttol@exp1,f
  3927  17E6                     l2480:	
  3928  17E6  08DB               	movf	___fttol@exp1,f
  3929  17E7  1D03               	skipz
  3930  17E8  2FDB               	goto	l2478
  3931  17E9                     l2482:	
  3932  17E9  0856               	movf	___fttol@sign1,w
  3933  17EA  1903               	btfsc	3,2
  3934  17EB  2FF7               	goto	l2486
  3935  17EC  09D7               	comf	___fttol@lval,f
  3936  17ED  09D8               	comf	___fttol@lval+1,f
  3937  17EE  09D9               	comf	___fttol@lval+2,f
  3938  17EF  09DA               	comf	___fttol@lval+3,f
  3939  17F0  0AD7               	incf	___fttol@lval,f
  3940  17F1  1903               	skipnz
  3941  17F2  0AD8               	incf	___fttol@lval+1,f
  3942  17F3  1903               	skipnz
  3943  17F4  0AD9               	incf	___fttol@lval+2,f
  3944  17F5  1903               	skipnz
  3945  17F6  0ADA               	incf	___fttol@lval+3,f
  3946  17F7                     l2486:	
  3947  17F7  085A               	movf	___fttol@lval+3,w
  3948  17F8  00D1               	movwf	?___fttol+3
  3949  17F9  0859               	movf	___fttol@lval+2,w
  3950  17FA  00D0               	movwf	?___fttol+2
  3951  17FB  0858               	movf	___fttol@lval+1,w
  3952  17FC  00CF               	movwf	?___fttol+1
  3953  17FD  0857               	movf	___fttol@lval,w
  3954  17FE  00CE               	movwf	?___fttol
  3955  17FF  0008               	return
  3956  1800                     __end_of___fttol:	
  3957                           
  3958                           	psect	text12
  3959  123E                     __ptext12:	
  3960 ;; *************** function ___ftneg *****************
  3961 ;; Defined at:
  3962 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;  f1              3   14[BANK0 ] float 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;		None
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  3   14[BANK0 ] float 
  3969 ;; Registers used:
  3970 ;;		wreg
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3976 ;;      Params:         0       3       0       0       0
  3977 ;;      Locals:         0       0       0       0       0
  3978 ;;      Temps:          0       0       0       0       0
  3979 ;;      Totals:         0       3       0       0       0
  3980 ;;Total ram usage:        3 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    2
  3983 ;; This function calls:
  3984 ;;		Nothing
  3985 ;; This function is called by:
  3986 ;;		_displayPPM
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           
  3991                           ;psect for function ___ftneg
  3992  123E                     ___ftneg:	
  3993                           
  3994                           ;incstack = 0
  3995                           ; Regs used in ___ftneg: [wreg]
  3996  123E  1283               	bcf	3,5	;RP0=0, select bank0
  3997  123F  1303               	bcf	3,6	;RP1=0, select bank0
  3998  1240  0830               	movf	___ftneg@f1+2,w
  3999  1241  042F               	iorwf	___ftneg@f1+1,w
  4000  1242  042E               	iorwf	___ftneg@f1,w
  4001  1243  1903               	skipnz
  4002  1244  0008               	return
  4003  1245  3080               	movlw	128
  4004  1246  06B0               	xorwf	___ftneg@f1+2,f
  4005  1247  0008               	return
  4006  1248                     __end_of___ftneg:	
  4007                           
  4008                           	psect	text13
  4009  078F                     __ptext13:	
  4010 ;; *************** function _displayDHT11Stat *****************
  4011 ;; Defined at:
  4012 ;;		line 57 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\dht11_module.h"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;		None
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;  buffer         20   46[BANK0 ] unsigned char [20]
  4017 ;; Return value:  Size  Location     Type
  4018 ;;		None               void
  4019 ;; Registers used:
  4020 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4026 ;;      Params:         0       0       0       0       0
  4027 ;;      Locals:         0      20       0       0       0
  4028 ;;      Temps:          0       4       0       0       0
  4029 ;;      Totals:         0      24       0       0       0
  4030 ;;Total ram usage:       24 bytes
  4031 ;; Hardware stack levels used:    1
  4032 ;; Hardware stack levels required when called:    4
  4033 ;; This function calls:
  4034 ;;		_instCTRL
  4035 ;;		_printToLCD
  4036 ;;		_sprintf
  4037 ;; This function is called by:
  4038 ;;		_updateState
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           
  4043                           ;psect for function _displayDHT11Stat
  4044  078F                     _displayDHT11Stat:	
  4045                           
  4046                           ;dht11_module.h: 59: char buffer[20];
  4047                           ;dht11_module.h: 60: printToLCD(message1);
  4048                           
  4049                           ;incstack = 0
  4050                           ; Regs used in _displayDHT11Stat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4051  078F  30E8               	movlw	_message1& (0+255)
  4052  0790  1283               	bcf	3,5	;RP0=0, select bank0
  4053  0791  1303               	bcf	3,6	;RP1=0, select bank0
  4054  0792  00A2               	movwf	printToLCD@str
  4055  0793  3000               	movlw	0
  4056  0794  00A3               	movwf	printToLCD@str+1
  4057  0795  160A  118A  2455  120A  118A  	fcall	_printToLCD
  4058                           
  4059                           ;dht11_module.h: 61: sprintf(buffer, "%d.%d", T_byte1, T_byte2);
  4060  079A  3028               	movlw	low (STR_25| (0+32768))
  4061  079B  1283               	bcf	3,5	;RP0=0, select bank0
  4062  079C  1303               	bcf	3,6	;RP1=0, select bank0
  4063  079D  00B4               	movwf	sprintf@f
  4064  079E  3089               	movlw	high (STR_25| (0+32768))
  4065  079F  00B5               	movwf	sprintf@f+1
  4066  07A0  0877               	movf	_T_byte1,w
  4067  07A1  00CA               	movwf	??_displayDHT11Stat
  4068  07A2  01CB               	clrf	??_displayDHT11Stat+1
  4069  07A3  084A               	movf	??_displayDHT11Stat,w
  4070  07A4  00B6               	movwf	?_sprintf+2
  4071  07A5  084B               	movf	??_displayDHT11Stat+1,w
  4072  07A6  00B7               	movwf	?_sprintf+3
  4073  07A7  0878               	movf	_T_byte2,w
  4074  07A8  00CC               	movwf	??_displayDHT11Stat+2
  4075  07A9  01CD               	clrf	??_displayDHT11Stat+3
  4076  07AA  084C               	movf	??_displayDHT11Stat+2,w
  4077  07AB  00B8               	movwf	?_sprintf+4
  4078  07AC  084D               	movf	??_displayDHT11Stat+3,w
  4079  07AD  00B9               	movwf	?_sprintf+5
  4080  07AE  304E               	movlw	displayDHT11Stat@buffer& (0+255)
  4081  07AF  120A  118A  23F4  120A  118A  	fcall	_sprintf
  4082                           
  4083                           ;dht11_module.h: 62: printToLCD(buffer);
  4084  07B4  304E               	movlw	displayDHT11Stat@buffer& (0+255)
  4085  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  4086  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  4087  07B7  00A2               	movwf	printToLCD@str
  4088  07B8  3000               	movlw	0
  4089  07B9  00A3               	movwf	printToLCD@str+1
  4090  07BA  160A  118A  2455  120A  118A  	fcall	_printToLCD
  4091                           
  4092                           ;dht11_module.h: 63: instCTRL(0xD4);
  4093  07BF  30D4               	movlw	212
  4094  07C0  160A  118A  2288  120A  118A  	fcall	_instCTRL
  4095                           
  4096                           ;dht11_module.h: 64: printToLCD(message2);
  4097  07C5  3090               	movlw	_message2& (0+255)
  4098  07C6  1283               	bcf	3,5	;RP0=0, select bank0
  4099  07C7  1303               	bcf	3,6	;RP1=0, select bank0
  4100  07C8  00A2               	movwf	printToLCD@str
  4101  07C9  3001               	movlw	1
  4102  07CA  00A3               	movwf	printToLCD@str+1
  4103  07CB  160A  118A  2455  120A  118A  	fcall	_printToLCD
  4104                           
  4105                           ;dht11_module.h: 65: sprintf(buffer, "%d.%d", RH_byte1, RH_byte2);
  4106  07D0  3028               	movlw	low (STR_25| (0+32768))
  4107  07D1  1283               	bcf	3,5	;RP0=0, select bank0
  4108  07D2  1303               	bcf	3,6	;RP1=0, select bank0
  4109  07D3  00B4               	movwf	sprintf@f
  4110  07D4  3089               	movlw	high (STR_25| (0+32768))
  4111  07D5  00B5               	movwf	sprintf@f+1
  4112  07D6  1683               	bsf	3,5	;RP0=1, select bank1
  4113  07D7  1303               	bcf	3,6	;RP1=0, select bank1
  4114  07D8  0852               	movf	_RH_byte1^(0+128),w
  4115  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  4116  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  4117  07DB  00CA               	movwf	??_displayDHT11Stat
  4118  07DC  01CB               	clrf	??_displayDHT11Stat+1
  4119  07DD  084A               	movf	??_displayDHT11Stat,w
  4120  07DE  00B6               	movwf	?_sprintf+2
  4121  07DF  084B               	movf	??_displayDHT11Stat+1,w
  4122  07E0  00B7               	movwf	?_sprintf+3
  4123  07E1  1683               	bsf	3,5	;RP0=1, select bank1
  4124  07E2  1303               	bcf	3,6	;RP1=0, select bank1
  4125  07E3  0853               	movf	_RH_byte2^(0+128),w
  4126  07E4  1283               	bcf	3,5	;RP0=0, select bank0
  4127  07E5  1303               	bcf	3,6	;RP1=0, select bank0
  4128  07E6  00CC               	movwf	??_displayDHT11Stat+2
  4129  07E7  01CD               	clrf	??_displayDHT11Stat+3
  4130  07E8  084C               	movf	??_displayDHT11Stat+2,w
  4131  07E9  00B8               	movwf	?_sprintf+4
  4132  07EA  084D               	movf	??_displayDHT11Stat+3,w
  4133  07EB  00B9               	movwf	?_sprintf+5
  4134  07EC  304E               	movlw	displayDHT11Stat@buffer& (0+255)
  4135  07ED  120A  118A  23F4  120A  118A  	fcall	_sprintf
  4136                           
  4137                           ;dht11_module.h: 66: printToLCD(buffer);
  4138  07F2  304E               	movlw	displayDHT11Stat@buffer& (0+255)
  4139  07F3  1283               	bcf	3,5	;RP0=0, select bank0
  4140  07F4  1303               	bcf	3,6	;RP1=0, select bank0
  4141  07F5  00A2               	movwf	printToLCD@str
  4142  07F6  3000               	movlw	0
  4143  07F7  00A3               	movwf	printToLCD@str+1
  4144  07F8  160A  118A  2455   	fcall	_printToLCD
  4145  07FB  0008               	return
  4146  07FC                     __end_of_displayDHT11Stat:	
  4147                           
  4148                           	psect	text14
  4149  03F4                     __ptext14:	
  4150 ;; *************** function _sprintf *****************
  4151 ;; Defined at:
  4152 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;  sp              1    wreg     PTR unsigned char 
  4155 ;;		 -> updateState@buffer(10), displayDHT11Stat@buffer(20), displayTemp@buffer(20), debugInfo(10), 
  4156 ;;		 -> displayTime@timeFormat(16), displayPPM@strBuffer(20), 
  4157 ;;  f               2   20[BANK0 ] PTR const unsigned char 
  4158 ;;		 -> STR_31(13), STR_30(14), STR_26(6), STR_25(6), 
  4159 ;;		 -> STR_19(11), STR_18(10), STR_17(10), STR_16(10), 
  4160 ;;		 -> STR_15(10), STR_14(10), STR_13(10), STR_12(10), 
  4161 ;;		 -> STR_11(10), STR_10(10), STR_9(10), STR_8(10), 
  4162 ;;		 -> STR_7(10), STR_6(16), STR_3(9), STR_2(3), 
  4163 ;;		 -> STR_1(6), 
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;  sp              1   41[BANK0 ] PTR unsigned char 
  4166 ;;		 -> updateState@buffer(10), displayDHT11Stat@buffer(20), displayTemp@buffer(20), debugInfo(10), 
  4167 ;;		 -> displayTime@timeFormat(16), displayPPM@strBuffer(20), 
  4168 ;;  _val            4   33[BANK0 ] struct .
  4169 ;;  width           2   38[BANK0 ] int 
  4170 ;;  ccnt            2   31[BANK0 ] int 
  4171 ;;  c               1   40[BANK0 ] char 
  4172 ;;  flag            1   37[BANK0 ] unsigned char 
  4173 ;;  prec            1   30[BANK0 ] char 
  4174 ;;  ap              1   29[BANK0 ] PTR void [1]
  4175 ;;		 -> ?_sprintf(2), 
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  2   20[BANK0 ] int 
  4178 ;; Registers used:
  4179 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4185 ;;      Params:         0       6       0       0       0
  4186 ;;      Locals:         0      13       0       0       0
  4187 ;;      Temps:          0       3       0       0       0
  4188 ;;      Totals:         0      22       0       0       0
  4189 ;;Total ram usage:       22 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    3
  4192 ;; This function calls:
  4193 ;;		___lwdiv
  4194 ;;		___lwmod
  4195 ;;		___wmul
  4196 ;;		_isdigit
  4197 ;; This function is called by:
  4198 ;;		_displayPPM
  4199 ;;		_displayTime
  4200 ;;		_setHoursStart
  4201 ;;		_setHoursEnd
  4202 ;;		_setMinutesStart
  4203 ;;		_setMinutesEnd
  4204 ;;		_displayDHT11Stat
  4205 ;;		_updateState
  4206 ;;		_displayTemp
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           
  4211                           ;psect for function _sprintf
  4212  03F4                     _sprintf:	
  4213                           
  4214                           ;incstack = 0
  4215                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4216                           ;sprintf@sp stored from wreg
  4217  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  4218  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  4219  03F6  00C9               	movwf	sprintf@sp
  4220                           
  4221                           ;doprnt.c: 494: va_list ap;
  4222                           ;doprnt.c: 499: signed char c;
  4223                           ;doprnt.c: 501: int width;
  4224                           ;doprnt.c: 506: signed char prec;
  4225                           ;doprnt.c: 508: unsigned char flag;
  4226                           ;doprnt.c: 510: int ccnt = 0;
  4227  03F7  01BF               	clrf	sprintf@ccnt
  4228  03F8  01C0               	clrf	sprintf@ccnt+1
  4229                           
  4230                           ;doprnt.c: 527: union {
  4231                           ;doprnt.c: 528: unsigned int _val;
  4232                           ;doprnt.c: 529: struct {
  4233                           ;doprnt.c: 530: const char * _cp;
  4234                           ;doprnt.c: 531: unsigned _len;
  4235                           ;doprnt.c: 532: } _str;
  4236                           ;doprnt.c: 533: } _val;
  4237                           ;doprnt.c: 542: *ap = __va_start();
  4238  03F9  3036               	movlw	(?_sprintf+2)& (0+255)
  4239  03FA  00BA               	movwf	??_sprintf
  4240  03FB  083A               	movf	??_sprintf,w
  4241  03FC  00BD               	movwf	sprintf@ap
  4242  03FD                     l3180:	
  4243                           ;doprnt.c: 545: while(c = *f++) {
  4244                           
  4245  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  4246  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  4247  03FF  0835               	movf	sprintf@f+1,w
  4248  0400  00BB               	movwf	??_sprintf+1
  4249  0401  0834               	movf	sprintf@f,w
  4250  0402  00BA               	movwf	??_sprintf
  4251  0403  0AB4               	incf	sprintf@f,f
  4252  0404  1903               	skipnz
  4253  0405  0AB5               	incf	sprintf@f+1,f
  4254  0406  083B               	movf	??_sprintf+1,w
  4255  0407  00FF               	movwf	127
  4256  0408  083A               	movf	??_sprintf,w
  4257  0409  0084               	movwf	4
  4258  040A  120A  158A  2000  120A  118A  	fcall	stringtab
  4259  040F  00BC               	movwf	??_sprintf+2
  4260  0410  083C               	movf	??_sprintf+2,w
  4261  0411  00C8               	movwf	sprintf@c
  4262  0412  08C8               	movf	sprintf@c,f
  4263  0413  1903               	btfsc	3,2
  4264  0414  2DE6               	goto	l3182
  4265                           
  4266                           ;doprnt.c: 547: if(c != '%')
  4267  0415  0848               	movf	sprintf@c,w
  4268  0416  3A25               	xorlw	37
  4269  0417  1903               	skipnz
  4270  0418  2C2B               	goto	l3076
  4271                           
  4272                           ;doprnt.c: 549: {
  4273                           ;doprnt.c: 550: ((*sp++ = (c)),(++ccnt));
  4274  0419  0848               	movf	sprintf@c,w
  4275  041A  00BA               	movwf	??_sprintf
  4276  041B  0849               	movf	sprintf@sp,w
  4277  041C  0084               	movwf	4
  4278  041D  083A               	movf	??_sprintf,w
  4279  041E  1383               	bcf	3,7	;select IRP bank0
  4280  041F  0080               	movwf	0
  4281  0420  3001               	movlw	1
  4282  0421  00BA               	movwf	??_sprintf
  4283  0422  083A               	movf	??_sprintf,w
  4284  0423  07C9               	addwf	sprintf@sp,f
  4285  0424  3001               	movlw	1
  4286  0425  07BF               	addwf	sprintf@ccnt,f
  4287  0426  1803               	skipnc
  4288  0427  0AC0               	incf	sprintf@ccnt+1,f
  4289  0428  3000               	movlw	0
  4290  0429  07C0               	addwf	sprintf@ccnt+1,f
  4291                           
  4292                           ;doprnt.c: 551: continue;
  4293  042A  2BFD               	goto	l3180
  4294  042B                     l3076:	
  4295                           
  4296                           ;doprnt.c: 552: }
  4297                           ;doprnt.c: 555: width = 0;
  4298  042B  01C6               	clrf	sprintf@width
  4299  042C  01C7               	clrf	sprintf@width+1
  4300                           
  4301                           ;doprnt.c: 557: flag = 0;
  4302  042D  01C5               	clrf	sprintf@flag
  4303                           
  4304                           ;doprnt.c: 560: switch(*f) {
  4305                           
  4306                           ;doprnt.c: 559: for(;;) {
  4307  042E  2C34               	goto	l3080
  4308  042F                     l377:	
  4309                           ;doprnt.c: 588: case '0':
  4310                           
  4311                           
  4312                           ;doprnt.c: 589: flag |= 0x04;
  4313  042F  1545               	bsf	sprintf@flag,2
  4314                           
  4315                           ;doprnt.c: 590: f++;
  4316  0430  3001               	movlw	1
  4317  0431  07B4               	addwf	sprintf@f,f
  4318  0432  1803               	skipnc
  4319  0433  0AB5               	incf	sprintf@f+1,f
  4320  0434                     l3080:	
  4321                           ;doprnt.c: 593: }
  4322                           
  4323                           ;doprnt.c: 591: continue;
  4324                           
  4325  0434  0835               	movf	sprintf@f+1,w
  4326  0435  00FF               	movwf	127
  4327  0436  0834               	movf	sprintf@f,w
  4328  0437  0084               	movwf	4
  4329  0438  120A  158A  2000  120A  118A  	fcall	stringtab
  4330                           
  4331                           ; Switch size 1, requested type "space"
  4332                           ; Number of cases is 1, Range of values is 48 to 48
  4333                           ; switch strategies available:
  4334                           ; Name         Instructions Cycles
  4335                           ; simple_byte            4     3 (average)
  4336                           ; direct_byte           14    11 (fixed)
  4337                           ; jumptable            263     9 (fixed)
  4338                           ;	Chosen strategy is simple_byte
  4339  043D  3A30               	xorlw	48	; case 48
  4340  043E  1903               	skipnz
  4341  043F  2C2F               	goto	l377
  4342  0440  2C41               	goto	l3082
  4343  0441                     l3082:	
  4344                           ;doprnt.c: 595: }
  4345                           
  4346                           ;doprnt.c: 594: break;
  4347                           
  4348                           
  4349                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  4350  0441  0835               	movf	sprintf@f+1,w
  4351  0442  00FF               	movwf	127
  4352  0443  0834               	movf	sprintf@f,w
  4353  0444  0084               	movwf	4
  4354  0445  120A  158A  2000  120A  118A  	fcall	stringtab
  4355  044A  160A  118A  2254  120A  118A  	fcall	_isdigit
  4356  044F  1C03               	btfss	3,0
  4357  0450  2C97               	goto	l3096
  4358                           
  4359                           ;doprnt.c: 607: width = 0;
  4360  0451  1283               	bcf	3,5	;RP0=0, select bank0
  4361  0452  1303               	bcf	3,6	;RP1=0, select bank0
  4362  0453  01C6               	clrf	sprintf@width
  4363  0454  01C7               	clrf	sprintf@width+1
  4364  0455                     l3086:	
  4365                           ;doprnt.c: 608: do {
  4366                           
  4367                           
  4368                           ;doprnt.c: 609: width *= 10;
  4369  0455  300A               	movlw	10
  4370  0456  1283               	bcf	3,5	;RP0=0, select bank0
  4371  0457  1303               	bcf	3,6	;RP1=0, select bank0
  4372  0458  00A0               	movwf	___wmul@multiplier
  4373  0459  3000               	movlw	0
  4374  045A  00A1               	movwf	___wmul@multiplier+1
  4375  045B  0847               	movf	sprintf@width+1,w
  4376  045C  01A3               	clrf	___wmul@multiplicand+1
  4377  045D  07A3               	addwf	___wmul@multiplicand+1,f
  4378  045E  0846               	movf	sprintf@width,w
  4379  045F  01A2               	clrf	___wmul@multiplicand
  4380  0460  07A2               	addwf	___wmul@multiplicand,f
  4381  0461  160A  118A  23E2  120A  118A  	fcall	___wmul
  4382  0466  1283               	bcf	3,5	;RP0=0, select bank0
  4383  0467  1303               	bcf	3,6	;RP1=0, select bank0
  4384  0468  0821               	movf	?___wmul+1,w
  4385  0469  01C7               	clrf	sprintf@width+1
  4386  046A  07C7               	addwf	sprintf@width+1,f
  4387  046B  0820               	movf	?___wmul,w
  4388  046C  01C6               	clrf	sprintf@width
  4389  046D  07C6               	addwf	sprintf@width,f
  4390                           
  4391                           ;doprnt.c: 610: width += *f++ - '0';
  4392  046E  0835               	movf	sprintf@f+1,w
  4393  046F  00FF               	movwf	127
  4394  0470  0834               	movf	sprintf@f,w
  4395  0471  0084               	movwf	4
  4396  0472  120A  158A  2000  120A  118A  	fcall	stringtab
  4397  0477  3ED0               	addlw	208
  4398  0478  00BA               	movwf	??_sprintf
  4399  0479  30FF               	movlw	255
  4400  047A  1803               	skipnc
  4401  047B  3000               	movlw	0
  4402  047C  00BB               	movwf	??_sprintf+1
  4403  047D  083A               	movf	??_sprintf,w
  4404  047E  07C6               	addwf	sprintf@width,f
  4405  047F  1803               	skipnc
  4406  0480  0AC7               	incf	sprintf@width+1,f
  4407  0481  083B               	movf	??_sprintf+1,w
  4408  0482  07C7               	addwf	sprintf@width+1,f
  4409  0483  3001               	movlw	1
  4410  0484  07B4               	addwf	sprintf@f,f
  4411  0485  1803               	skipnc
  4412  0486  0AB5               	incf	sprintf@f+1,f
  4413                           
  4414                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  4415  0487  0835               	movf	sprintf@f+1,w
  4416  0488  00FF               	movwf	127
  4417  0489  0834               	movf	sprintf@f,w
  4418  048A  0084               	movwf	4
  4419  048B  120A  158A  2000  120A  118A  	fcall	stringtab
  4420  0490  160A  118A  2254  120A  118A  	fcall	_isdigit
  4421  0495  1803               	btfsc	3,0
  4422  0496  2C55               	goto	l3086
  4423  0497                     l3096:	
  4424                           ;doprnt.c: 831: }
  4425                           
  4426                           ;doprnt.c: 822: continue;
  4427                           
  4428                           ;doprnt.c: 811: default:
  4429                           
  4430                           ;doprnt.c: 707: case 'i':
  4431                           ;doprnt.c: 708: break;
  4432                           
  4433                           ;doprnt.c: 706: case 'd':
  4434                           
  4435                           ;doprnt.c: 647: goto alldone;
  4436                           
  4437                           ;doprnt.c: 646: case 0:
  4438                           
  4439                           ;doprnt.c: 617: }
  4440                           ;doprnt.c: 644: switch(c = *f++) {
  4441                           
  4442  0497  1283               	bcf	3,5	;RP0=0, select bank0
  4443  0498  1303               	bcf	3,6	;RP1=0, select bank0
  4444  0499  0835               	movf	sprintf@f+1,w
  4445  049A  00BB               	movwf	??_sprintf+1
  4446  049B  0834               	movf	sprintf@f,w
  4447  049C  00BA               	movwf	??_sprintf
  4448  049D  0AB4               	incf	sprintf@f,f
  4449  049E  1903               	skipnz
  4450  049F  0AB5               	incf	sprintf@f+1,f
  4451  04A0  083B               	movf	??_sprintf+1,w
  4452  04A1  00FF               	movwf	127
  4453  04A2  083A               	movf	??_sprintf,w
  4454  04A3  0084               	movwf	4
  4455  04A4  120A  158A  2000  120A  118A  	fcall	stringtab
  4456  04A9  00C8               	movwf	sprintf@c
  4457                           
  4458                           ; Switch size 1, requested type "space"
  4459                           ; Number of cases is 3, Range of values is 0 to 105
  4460                           ; switch strategies available:
  4461                           ; Name         Instructions Cycles
  4462                           ; simple_byte           10     6 (average)
  4463                           ; jumptable            260     6 (fixed)
  4464                           ;	Chosen strategy is simple_byte
  4465  04AA  3A00               	xorlw	0	; case 0
  4466  04AB  1903               	skipnz
  4467  04AC  2DE6               	goto	l3182
  4468  04AD  3A64               	xorlw	100	; case 100
  4469  04AE  1903               	skipnz
  4470  04AF  2CB4               	goto	l3098
  4471  04B0  3A0D               	xorlw	13	; case 105
  4472  04B1  1903               	skipnz
  4473  04B2  2CB4               	goto	l3098
  4474  04B3  2BFD               	goto	l3180
  4475  04B4                     l3098:	
  4476                           
  4477                           ;doprnt.c: 1262: {
  4478                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4479  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  4480  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  4481  04B6  083D               	movf	sprintf@ap,w
  4482  04B7  0084               	movwf	4
  4483  04B8  1383               	bcf	3,7	;select IRP bank0
  4484  04B9  0800               	movf	0,w
  4485  04BA  00C1               	movwf	sprintf@_val
  4486  04BB  0A84               	incf	4,f
  4487  04BC  0800               	movf	0,w
  4488  04BD  00C2               	movwf	sprintf@_val+1
  4489  04BE  3002               	movlw	2
  4490  04BF  00BA               	movwf	??_sprintf
  4491  04C0  083A               	movf	??_sprintf,w
  4492  04C1  07BD               	addwf	sprintf@ap,f
  4493                           
  4494                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  4495  04C2  1FC2               	btfss	sprintf@_val+1,7
  4496  04C3  2CCD               	goto	l3108
  4497                           
  4498                           ;doprnt.c: 1271: flag |= 0x03;
  4499  04C4  3003               	movlw	3
  4500  04C5  00BA               	movwf	??_sprintf
  4501  04C6  083A               	movf	??_sprintf,w
  4502  04C7  04C5               	iorwf	sprintf@flag,f
  4503                           
  4504                           ;doprnt.c: 1272: _val._val = -_val._val;
  4505  04C8  09C1               	comf	sprintf@_val,f
  4506  04C9  09C2               	comf	sprintf@_val+1,f
  4507  04CA  0AC1               	incf	sprintf@_val,f
  4508  04CB  1903               	skipnz
  4509  04CC  0AC2               	incf	sprintf@_val+1,f
  4510  04CD                     l3108:	
  4511                           
  4512                           ;doprnt.c: 1273: }
  4513                           ;doprnt.c: 1275: }
  4514                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4515  04CD  01C8               	clrf	sprintf@c
  4516  04CE  0AC8               	incf	sprintf@c,f
  4517  04CF  0848               	movf	sprintf@c,w
  4518  04D0  3A05               	xorlw	5
  4519  04D1  1903               	btfsc	3,2
  4520  04D2  2CF8               	goto	l3120
  4521  04D3                     l3112:	
  4522                           
  4523                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4524  04D3  0848               	movf	sprintf@c,w
  4525  04D4  00BA               	movwf	??_sprintf
  4526  04D5  073A               	addwf	??_sprintf,w
  4527  04D6  3E12               	addlw	low (_dpowers| (0+32768))
  4528  04D7  0084               	movwf	4
  4529  04D8  3088               	movlw	high (_dpowers| (0+32768))
  4530  04D9  1803               	skipnc
  4531  04DA  3E01               	addlw	1
  4532  04DB  00FF               	movwf	127
  4533  04DC  120A  158A  2000  120A  118A  	fcall	stringtab
  4534  04E1  00BB               	movwf	??_sprintf+1
  4535  04E2  120A  158A  2000  120A  118A  	fcall	stringtab
  4536  04E7  00BC               	movwf	??_sprintf+2
  4537  04E8  083C               	movf	??_sprintf+2,w
  4538  04E9  0242               	subwf	sprintf@_val+1,w
  4539  04EA  1D03               	skipz
  4540  04EB  2CEE               	goto	u4135
  4541  04EC  083B               	movf	??_sprintf+1,w
  4542  04ED  0241               	subwf	sprintf@_val,w
  4543  04EE                     u4135:	
  4544  04EE  1C03               	btfss	3,0
  4545  04EF  2CF8               	goto	l3120
  4546                           
  4547                           ;doprnt.c: 1316: break;
  4548  04F0  3001               	movlw	1
  4549  04F1  00BA               	movwf	??_sprintf
  4550  04F2  083A               	movf	??_sprintf,w
  4551  04F3  07C8               	addwf	sprintf@c,f
  4552  04F4  0848               	movf	sprintf@c,w
  4553  04F5  3A05               	xorlw	5
  4554  04F6  1D03               	skipz
  4555  04F7  2CD3               	goto	l3112
  4556  04F8                     l3120:	
  4557                           
  4558                           ;doprnt.c: 1354: if(width && flag & 0x03)
  4559  04F8  0847               	movf	sprintf@width+1,w
  4560  04F9  0446               	iorwf	sprintf@width,w
  4561  04FA  1903               	skipnz
  4562  04FB  2D06               	goto	l395
  4563  04FC  0845               	movf	sprintf@flag,w
  4564  04FD  3903               	andlw	3
  4565  04FE  1903               	btfsc	3,2
  4566  04FF  2D06               	goto	l395
  4567                           
  4568                           ;doprnt.c: 1355: width--;
  4569  0500  30FF               	movlw	255
  4570  0501  07C6               	addwf	sprintf@width,f
  4571  0502  1803               	skipnc
  4572  0503  0AC7               	incf	sprintf@width+1,f
  4573  0504  30FF               	movlw	255
  4574  0505  07C7               	addwf	sprintf@width+1,f
  4575  0506                     l395:	
  4576                           
  4577                           ;doprnt.c: 1390: if(width > c)
  4578  0506  0848               	movf	sprintf@c,w
  4579  0507  00BA               	movwf	??_sprintf
  4580  0508  01BB               	clrf	??_sprintf+1
  4581  0509  1BBA               	btfsc	??_sprintf,7
  4582  050A  03BB               	decf	??_sprintf+1,f
  4583  050B  083B               	movf	??_sprintf+1,w
  4584  050C  3A80               	xorlw	128
  4585  050D  00BC               	movwf	??_sprintf+2
  4586  050E  0847               	movf	sprintf@width+1,w
  4587  050F  3A80               	xorlw	128
  4588  0510  023C               	subwf	??_sprintf+2,w
  4589  0511  1D03               	skipz
  4590  0512  2D15               	goto	u4175
  4591  0513  0846               	movf	sprintf@width,w
  4592  0514  023A               	subwf	??_sprintf,w
  4593  0515                     u4175:	
  4594  0515  1803               	skipnc
  4595  0516  2D25               	goto	l3128
  4596                           
  4597                           ;doprnt.c: 1391: width -= c;
  4598  0517  1283               	bcf	3,5	;RP0=0, select bank0
  4599  0518  1303               	bcf	3,6	;RP1=0, select bank0
  4600  0519  0848               	movf	sprintf@c,w
  4601  051A  00BA               	movwf	??_sprintf
  4602  051B  01BB               	clrf	??_sprintf+1
  4603  051C  1BBA               	btfsc	??_sprintf,7
  4604  051D  03BB               	decf	??_sprintf+1,f
  4605  051E  083A               	movf	??_sprintf,w
  4606  051F  02C6               	subwf	sprintf@width,f
  4607  0520  083B               	movf	??_sprintf+1,w
  4608  0521  1C03               	skipc
  4609  0522  03C7               	decf	sprintf@width+1,f
  4610  0523  02C7               	subwf	sprintf@width+1,f
  4611  0524  2D29               	goto	l3130
  4612  0525                     l3128:	
  4613                           
  4614                           ;doprnt.c: 1392: else
  4615                           ;doprnt.c: 1393: width = 0;
  4616  0525  1283               	bcf	3,5	;RP0=0, select bank0
  4617  0526  1303               	bcf	3,6	;RP1=0, select bank0
  4618  0527  01C6               	clrf	sprintf@width
  4619  0528  01C7               	clrf	sprintf@width+1
  4620  0529                     l3130:	
  4621                           
  4622                           ;doprnt.c: 1396: if(flag & 0x04) {
  4623  0529  1D45               	btfss	sprintf@flag,2
  4624  052A  2D5C               	goto	l3150
  4625                           
  4626                           ;doprnt.c: 1401: if(flag & 0x03)
  4627  052B  0845               	movf	sprintf@flag,w
  4628  052C  3903               	andlw	3
  4629  052D  1903               	btfsc	3,2
  4630  052E  2D40               	goto	l3140
  4631                           
  4632                           ;doprnt.c: 1402: ((*sp++ = ('-')),(++ccnt));
  4633  052F  302D               	movlw	45
  4634  0530  00BA               	movwf	??_sprintf
  4635  0531  0849               	movf	sprintf@sp,w
  4636  0532  0084               	movwf	4
  4637  0533  083A               	movf	??_sprintf,w
  4638  0534  1383               	bcf	3,7	;select IRP bank0
  4639  0535  0080               	movwf	0
  4640  0536  3001               	movlw	1
  4641  0537  00BA               	movwf	??_sprintf
  4642  0538  083A               	movf	??_sprintf,w
  4643  0539  07C9               	addwf	sprintf@sp,f
  4644  053A  3001               	movlw	1
  4645  053B  07BF               	addwf	sprintf@ccnt,f
  4646  053C  1803               	skipnc
  4647  053D  0AC0               	incf	sprintf@ccnt+1,f
  4648  053E  3000               	movlw	0
  4649  053F  07C0               	addwf	sprintf@ccnt+1,f
  4650  0540                     l3140:	
  4651                           
  4652                           ;doprnt.c: 1424: if(width)
  4653  0540  0847               	movf	sprintf@width+1,w
  4654  0541  0446               	iorwf	sprintf@width,w
  4655  0542  1903               	skipnz
  4656  0543  2D90               	goto	l3168
  4657                           
  4658                           ;doprnt.c: 1426: ((*sp++ = ('0')),(++ccnt));
  4659                           
  4660                           ;doprnt.c: 1425: do
  4661  0544  3030               	movlw	48
  4662  0545  00BA               	movwf	??_sprintf
  4663  0546  0849               	movf	sprintf@sp,w
  4664  0547  0084               	movwf	4
  4665  0548  083A               	movf	??_sprintf,w
  4666  0549  1383               	bcf	3,7	;select IRP bank0
  4667  054A  0080               	movwf	0
  4668  054B  3001               	movlw	1
  4669  054C  00BA               	movwf	??_sprintf
  4670  054D  083A               	movf	??_sprintf,w
  4671  054E  07C9               	addwf	sprintf@sp,f
  4672  054F  3001               	movlw	1
  4673  0550  07BF               	addwf	sprintf@ccnt,f
  4674  0551  1803               	skipnc
  4675  0552  0AC0               	incf	sprintf@ccnt+1,f
  4676  0553  3000               	movlw	0
  4677  0554  07C0               	addwf	sprintf@ccnt+1,f
  4678                           
  4679                           ;doprnt.c: 1427: while(--width);
  4680  0555  30FF               	movlw	255
  4681  0556  07C6               	addwf	sprintf@width,f
  4682  0557  1803               	skipnc
  4683  0558  0AC7               	incf	sprintf@width+1,f
  4684  0559  30FF               	movlw	255
  4685  055A  07C7               	addwf	sprintf@width+1,f
  4686  055B  2D40               	goto	l3140
  4687  055C                     l3150:	
  4688                           ;doprnt.c: 1429: } else
  4689                           
  4690                           
  4691                           ;doprnt.c: 1431: {
  4692                           ;doprnt.c: 1433: if(width
  4693                           ;doprnt.c: 1437: )
  4694  055C  0847               	movf	sprintf@width+1,w
  4695  055D  0446               	iorwf	sprintf@width,w
  4696  055E  1903               	skipnz
  4697  055F  2D7B               	goto	l3160
  4698  0560                     l3152:	
  4699                           ;doprnt.c: 1438: do
  4700                           
  4701                           
  4702                           ;doprnt.c: 1439: ((*sp++ = (' ')),(++ccnt));
  4703  0560  3020               	movlw	32
  4704  0561  00BA               	movwf	??_sprintf
  4705  0562  0849               	movf	sprintf@sp,w
  4706  0563  0084               	movwf	4
  4707  0564  083A               	movf	??_sprintf,w
  4708  0565  1383               	bcf	3,7	;select IRP bank0
  4709  0566  0080               	movwf	0
  4710  0567  3001               	movlw	1
  4711  0568  00BA               	movwf	??_sprintf
  4712  0569  083A               	movf	??_sprintf,w
  4713  056A  07C9               	addwf	sprintf@sp,f
  4714  056B  3001               	movlw	1
  4715  056C  07BF               	addwf	sprintf@ccnt,f
  4716  056D  1803               	skipnc
  4717  056E  0AC0               	incf	sprintf@ccnt+1,f
  4718  056F  3000               	movlw	0
  4719  0570  07C0               	addwf	sprintf@ccnt+1,f
  4720                           
  4721                           ;doprnt.c: 1440: while(--width);
  4722  0571  30FF               	movlw	255
  4723  0572  07C6               	addwf	sprintf@width,f
  4724  0573  1803               	skipnc
  4725  0574  0AC7               	incf	sprintf@width+1,f
  4726  0575  30FF               	movlw	255
  4727  0576  07C7               	addwf	sprintf@width+1,f
  4728  0577  0847               	movf	sprintf@width+1,w
  4729  0578  0446               	iorwf	sprintf@width,w
  4730  0579  1D03               	skipz
  4731  057A  2D60               	goto	l3152
  4732  057B                     l3160:	
  4733                           
  4734                           ;doprnt.c: 1447: if(flag & 0x03)
  4735  057B  0845               	movf	sprintf@flag,w
  4736  057C  3903               	andlw	3
  4737  057D  1903               	btfsc	3,2
  4738  057E  2D90               	goto	l3168
  4739                           
  4740                           ;doprnt.c: 1448: ((*sp++ = ('-')),(++ccnt));
  4741  057F  302D               	movlw	45
  4742  0580  00BA               	movwf	??_sprintf
  4743  0581  0849               	movf	sprintf@sp,w
  4744  0582  0084               	movwf	4
  4745  0583  083A               	movf	??_sprintf,w
  4746  0584  1383               	bcf	3,7	;select IRP bank0
  4747  0585  0080               	movwf	0
  4748  0586  3001               	movlw	1
  4749  0587  00BA               	movwf	??_sprintf
  4750  0588  083A               	movf	??_sprintf,w
  4751  0589  07C9               	addwf	sprintf@sp,f
  4752  058A  3001               	movlw	1
  4753  058B  07BF               	addwf	sprintf@ccnt,f
  4754  058C  1803               	skipnc
  4755  058D  0AC0               	incf	sprintf@ccnt+1,f
  4756  058E  3000               	movlw	0
  4757  058F  07C0               	addwf	sprintf@ccnt+1,f
  4758  0590                     l3168:	
  4759                           
  4760                           ;doprnt.c: 1478: }
  4761                           ;doprnt.c: 1481: prec = c;
  4762  0590  0848               	movf	sprintf@c,w
  4763  0591  00BA               	movwf	??_sprintf
  4764  0592  083A               	movf	??_sprintf,w
  4765  0593  00BE               	movwf	sprintf@prec
  4766  0594                     l3178:	
  4767                           ;doprnt.c: 1483: while(prec--) {
  4768                           
  4769  0594  30FF               	movlw	-1
  4770  0595  00BA               	movwf	??_sprintf
  4771  0596  083A               	movf	??_sprintf,w
  4772  0597  07BE               	addwf	sprintf@prec,f
  4773  0598  083E               	movf	sprintf@prec,w
  4774  0599  3AFF               	xorlw	-1
  4775  059A  1903               	btfsc	3,2
  4776  059B  2BFD               	goto	l3180
  4777                           
  4778                           ;doprnt.c: 1487: {
  4779                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4780  059C  300A               	movlw	10
  4781  059D  00AE               	movwf	___lwmod@divisor
  4782  059E  3000               	movlw	0
  4783  059F  00AF               	movwf	___lwmod@divisor+1
  4784  05A0  083E               	movf	sprintf@prec,w
  4785  05A1  00BA               	movwf	??_sprintf
  4786  05A2  073A               	addwf	??_sprintf,w
  4787  05A3  3E12               	addlw	low (_dpowers| (0+32768))
  4788  05A4  0084               	movwf	4
  4789  05A5  3088               	movlw	high (_dpowers| (0+32768))
  4790  05A6  1803               	skipnc
  4791  05A7  3E01               	addlw	1
  4792  05A8  00FF               	movwf	127
  4793  05A9  120A  158A  2000  120A  118A  	fcall	stringtab
  4794  05AE  00A6               	movwf	___lwdiv@divisor
  4795  05AF  120A  158A  2000  120A  118A  	fcall	stringtab
  4796  05B4  00A7               	movwf	___lwdiv@divisor+1
  4797  05B5  0842               	movf	sprintf@_val+1,w
  4798  05B6  01A9               	clrf	___lwdiv@dividend+1
  4799  05B7  07A9               	addwf	___lwdiv@dividend+1,f
  4800  05B8  0841               	movf	sprintf@_val,w
  4801  05B9  01A8               	clrf	___lwdiv@dividend
  4802  05BA  07A8               	addwf	___lwdiv@dividend,f
  4803  05BB  160A  118A  2549  120A  118A  	fcall	___lwdiv
  4804  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  4805  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  4806  05C2  0827               	movf	?___lwdiv+1,w
  4807  05C3  01B1               	clrf	___lwmod@dividend+1
  4808  05C4  07B1               	addwf	___lwmod@dividend+1,f
  4809  05C5  0826               	movf	?___lwdiv,w
  4810  05C6  01B0               	clrf	___lwmod@dividend
  4811  05C7  07B0               	addwf	___lwmod@dividend,f
  4812  05C8  160A  118A  2513  120A  118A  	fcall	___lwmod
  4813  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  4814  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  4815  05CF  082E               	movf	?___lwmod,w
  4816  05D0  3E30               	addlw	48
  4817  05D1  00BB               	movwf	??_sprintf+1
  4818  05D2  083B               	movf	??_sprintf+1,w
  4819  05D3  00C8               	movwf	sprintf@c
  4820                           
  4821                           ;doprnt.c: 1532: }
  4822                           ;doprnt.c: 1533: ((*sp++ = (c)),(++ccnt));
  4823  05D4  0848               	movf	sprintf@c,w
  4824  05D5  00BA               	movwf	??_sprintf
  4825  05D6  0849               	movf	sprintf@sp,w
  4826  05D7  0084               	movwf	4
  4827  05D8  083A               	movf	??_sprintf,w
  4828  05D9  1383               	bcf	3,7	;select IRP bank0
  4829  05DA  0080               	movwf	0
  4830  05DB  3001               	movlw	1
  4831  05DC  00BA               	movwf	??_sprintf
  4832  05DD  083A               	movf	??_sprintf,w
  4833  05DE  07C9               	addwf	sprintf@sp,f
  4834  05DF  3001               	movlw	1
  4835  05E0  07BF               	addwf	sprintf@ccnt,f
  4836  05E1  1803               	skipnc
  4837  05E2  0AC0               	incf	sprintf@ccnt+1,f
  4838  05E3  3000               	movlw	0
  4839  05E4  07C0               	addwf	sprintf@ccnt+1,f
  4840  05E5  2D94               	goto	l3178
  4841  05E6                     l3182:	
  4842                           ;doprnt.c: 1534: }
  4843                           ;doprnt.c: 1542: }
  4844                           ;doprnt.c: 1544: alldone:
  4845                           
  4846                           
  4847                           ;doprnt.c: 1547: *sp = 0;
  4848  05E6  1283               	bcf	3,5	;RP0=0, select bank0
  4849  05E7  1303               	bcf	3,6	;RP1=0, select bank0
  4850  05E8  0849               	movf	sprintf@sp,w
  4851  05E9  0084               	movwf	4
  4852  05EA  1383               	bcf	3,7	;select IRP bank0
  4853  05EB  0180               	clrf	0
  4854                           
  4855                           ;doprnt.c: 1549: return ccnt;
  4856  05EC  0840               	movf	sprintf@ccnt+1,w
  4857  05ED  01B5               	clrf	?_sprintf+1
  4858  05EE  07B5               	addwf	?_sprintf+1,f
  4859  05EF  083F               	movf	sprintf@ccnt,w
  4860  05F0  01B4               	clrf	?_sprintf
  4861  05F1  07B4               	addwf	?_sprintf,f
  4862  05F2  0008               	return
  4863  05F3                     __end_of_sprintf:	
  4864                           
  4865                           	psect	text15
  4866  1254                     __ptext15:	
  4867 ;; *************** function _isdigit *****************
  4868 ;; Defined at:
  4869 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;  c               1    wreg     unsigned char 
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;  c               1    1[BANK0 ] unsigned char 
  4874 ;; Return value:  Size  Location     Type
  4875 ;;		None               void
  4876 ;; Registers used:
  4877 ;;		wreg, status,2, status,0
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4883 ;;      Params:         0       0       0       0       0
  4884 ;;      Locals:         0       2       0       0       0
  4885 ;;      Temps:          0       0       0       0       0
  4886 ;;      Totals:         0       2       0       0       0
  4887 ;;Total ram usage:        2 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    2
  4890 ;; This function calls:
  4891 ;;		Nothing
  4892 ;; This function is called by:
  4893 ;;		_sprintf
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           
  4898                           ;psect for function _isdigit
  4899  1254                     _isdigit:	
  4900                           
  4901                           ;incstack = 0
  4902                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4903                           ;isdigit@c stored from wreg
  4904  1254  1283               	bcf	3,5	;RP0=0, select bank0
  4905  1255  1303               	bcf	3,6	;RP1=0, select bank0
  4906  1256  00A1               	movwf	isdigit@c
  4907  1257  01A0               	clrf	_isdigit$476
  4908  1258  303A               	movlw	58
  4909  1259  0221               	subwf	isdigit@c,w
  4910  125A  1803               	skipnc
  4911  125B  2A62               	goto	l3040
  4912  125C  3030               	movlw	48
  4913  125D  0221               	subwf	isdigit@c,w
  4914  125E  1C03               	skipc
  4915  125F  2A62               	goto	l3040
  4916  1260  01A0               	clrf	_isdigit$476
  4917  1261  0AA0               	incf	_isdigit$476,f
  4918  1262                     l3040:	
  4919  1262  0C20               	rrf	_isdigit$476,w
  4920  1263  0008               	return
  4921  1264                     __end_of_isdigit:	
  4922                           
  4923                           	psect	text16
  4924  1513                     __ptext16:	
  4925 ;; *************** function ___lwmod *****************
  4926 ;; Defined at:
  4927 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;  divisor         2   14[BANK0 ] unsigned int 
  4930 ;;  dividend        2   16[BANK0 ] unsigned int 
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;  counter         1   19[BANK0 ] unsigned char 
  4933 ;; Return value:  Size  Location     Type
  4934 ;;                  2   14[BANK0 ] unsigned int 
  4935 ;; Registers used:
  4936 ;;		wreg, status,2, status,0
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4942 ;;      Params:         0       4       0       0       0
  4943 ;;      Locals:         0       1       0       0       0
  4944 ;;      Temps:          0       1       0       0       0
  4945 ;;      Totals:         0       6       0       0       0
  4946 ;;Total ram usage:        6 bytes
  4947 ;; Hardware stack levels used:    1
  4948 ;; Hardware stack levels required when called:    2
  4949 ;; This function calls:
  4950 ;;		Nothing
  4951 ;; This function is called by:
  4952 ;;		_sprintf
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           
  4957                           ;psect for function ___lwmod
  4958  1513                     ___lwmod:	
  4959                           
  4960                           ;incstack = 0
  4961                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4962  1513  1283               	bcf	3,5	;RP0=0, select bank0
  4963  1514  1303               	bcf	3,6	;RP1=0, select bank0
  4964  1515  082F               	movf	___lwmod@divisor+1,w
  4965  1516  042E               	iorwf	___lwmod@divisor,w
  4966  1517  1903               	skipnz
  4967  1518  2D42               	goto	l2088
  4968  1519  01B3               	clrf	___lwmod@counter
  4969  151A  0AB3               	incf	___lwmod@counter,f
  4970  151B                     l2078:	
  4971  151B  1BAF               	btfsc	___lwmod@divisor+1,7
  4972  151C  2D29               	goto	l2080
  4973  151D  3001               	movlw	1
  4974  151E                     u2265:	
  4975  151E  1003               	clrc
  4976  151F  0DAE               	rlf	___lwmod@divisor,f
  4977  1520  0DAF               	rlf	___lwmod@divisor+1,f
  4978  1521  3EFF               	addlw	-1
  4979  1522  1D03               	skipz
  4980  1523  2D1E               	goto	u2265
  4981  1524  3001               	movlw	1
  4982  1525  00B2               	movwf	??___lwmod
  4983  1526  0832               	movf	??___lwmod,w
  4984  1527  07B3               	addwf	___lwmod@counter,f
  4985  1528  2D1B               	goto	l2078
  4986  1529                     l2080:	
  4987  1529  082F               	movf	___lwmod@divisor+1,w
  4988  152A  0231               	subwf	___lwmod@dividend+1,w
  4989  152B  1D03               	skipz
  4990  152C  2D2F               	goto	u2285
  4991  152D  082E               	movf	___lwmod@divisor,w
  4992  152E  0230               	subwf	___lwmod@dividend,w
  4993  152F                     u2285:	
  4994  152F  1C03               	skipc
  4995  1530  2D37               	goto	l2084
  4996  1531  082E               	movf	___lwmod@divisor,w
  4997  1532  02B0               	subwf	___lwmod@dividend,f
  4998  1533  082F               	movf	___lwmod@divisor+1,w
  4999  1534  1C03               	skipc
  5000  1535  03B1               	decf	___lwmod@dividend+1,f
  5001  1536  02B1               	subwf	___lwmod@dividend+1,f
  5002  1537                     l2084:	
  5003  1537  3001               	movlw	1
  5004  1538                     u2295:	
  5005  1538  1003               	clrc
  5006  1539  0CAF               	rrf	___lwmod@divisor+1,f
  5007  153A  0CAE               	rrf	___lwmod@divisor,f
  5008  153B  3EFF               	addlw	-1
  5009  153C  1D03               	skipz
  5010  153D  2D38               	goto	u2295
  5011  153E  3001               	movlw	1
  5012  153F  02B3               	subwf	___lwmod@counter,f
  5013  1540  1D03               	btfss	3,2
  5014  1541  2D29               	goto	l2080
  5015  1542                     l2088:	
  5016  1542  0831               	movf	___lwmod@dividend+1,w
  5017  1543  01AF               	clrf	?___lwmod+1
  5018  1544  07AF               	addwf	?___lwmod+1,f
  5019  1545  0830               	movf	___lwmod@dividend,w
  5020  1546  01AE               	clrf	?___lwmod
  5021  1547  07AE               	addwf	?___lwmod,f
  5022  1548  0008               	return
  5023  1549                     __end_of___lwmod:	
  5024                           
  5025                           	psect	text17
  5026  12AE                     __ptext17:	
  5027 ;; *************** function _startUpLCD *****************
  5028 ;; Defined at:
  5029 ;;		line 71 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  5030 ;; Parameters:    Size  Location     Type
  5031 ;;		None
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;		None
  5034 ;; Return value:  Size  Location     Type
  5035 ;;		None               void
  5036 ;; Registers used:
  5037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5043 ;;      Params:         0       0       0       0       0
  5044 ;;      Locals:         0       0       0       0       0
  5045 ;;      Temps:          0       0       0       0       0
  5046 ;;      Totals:         0       0       0       0       0
  5047 ;;Total ram usage:        0 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; Hardware stack levels required when called:    4
  5050 ;; This function calls:
  5051 ;;		_initLCD
  5052 ;;		_instCTRL
  5053 ;;		_printToLCD
  5054 ;; This function is called by:
  5055 ;;		_main
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           
  5060                           ;psect for function _startUpLCD
  5061  12AE                     _startUpLCD:	
  5062                           
  5063                           ;main.c: 73: initLCD();
  5064                           
  5065                           ;incstack = 0
  5066                           ; Regs used in _startUpLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5067  12AE  160A  118A  239A  160A  118A  	fcall	_initLCD
  5068                           
  5069                           ;main.c: 74: instCTRL(0x80);
  5070  12B3  3080               	movlw	128
  5071  12B4  160A  118A  2288  160A  118A  	fcall	_instCTRL
  5072                           
  5073                           ;main.c: 75: printToLCD("PWR ON");
  5074  12B9  301B               	movlw	low (STR_27| (0+32768))
  5075  12BA  1283               	bcf	3,5	;RP0=0, select bank0
  5076  12BB  1303               	bcf	3,6	;RP1=0, select bank0
  5077  12BC  00A2               	movwf	printToLCD@str
  5078  12BD  3089               	movlw	high (STR_27| (0+32768))
  5079  12BE  00A3               	movwf	printToLCD@str+1
  5080  12BF  160A  118A  2455   	fcall	_printToLCD
  5081  12C2  0008               	return
  5082  12C3                     __end_of_startUpLCD:	
  5083                           
  5084                           	psect	text18
  5085  1455                     __ptext18:	
  5086 ;; *************** function _printToLCD *****************
  5087 ;; Defined at:
  5088 ;;		line 47 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\lcd_functions.h"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  str             2    2[BANK0 ] PTR const unsigned char 
  5091 ;;		 -> STR_39(11), STR_38(12), STR_37(10), STR_36(14), 
  5092 ;;		 -> STR_35(12), STR_34(10), STR_33(16), STR_32(15), 
  5093 ;;		 -> updateState@buffer(10), STR_29(15), STR_28(7), STR_27(7), 
  5094 ;;		 -> message2(7), displayDHT11Stat@buffer(20), message1(7), STR_24(19), 
  5095 ;;		 -> STR_23(6), STR_22(10), STR_21(8), STR_20(9), 
  5096 ;;		 -> displayTemp@buffer(20), debugInfo(10), displayTime@timeFormat(16), STR_5(8), 
  5097 ;;		 -> STR_4(8), displayPPM@strBuffer(20), 
  5098 ;; Auto vars:     Size  Location     Type
  5099 ;;		None
  5100 ;; Return value:  Size  Location     Type
  5101 ;;		None               void
  5102 ;; Registers used:
  5103 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5109 ;;      Params:         0       2       0       0       0
  5110 ;;      Locals:         0       0       0       0       0
  5111 ;;      Temps:          0       0       0       0       0
  5112 ;;      Totals:         0       2       0       0       0
  5113 ;;Total ram usage:        2 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    3
  5116 ;; This function calls:
  5117 ;;		_dataCTRL
  5118 ;;		_instCTRL
  5119 ;; This function is called by:
  5120 ;;		_displayPPM
  5121 ;;		_printStatusPPM
  5122 ;;		_displayTime
  5123 ;;		_setHoursStart
  5124 ;;		_setHoursEnd
  5125 ;;		_setMinutesStart
  5126 ;;		_setMinutesEnd
  5127 ;;		_printStatusTMP
  5128 ;;		_displayDHT11Stat
  5129 ;;		_startUpLCD
  5130 ;;		_updateState
  5131 ;;		_displayTemp
  5132 ;;		_runDHT11Stat
  5133 ;; This function uses a non-reentrant model
  5134 ;;
  5135                           
  5136                           
  5137                           ;psect for function _printToLCD
  5138  1455                     _printToLCD:	
  5139                           
  5140                           ;lcd_functions.h: 49: instCTRL(0x0C);
  5141                           
  5142                           ;incstack = 0
  5143                           ; Regs used in _printToLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5144  1455  300C               	movlw	12
  5145  1456  160A  118A  2288  160A  118A  	fcall	_instCTRL
  5146  145B                     l3062:	
  5147                           ;lcd_functions.h: 50: while (*str)
  5148                           
  5149  145B  1283               	bcf	3,5	;RP0=0, select bank0
  5150  145C  1303               	bcf	3,6	;RP1=0, select bank0
  5151  145D  0823               	movf	printToLCD@str+1,w
  5152  145E  00FF               	movwf	127
  5153  145F  0822               	movf	printToLCD@str,w
  5154  1460  0084               	movwf	4
  5155  1461  120A  158A  2000  160A  118A  	fcall	stringtab
  5156  1466  3800               	iorlw	0
  5157  1467  1903               	btfsc	3,2
  5158  1468  0008               	return
  5159                           
  5160                           ;lcd_functions.h: 51: {
  5161                           ;lcd_functions.h: 52: dataCTRL(*str);
  5162  1469  1283               	bcf	3,5	;RP0=0, select bank0
  5163  146A  1303               	bcf	3,6	;RP1=0, select bank0
  5164  146B  0823               	movf	printToLCD@str+1,w
  5165  146C  00FF               	movwf	127
  5166  146D  0822               	movf	printToLCD@str,w
  5167  146E  0084               	movwf	4
  5168  146F  120A  158A  2000  160A  118A  	fcall	stringtab
  5169  1474  160A  118A  229B  160A  118A  	fcall	_dataCTRL
  5170                           
  5171                           ;lcd_functions.h: 53: str++;
  5172  1479  3001               	movlw	1
  5173  147A  1283               	bcf	3,5	;RP0=0, select bank0
  5174  147B  1303               	bcf	3,6	;RP1=0, select bank0
  5175  147C  07A2               	addwf	printToLCD@str,f
  5176  147D  1803               	skipnc
  5177  147E  0AA3               	incf	printToLCD@str+1,f
  5178  147F  2C5B               	goto	l3062
  5179  1480                     __end_of_printToLCD:	
  5180                           
  5181                           	psect	text19
  5182  129B                     __ptext19:	
  5183 ;; *************** function _dataCTRL *****************
  5184 ;; Defined at:
  5185 ;;		line 27 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\lcd_functions.h"
  5186 ;; Parameters:    Size  Location     Type
  5187 ;;  DAT             1    wreg     unsigned char 
  5188 ;; Auto vars:     Size  Location     Type
  5189 ;;  DAT             1    1[BANK0 ] unsigned char 
  5190 ;; Return value:  Size  Location     Type
  5191 ;;		None               void
  5192 ;; Registers used:
  5193 ;;		wreg
  5194 ;; Tracked objects:
  5195 ;;		On entry : 0/0
  5196 ;;		On exit  : 0/0
  5197 ;;		Unchanged: 0/0
  5198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5199 ;;      Params:         0       0       0       0       0
  5200 ;;      Locals:         0       1       0       0       0
  5201 ;;      Temps:          0       1       0       0       0
  5202 ;;      Totals:         0       2       0       0       0
  5203 ;;Total ram usage:        2 bytes
  5204 ;; Hardware stack levels used:    1
  5205 ;; Hardware stack levels required when called:    2
  5206 ;; This function calls:
  5207 ;;		Nothing
  5208 ;; This function is called by:
  5209 ;;		_printToLCD
  5210 ;; This function uses a non-reentrant model
  5211 ;;
  5212                           
  5213                           
  5214                           ;psect for function _dataCTRL
  5215  129B                     _dataCTRL:	
  5216                           
  5217                           ;incstack = 0
  5218                           ; Regs used in _dataCTRL: [wreg]
  5219                           ;dataCTRL@DAT stored from wreg
  5220  129B  1283               	bcf	3,5	;RP0=0, select bank0
  5221  129C  1303               	bcf	3,6	;RP1=0, select bank0
  5222  129D  00A1               	movwf	dataCTRL@DAT
  5223                           
  5224                           ;lcd_functions.h: 29: PORTD = DAT;
  5225  129E  0821               	movf	dataCTRL@DAT,w
  5226  129F  0088               	movwf	8	;volatile
  5227                           
  5228                           ;lcd_functions.h: 30: RC0 = 1;
  5229  12A0  1407               	bsf	7,0	;volatile
  5230                           
  5231                           ;lcd_functions.h: 31: RC1 = 0;
  5232  12A1  1087               	bcf	7,1	;volatile
  5233                           
  5234                           ;lcd_functions.h: 32: RC2 = 1;
  5235  12A2  1507               	bsf	7,2	;volatile
  5236                           
  5237                           ;lcd_functions.h: 33: _delay((unsigned long)((1)*(4000000/4000.0)));
  5238  12A3  30F9               	movlw	249
  5239  12A4  00A0               	movwf	??_dataCTRL
  5240  12A5                     u5007:	
  5241  12A5  0000               	nop
  5242  12A6  0BA0               	decfsz	??_dataCTRL,f
  5243  12A7  2AA5               	goto	u5007
  5244  12A8  2AA9               	nop2	;nop
  5245  12A9  0000               	nop
  5246                           
  5247                           ;lcd_functions.h: 34: RC2 = 0;
  5248  12AA  1283               	bcf	3,5	;RP0=0, select bank0
  5249  12AB  1303               	bcf	3,6	;RP1=0, select bank0
  5250  12AC  1107               	bcf	7,2	;volatile
  5251  12AD  0008               	return
  5252  12AE                     __end_of_dataCTRL:	
  5253                           
  5254                           	psect	text20
  5255  139A                     __ptext20:	
  5256 ;; *************** function _initLCD *****************
  5257 ;; Defined at:
  5258 ;;		line 37 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\lcd_functions.h"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;		None
  5261 ;; Auto vars:     Size  Location     Type
  5262 ;;		None
  5263 ;; Return value:  Size  Location     Type
  5264 ;;		None               void
  5265 ;; Registers used:
  5266 ;;		wreg, status,2, status,0, pclath, cstack
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5272 ;;      Params:         0       0       0       0       0
  5273 ;;      Locals:         0       0       0       0       0
  5274 ;;      Temps:          0       1       0       0       0
  5275 ;;      Totals:         0       1       0       0       0
  5276 ;;Total ram usage:        1 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; Hardware stack levels required when called:    3
  5279 ;; This function calls:
  5280 ;;		_instCTRL
  5281 ;; This function is called by:
  5282 ;;		_startUpLCD
  5283 ;; This function uses a non-reentrant model
  5284 ;;
  5285                           
  5286                           
  5287                           ;psect for function _initLCD
  5288  139A                     _initLCD:	
  5289                           
  5290                           ;lcd_functions.h: 39: instCTRL(0x38);
  5291                           
  5292                           ;incstack = 0
  5293                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  5294  139A  3038               	movlw	56
  5295  139B  160A  118A  2288  160A  118A  	fcall	_instCTRL
  5296                           
  5297                           ;lcd_functions.h: 40: _delay((unsigned long)((50)*(4000000/4000000.0)));
  5298  13A0  3010               	movlw	16
  5299  13A1  1283               	bcf	3,5	;RP0=0, select bank0
  5300  13A2  1303               	bcf	3,6	;RP1=0, select bank0
  5301  13A3  00A2               	movwf	??_initLCD
  5302  13A4                     u5017:	
  5303  13A4  0BA2               	decfsz	??_initLCD,f
  5304  13A5  2BA4               	goto	u5017
  5305  13A6  0000               	nop
  5306                           
  5307                           ;lcd_functions.h: 41: instCTRL(0x0C);
  5308  13A7  300C               	movlw	12
  5309  13A8  160A  118A  2288  160A  118A  	fcall	_instCTRL
  5310                           
  5311                           ;lcd_functions.h: 42: instCTRL(0x01);
  5312  13AD  3001               	movlw	1
  5313  13AE  160A  118A  2288  160A  118A  	fcall	_instCTRL
  5314                           
  5315                           ;lcd_functions.h: 43: instCTRL(0x06);
  5316  13B3  3006               	movlw	6
  5317  13B4  160A  118A  2288  160A  118A  	fcall	_instCTRL
  5318                           
  5319                           ;lcd_functions.h: 44: instCTRL(0x0F);
  5320  13B9  300F               	movlw	15
  5321  13BA  160A  118A  2288   	fcall	_instCTRL
  5322  13BD  0008               	return
  5323  13BE                     __end_of_initLCD:	
  5324                           
  5325                           	psect	text21
  5326  0934                     __ptext21:	
  5327 ;; *************** function _setPortDirections *****************
  5328 ;; Defined at:
  5329 ;;		line 53 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;		None
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;		None
  5334 ;; Return value:  Size  Location     Type
  5335 ;;		None               void
  5336 ;; Registers used:
  5337 ;;		wreg, status,2
  5338 ;; Tracked objects:
  5339 ;;		On entry : 0/0
  5340 ;;		On exit  : 0/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5343 ;;      Params:         0       0       0       0       0
  5344 ;;      Locals:         0       0       0       0       0
  5345 ;;      Temps:          0       0       0       0       0
  5346 ;;      Totals:         0       0       0       0       0
  5347 ;;Total ram usage:        0 bytes
  5348 ;; Hardware stack levels used:    1
  5349 ;; Hardware stack levels required when called:    2
  5350 ;; This function calls:
  5351 ;;		Nothing
  5352 ;; This function is called by:
  5353 ;;		_main
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357                           
  5358                           ;psect for function _setPortDirections
  5359  0934                     _setPortDirections:	
  5360                           
  5361                           ;main.c: 55: TRISA = 0xFF;
  5362                           
  5363                           ;incstack = 0
  5364                           ; Regs used in _setPortDirections: [wreg+status,2]
  5365  0934  30FF               	movlw	255
  5366  0935  1683               	bsf	3,5	;RP0=1, select bank1
  5367  0936  1303               	bcf	3,6	;RP1=0, select bank1
  5368  0937  0085               	movwf	5	;volatile
  5369                           
  5370                           ;main.c: 56: TRISB = 0xFF;
  5371  0938  30FF               	movlw	255
  5372  0939  0086               	movwf	6	;volatile
  5373                           
  5374                           ;main.c: 57: TRISC = 0x00;
  5375  093A  0187               	clrf	7	;volatile
  5376                           
  5377                           ;main.c: 58: TRISD = 0x00;
  5378  093B  0188               	clrf	8	;volatile
  5379                           
  5380                           ;main.c: 59: PORTA = 0x00;
  5381  093C  1283               	bcf	3,5	;RP0=0, select bank0
  5382  093D  1303               	bcf	3,6	;RP1=0, select bank0
  5383  093E  0185               	clrf	5	;volatile
  5384                           
  5385                           ;main.c: 60: PORTB = 0x00;
  5386  093F  0186               	clrf	6	;volatile
  5387                           
  5388                           ;main.c: 61: PORTC = 0x00;
  5389  0940  0187               	clrf	7	;volatile
  5390                           
  5391                           ;main.c: 62: PORTD = 0x00;
  5392  0941  0188               	clrf	8	;volatile
  5393  0942  0008               	return
  5394  0943                     __end_of_setPortDirections:	
  5395                           
  5396                           	psect	text22
  5397  1376                     __ptext22:	
  5398 ;; *************** function _runMQ135 *****************
  5399 ;; Defined at:
  5400 ;;		line 32 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\mq135_module.h"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;		None
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;		None
  5405 ;; Return value:  Size  Location     Type
  5406 ;;		None               void
  5407 ;; Registers used:
  5408 ;;		wreg, status,2, status,0, pclath, cstack
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 0/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5414 ;;      Params:         0       0       0       0       0
  5415 ;;      Locals:         0       0       0       0       0
  5416 ;;      Temps:          0       0       0       0       0
  5417 ;;      Totals:         0       0       0       0       0
  5418 ;;Total ram usage:        0 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; Hardware stack levels required when called:    5
  5421 ;; This function calls:
  5422 ;;		_CalcMQ135
  5423 ;;		_readADC
  5424 ;; This function is called by:
  5425 ;;		_main
  5426 ;; This function uses a non-reentrant model
  5427 ;;
  5428                           
  5429                           
  5430                           ;psect for function _runMQ135
  5431  1376                     _runMQ135:	
  5432                           
  5433                           ;mq135_module.h: 34: PPM = CalcMQ135(readADC(0));
  5434                           
  5435                           ;incstack = 0
  5436                           ; Regs used in _runMQ135: [wreg+status,2+status,0+pclath+cstack]
  5437  1376  3000               	movlw	0
  5438  1377  160A  118A  242C  160A  118A  	fcall	_readADC
  5439  137C  1283               	bcf	3,5	;RP0=0, select bank0
  5440  137D  1303               	bcf	3,6	;RP1=0, select bank0
  5441  137E  0821               	movf	?_readADC+1,w
  5442  137F  01DF               	clrf	CalcMQ135@RAW_ADC+1
  5443  1380  07DF               	addwf	CalcMQ135@RAW_ADC+1,f
  5444  1381  0820               	movf	?_readADC,w
  5445  1382  01DE               	clrf	CalcMQ135@RAW_ADC
  5446  1383  07DE               	addwf	CalcMQ135@RAW_ADC,f
  5447  1384  120A  118A  204D   	fcall	_CalcMQ135
  5448  1387  1283               	bcf	3,5	;RP0=0, select bank0
  5449  1388  1303               	bcf	3,6	;RP1=0, select bank0
  5450  1389  085E               	movf	?_CalcMQ135,w
  5451  138A  1683               	bsf	3,5	;RP0=1, select bank1
  5452  138B  1303               	bcf	3,6	;RP1=0, select bank1
  5453  138C  00CA               	movwf	_PPM^(0+128)	;volatile
  5454  138D  1283               	bcf	3,5	;RP0=0, select bank0
  5455  138E  1303               	bcf	3,6	;RP1=0, select bank0
  5456  138F  085F               	movf	?_CalcMQ135+1,w
  5457  1390  1683               	bsf	3,5	;RP0=1, select bank1
  5458  1391  1303               	bcf	3,6	;RP1=0, select bank1
  5459  1392  00CB               	movwf	(_PPM+1)^(0+128)	;volatile
  5460  1393  1283               	bcf	3,5	;RP0=0, select bank0
  5461  1394  1303               	bcf	3,6	;RP1=0, select bank0
  5462  1395  0860               	movf	?_CalcMQ135+2,w
  5463  1396  1683               	bsf	3,5	;RP0=1, select bank1
  5464  1397  1303               	bcf	3,6	;RP1=0, select bank1
  5465  1398  00CC               	movwf	(_PPM+2)^(0+128)	;volatile
  5466  1399  0008               	return
  5467  139A                     __end_of_runMQ135:	
  5468                           
  5469                           	psect	text23
  5470  142C                     __ptext23:	
  5471 ;; *************** function _readADC *****************
  5472 ;; Defined at:
  5473 ;;		line 23 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\common_dependenc
      +ies.h"
  5474 ;; Parameters:    Size  Location     Type
  5475 ;;  channel         1    wreg     unsigned char 
  5476 ;; Auto vars:     Size  Location     Type
  5477 ;;  channel         1    4[BANK0 ] unsigned char 
  5478 ;; Return value:  Size  Location     Type
  5479 ;;                  2    0[BANK0 ] int 
  5480 ;; Registers used:
  5481 ;;		wreg, status,2, status,0
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5487 ;;      Params:         0       2       0       0       0
  5488 ;;      Locals:         0       1       0       0       0
  5489 ;;      Temps:          0       2       0       0       0
  5490 ;;      Totals:         0       5       0       0       0
  5491 ;;Total ram usage:        5 bytes
  5492 ;; Hardware stack levels used:    1
  5493 ;; Hardware stack levels required when called:    2
  5494 ;; This function calls:
  5495 ;;		Nothing
  5496 ;; This function is called by:
  5497 ;;		_runMQ135
  5498 ;;		_main
  5499 ;; This function uses a non-reentrant model
  5500 ;;
  5501                           
  5502                           
  5503                           ;psect for function _readADC
  5504  142C                     _readADC:	
  5505                           
  5506                           ;incstack = 0
  5507                           ; Regs used in _readADC: [wreg+status,2+status,0]
  5508                           ;readADC@channel stored from wreg
  5509  142C  1283               	bcf	3,5	;RP0=0, select bank0
  5510  142D  1303               	bcf	3,6	;RP1=0, select bank0
  5511  142E  00A4               	movwf	readADC@channel
  5512                           
  5513                           ;common_dependencies.h: 25: ADCON0 &= 0xC3;
  5514  142F  30C3               	movlw	195
  5515  1430  00A2               	movwf	??_readADC
  5516  1431  0822               	movf	??_readADC,w
  5517  1432  059F               	andwf	31,f	;volatile
  5518                           
  5519                           ;common_dependencies.h: 26: ADCON0 |= (channel << 3);
  5520  1433  0824               	movf	readADC@channel,w
  5521  1434  00A2               	movwf	??_readADC
  5522  1435  3002               	movlw	2
  5523  1436                     u3185:	
  5524  1436  1003               	clrc
  5525  1437  0DA2               	rlf	??_readADC,f
  5526  1438  3EFF               	addlw	-1
  5527  1439  1D03               	skipz
  5528  143A  2C36               	goto	u3185
  5529  143B  1003               	clrc
  5530  143C  0D22               	rlf	??_readADC,w
  5531  143D  00A3               	movwf	??_readADC+1
  5532  143E  0823               	movf	??_readADC+1,w
  5533  143F  049F               	iorwf	31,f	;volatile
  5534                           
  5535                           ;common_dependencies.h: 27: _delay((unsigned long)((20)*(4000000/4000000.0)));
  5536  1440  3006               	movlw	6
  5537  1441  00A2               	movwf	??_readADC
  5538  1442                     u5027:	
  5539  1442  0BA2               	decfsz	??_readADC,f
  5540  1443  2C42               	goto	u5027
  5541  1444  0000               	nop
  5542                           
  5543                           ;common_dependencies.h: 28: GO_DONE = 1;
  5544  1445  1283               	bcf	3,5	;RP0=0, select bank0
  5545  1446  1303               	bcf	3,6	;RP1=0, select bank0
  5546  1447  151F               	bsf	31,2	;volatile
  5547  1448                     l81:	
  5548                           ;common_dependencies.h: 30: ;
  5549                           
  5550                           ;common_dependencies.h: 29: while (GO_DONE)
  5551                           
  5552  1448  191F               	btfsc	31,2	;volatile
  5553  1449  2C48               	goto	l81
  5554                           
  5555                           ;common_dependencies.h: 31: return ((ADRESH << 8) + ADRESL);
  5556  144A  081E               	movf	30,w	;volatile
  5557  144B  01A1               	clrf	?_readADC+1
  5558  144C  07A1               	addwf	?_readADC+1,f
  5559  144D  1683               	bsf	3,5	;RP0=1, select bank1
  5560  144E  1303               	bcf	3,6	;RP1=0, select bank1
  5561  144F  081E               	movf	30,w	;volatile
  5562  1450  1283               	bcf	3,5	;RP0=0, select bank0
  5563  1451  1303               	bcf	3,6	;RP1=0, select bank0
  5564  1452  01A0               	clrf	?_readADC
  5565  1453  07A0               	addwf	?_readADC,f
  5566  1454  0008               	return
  5567  1455                     __end_of_readADC:	
  5568                           
  5569                           	psect	text24
  5570  004D                     __ptext24:	
  5571 ;; *************** function _CalcMQ135 *****************
  5572 ;; Defined at:
  5573 ;;		line 93 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\mq135_module.h"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;  RAW_ADC         2   62[BANK0 ] int 
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;  ratio           3   36[BANK1 ] float 
  5578 ;;  co2             3   33[BANK1 ] float 
  5579 ;;  ratio5          3   30[BANK1 ] float 
  5580 ;;  ratio4          3   27[BANK1 ] float 
  5581 ;;  ratio3          3   24[BANK1 ] float 
  5582 ;;  ratio2          3   21[BANK1 ] float 
  5583 ;;  ratio6          3    3[BANK1 ] float 
  5584 ;;  voltage         3    0[BANK1 ] float 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  3   62[BANK0 ] float 
  5587 ;; Registers used:
  5588 ;;		wreg, status,2, status,0, pclath, cstack
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5594 ;;      Params:         0       3       0       0       0
  5595 ;;      Locals:         0       0      39       0       0
  5596 ;;      Temps:          0       0       0       0       0
  5597 ;;      Totals:         0       3      39       0       0
  5598 ;;Total ram usage:       42 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    4
  5601 ;; This function calls:
  5602 ;;		___awtoft
  5603 ;;		___ftadd
  5604 ;;		___ftdiv
  5605 ;;		___ftmul
  5606 ;; This function is called by:
  5607 ;;		_runMQ135
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           
  5612                           ;psect for function _CalcMQ135
  5613  004D                     _CalcMQ135:	
  5614                           
  5615                           ;mq135_module.h: 95: float voltage = (RAW_ADC * 5.0) / 1023.0;
  5616                           
  5617                           ;incstack = 0
  5618                           ; Regs used in _CalcMQ135: [wreg+status,2+status,0+pclath+cstack]
  5619  004D  30C0               	movlw	192
  5620  004E  1283               	bcf	3,5	;RP0=0, select bank0
  5621  004F  1303               	bcf	3,6	;RP1=0, select bank0
  5622  0050  00CE               	movwf	___ftdiv@f2
  5623  0051  307F               	movlw	127
  5624  0052  00CF               	movwf	___ftdiv@f2+1
  5625  0053  3044               	movlw	68
  5626  0054  00D0               	movwf	___ftdiv@f2+2
  5627  0055  3000               	movlw	0
  5628  0056  00BE               	movwf	___ftmul@f1
  5629  0057  30A0               	movlw	160
  5630  0058  00BF               	movwf	___ftmul@f1+1
  5631  0059  3040               	movlw	64
  5632  005A  00C0               	movwf	___ftmul@f1+2
  5633  005B  085F               	movf	CalcMQ135@RAW_ADC+1,w
  5634  005C  01A9               	clrf	___awtoft@c+1
  5635  005D  07A9               	addwf	___awtoft@c+1,f
  5636  005E  085E               	movf	CalcMQ135@RAW_ADC,w
  5637  005F  01A8               	clrf	___awtoft@c
  5638  0060  07A8               	addwf	___awtoft@c,f
  5639  0061  160A  118A  2407  120A  118A  	fcall	___awtoft
  5640  0066  1283               	bcf	3,5	;RP0=0, select bank0
  5641  0067  1303               	bcf	3,6	;RP1=0, select bank0
  5642  0068  0828               	movf	?___awtoft,w
  5643  0069  00C1               	movwf	___ftmul@f2
  5644  006A  0829               	movf	?___awtoft+1,w
  5645  006B  00C2               	movwf	___ftmul@f2+1
  5646  006C  082A               	movf	?___awtoft+2,w
  5647  006D  00C3               	movwf	___ftmul@f2+2
  5648  006E  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5649  0073  1283               	bcf	3,5	;RP0=0, select bank0
  5650  0074  1303               	bcf	3,6	;RP1=0, select bank0
  5651  0075  083E               	movf	?___ftmul,w
  5652  0076  00D1               	movwf	___ftdiv@f1
  5653  0077  083F               	movf	?___ftmul+1,w
  5654  0078  00D2               	movwf	___ftdiv@f1+1
  5655  0079  0840               	movf	?___ftmul+2,w
  5656  007A  00D3               	movwf	___ftdiv@f1+2
  5657  007B  120A  158A  2143  120A  118A  	fcall	___ftdiv
  5658  0080  1283               	bcf	3,5	;RP0=0, select bank0
  5659  0081  1303               	bcf	3,6	;RP1=0, select bank0
  5660  0082  084E               	movf	?___ftdiv,w
  5661  0083  1683               	bsf	3,5	;RP0=1, select bank1
  5662  0084  1303               	bcf	3,6	;RP1=0, select bank1
  5663  0085  00A0               	movwf	CalcMQ135@voltage^(0+128)
  5664  0086  1283               	bcf	3,5	;RP0=0, select bank0
  5665  0087  1303               	bcf	3,6	;RP1=0, select bank0
  5666  0088  084F               	movf	?___ftdiv+1,w
  5667  0089  1683               	bsf	3,5	;RP0=1, select bank1
  5668  008A  1303               	bcf	3,6	;RP1=0, select bank1
  5669  008B  00A1               	movwf	(CalcMQ135@voltage+1)^(0+128)
  5670  008C  1283               	bcf	3,5	;RP0=0, select bank0
  5671  008D  1303               	bcf	3,6	;RP1=0, select bank0
  5672  008E  0850               	movf	?___ftdiv+2,w
  5673  008F  1683               	bsf	3,5	;RP0=1, select bank1
  5674  0090  1303               	bcf	3,6	;RP1=0, select bank1
  5675  0091  00A2               	movwf	(CalcMQ135@voltage+2)^(0+128)
  5676                           
  5677                           ;mq135_module.h: 96: float ratio = voltage / 5.0;
  5678  0092  3000               	movlw	0
  5679  0093  1283               	bcf	3,5	;RP0=0, select bank0
  5680  0094  1303               	bcf	3,6	;RP1=0, select bank0
  5681  0095  00CE               	movwf	___ftdiv@f2
  5682  0096  30A0               	movlw	160
  5683  0097  00CF               	movwf	___ftdiv@f2+1
  5684  0098  3040               	movlw	64
  5685  0099  00D0               	movwf	___ftdiv@f2+2
  5686  009A  1683               	bsf	3,5	;RP0=1, select bank1
  5687  009B  1303               	bcf	3,6	;RP1=0, select bank1
  5688  009C  0820               	movf	CalcMQ135@voltage^(0+128),w
  5689  009D  1283               	bcf	3,5	;RP0=0, select bank0
  5690  009E  1303               	bcf	3,6	;RP1=0, select bank0
  5691  009F  00D1               	movwf	___ftdiv@f1
  5692  00A0  1683               	bsf	3,5	;RP0=1, select bank1
  5693  00A1  1303               	bcf	3,6	;RP1=0, select bank1
  5694  00A2  0821               	movf	(CalcMQ135@voltage+1)^(0+128),w
  5695  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  5696  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  5697  00A5  00D2               	movwf	___ftdiv@f1+1
  5698  00A6  1683               	bsf	3,5	;RP0=1, select bank1
  5699  00A7  1303               	bcf	3,6	;RP1=0, select bank1
  5700  00A8  0822               	movf	(CalcMQ135@voltage+2)^(0+128),w
  5701  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  5702  00AA  1303               	bcf	3,6	;RP1=0, select bank0
  5703  00AB  00D3               	movwf	___ftdiv@f1+2
  5704  00AC  120A  158A  2143  120A  118A  	fcall	___ftdiv
  5705  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  5706  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  5707  00B3  084E               	movf	?___ftdiv,w
  5708  00B4  1683               	bsf	3,5	;RP0=1, select bank1
  5709  00B5  1303               	bcf	3,6	;RP1=0, select bank1
  5710  00B6  00C4               	movwf	CalcMQ135@ratio^(0+128)
  5711  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  5712  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  5713  00B9  084F               	movf	?___ftdiv+1,w
  5714  00BA  1683               	bsf	3,5	;RP0=1, select bank1
  5715  00BB  1303               	bcf	3,6	;RP1=0, select bank1
  5716  00BC  00C5               	movwf	(CalcMQ135@ratio+1)^(0+128)
  5717  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  5718  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  5719  00BF  0850               	movf	?___ftdiv+2,w
  5720  00C0  1683               	bsf	3,5	;RP0=1, select bank1
  5721  00C1  1303               	bcf	3,6	;RP1=0, select bank1
  5722  00C2  00C6               	movwf	(CalcMQ135@ratio+2)^(0+128)
  5723                           
  5724                           ;mq135_module.h: 99: float ratio2 = ratio * ratio;
  5725  00C3  0844               	movf	CalcMQ135@ratio^(0+128),w
  5726  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  5727  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  5728  00C6  00BE               	movwf	___ftmul@f1
  5729  00C7  1683               	bsf	3,5	;RP0=1, select bank1
  5730  00C8  1303               	bcf	3,6	;RP1=0, select bank1
  5731  00C9  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5732  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  5733  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  5734  00CC  00BF               	movwf	___ftmul@f1+1
  5735  00CD  1683               	bsf	3,5	;RP0=1, select bank1
  5736  00CE  1303               	bcf	3,6	;RP1=0, select bank1
  5737  00CF  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5738  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  5739  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  5740  00D2  00C0               	movwf	___ftmul@f1+2
  5741  00D3  1683               	bsf	3,5	;RP0=1, select bank1
  5742  00D4  1303               	bcf	3,6	;RP1=0, select bank1
  5743  00D5  0844               	movf	CalcMQ135@ratio^(0+128),w
  5744  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  5745  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  5746  00D8  00C1               	movwf	___ftmul@f2
  5747  00D9  1683               	bsf	3,5	;RP0=1, select bank1
  5748  00DA  1303               	bcf	3,6	;RP1=0, select bank1
  5749  00DB  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5750  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  5751  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  5752  00DE  00C2               	movwf	___ftmul@f2+1
  5753  00DF  1683               	bsf	3,5	;RP0=1, select bank1
  5754  00E0  1303               	bcf	3,6	;RP1=0, select bank1
  5755  00E1  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5756  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  5757  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  5758  00E4  00C3               	movwf	___ftmul@f2+2
  5759  00E5  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5760  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  5761  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  5762  00EC  083E               	movf	?___ftmul,w
  5763  00ED  1683               	bsf	3,5	;RP0=1, select bank1
  5764  00EE  1303               	bcf	3,6	;RP1=0, select bank1
  5765  00EF  00B5               	movwf	CalcMQ135@ratio2^(0+128)
  5766  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  5767  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  5768  00F2  083F               	movf	?___ftmul+1,w
  5769  00F3  1683               	bsf	3,5	;RP0=1, select bank1
  5770  00F4  1303               	bcf	3,6	;RP1=0, select bank1
  5771  00F5  00B6               	movwf	(CalcMQ135@ratio2+1)^(0+128)
  5772  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  5773  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  5774  00F8  0840               	movf	?___ftmul+2,w
  5775  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  5776  00FA  1303               	bcf	3,6	;RP1=0, select bank1
  5777  00FB  00B7               	movwf	(CalcMQ135@ratio2+2)^(0+128)
  5778                           
  5779                           ;mq135_module.h: 100: float ratio3 = ratio2 * ratio;
  5780  00FC  0844               	movf	CalcMQ135@ratio^(0+128),w
  5781  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  5782  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  5783  00FF  00BE               	movwf	___ftmul@f1
  5784  0100  1683               	bsf	3,5	;RP0=1, select bank1
  5785  0101  1303               	bcf	3,6	;RP1=0, select bank1
  5786  0102  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5787  0103  1283               	bcf	3,5	;RP0=0, select bank0
  5788  0104  1303               	bcf	3,6	;RP1=0, select bank0
  5789  0105  00BF               	movwf	___ftmul@f1+1
  5790  0106  1683               	bsf	3,5	;RP0=1, select bank1
  5791  0107  1303               	bcf	3,6	;RP1=0, select bank1
  5792  0108  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5793  0109  1283               	bcf	3,5	;RP0=0, select bank0
  5794  010A  1303               	bcf	3,6	;RP1=0, select bank0
  5795  010B  00C0               	movwf	___ftmul@f1+2
  5796  010C  1683               	bsf	3,5	;RP0=1, select bank1
  5797  010D  1303               	bcf	3,6	;RP1=0, select bank1
  5798  010E  0835               	movf	CalcMQ135@ratio2^(0+128),w
  5799  010F  1283               	bcf	3,5	;RP0=0, select bank0
  5800  0110  1303               	bcf	3,6	;RP1=0, select bank0
  5801  0111  00C1               	movwf	___ftmul@f2
  5802  0112  1683               	bsf	3,5	;RP0=1, select bank1
  5803  0113  1303               	bcf	3,6	;RP1=0, select bank1
  5804  0114  0836               	movf	(CalcMQ135@ratio2+1)^(0+128),w
  5805  0115  1283               	bcf	3,5	;RP0=0, select bank0
  5806  0116  1303               	bcf	3,6	;RP1=0, select bank0
  5807  0117  00C2               	movwf	___ftmul@f2+1
  5808  0118  1683               	bsf	3,5	;RP0=1, select bank1
  5809  0119  1303               	bcf	3,6	;RP1=0, select bank1
  5810  011A  0837               	movf	(CalcMQ135@ratio2+2)^(0+128),w
  5811  011B  1283               	bcf	3,5	;RP0=0, select bank0
  5812  011C  1303               	bcf	3,6	;RP1=0, select bank0
  5813  011D  00C3               	movwf	___ftmul@f2+2
  5814  011E  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5815  0123  1283               	bcf	3,5	;RP0=0, select bank0
  5816  0124  1303               	bcf	3,6	;RP1=0, select bank0
  5817  0125  083E               	movf	?___ftmul,w
  5818  0126  1683               	bsf	3,5	;RP0=1, select bank1
  5819  0127  1303               	bcf	3,6	;RP1=0, select bank1
  5820  0128  00B8               	movwf	CalcMQ135@ratio3^(0+128)
  5821  0129  1283               	bcf	3,5	;RP0=0, select bank0
  5822  012A  1303               	bcf	3,6	;RP1=0, select bank0
  5823  012B  083F               	movf	?___ftmul+1,w
  5824  012C  1683               	bsf	3,5	;RP0=1, select bank1
  5825  012D  1303               	bcf	3,6	;RP1=0, select bank1
  5826  012E  00B9               	movwf	(CalcMQ135@ratio3+1)^(0+128)
  5827  012F  1283               	bcf	3,5	;RP0=0, select bank0
  5828  0130  1303               	bcf	3,6	;RP1=0, select bank0
  5829  0131  0840               	movf	?___ftmul+2,w
  5830  0132  1683               	bsf	3,5	;RP0=1, select bank1
  5831  0133  1303               	bcf	3,6	;RP1=0, select bank1
  5832  0134  00BA               	movwf	(CalcMQ135@ratio3+2)^(0+128)
  5833                           
  5834                           ;mq135_module.h: 101: float ratio4 = ratio3 * ratio;
  5835  0135  0844               	movf	CalcMQ135@ratio^(0+128),w
  5836  0136  1283               	bcf	3,5	;RP0=0, select bank0
  5837  0137  1303               	bcf	3,6	;RP1=0, select bank0
  5838  0138  00BE               	movwf	___ftmul@f1
  5839  0139  1683               	bsf	3,5	;RP0=1, select bank1
  5840  013A  1303               	bcf	3,6	;RP1=0, select bank1
  5841  013B  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5842  013C  1283               	bcf	3,5	;RP0=0, select bank0
  5843  013D  1303               	bcf	3,6	;RP1=0, select bank0
  5844  013E  00BF               	movwf	___ftmul@f1+1
  5845  013F  1683               	bsf	3,5	;RP0=1, select bank1
  5846  0140  1303               	bcf	3,6	;RP1=0, select bank1
  5847  0141  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5848  0142  1283               	bcf	3,5	;RP0=0, select bank0
  5849  0143  1303               	bcf	3,6	;RP1=0, select bank0
  5850  0144  00C0               	movwf	___ftmul@f1+2
  5851  0145  1683               	bsf	3,5	;RP0=1, select bank1
  5852  0146  1303               	bcf	3,6	;RP1=0, select bank1
  5853  0147  0838               	movf	CalcMQ135@ratio3^(0+128),w
  5854  0148  1283               	bcf	3,5	;RP0=0, select bank0
  5855  0149  1303               	bcf	3,6	;RP1=0, select bank0
  5856  014A  00C1               	movwf	___ftmul@f2
  5857  014B  1683               	bsf	3,5	;RP0=1, select bank1
  5858  014C  1303               	bcf	3,6	;RP1=0, select bank1
  5859  014D  0839               	movf	(CalcMQ135@ratio3+1)^(0+128),w
  5860  014E  1283               	bcf	3,5	;RP0=0, select bank0
  5861  014F  1303               	bcf	3,6	;RP1=0, select bank0
  5862  0150  00C2               	movwf	___ftmul@f2+1
  5863  0151  1683               	bsf	3,5	;RP0=1, select bank1
  5864  0152  1303               	bcf	3,6	;RP1=0, select bank1
  5865  0153  083A               	movf	(CalcMQ135@ratio3+2)^(0+128),w
  5866  0154  1283               	bcf	3,5	;RP0=0, select bank0
  5867  0155  1303               	bcf	3,6	;RP1=0, select bank0
  5868  0156  00C3               	movwf	___ftmul@f2+2
  5869  0157  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5870  015C  1283               	bcf	3,5	;RP0=0, select bank0
  5871  015D  1303               	bcf	3,6	;RP1=0, select bank0
  5872  015E  083E               	movf	?___ftmul,w
  5873  015F  1683               	bsf	3,5	;RP0=1, select bank1
  5874  0160  1303               	bcf	3,6	;RP1=0, select bank1
  5875  0161  00BB               	movwf	CalcMQ135@ratio4^(0+128)
  5876  0162  1283               	bcf	3,5	;RP0=0, select bank0
  5877  0163  1303               	bcf	3,6	;RP1=0, select bank0
  5878  0164  083F               	movf	?___ftmul+1,w
  5879  0165  1683               	bsf	3,5	;RP0=1, select bank1
  5880  0166  1303               	bcf	3,6	;RP1=0, select bank1
  5881  0167  00BC               	movwf	(CalcMQ135@ratio4+1)^(0+128)
  5882  0168  1283               	bcf	3,5	;RP0=0, select bank0
  5883  0169  1303               	bcf	3,6	;RP1=0, select bank0
  5884  016A  0840               	movf	?___ftmul+2,w
  5885  016B  1683               	bsf	3,5	;RP0=1, select bank1
  5886  016C  1303               	bcf	3,6	;RP1=0, select bank1
  5887  016D  00BD               	movwf	(CalcMQ135@ratio4+2)^(0+128)
  5888                           
  5889                           ;mq135_module.h: 102: float ratio5 = ratio4 * ratio;
  5890  016E  0844               	movf	CalcMQ135@ratio^(0+128),w
  5891  016F  1283               	bcf	3,5	;RP0=0, select bank0
  5892  0170  1303               	bcf	3,6	;RP1=0, select bank0
  5893  0171  00BE               	movwf	___ftmul@f1
  5894  0172  1683               	bsf	3,5	;RP0=1, select bank1
  5895  0173  1303               	bcf	3,6	;RP1=0, select bank1
  5896  0174  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5897  0175  1283               	bcf	3,5	;RP0=0, select bank0
  5898  0176  1303               	bcf	3,6	;RP1=0, select bank0
  5899  0177  00BF               	movwf	___ftmul@f1+1
  5900  0178  1683               	bsf	3,5	;RP0=1, select bank1
  5901  0179  1303               	bcf	3,6	;RP1=0, select bank1
  5902  017A  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5903  017B  1283               	bcf	3,5	;RP0=0, select bank0
  5904  017C  1303               	bcf	3,6	;RP1=0, select bank0
  5905  017D  00C0               	movwf	___ftmul@f1+2
  5906  017E  1683               	bsf	3,5	;RP0=1, select bank1
  5907  017F  1303               	bcf	3,6	;RP1=0, select bank1
  5908  0180  083B               	movf	CalcMQ135@ratio4^(0+128),w
  5909  0181  1283               	bcf	3,5	;RP0=0, select bank0
  5910  0182  1303               	bcf	3,6	;RP1=0, select bank0
  5911  0183  00C1               	movwf	___ftmul@f2
  5912  0184  1683               	bsf	3,5	;RP0=1, select bank1
  5913  0185  1303               	bcf	3,6	;RP1=0, select bank1
  5914  0186  083C               	movf	(CalcMQ135@ratio4+1)^(0+128),w
  5915  0187  1283               	bcf	3,5	;RP0=0, select bank0
  5916  0188  1303               	bcf	3,6	;RP1=0, select bank0
  5917  0189  00C2               	movwf	___ftmul@f2+1
  5918  018A  1683               	bsf	3,5	;RP0=1, select bank1
  5919  018B  1303               	bcf	3,6	;RP1=0, select bank1
  5920  018C  083D               	movf	(CalcMQ135@ratio4+2)^(0+128),w
  5921  018D  1283               	bcf	3,5	;RP0=0, select bank0
  5922  018E  1303               	bcf	3,6	;RP1=0, select bank0
  5923  018F  00C3               	movwf	___ftmul@f2+2
  5924  0190  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5925  0195  1283               	bcf	3,5	;RP0=0, select bank0
  5926  0196  1303               	bcf	3,6	;RP1=0, select bank0
  5927  0197  083E               	movf	?___ftmul,w
  5928  0198  1683               	bsf	3,5	;RP0=1, select bank1
  5929  0199  1303               	bcf	3,6	;RP1=0, select bank1
  5930  019A  00BE               	movwf	CalcMQ135@ratio5^(0+128)
  5931  019B  1283               	bcf	3,5	;RP0=0, select bank0
  5932  019C  1303               	bcf	3,6	;RP1=0, select bank0
  5933  019D  083F               	movf	?___ftmul+1,w
  5934  019E  1683               	bsf	3,5	;RP0=1, select bank1
  5935  019F  1303               	bcf	3,6	;RP1=0, select bank1
  5936  01A0  00BF               	movwf	(CalcMQ135@ratio5+1)^(0+128)
  5937  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  5938  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  5939  01A3  0840               	movf	?___ftmul+2,w
  5940  01A4  1683               	bsf	3,5	;RP0=1, select bank1
  5941  01A5  1303               	bcf	3,6	;RP1=0, select bank1
  5942  01A6  00C0               	movwf	(CalcMQ135@ratio5+2)^(0+128)
  5943                           
  5944                           ;mq135_module.h: 103: float ratio6 = ratio5 * ratio;
  5945  01A7  0844               	movf	CalcMQ135@ratio^(0+128),w
  5946  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  5947  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  5948  01AA  00BE               	movwf	___ftmul@f1
  5949  01AB  1683               	bsf	3,5	;RP0=1, select bank1
  5950  01AC  1303               	bcf	3,6	;RP1=0, select bank1
  5951  01AD  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5952  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  5953  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  5954  01B0  00BF               	movwf	___ftmul@f1+1
  5955  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  5956  01B2  1303               	bcf	3,6	;RP1=0, select bank1
  5957  01B3  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5958  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  5959  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  5960  01B6  00C0               	movwf	___ftmul@f1+2
  5961  01B7  1683               	bsf	3,5	;RP0=1, select bank1
  5962  01B8  1303               	bcf	3,6	;RP1=0, select bank1
  5963  01B9  083E               	movf	CalcMQ135@ratio5^(0+128),w
  5964  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  5965  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  5966  01BC  00C1               	movwf	___ftmul@f2
  5967  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  5968  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  5969  01BF  083F               	movf	(CalcMQ135@ratio5+1)^(0+128),w
  5970  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  5971  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  5972  01C2  00C2               	movwf	___ftmul@f2+1
  5973  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  5974  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  5975  01C5  0840               	movf	(CalcMQ135@ratio5+2)^(0+128),w
  5976  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  5977  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  5978  01C8  00C3               	movwf	___ftmul@f2+2
  5979  01C9  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5980  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  5981  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  5982  01D0  083E               	movf	?___ftmul,w
  5983  01D1  1683               	bsf	3,5	;RP0=1, select bank1
  5984  01D2  1303               	bcf	3,6	;RP1=0, select bank1
  5985  01D3  00A3               	movwf	CalcMQ135@ratio6^(0+128)
  5986  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  5987  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  5988  01D6  083F               	movf	?___ftmul+1,w
  5989  01D7  1683               	bsf	3,5	;RP0=1, select bank1
  5990  01D8  1303               	bcf	3,6	;RP1=0, select bank1
  5991  01D9  00A4               	movwf	(CalcMQ135@ratio6+1)^(0+128)
  5992  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  5993  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  5994  01DC  0840               	movf	?___ftmul+2,w
  5995  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  5996  01DE  1303               	bcf	3,6	;RP1=0, select bank1
  5997  01DF  00A5               	movwf	(CalcMQ135@ratio6+2)^(0+128)
  5998                           
  5999                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  6000                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  6001  01E0  309C               	movlw	156
  6002  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  6003  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  6004  01E3  00BE               	movwf	___ftmul@f1
  6005  01E4  30B2               	movlw	178
  6006  01E5  00BF               	movwf	___ftmul@f1+1
  6007  01E6  303F               	movlw	63
  6008  01E7  00C0               	movwf	___ftmul@f1+2
  6009  01E8  1683               	bsf	3,5	;RP0=1, select bank1
  6010  01E9  1303               	bcf	3,6	;RP1=0, select bank1
  6011  01EA  0835               	movf	CalcMQ135@ratio2^(0+128),w
  6012  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  6013  01EC  1303               	bcf	3,6	;RP1=0, select bank0
  6014  01ED  00C1               	movwf	___ftmul@f2
  6015  01EE  1683               	bsf	3,5	;RP0=1, select bank1
  6016  01EF  1303               	bcf	3,6	;RP1=0, select bank1
  6017  01F0  0836               	movf	(CalcMQ135@ratio2+1)^(0+128),w
  6018  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  6019  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  6020  01F3  00C2               	movwf	___ftmul@f2+1
  6021  01F4  1683               	bsf	3,5	;RP0=1, select bank1
  6022  01F5  1303               	bcf	3,6	;RP1=0, select bank1
  6023  01F6  0837               	movf	(CalcMQ135@ratio2+2)^(0+128),w
  6024  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  6025  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  6026  01F9  00C3               	movwf	___ftmul@f2+2
  6027  01FA  120A  158A  24FB  120A  118A  	fcall	___ftmul
  6028  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  6029  0200  1303               	bcf	3,6	;RP1=0, select bank0
  6030  0201  083E               	movf	?___ftmul,w
  6031  0202  00B1               	movwf	___ftadd@f1
  6032  0203  083F               	movf	?___ftmul+1,w
  6033  0204  00B2               	movwf	___ftadd@f1+1
  6034  0205  0840               	movf	?___ftmul+2,w
  6035  0206  00B3               	movwf	___ftadd@f1+2
  6036  0207  30A9               	movlw	169
  6037  0208  00BE               	movwf	___ftmul@f1
  6038  0209  30DE               	movlw	222
  6039  020A  00BF               	movwf	___ftmul@f1+1
  6040  020B  303C               	movlw	60
  6041  020C  00C0               	movwf	___ftmul@f1+2
  6042  020D  1683               	bsf	3,5	;RP0=1, select bank1
  6043  020E  1303               	bcf	3,6	;RP1=0, select bank1
  6044  020F  0844               	movf	CalcMQ135@ratio^(0+128),w
  6045  0210  1283               	bcf	3,5	;RP0=0, select bank0
  6046  0211  1303               	bcf	3,6	;RP1=0, select bank0
  6047  0212  00C1               	movwf	___ftmul@f2
  6048  0213  1683               	bsf	3,5	;RP0=1, select bank1
  6049  0214  1303               	bcf	3,6	;RP1=0, select bank1
  6050  0215  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  6051  0216  1283               	bcf	3,5	;RP0=0, select bank0
  6052  0217  1303               	bcf	3,6	;RP1=0, select bank0
  6053  0218  00C2               	movwf	___ftmul@f2+1
  6054  0219  1683               	bsf	3,5	;RP0=1, select bank1
  6055  021A  1303               	bcf	3,6	;RP1=0, select bank1
  6056  021B  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  6057  021C  1283               	bcf	3,5	;RP0=0, select bank0
  6058  021D  1303               	bcf	3,6	;RP1=0, select bank0
  6059  021E  00C3               	movwf	___ftmul@f2+2
  6060  021F  120A  158A  24FB  120A  118A  	fcall	___ftmul
  6061  0224  1283               	bcf	3,5	;RP0=0, select bank0
  6062  0225  1303               	bcf	3,6	;RP1=0, select bank0
  6063  0226  083E               	movf	?___ftmul,w
  6064  0227  00B4               	movwf	___ftadd@f2
  6065  0228  083F               	movf	?___ftmul+1,w
  6066  0229  00B5               	movwf	___ftadd@f2+1
  6067  022A  0840               	movf	?___ftmul+2,w
  6068  022B  00B6               	movwf	___ftadd@f2+2
  6069  022C  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6070  0231  1283               	bcf	3,5	;RP0=0, select bank0
  6071  0232  1303               	bcf	3,6	;RP1=0, select bank0
  6072  0233  0831               	movf	?___ftadd,w
  6073  0234  1683               	bsf	3,5	;RP0=1, select bank1
  6074  0235  1303               	bcf	3,6	;RP1=0, select bank1
  6075  0236  00A6               	movwf	_CalcMQ135$723^(0+128)
  6076  0237  1283               	bcf	3,5	;RP0=0, select bank0
  6077  0238  1303               	bcf	3,6	;RP1=0, select bank0
  6078  0239  0832               	movf	?___ftadd+1,w
  6079  023A  1683               	bsf	3,5	;RP0=1, select bank1
  6080  023B  1303               	bcf	3,6	;RP1=0, select bank1
  6081  023C  00A7               	movwf	(_CalcMQ135$723+1)^(0+128)
  6082  023D  1283               	bcf	3,5	;RP0=0, select bank0
  6083  023E  1303               	bcf	3,6	;RP1=0, select bank0
  6084  023F  0833               	movf	?___ftadd+2,w
  6085  0240  1683               	bsf	3,5	;RP0=1, select bank1
  6086  0241  1303               	bcf	3,6	;RP1=0, select bank1
  6087  0242  00A8               	movwf	(_CalcMQ135$723+2)^(0+128)
  6088                           
  6089                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  6090                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  6091  0243  30EE               	movlw	238
  6092  0244  1283               	bcf	3,5	;RP0=0, select bank0
  6093  0245  1303               	bcf	3,6	;RP1=0, select bank0
  6094  0246  00BE               	movwf	___ftmul@f1
  6095  0247  30EB               	movlw	235
  6096  0248  00BF               	movwf	___ftmul@f1+1
  6097  0249  303A               	movlw	58
  6098  024A  00C0               	movwf	___ftmul@f1+2
  6099  024B  1683               	bsf	3,5	;RP0=1, select bank1
  6100  024C  1303               	bcf	3,6	;RP1=0, select bank1
  6101  024D  0838               	movf	CalcMQ135@ratio3^(0+128),w
  6102  024E  1283               	bcf	3,5	;RP0=0, select bank0
  6103  024F  1303               	bcf	3,6	;RP1=0, select bank0
  6104  0250  00C1               	movwf	___ftmul@f2
  6105  0251  1683               	bsf	3,5	;RP0=1, select bank1
  6106  0252  1303               	bcf	3,6	;RP1=0, select bank1
  6107  0253  0839               	movf	(CalcMQ135@ratio3+1)^(0+128),w
  6108  0254  1283               	bcf	3,5	;RP0=0, select bank0
  6109  0255  1303               	bcf	3,6	;RP1=0, select bank0
  6110  0256  00C2               	movwf	___ftmul@f2+1
  6111  0257  1683               	bsf	3,5	;RP0=1, select bank1
  6112  0258  1303               	bcf	3,6	;RP1=0, select bank1
  6113  0259  083A               	movf	(CalcMQ135@ratio3+2)^(0+128),w
  6114  025A  1283               	bcf	3,5	;RP0=0, select bank0
  6115  025B  1303               	bcf	3,6	;RP1=0, select bank0
  6116  025C  00C3               	movwf	___ftmul@f2+2
  6117  025D  120A  158A  24FB  120A  118A  	fcall	___ftmul
  6118  0262  1283               	bcf	3,5	;RP0=0, select bank0
  6119  0263  1303               	bcf	3,6	;RP1=0, select bank0
  6120  0264  083E               	movf	?___ftmul,w
  6121  0265  00B1               	movwf	___ftadd@f1
  6122  0266  083F               	movf	?___ftmul+1,w
  6123  0267  00B2               	movwf	___ftadd@f1+1
  6124  0268  0840               	movf	?___ftmul+2,w
  6125  0269  00B3               	movwf	___ftadd@f1+2
  6126  026A  1683               	bsf	3,5	;RP0=1, select bank1
  6127  026B  1303               	bcf	3,6	;RP1=0, select bank1
  6128  026C  0826               	movf	_CalcMQ135$723^(0+128),w
  6129  026D  1283               	bcf	3,5	;RP0=0, select bank0
  6130  026E  1303               	bcf	3,6	;RP1=0, select bank0
  6131  026F  00B4               	movwf	___ftadd@f2
  6132  0270  1683               	bsf	3,5	;RP0=1, select bank1
  6133  0271  1303               	bcf	3,6	;RP1=0, select bank1
  6134  0272  0827               	movf	(_CalcMQ135$723+1)^(0+128),w
  6135  0273  1283               	bcf	3,5	;RP0=0, select bank0
  6136  0274  1303               	bcf	3,6	;RP1=0, select bank0
  6137  0275  00B5               	movwf	___ftadd@f2+1
  6138  0276  1683               	bsf	3,5	;RP0=1, select bank1
  6139  0277  1303               	bcf	3,6	;RP1=0, select bank1
  6140  0278  0828               	movf	(_CalcMQ135$723+2)^(0+128),w
  6141  0279  1283               	bcf	3,5	;RP0=0, select bank0
  6142  027A  1303               	bcf	3,6	;RP1=0, select bank0
  6143  027B  00B6               	movwf	___ftadd@f2+2
  6144  027C  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6145  0281  1283               	bcf	3,5	;RP0=0, select bank0
  6146  0282  1303               	bcf	3,6	;RP1=0, select bank0
  6147  0283  0831               	movf	?___ftadd,w
  6148  0284  1683               	bsf	3,5	;RP0=1, select bank1
  6149  0285  1303               	bcf	3,6	;RP1=0, select bank1
  6150  0286  00A9               	movwf	_CalcMQ135$724^(0+128)
  6151  0287  1283               	bcf	3,5	;RP0=0, select bank0
  6152  0288  1303               	bcf	3,6	;RP1=0, select bank0
  6153  0289  0832               	movf	?___ftadd+1,w
  6154  028A  1683               	bsf	3,5	;RP0=1, select bank1
  6155  028B  1303               	bcf	3,6	;RP1=0, select bank1
  6156  028C  00AA               	movwf	(_CalcMQ135$724+1)^(0+128)
  6157  028D  1283               	bcf	3,5	;RP0=0, select bank0
  6158  028E  1303               	bcf	3,6	;RP1=0, select bank0
  6159  028F  0833               	movf	?___ftadd+2,w
  6160  0290  1683               	bsf	3,5	;RP0=1, select bank1
  6161  0291  1303               	bcf	3,6	;RP1=0, select bank1
  6162  0292  00AB               	movwf	(_CalcMQ135$724+2)^(0+128)
  6163                           
  6164                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  6165                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  6166  0293  3074               	movlw	116
  6167  0294  1283               	bcf	3,5	;RP0=0, select bank0
  6168  0295  1303               	bcf	3,6	;RP1=0, select bank0
  6169  0296  00BE               	movwf	___ftmul@f1
  6170  0297  305A               	movlw	90
  6171  0298  00BF               	movwf	___ftmul@f1+1
  6172  0299  30BB               	movlw	187
  6173  029A  00C0               	movwf	___ftmul@f1+2
  6174  029B  1683               	bsf	3,5	;RP0=1, select bank1
  6175  029C  1303               	bcf	3,6	;RP1=0, select bank1
  6176  029D  083B               	movf	CalcMQ135@ratio4^(0+128),w
  6177  029E  1283               	bcf	3,5	;RP0=0, select bank0
  6178  029F  1303               	bcf	3,6	;RP1=0, select bank0
  6179  02A0  00C1               	movwf	___ftmul@f2
  6180  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  6181  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  6182  02A3  083C               	movf	(CalcMQ135@ratio4+1)^(0+128),w
  6183  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  6184  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  6185  02A6  00C2               	movwf	___ftmul@f2+1
  6186  02A7  1683               	bsf	3,5	;RP0=1, select bank1
  6187  02A8  1303               	bcf	3,6	;RP1=0, select bank1
  6188  02A9  083D               	movf	(CalcMQ135@ratio4+2)^(0+128),w
  6189  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  6190  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  6191  02AC  00C3               	movwf	___ftmul@f2+2
  6192  02AD  120A  158A  24FB  120A  118A  	fcall	___ftmul
  6193  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  6194  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  6195  02B4  083E               	movf	?___ftmul,w
  6196  02B5  00B1               	movwf	___ftadd@f1
  6197  02B6  083F               	movf	?___ftmul+1,w
  6198  02B7  00B2               	movwf	___ftadd@f1+1
  6199  02B8  0840               	movf	?___ftmul+2,w
  6200  02B9  00B3               	movwf	___ftadd@f1+2
  6201  02BA  1683               	bsf	3,5	;RP0=1, select bank1
  6202  02BB  1303               	bcf	3,6	;RP1=0, select bank1
  6203  02BC  0829               	movf	_CalcMQ135$724^(0+128),w
  6204  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  6205  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  6206  02BF  00B4               	movwf	___ftadd@f2
  6207  02C0  1683               	bsf	3,5	;RP0=1, select bank1
  6208  02C1  1303               	bcf	3,6	;RP1=0, select bank1
  6209  02C2  082A               	movf	(_CalcMQ135$724+1)^(0+128),w
  6210  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  6211  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  6212  02C5  00B5               	movwf	___ftadd@f2+1
  6213  02C6  1683               	bsf	3,5	;RP0=1, select bank1
  6214  02C7  1303               	bcf	3,6	;RP1=0, select bank1
  6215  02C8  082B               	movf	(_CalcMQ135$724+2)^(0+128),w
  6216  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  6217  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  6218  02CB  00B6               	movwf	___ftadd@f2+2
  6219  02CC  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6220  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  6221  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  6222  02D3  0831               	movf	?___ftadd,w
  6223  02D4  1683               	bsf	3,5	;RP0=1, select bank1
  6224  02D5  1303               	bcf	3,6	;RP1=0, select bank1
  6225  02D6  00AC               	movwf	_CalcMQ135$725^(0+128)
  6226  02D7  1283               	bcf	3,5	;RP0=0, select bank0
  6227  02D8  1303               	bcf	3,6	;RP1=0, select bank0
  6228  02D9  0832               	movf	?___ftadd+1,w
  6229  02DA  1683               	bsf	3,5	;RP0=1, select bank1
  6230  02DB  1303               	bcf	3,6	;RP1=0, select bank1
  6231  02DC  00AD               	movwf	(_CalcMQ135$725+1)^(0+128)
  6232  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  6233  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  6234  02DF  0833               	movf	?___ftadd+2,w
  6235  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  6236  02E1  1303               	bcf	3,6	;RP1=0, select bank1
  6237  02E2  00AE               	movwf	(_CalcMQ135$725+2)^(0+128)
  6238                           
  6239                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  6240                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  6241  02E3  3010               	movlw	16
  6242  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  6243  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  6244  02E6  00BE               	movwf	___ftmul@f1
  6245  02E7  30FC               	movlw	252
  6246  02E8  00BF               	movwf	___ftmul@f1+1
  6247  02E9  30BA               	movlw	186
  6248  02EA  00C0               	movwf	___ftmul@f1+2
  6249  02EB  1683               	bsf	3,5	;RP0=1, select bank1
  6250  02EC  1303               	bcf	3,6	;RP1=0, select bank1
  6251  02ED  083E               	movf	CalcMQ135@ratio5^(0+128),w
  6252  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  6253  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  6254  02F0  00C1               	movwf	___ftmul@f2
  6255  02F1  1683               	bsf	3,5	;RP0=1, select bank1
  6256  02F2  1303               	bcf	3,6	;RP1=0, select bank1
  6257  02F3  083F               	movf	(CalcMQ135@ratio5+1)^(0+128),w
  6258  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  6259  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  6260  02F6  00C2               	movwf	___ftmul@f2+1
  6261  02F7  1683               	bsf	3,5	;RP0=1, select bank1
  6262  02F8  1303               	bcf	3,6	;RP1=0, select bank1
  6263  02F9  0840               	movf	(CalcMQ135@ratio5+2)^(0+128),w
  6264  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  6265  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  6266  02FC  00C3               	movwf	___ftmul@f2+2
  6267  02FD  120A  158A  24FB  120A  118A  	fcall	___ftmul
  6268  0302  1283               	bcf	3,5	;RP0=0, select bank0
  6269  0303  1303               	bcf	3,6	;RP1=0, select bank0
  6270  0304  083E               	movf	?___ftmul,w
  6271  0305  00B1               	movwf	___ftadd@f1
  6272  0306  083F               	movf	?___ftmul+1,w
  6273  0307  00B2               	movwf	___ftadd@f1+1
  6274  0308  0840               	movf	?___ftmul+2,w
  6275  0309  00B3               	movwf	___ftadd@f1+2
  6276  030A  1683               	bsf	3,5	;RP0=1, select bank1
  6277  030B  1303               	bcf	3,6	;RP1=0, select bank1
  6278  030C  082C               	movf	_CalcMQ135$725^(0+128),w
  6279  030D  1283               	bcf	3,5	;RP0=0, select bank0
  6280  030E  1303               	bcf	3,6	;RP1=0, select bank0
  6281  030F  00B4               	movwf	___ftadd@f2
  6282  0310  1683               	bsf	3,5	;RP0=1, select bank1
  6283  0311  1303               	bcf	3,6	;RP1=0, select bank1
  6284  0312  082D               	movf	(_CalcMQ135$725+1)^(0+128),w
  6285  0313  1283               	bcf	3,5	;RP0=0, select bank0
  6286  0314  1303               	bcf	3,6	;RP1=0, select bank0
  6287  0315  00B5               	movwf	___ftadd@f2+1
  6288  0316  1683               	bsf	3,5	;RP0=1, select bank1
  6289  0317  1303               	bcf	3,6	;RP1=0, select bank1
  6290  0318  082E               	movf	(_CalcMQ135$725+2)^(0+128),w
  6291  0319  1283               	bcf	3,5	;RP0=0, select bank0
  6292  031A  1303               	bcf	3,6	;RP1=0, select bank0
  6293  031B  00B6               	movwf	___ftadd@f2+2
  6294  031C  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6295  0321  1283               	bcf	3,5	;RP0=0, select bank0
  6296  0322  1303               	bcf	3,6	;RP1=0, select bank0
  6297  0323  0831               	movf	?___ftadd,w
  6298  0324  1683               	bsf	3,5	;RP0=1, select bank1
  6299  0325  1303               	bcf	3,6	;RP1=0, select bank1
  6300  0326  00AF               	movwf	_CalcMQ135$726^(0+128)
  6301  0327  1283               	bcf	3,5	;RP0=0, select bank0
  6302  0328  1303               	bcf	3,6	;RP1=0, select bank0
  6303  0329  0832               	movf	?___ftadd+1,w
  6304  032A  1683               	bsf	3,5	;RP0=1, select bank1
  6305  032B  1303               	bcf	3,6	;RP1=0, select bank1
  6306  032C  00B0               	movwf	(_CalcMQ135$726+1)^(0+128)
  6307  032D  1283               	bcf	3,5	;RP0=0, select bank0
  6308  032E  1303               	bcf	3,6	;RP1=0, select bank0
  6309  032F  0833               	movf	?___ftadd+2,w
  6310  0330  1683               	bsf	3,5	;RP0=1, select bank1
  6311  0331  1303               	bcf	3,6	;RP1=0, select bank1
  6312  0332  00B1               	movwf	(_CalcMQ135$726+2)^(0+128)
  6313                           
  6314                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  6315                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  6316  0333  30A8               	movlw	168
  6317  0334  1283               	bcf	3,5	;RP0=0, select bank0
  6318  0335  1303               	bcf	3,6	;RP1=0, select bank0
  6319  0336  00BE               	movwf	___ftmul@f1
  6320  0337  3090               	movlw	144
  6321  0338  00BF               	movwf	___ftmul@f1+1
  6322  0339  303F               	movlw	63
  6323  033A  00C0               	movwf	___ftmul@f1+2
  6324  033B  1683               	bsf	3,5	;RP0=1, select bank1
  6325  033C  1303               	bcf	3,6	;RP1=0, select bank1
  6326  033D  0823               	movf	CalcMQ135@ratio6^(0+128),w
  6327  033E  1283               	bcf	3,5	;RP0=0, select bank0
  6328  033F  1303               	bcf	3,6	;RP1=0, select bank0
  6329  0340  00C1               	movwf	___ftmul@f2
  6330  0341  1683               	bsf	3,5	;RP0=1, select bank1
  6331  0342  1303               	bcf	3,6	;RP1=0, select bank1
  6332  0343  0824               	movf	(CalcMQ135@ratio6+1)^(0+128),w
  6333  0344  1283               	bcf	3,5	;RP0=0, select bank0
  6334  0345  1303               	bcf	3,6	;RP1=0, select bank0
  6335  0346  00C2               	movwf	___ftmul@f2+1
  6336  0347  1683               	bsf	3,5	;RP0=1, select bank1
  6337  0348  1303               	bcf	3,6	;RP1=0, select bank1
  6338  0349  0825               	movf	(CalcMQ135@ratio6+2)^(0+128),w
  6339  034A  1283               	bcf	3,5	;RP0=0, select bank0
  6340  034B  1303               	bcf	3,6	;RP1=0, select bank0
  6341  034C  00C3               	movwf	___ftmul@f2+2
  6342  034D  120A  158A  24FB  120A  118A  	fcall	___ftmul
  6343  0352  1283               	bcf	3,5	;RP0=0, select bank0
  6344  0353  1303               	bcf	3,6	;RP1=0, select bank0
  6345  0354  083E               	movf	?___ftmul,w
  6346  0355  00B1               	movwf	___ftadd@f1
  6347  0356  083F               	movf	?___ftmul+1,w
  6348  0357  00B2               	movwf	___ftadd@f1+1
  6349  0358  0840               	movf	?___ftmul+2,w
  6350  0359  00B3               	movwf	___ftadd@f1+2
  6351  035A  1683               	bsf	3,5	;RP0=1, select bank1
  6352  035B  1303               	bcf	3,6	;RP1=0, select bank1
  6353  035C  082F               	movf	_CalcMQ135$726^(0+128),w
  6354  035D  1283               	bcf	3,5	;RP0=0, select bank0
  6355  035E  1303               	bcf	3,6	;RP1=0, select bank0
  6356  035F  00B4               	movwf	___ftadd@f2
  6357  0360  1683               	bsf	3,5	;RP0=1, select bank1
  6358  0361  1303               	bcf	3,6	;RP1=0, select bank1
  6359  0362  0830               	movf	(_CalcMQ135$726+1)^(0+128),w
  6360  0363  1283               	bcf	3,5	;RP0=0, select bank0
  6361  0364  1303               	bcf	3,6	;RP1=0, select bank0
  6362  0365  00B5               	movwf	___ftadd@f2+1
  6363  0366  1683               	bsf	3,5	;RP0=1, select bank1
  6364  0367  1303               	bcf	3,6	;RP1=0, select bank1
  6365  0368  0831               	movf	(_CalcMQ135$726+2)^(0+128),w
  6366  0369  1283               	bcf	3,5	;RP0=0, select bank0
  6367  036A  1303               	bcf	3,6	;RP1=0, select bank0
  6368  036B  00B6               	movwf	___ftadd@f2+2
  6369  036C  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6370  0371  1283               	bcf	3,5	;RP0=0, select bank0
  6371  0372  1303               	bcf	3,6	;RP1=0, select bank0
  6372  0373  0831               	movf	?___ftadd,w
  6373  0374  1683               	bsf	3,5	;RP0=1, select bank1
  6374  0375  1303               	bcf	3,6	;RP1=0, select bank1
  6375  0376  00B2               	movwf	_CalcMQ135$727^(0+128)
  6376  0377  1283               	bcf	3,5	;RP0=0, select bank0
  6377  0378  1303               	bcf	3,6	;RP1=0, select bank0
  6378  0379  0832               	movf	?___ftadd+1,w
  6379  037A  1683               	bsf	3,5	;RP0=1, select bank1
  6380  037B  1303               	bcf	3,6	;RP1=0, select bank1
  6381  037C  00B3               	movwf	(_CalcMQ135$727+1)^(0+128)
  6382  037D  1283               	bcf	3,5	;RP0=0, select bank0
  6383  037E  1303               	bcf	3,6	;RP1=0, select bank0
  6384  037F  0833               	movf	?___ftadd+2,w
  6385  0380  1683               	bsf	3,5	;RP0=1, select bank1
  6386  0381  1303               	bcf	3,6	;RP1=0, select bank1
  6387  0382  00B4               	movwf	(_CalcMQ135$727+2)^(0+128)
  6388                           
  6389                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  6390                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  6391  0383  3080               	movlw	128
  6392  0384  1283               	bcf	3,5	;RP0=0, select bank0
  6393  0385  1303               	bcf	3,6	;RP1=0, select bank0
  6394  0386  00B1               	movwf	___ftadd@f1
  6395  0387  30B7               	movlw	183
  6396  0388  00B2               	movwf	___ftadd@f1+1
  6397  0389  3039               	movlw	57
  6398  038A  00B3               	movwf	___ftadd@f1+2
  6399  038B  1683               	bsf	3,5	;RP0=1, select bank1
  6400  038C  1303               	bcf	3,6	;RP1=0, select bank1
  6401  038D  0832               	movf	_CalcMQ135$727^(0+128),w
  6402  038E  1283               	bcf	3,5	;RP0=0, select bank0
  6403  038F  1303               	bcf	3,6	;RP1=0, select bank0
  6404  0390  00B4               	movwf	___ftadd@f2
  6405  0391  1683               	bsf	3,5	;RP0=1, select bank1
  6406  0392  1303               	bcf	3,6	;RP1=0, select bank1
  6407  0393  0833               	movf	(_CalcMQ135$727+1)^(0+128),w
  6408  0394  1283               	bcf	3,5	;RP0=0, select bank0
  6409  0395  1303               	bcf	3,6	;RP1=0, select bank0
  6410  0396  00B5               	movwf	___ftadd@f2+1
  6411  0397  1683               	bsf	3,5	;RP0=1, select bank1
  6412  0398  1303               	bcf	3,6	;RP1=0, select bank1
  6413  0399  0834               	movf	(_CalcMQ135$727+2)^(0+128),w
  6414  039A  1283               	bcf	3,5	;RP0=0, select bank0
  6415  039B  1303               	bcf	3,6	;RP1=0, select bank0
  6416  039C  00B6               	movwf	___ftadd@f2+2
  6417  039D  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6418  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  6419  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  6420  03A4  0831               	movf	?___ftadd,w
  6421  03A5  1683               	bsf	3,5	;RP0=1, select bank1
  6422  03A6  1303               	bcf	3,6	;RP1=0, select bank1
  6423  03A7  00C1               	movwf	CalcMQ135@co2^(0+128)
  6424  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  6425  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  6426  03AA  0832               	movf	?___ftadd+1,w
  6427  03AB  1683               	bsf	3,5	;RP0=1, select bank1
  6428  03AC  1303               	bcf	3,6	;RP1=0, select bank1
  6429  03AD  00C2               	movwf	(CalcMQ135@co2+1)^(0+128)
  6430  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  6431  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  6432  03B0  0833               	movf	?___ftadd+2,w
  6433  03B1  1683               	bsf	3,5	;RP0=1, select bank1
  6434  03B2  1303               	bcf	3,6	;RP1=0, select bank1
  6435  03B3  00C3               	movwf	(CalcMQ135@co2+2)^(0+128)
  6436                           
  6437                           ;mq135_module.h: 109: co2 *= 415.58;
  6438  03B4  30CA               	movlw	202
  6439  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  6440  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  6441  03B7  00BE               	movwf	___ftmul@f1
  6442  03B8  30CF               	movlw	207
  6443  03B9  00BF               	movwf	___ftmul@f1+1
  6444  03BA  3043               	movlw	67
  6445  03BB  00C0               	movwf	___ftmul@f1+2
  6446  03BC  1683               	bsf	3,5	;RP0=1, select bank1
  6447  03BD  1303               	bcf	3,6	;RP1=0, select bank1
  6448  03BE  0841               	movf	CalcMQ135@co2^(0+128),w
  6449  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  6450  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  6451  03C1  00C1               	movwf	___ftmul@f2
  6452  03C2  1683               	bsf	3,5	;RP0=1, select bank1
  6453  03C3  1303               	bcf	3,6	;RP1=0, select bank1
  6454  03C4  0842               	movf	(CalcMQ135@co2+1)^(0+128),w
  6455  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  6456  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  6457  03C7  00C2               	movwf	___ftmul@f2+1
  6458  03C8  1683               	bsf	3,5	;RP0=1, select bank1
  6459  03C9  1303               	bcf	3,6	;RP1=0, select bank1
  6460  03CA  0843               	movf	(CalcMQ135@co2+2)^(0+128),w
  6461  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  6462  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  6463  03CD  00C3               	movwf	___ftmul@f2+2
  6464  03CE  120A  158A  24FB   	fcall	___ftmul
  6465  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  6466  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  6467  03D3  083E               	movf	?___ftmul,w
  6468  03D4  1683               	bsf	3,5	;RP0=1, select bank1
  6469  03D5  1303               	bcf	3,6	;RP1=0, select bank1
  6470  03D6  00C1               	movwf	CalcMQ135@co2^(0+128)
  6471  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  6472  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  6473  03D9  083F               	movf	?___ftmul+1,w
  6474  03DA  1683               	bsf	3,5	;RP0=1, select bank1
  6475  03DB  1303               	bcf	3,6	;RP1=0, select bank1
  6476  03DC  00C2               	movwf	(CalcMQ135@co2+1)^(0+128)
  6477  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  6478  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  6479  03DF  0840               	movf	?___ftmul+2,w
  6480  03E0  1683               	bsf	3,5	;RP0=1, select bank1
  6481  03E1  1303               	bcf	3,6	;RP1=0, select bank1
  6482  03E2  00C3               	movwf	(CalcMQ135@co2+2)^(0+128)
  6483                           
  6484                           ;mq135_module.h: 110: return co2;
  6485  03E3  0841               	movf	CalcMQ135@co2^(0+128),w
  6486  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  6487  03E5  1303               	bcf	3,6	;RP1=0, select bank0
  6488  03E6  00DE               	movwf	?_CalcMQ135
  6489  03E7  1683               	bsf	3,5	;RP0=1, select bank1
  6490  03E8  1303               	bcf	3,6	;RP1=0, select bank1
  6491  03E9  0842               	movf	(CalcMQ135@co2+1)^(0+128),w
  6492  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  6493  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  6494  03EC  00DF               	movwf	?_CalcMQ135+1
  6495  03ED  1683               	bsf	3,5	;RP0=1, select bank1
  6496  03EE  1303               	bcf	3,6	;RP1=0, select bank1
  6497  03EF  0843               	movf	(CalcMQ135@co2+2)^(0+128),w
  6498  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  6499  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  6500  03F2  00E0               	movwf	?_CalcMQ135+2
  6501  03F3  0008               	return
  6502  03F4                     __end_of_CalcMQ135:	
  6503                           
  6504                           	psect	text25
  6505  0CFB                     __ptext25:	
  6506 ;; *************** function ___ftmul *****************
  6507 ;; Defined at:
  6508 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6509 ;; Parameters:    Size  Location     Type
  6510 ;;  f1              3   30[BANK0 ] float 
  6511 ;;  f2              3   33[BANK0 ] float 
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;  f3_as_produc    3   41[BANK0 ] unsigned um
  6514 ;;  sign            1   45[BANK0 ] unsigned char 
  6515 ;;  cntr            1   44[BANK0 ] unsigned char 
  6516 ;;  exp             1   40[BANK0 ] unsigned char 
  6517 ;; Return value:  Size  Location     Type
  6518 ;;                  3   30[BANK0 ] float 
  6519 ;; Registers used:
  6520 ;;		wreg, status,2, status,0, pclath, cstack
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6526 ;;      Params:         0       6       0       0       0
  6527 ;;      Locals:         0       6       0       0       0
  6528 ;;      Temps:          0       4       0       0       0
  6529 ;;      Totals:         0      16       0       0       0
  6530 ;;Total ram usage:       16 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:    3
  6533 ;; This function calls:
  6534 ;;		___ftpack
  6535 ;; This function is called by:
  6536 ;;		_displayPPM
  6537 ;;		_CalcMQ135
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           
  6542                           ;psect for function ___ftmul
  6543  0CFB                     ___ftmul:	
  6544                           
  6545                           ;incstack = 0
  6546                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6547  0CFB  1283               	bcf	3,5	;RP0=0, select bank0
  6548  0CFC  1303               	bcf	3,6	;RP1=0, select bank0
  6549  0CFD  083E               	movf	___ftmul@f1,w
  6550  0CFE  00C4               	movwf	??___ftmul
  6551  0CFF  083F               	movf	___ftmul@f1+1,w
  6552  0D00  00C5               	movwf	??___ftmul+1
  6553  0D01  0840               	movf	___ftmul@f1+2,w
  6554  0D02  00C6               	movwf	??___ftmul+2
  6555  0D03  1003               	clrc
  6556  0D04  0D45               	rlf	??___ftmul+1,w
  6557  0D05  0D46               	rlf	??___ftmul+2,w
  6558  0D06  00C7               	movwf	??___ftmul+3
  6559  0D07  0847               	movf	??___ftmul+3,w
  6560  0D08  00C8               	movwf	___ftmul@exp
  6561  0D09  08C8               	movf	___ftmul@exp,f
  6562  0D0A  1D03               	skipz
  6563  0D0B  2D13               	goto	l2394
  6564  0D0C  3000               	movlw	0
  6565  0D0D  00BE               	movwf	?___ftmul
  6566  0D0E  3000               	movlw	0
  6567  0D0F  00BF               	movwf	?___ftmul+1
  6568  0D10  3000               	movlw	0
  6569  0D11  00C0               	movwf	?___ftmul+2
  6570  0D12  0008               	return
  6571  0D13                     l2394:	
  6572  0D13  0841               	movf	___ftmul@f2,w
  6573  0D14  00C4               	movwf	??___ftmul
  6574  0D15  0842               	movf	___ftmul@f2+1,w
  6575  0D16  00C5               	movwf	??___ftmul+1
  6576  0D17  0843               	movf	___ftmul@f2+2,w
  6577  0D18  00C6               	movwf	??___ftmul+2
  6578  0D19  1003               	clrc
  6579  0D1A  0D45               	rlf	??___ftmul+1,w
  6580  0D1B  0D46               	rlf	??___ftmul+2,w
  6581  0D1C  00C7               	movwf	??___ftmul+3
  6582  0D1D  0847               	movf	??___ftmul+3,w
  6583  0D1E  00CD               	movwf	___ftmul@sign
  6584  0D1F  08CD               	movf	___ftmul@sign,f
  6585  0D20  1D03               	skipz
  6586  0D21  2D29               	goto	l2400
  6587  0D22  3000               	movlw	0
  6588  0D23  00BE               	movwf	?___ftmul
  6589  0D24  3000               	movlw	0
  6590  0D25  00BF               	movwf	?___ftmul+1
  6591  0D26  3000               	movlw	0
  6592  0D27  00C0               	movwf	?___ftmul+2
  6593  0D28  0008               	return
  6594  0D29                     l2400:	
  6595  0D29  084D               	movf	___ftmul@sign,w
  6596  0D2A  3E7B               	addlw	123
  6597  0D2B  00C4               	movwf	??___ftmul
  6598  0D2C  0844               	movf	??___ftmul,w
  6599  0D2D  07C8               	addwf	___ftmul@exp,f
  6600  0D2E  083E               	movf	___ftmul@f1,w
  6601  0D2F  00C4               	movwf	??___ftmul
  6602  0D30  083F               	movf	___ftmul@f1+1,w
  6603  0D31  00C5               	movwf	??___ftmul+1
  6604  0D32  0840               	movf	___ftmul@f1+2,w
  6605  0D33  00C6               	movwf	??___ftmul+2
  6606  0D34  3010               	movlw	16
  6607  0D35                     u2955:	
  6608  0D35  1003               	clrc
  6609  0D36  0CC6               	rrf	??___ftmul+2,f
  6610  0D37  0CC5               	rrf	??___ftmul+1,f
  6611  0D38  0CC4               	rrf	??___ftmul,f
  6612  0D39  3EFF               	addlw	-1
  6613  0D3A  1D03               	skipz
  6614  0D3B  2D35               	goto	u2955
  6615  0D3C  0844               	movf	??___ftmul,w
  6616  0D3D  00C7               	movwf	??___ftmul+3
  6617  0D3E  0847               	movf	??___ftmul+3,w
  6618  0D3F  00CD               	movwf	___ftmul@sign
  6619  0D40  0841               	movf	___ftmul@f2,w
  6620  0D41  00C4               	movwf	??___ftmul
  6621  0D42  0842               	movf	___ftmul@f2+1,w
  6622  0D43  00C5               	movwf	??___ftmul+1
  6623  0D44  0843               	movf	___ftmul@f2+2,w
  6624  0D45  00C6               	movwf	??___ftmul+2
  6625  0D46  3010               	movlw	16
  6626  0D47                     u2965:	
  6627  0D47  1003               	clrc
  6628  0D48  0CC6               	rrf	??___ftmul+2,f
  6629  0D49  0CC5               	rrf	??___ftmul+1,f
  6630  0D4A  0CC4               	rrf	??___ftmul,f
  6631  0D4B  3EFF               	addlw	-1
  6632  0D4C  1D03               	skipz
  6633  0D4D  2D47               	goto	u2965
  6634  0D4E  0844               	movf	??___ftmul,w
  6635  0D4F  00C7               	movwf	??___ftmul+3
  6636  0D50  0847               	movf	??___ftmul+3,w
  6637  0D51  06CD               	xorwf	___ftmul@sign,f
  6638  0D52  3080               	movlw	128
  6639  0D53  00C4               	movwf	??___ftmul
  6640  0D54  0844               	movf	??___ftmul,w
  6641  0D55  05CD               	andwf	___ftmul@sign,f
  6642  0D56  17BF               	bsf	___ftmul@f1+1,7
  6643  0D57  17C2               	bsf	___ftmul@f2+1,7
  6644  0D58  30FF               	movlw	255
  6645  0D59  05C1               	andwf	___ftmul@f2,f
  6646  0D5A  30FF               	movlw	255
  6647  0D5B  05C2               	andwf	___ftmul@f2+1,f
  6648  0D5C  3000               	movlw	0
  6649  0D5D  05C3               	andwf	___ftmul@f2+2,f
  6650  0D5E  3000               	movlw	0
  6651  0D5F  00C9               	movwf	___ftmul@f3_as_product
  6652  0D60  3000               	movlw	0
  6653  0D61  00CA               	movwf	___ftmul@f3_as_product+1
  6654  0D62  3000               	movlw	0
  6655  0D63  00CB               	movwf	___ftmul@f3_as_product+2
  6656  0D64  3007               	movlw	7
  6657  0D65  00C4               	movwf	??___ftmul
  6658  0D66  0844               	movf	??___ftmul,w
  6659  0D67  00CC               	movwf	___ftmul@cntr
  6660  0D68                     l2412:	
  6661  0D68  1C3E               	btfss	___ftmul@f1,0
  6662  0D69  2D78               	goto	l2416
  6663  0D6A  0841               	movf	___ftmul@f2,w
  6664  0D6B  07C9               	addwf	___ftmul@f3_as_product,f
  6665  0D6C  0842               	movf	___ftmul@f2+1,w
  6666  0D6D  1103               	clrz
  6667  0D6E  1803               	skipnc
  6668  0D6F  0A42               	incf	___ftmul@f2+1,w
  6669  0D70  1D03               	btfss	3,2
  6670  0D71  07CA               	addwf	___ftmul@f3_as_product+1,f
  6671  0D72  0843               	movf	___ftmul@f2+2,w
  6672  0D73  1103               	clrz
  6673  0D74  1803               	skipnc
  6674  0D75  0A43               	incf	___ftmul@f2+2,w
  6675  0D76  1D03               	btfss	3,2
  6676  0D77  07CB               	addwf	___ftmul@f3_as_product+2,f
  6677  0D78                     l2416:	
  6678  0D78  3001               	movlw	1
  6679  0D79                     u2995:	
  6680  0D79  1003               	clrc
  6681  0D7A  0CC0               	rrf	___ftmul@f1+2,f
  6682  0D7B  0CBF               	rrf	___ftmul@f1+1,f
  6683  0D7C  0CBE               	rrf	___ftmul@f1,f
  6684  0D7D  3EFF               	addlw	-1
  6685  0D7E  1D03               	skipz
  6686  0D7F  2D79               	goto	u2995
  6687  0D80  3001               	movlw	1
  6688  0D81                     u3005:	
  6689  0D81  1003               	clrc
  6690  0D82  0DC1               	rlf	___ftmul@f2,f
  6691  0D83  0DC2               	rlf	___ftmul@f2+1,f
  6692  0D84  0DC3               	rlf	___ftmul@f2+2,f
  6693  0D85  3EFF               	addlw	-1
  6694  0D86  1D03               	skipz
  6695  0D87  2D81               	goto	u3005
  6696  0D88  3001               	movlw	1
  6697  0D89  02CC               	subwf	___ftmul@cntr,f
  6698  0D8A  1D03               	btfss	3,2
  6699  0D8B  2D68               	goto	l2412
  6700  0D8C  3009               	movlw	9
  6701  0D8D  00C4               	movwf	??___ftmul
  6702  0D8E  0844               	movf	??___ftmul,w
  6703  0D8F  00CC               	movwf	___ftmul@cntr
  6704  0D90                     l2424:	
  6705  0D90  1C3E               	btfss	___ftmul@f1,0
  6706  0D91  2DA0               	goto	l2428
  6707  0D92  0841               	movf	___ftmul@f2,w
  6708  0D93  07C9               	addwf	___ftmul@f3_as_product,f
  6709  0D94  0842               	movf	___ftmul@f2+1,w
  6710  0D95  1103               	clrz
  6711  0D96  1803               	skipnc
  6712  0D97  0A42               	incf	___ftmul@f2+1,w
  6713  0D98  1D03               	btfss	3,2
  6714  0D99  07CA               	addwf	___ftmul@f3_as_product+1,f
  6715  0D9A  0843               	movf	___ftmul@f2+2,w
  6716  0D9B  1103               	clrz
  6717  0D9C  1803               	skipnc
  6718  0D9D  0A43               	incf	___ftmul@f2+2,w
  6719  0D9E  1D03               	btfss	3,2
  6720  0D9F  07CB               	addwf	___ftmul@f3_as_product+2,f
  6721  0DA0                     l2428:	
  6722  0DA0  3001               	movlw	1
  6723  0DA1                     u3045:	
  6724  0DA1  1003               	clrc
  6725  0DA2  0CC0               	rrf	___ftmul@f1+2,f
  6726  0DA3  0CBF               	rrf	___ftmul@f1+1,f
  6727  0DA4  0CBE               	rrf	___ftmul@f1,f
  6728  0DA5  3EFF               	addlw	-1
  6729  0DA6  1D03               	skipz
  6730  0DA7  2DA1               	goto	u3045
  6731  0DA8  3001               	movlw	1
  6732  0DA9                     u3055:	
  6733  0DA9  1003               	clrc
  6734  0DAA  0CCB               	rrf	___ftmul@f3_as_product+2,f
  6735  0DAB  0CCA               	rrf	___ftmul@f3_as_product+1,f
  6736  0DAC  0CC9               	rrf	___ftmul@f3_as_product,f
  6737  0DAD  3EFF               	addlw	-1
  6738  0DAE  1D03               	skipz
  6739  0DAF  2DA9               	goto	u3055
  6740  0DB0  3001               	movlw	1
  6741  0DB1  02CC               	subwf	___ftmul@cntr,f
  6742  0DB2  1D03               	btfss	3,2
  6743  0DB3  2D90               	goto	l2424
  6744  0DB4  0849               	movf	___ftmul@f3_as_product,w
  6745  0DB5  00A0               	movwf	___ftpack@arg
  6746  0DB6  084A               	movf	___ftmul@f3_as_product+1,w
  6747  0DB7  00A1               	movwf	___ftpack@arg+1
  6748  0DB8  084B               	movf	___ftmul@f3_as_product+2,w
  6749  0DB9  00A2               	movwf	___ftpack@arg+2
  6750  0DBA  0848               	movf	___ftmul@exp,w
  6751  0DBB  00C4               	movwf	??___ftmul
  6752  0DBC  0844               	movf	??___ftmul,w
  6753  0DBD  00A3               	movwf	___ftpack@exp
  6754  0DBE  084D               	movf	___ftmul@sign,w
  6755  0DBF  00C5               	movwf	??___ftmul+1
  6756  0DC0  0845               	movf	??___ftmul+1,w
  6757  0DC1  00A4               	movwf	___ftpack@sign
  6758  0DC2  160A  118A  269C   	fcall	___ftpack
  6759  0DC5  1283               	bcf	3,5	;RP0=0, select bank0
  6760  0DC6  1303               	bcf	3,6	;RP1=0, select bank0
  6761  0DC7  0820               	movf	?___ftpack,w
  6762  0DC8  00BE               	movwf	?___ftmul
  6763  0DC9  0821               	movf	?___ftpack+1,w
  6764  0DCA  00BF               	movwf	?___ftmul+1
  6765  0DCB  0822               	movf	?___ftpack+2,w
  6766  0DCC  00C0               	movwf	?___ftmul+2
  6767  0DCD  0008               	return
  6768  0DCE                     __end_of___ftmul:	
  6769                           
  6770                           	psect	text26
  6771  0943                     __ptext26:	
  6772 ;; *************** function ___ftdiv *****************
  6773 ;; Defined at:
  6774 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  6775 ;; Parameters:    Size  Location     Type
  6776 ;;  f2              3   46[BANK0 ] float 
  6777 ;;  f1              3   49[BANK0 ] float 
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;  f3              3   57[BANK0 ] float 
  6780 ;;  sign            1   61[BANK0 ] unsigned char 
  6781 ;;  exp             1   60[BANK0 ] unsigned char 
  6782 ;;  cntr            1   56[BANK0 ] unsigned char 
  6783 ;; Return value:  Size  Location     Type
  6784 ;;                  3   46[BANK0 ] float 
  6785 ;; Registers used:
  6786 ;;		wreg, status,2, status,0, pclath, cstack
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6792 ;;      Params:         0       6       0       0       0
  6793 ;;      Locals:         0       6       0       0       0
  6794 ;;      Temps:          0       4       0       0       0
  6795 ;;      Totals:         0      16       0       0       0
  6796 ;;Total ram usage:       16 bytes
  6797 ;; Hardware stack levels used:    1
  6798 ;; Hardware stack levels required when called:    3
  6799 ;; This function calls:
  6800 ;;		___ftpack
  6801 ;; This function is called by:
  6802 ;;		_CalcMQ135
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           
  6807                           ;psect for function ___ftdiv
  6808  0943                     ___ftdiv:	
  6809                           
  6810                           ;incstack = 0
  6811                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6812  0943  1283               	bcf	3,5	;RP0=0, select bank0
  6813  0944  1303               	bcf	3,6	;RP1=0, select bank0
  6814  0945  0851               	movf	___ftdiv@f1,w
  6815  0946  00D4               	movwf	??___ftdiv
  6816  0947  0852               	movf	___ftdiv@f1+1,w
  6817  0948  00D5               	movwf	??___ftdiv+1
  6818  0949  0853               	movf	___ftdiv@f1+2,w
  6819  094A  00D6               	movwf	??___ftdiv+2
  6820  094B  1003               	clrc
  6821  094C  0D55               	rlf	??___ftdiv+1,w
  6822  094D  0D56               	rlf	??___ftdiv+2,w
  6823  094E  00D7               	movwf	??___ftdiv+3
  6824  094F  0857               	movf	??___ftdiv+3,w
  6825  0950  00DC               	movwf	___ftdiv@exp
  6826  0951  08DC               	movf	___ftdiv@exp,f
  6827  0952  1D03               	skipz
  6828  0953  295B               	goto	l2352
  6829  0954  3000               	movlw	0
  6830  0955  00CE               	movwf	?___ftdiv
  6831  0956  3000               	movlw	0
  6832  0957  00CF               	movwf	?___ftdiv+1
  6833  0958  3000               	movlw	0
  6834  0959  00D0               	movwf	?___ftdiv+2
  6835  095A  0008               	return
  6836  095B                     l2352:	
  6837  095B  084E               	movf	___ftdiv@f2,w
  6838  095C  00D4               	movwf	??___ftdiv
  6839  095D  084F               	movf	___ftdiv@f2+1,w
  6840  095E  00D5               	movwf	??___ftdiv+1
  6841  095F  0850               	movf	___ftdiv@f2+2,w
  6842  0960  00D6               	movwf	??___ftdiv+2
  6843  0961  1003               	clrc
  6844  0962  0D55               	rlf	??___ftdiv+1,w
  6845  0963  0D56               	rlf	??___ftdiv+2,w
  6846  0964  00D7               	movwf	??___ftdiv+3
  6847  0965  0857               	movf	??___ftdiv+3,w
  6848  0966  00DD               	movwf	___ftdiv@sign
  6849  0967  08DD               	movf	___ftdiv@sign,f
  6850  0968  1D03               	skipz
  6851  0969  2971               	goto	l2358
  6852  096A  3000               	movlw	0
  6853  096B  00CE               	movwf	?___ftdiv
  6854  096C  3000               	movlw	0
  6855  096D  00CF               	movwf	?___ftdiv+1
  6856  096E  3000               	movlw	0
  6857  096F  00D0               	movwf	?___ftdiv+2
  6858  0970  0008               	return
  6859  0971                     l2358:	
  6860  0971  3000               	movlw	0
  6861  0972  00D9               	movwf	___ftdiv@f3
  6862  0973  3000               	movlw	0
  6863  0974  00DA               	movwf	___ftdiv@f3+1
  6864  0975  3000               	movlw	0
  6865  0976  00DB               	movwf	___ftdiv@f3+2
  6866  0977  3089               	movlw	137
  6867  0978  075D               	addwf	___ftdiv@sign,w
  6868  0979  00D4               	movwf	??___ftdiv
  6869  097A  0854               	movf	??___ftdiv,w
  6870  097B  02DC               	subwf	___ftdiv@exp,f
  6871  097C  0851               	movf	___ftdiv@f1,w
  6872  097D  00D4               	movwf	??___ftdiv
  6873  097E  0852               	movf	___ftdiv@f1+1,w
  6874  097F  00D5               	movwf	??___ftdiv+1
  6875  0980  0853               	movf	___ftdiv@f1+2,w
  6876  0981  00D6               	movwf	??___ftdiv+2
  6877  0982  3010               	movlw	16
  6878  0983                     u2875:	
  6879  0983  1003               	clrc
  6880  0984  0CD6               	rrf	??___ftdiv+2,f
  6881  0985  0CD5               	rrf	??___ftdiv+1,f
  6882  0986  0CD4               	rrf	??___ftdiv,f
  6883  0987  3EFF               	addlw	-1
  6884  0988  1D03               	skipz
  6885  0989  2983               	goto	u2875
  6886  098A  0854               	movf	??___ftdiv,w
  6887  098B  00D7               	movwf	??___ftdiv+3
  6888  098C  0857               	movf	??___ftdiv+3,w
  6889  098D  00DD               	movwf	___ftdiv@sign
  6890  098E  084E               	movf	___ftdiv@f2,w
  6891  098F  00D4               	movwf	??___ftdiv
  6892  0990  084F               	movf	___ftdiv@f2+1,w
  6893  0991  00D5               	movwf	??___ftdiv+1
  6894  0992  0850               	movf	___ftdiv@f2+2,w
  6895  0993  00D6               	movwf	??___ftdiv+2
  6896  0994  3010               	movlw	16
  6897  0995                     u2885:	
  6898  0995  1003               	clrc
  6899  0996  0CD6               	rrf	??___ftdiv+2,f
  6900  0997  0CD5               	rrf	??___ftdiv+1,f
  6901  0998  0CD4               	rrf	??___ftdiv,f
  6902  0999  3EFF               	addlw	-1
  6903  099A  1D03               	skipz
  6904  099B  2995               	goto	u2885
  6905  099C  0854               	movf	??___ftdiv,w
  6906  099D  00D7               	movwf	??___ftdiv+3
  6907  099E  0857               	movf	??___ftdiv+3,w
  6908  099F  06DD               	xorwf	___ftdiv@sign,f
  6909  09A0  3080               	movlw	128
  6910  09A1  00D4               	movwf	??___ftdiv
  6911  09A2  0854               	movf	??___ftdiv,w
  6912  09A3  05DD               	andwf	___ftdiv@sign,f
  6913  09A4  17D2               	bsf	___ftdiv@f1+1,7
  6914  09A5  30FF               	movlw	255
  6915  09A6  05D1               	andwf	___ftdiv@f1,f
  6916  09A7  30FF               	movlw	255
  6917  09A8  05D2               	andwf	___ftdiv@f1+1,f
  6918  09A9  3000               	movlw	0
  6919  09AA  05D3               	andwf	___ftdiv@f1+2,f
  6920  09AB  17CF               	bsf	___ftdiv@f2+1,7
  6921  09AC  30FF               	movlw	255
  6922  09AD  05CE               	andwf	___ftdiv@f2,f
  6923  09AE  30FF               	movlw	255
  6924  09AF  05CF               	andwf	___ftdiv@f2+1,f
  6925  09B0  3000               	movlw	0
  6926  09B1  05D0               	andwf	___ftdiv@f2+2,f
  6927  09B2  3018               	movlw	24
  6928  09B3  00D4               	movwf	??___ftdiv
  6929  09B4  0854               	movf	??___ftdiv,w
  6930  09B5  00D8               	movwf	___ftdiv@cntr
  6931  09B6                     l2372:	
  6932  09B6  3001               	movlw	1
  6933  09B7                     u2895:	
  6934  09B7  1003               	clrc
  6935  09B8  0DD9               	rlf	___ftdiv@f3,f
  6936  09B9  0DDA               	rlf	___ftdiv@f3+1,f
  6937  09BA  0DDB               	rlf	___ftdiv@f3+2,f
  6938  09BB  3EFF               	addlw	-1
  6939  09BC  1D03               	skipz
  6940  09BD  29B7               	goto	u2895
  6941  09BE  0850               	movf	___ftdiv@f2+2,w
  6942  09BF  0253               	subwf	___ftdiv@f1+2,w
  6943  09C0  1D03               	skipz
  6944  09C1  29C8               	goto	u2905
  6945  09C2  084F               	movf	___ftdiv@f2+1,w
  6946  09C3  0252               	subwf	___ftdiv@f1+1,w
  6947  09C4  1D03               	skipz
  6948  09C5  29C8               	goto	u2905
  6949  09C6  084E               	movf	___ftdiv@f2,w
  6950  09C7  0251               	subwf	___ftdiv@f1,w
  6951  09C8                     u2905:	
  6952  09C8  1C03               	skipc
  6953  09C9  29D5               	goto	l2380
  6954  09CA  084E               	movf	___ftdiv@f2,w
  6955  09CB  02D1               	subwf	___ftdiv@f1,f
  6956  09CC  084F               	movf	___ftdiv@f2+1,w
  6957  09CD  1C03               	skipc
  6958  09CE  0F4F               	incfsz	___ftdiv@f2+1,w
  6959  09CF  02D2               	subwf	___ftdiv@f1+1,f
  6960  09D0  0850               	movf	___ftdiv@f2+2,w
  6961  09D1  1C03               	skipc
  6962  09D2  0A50               	incf	___ftdiv@f2+2,w
  6963  09D3  02D3               	subwf	___ftdiv@f1+2,f
  6964  09D4  1459               	bsf	___ftdiv@f3,0
  6965  09D5                     l2380:	
  6966  09D5  3001               	movlw	1
  6967  09D6                     u2915:	
  6968  09D6  1003               	clrc
  6969  09D7  0DD1               	rlf	___ftdiv@f1,f
  6970  09D8  0DD2               	rlf	___ftdiv@f1+1,f
  6971  09D9  0DD3               	rlf	___ftdiv@f1+2,f
  6972  09DA  3EFF               	addlw	-1
  6973  09DB  1D03               	skipz
  6974  09DC  29D6               	goto	u2915
  6975  09DD  3001               	movlw	1
  6976  09DE  02D8               	subwf	___ftdiv@cntr,f
  6977  09DF  1D03               	btfss	3,2
  6978  09E0  29B6               	goto	l2372
  6979  09E1  0859               	movf	___ftdiv@f3,w
  6980  09E2  00A0               	movwf	___ftpack@arg
  6981  09E3  085A               	movf	___ftdiv@f3+1,w
  6982  09E4  00A1               	movwf	___ftpack@arg+1
  6983  09E5  085B               	movf	___ftdiv@f3+2,w
  6984  09E6  00A2               	movwf	___ftpack@arg+2
  6985  09E7  085C               	movf	___ftdiv@exp,w
  6986  09E8  00D4               	movwf	??___ftdiv
  6987  09E9  0854               	movf	??___ftdiv,w
  6988  09EA  00A3               	movwf	___ftpack@exp
  6989  09EB  085D               	movf	___ftdiv@sign,w
  6990  09EC  00D5               	movwf	??___ftdiv+1
  6991  09ED  0855               	movf	??___ftdiv+1,w
  6992  09EE  00A4               	movwf	___ftpack@sign
  6993  09EF  160A  118A  269C   	fcall	___ftpack
  6994  09F2  1283               	bcf	3,5	;RP0=0, select bank0
  6995  09F3  1303               	bcf	3,6	;RP1=0, select bank0
  6996  09F4  0820               	movf	?___ftpack,w
  6997  09F5  00CE               	movwf	?___ftdiv
  6998  09F6  0821               	movf	?___ftpack+1,w
  6999  09F7  00CF               	movwf	?___ftdiv+1
  7000  09F8  0822               	movf	?___ftpack+2,w
  7001  09F9  00D0               	movwf	?___ftdiv+2
  7002  09FA  0008               	return
  7003  09FB                     __end_of___ftdiv:	
  7004                           
  7005                           	psect	text27
  7006  0DCE                     __ptext27:	
  7007 ;; *************** function ___ftadd *****************
  7008 ;; Defined at:
  7009 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  7010 ;; Parameters:    Size  Location     Type
  7011 ;;  f1              3   17[BANK0 ] float 
  7012 ;;  f2              3   20[BANK0 ] float 
  7013 ;; Auto vars:     Size  Location     Type
  7014 ;;  exp1            1   29[BANK0 ] unsigned char 
  7015 ;;  exp2            1   28[BANK0 ] unsigned char 
  7016 ;;  sign            1   27[BANK0 ] unsigned char 
  7017 ;; Return value:  Size  Location     Type
  7018 ;;                  3   17[BANK0 ] float 
  7019 ;; Registers used:
  7020 ;;		wreg, status,2, status,0, pclath, cstack
  7021 ;; Tracked objects:
  7022 ;;		On entry : 0/0
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7026 ;;      Params:         0       6       0       0       0
  7027 ;;      Locals:         0       3       0       0       0
  7028 ;;      Temps:          0       4       0       0       0
  7029 ;;      Totals:         0      13       0       0       0
  7030 ;;Total ram usage:       13 bytes
  7031 ;; Hardware stack levels used:    1
  7032 ;; Hardware stack levels required when called:    3
  7033 ;; This function calls:
  7034 ;;		___ftpack
  7035 ;; This function is called by:
  7036 ;;		_displayPPM
  7037 ;;		_CalcMQ135
  7038 ;; This function uses a non-reentrant model
  7039 ;;
  7040                           
  7041                           
  7042                           ;psect for function ___ftadd
  7043  0DCE                     ___ftadd:	
  7044                           
  7045                           ;incstack = 0
  7046                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7047  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  7048  0DCF  1303               	bcf	3,6	;RP1=0, select bank0
  7049  0DD0  0831               	movf	___ftadd@f1,w
  7050  0DD1  00B7               	movwf	??___ftadd
  7051  0DD2  0832               	movf	___ftadd@f1+1,w
  7052  0DD3  00B8               	movwf	??___ftadd+1
  7053  0DD4  0833               	movf	___ftadd@f1+2,w
  7054  0DD5  00B9               	movwf	??___ftadd+2
  7055  0DD6  1003               	clrc
  7056  0DD7  0D38               	rlf	??___ftadd+1,w
  7057  0DD8  0D39               	rlf	??___ftadd+2,w
  7058  0DD9  00BA               	movwf	??___ftadd+3
  7059  0DDA  083A               	movf	??___ftadd+3,w
  7060  0DDB  00BD               	movwf	___ftadd@exp1
  7061  0DDC  0834               	movf	___ftadd@f2,w
  7062  0DDD  00B7               	movwf	??___ftadd
  7063  0DDE  0835               	movf	___ftadd@f2+1,w
  7064  0DDF  00B8               	movwf	??___ftadd+1
  7065  0DE0  0836               	movf	___ftadd@f2+2,w
  7066  0DE1  00B9               	movwf	??___ftadd+2
  7067  0DE2  1003               	clrc
  7068  0DE3  0D38               	rlf	??___ftadd+1,w
  7069  0DE4  0D39               	rlf	??___ftadd+2,w
  7070  0DE5  00BA               	movwf	??___ftadd+3
  7071  0DE6  083A               	movf	??___ftadd+3,w
  7072  0DE7  00BC               	movwf	___ftadd@exp2
  7073  0DE8  083D               	movf	___ftadd@exp1,w
  7074  0DE9  1903               	btfsc	3,2
  7075  0DEA  2DF7               	goto	l2282
  7076  0DEB  083C               	movf	___ftadd@exp2,w
  7077  0DEC  023D               	subwf	___ftadd@exp1,w
  7078  0DED  1803               	skipnc
  7079  0DEE  2DFE               	goto	l2286
  7080  0DEF  033D               	decf	___ftadd@exp1,w
  7081  0DF0  3AFF               	xorlw	255
  7082  0DF1  073C               	addwf	___ftadd@exp2,w
  7083  0DF2  00B7               	movwf	??___ftadd
  7084  0DF3  3019               	movlw	25
  7085  0DF4  0237               	subwf	??___ftadd,w
  7086  0DF5  1C03               	skipc
  7087  0DF6  2DFE               	goto	l2286
  7088  0DF7                     l2282:	
  7089  0DF7  0834               	movf	___ftadd@f2,w
  7090  0DF8  00B1               	movwf	?___ftadd
  7091  0DF9  0835               	movf	___ftadd@f2+1,w
  7092  0DFA  00B2               	movwf	?___ftadd+1
  7093  0DFB  0836               	movf	___ftadd@f2+2,w
  7094  0DFC  00B3               	movwf	?___ftadd+2
  7095  0DFD  0008               	return
  7096  0DFE                     l2286:	
  7097  0DFE  083C               	movf	___ftadd@exp2,w
  7098  0DFF  1903               	btfsc	3,2
  7099  0E00  0008               	return
  7100  0E01  083D               	movf	___ftadd@exp1,w
  7101  0E02  023C               	subwf	___ftadd@exp2,w
  7102  0E03  1803               	skipnc
  7103  0E04  2E0D               	goto	l2292
  7104  0E05  033C               	decf	___ftadd@exp2,w
  7105  0E06  3AFF               	xorlw	255
  7106  0E07  073D               	addwf	___ftadd@exp1,w
  7107  0E08  00B7               	movwf	??___ftadd
  7108  0E09  3019               	movlw	25
  7109  0E0A  0237               	subwf	??___ftadd,w
  7110  0E0B  1803               	btfsc	3,0
  7111  0E0C  0008               	return
  7112  0E0D                     l2292:	
  7113  0E0D  3006               	movlw	6
  7114  0E0E  00B7               	movwf	??___ftadd
  7115  0E0F  0837               	movf	??___ftadd,w
  7116  0E10  00BB               	movwf	___ftadd@sign
  7117  0E11  1BB3               	btfsc	___ftadd@f1+2,7
  7118  0E12  17BB               	bsf	___ftadd@sign,7
  7119  0E13  1BB6               	btfsc	___ftadd@f2+2,7
  7120  0E14  173B               	bsf	___ftadd@sign,6
  7121  0E15  17B2               	bsf	___ftadd@f1+1,7
  7122  0E16  30FF               	movlw	255
  7123  0E17  05B1               	andwf	___ftadd@f1,f
  7124  0E18  30FF               	movlw	255
  7125  0E19  05B2               	andwf	___ftadd@f1+1,f
  7126  0E1A  3000               	movlw	0
  7127  0E1B  05B3               	andwf	___ftadd@f1+2,f
  7128  0E1C  17B5               	bsf	___ftadd@f2+1,7
  7129  0E1D  30FF               	movlw	255
  7130  0E1E  05B4               	andwf	___ftadd@f2,f
  7131  0E1F  30FF               	movlw	255
  7132  0E20  05B5               	andwf	___ftadd@f2+1,f
  7133  0E21  3000               	movlw	0
  7134  0E22  05B6               	andwf	___ftadd@f2+2,f
  7135  0E23  083C               	movf	___ftadd@exp2,w
  7136  0E24  023D               	subwf	___ftadd@exp1,w
  7137  0E25  1803               	skipnc
  7138  0E26  2E4D               	goto	l2314
  7139  0E27                     l2304:	
  7140  0E27  3001               	movlw	1
  7141  0E28                     u2705:	
  7142  0E28  1003               	clrc
  7143  0E29  0DB4               	rlf	___ftadd@f2,f
  7144  0E2A  0DB5               	rlf	___ftadd@f2+1,f
  7145  0E2B  0DB6               	rlf	___ftadd@f2+2,f
  7146  0E2C  3EFF               	addlw	-1
  7147  0E2D  1D03               	skipz
  7148  0E2E  2E28               	goto	u2705
  7149  0E2F  3001               	movlw	1
  7150  0E30  02BC               	subwf	___ftadd@exp2,f
  7151  0E31  083C               	movf	___ftadd@exp2,w
  7152  0E32  063D               	xorwf	___ftadd@exp1,w
  7153  0E33  1903               	skipnz
  7154  0E34  2E48               	goto	l2312
  7155  0E35  3001               	movlw	1
  7156  0E36  02BB               	subwf	___ftadd@sign,f
  7157  0E37  083B               	movf	___ftadd@sign,w
  7158  0E38  3907               	andlw	7
  7159  0E39  1903               	btfsc	3,2
  7160  0E3A  2E48               	goto	l2312
  7161  0E3B  2E27               	goto	l2304
  7162  0E3C                     l2310:	
  7163  0E3C  3001               	movlw	1
  7164  0E3D                     u2735:	
  7165  0E3D  1003               	clrc
  7166  0E3E  0CB3               	rrf	___ftadd@f1+2,f
  7167  0E3F  0CB2               	rrf	___ftadd@f1+1,f
  7168  0E40  0CB1               	rrf	___ftadd@f1,f
  7169  0E41  3EFF               	addlw	-1
  7170  0E42  1D03               	skipz
  7171  0E43  2E3D               	goto	u2735
  7172  0E44  3001               	movlw	1
  7173  0E45  00B7               	movwf	??___ftadd
  7174  0E46  0837               	movf	??___ftadd,w
  7175  0E47  07BD               	addwf	___ftadd@exp1,f
  7176  0E48                     l2312:	
  7177  0E48  083D               	movf	___ftadd@exp1,w
  7178  0E49  063C               	xorwf	___ftadd@exp2,w
  7179  0E4A  1903               	btfsc	3,2
  7180  0E4B  2E76               	goto	l686
  7181  0E4C  2E3C               	goto	l2310
  7182  0E4D                     l2314:	
  7183  0E4D  083D               	movf	___ftadd@exp1,w
  7184  0E4E  023C               	subwf	___ftadd@exp2,w
  7185  0E4F  1803               	skipnc
  7186  0E50  2E76               	goto	l686
  7187  0E51                     l2316:	
  7188  0E51  3001               	movlw	1
  7189  0E52                     u2765:	
  7190  0E52  1003               	clrc
  7191  0E53  0DB1               	rlf	___ftadd@f1,f
  7192  0E54  0DB2               	rlf	___ftadd@f1+1,f
  7193  0E55  0DB3               	rlf	___ftadd@f1+2,f
  7194  0E56  3EFF               	addlw	-1
  7195  0E57  1D03               	skipz
  7196  0E58  2E52               	goto	u2765
  7197  0E59  3001               	movlw	1
  7198  0E5A  02BD               	subwf	___ftadd@exp1,f
  7199  0E5B  083C               	movf	___ftadd@exp2,w
  7200  0E5C  063D               	xorwf	___ftadd@exp1,w
  7201  0E5D  1903               	skipnz
  7202  0E5E  2E72               	goto	l2324
  7203  0E5F  3001               	movlw	1
  7204  0E60  02BB               	subwf	___ftadd@sign,f
  7205  0E61  083B               	movf	___ftadd@sign,w
  7206  0E62  3907               	andlw	7
  7207  0E63  1903               	btfsc	3,2
  7208  0E64  2E72               	goto	l2324
  7209  0E65  2E51               	goto	l2316
  7210  0E66                     l2322:	
  7211  0E66  3001               	movlw	1
  7212  0E67                     u2795:	
  7213  0E67  1003               	clrc
  7214  0E68  0CB6               	rrf	___ftadd@f2+2,f
  7215  0E69  0CB5               	rrf	___ftadd@f2+1,f
  7216  0E6A  0CB4               	rrf	___ftadd@f2,f
  7217  0E6B  3EFF               	addlw	-1
  7218  0E6C  1D03               	skipz
  7219  0E6D  2E67               	goto	u2795
  7220  0E6E  3001               	movlw	1
  7221  0E6F  00B7               	movwf	??___ftadd
  7222  0E70  0837               	movf	??___ftadd,w
  7223  0E71  07BC               	addwf	___ftadd@exp2,f
  7224  0E72                     l2324:	
  7225  0E72  083D               	movf	___ftadd@exp1,w
  7226  0E73  063C               	xorwf	___ftadd@exp2,w
  7227  0E74  1D03               	skipz
  7228  0E75  2E66               	goto	l2322
  7229  0E76                     l686:	
  7230  0E76  1FBB               	btfss	___ftadd@sign,7
  7231  0E77  2E88               	goto	l2328
  7232  0E78  30FF               	movlw	255
  7233  0E79  06B1               	xorwf	___ftadd@f1,f
  7234  0E7A  30FF               	movlw	255
  7235  0E7B  06B2               	xorwf	___ftadd@f1+1,f
  7236  0E7C  30FF               	movlw	255
  7237  0E7D  06B3               	xorwf	___ftadd@f1+2,f
  7238  0E7E  3001               	movlw	1
  7239  0E7F  07B1               	addwf	___ftadd@f1,f
  7240  0E80  3000               	movlw	0
  7241  0E81  1803               	skipnc
  7242  0E82  3001               	movlw	1
  7243  0E83  07B2               	addwf	___ftadd@f1+1,f
  7244  0E84  3000               	movlw	0
  7245  0E85  1803               	skipnc
  7246  0E86  3001               	movlw	1
  7247  0E87  07B3               	addwf	___ftadd@f1+2,f
  7248  0E88                     l2328:	
  7249  0E88  1F3B               	btfss	___ftadd@sign,6
  7250  0E89  2E9A               	goto	l2332
  7251  0E8A  30FF               	movlw	255
  7252  0E8B  06B4               	xorwf	___ftadd@f2,f
  7253  0E8C  30FF               	movlw	255
  7254  0E8D  06B5               	xorwf	___ftadd@f2+1,f
  7255  0E8E  30FF               	movlw	255
  7256  0E8F  06B6               	xorwf	___ftadd@f2+2,f
  7257  0E90  3001               	movlw	1
  7258  0E91  07B4               	addwf	___ftadd@f2,f
  7259  0E92  3000               	movlw	0
  7260  0E93  1803               	skipnc
  7261  0E94  3001               	movlw	1
  7262  0E95  07B5               	addwf	___ftadd@f2+1,f
  7263  0E96  3000               	movlw	0
  7264  0E97  1803               	skipnc
  7265  0E98  3001               	movlw	1
  7266  0E99  07B6               	addwf	___ftadd@f2+2,f
  7267  0E9A                     l2332:	
  7268  0E9A  01BB               	clrf	___ftadd@sign
  7269  0E9B  0831               	movf	___ftadd@f1,w
  7270  0E9C  07B4               	addwf	___ftadd@f2,f
  7271  0E9D  0832               	movf	___ftadd@f1+1,w
  7272  0E9E  1103               	clrz
  7273  0E9F  1803               	skipnc
  7274  0EA0  0A32               	incf	___ftadd@f1+1,w
  7275  0EA1  1D03               	btfss	3,2
  7276  0EA2  07B5               	addwf	___ftadd@f2+1,f
  7277  0EA3  0833               	movf	___ftadd@f1+2,w
  7278  0EA4  1103               	clrz
  7279  0EA5  1803               	skipnc
  7280  0EA6  0A33               	incf	___ftadd@f1+2,w
  7281  0EA7  1D03               	btfss	3,2
  7282  0EA8  07B6               	addwf	___ftadd@f2+2,f
  7283  0EA9  1FB6               	btfss	___ftadd@f2+2,7
  7284  0EAA  2EBD               	goto	l2342
  7285  0EAB  30FF               	movlw	255
  7286  0EAC  06B4               	xorwf	___ftadd@f2,f
  7287  0EAD  30FF               	movlw	255
  7288  0EAE  06B5               	xorwf	___ftadd@f2+1,f
  7289  0EAF  30FF               	movlw	255
  7290  0EB0  06B6               	xorwf	___ftadd@f2+2,f
  7291  0EB1  3001               	movlw	1
  7292  0EB2  07B4               	addwf	___ftadd@f2,f
  7293  0EB3  3000               	movlw	0
  7294  0EB4  1803               	skipnc
  7295  0EB5  3001               	movlw	1
  7296  0EB6  07B5               	addwf	___ftadd@f2+1,f
  7297  0EB7  3000               	movlw	0
  7298  0EB8  1803               	skipnc
  7299  0EB9  3001               	movlw	1
  7300  0EBA  07B6               	addwf	___ftadd@f2+2,f
  7301  0EBB  01BB               	clrf	___ftadd@sign
  7302  0EBC  0ABB               	incf	___ftadd@sign,f
  7303  0EBD                     l2342:	
  7304  0EBD  0834               	movf	___ftadd@f2,w
  7305  0EBE  00A0               	movwf	___ftpack@arg
  7306  0EBF  0835               	movf	___ftadd@f2+1,w
  7307  0EC0  00A1               	movwf	___ftpack@arg+1
  7308  0EC1  0836               	movf	___ftadd@f2+2,w
  7309  0EC2  00A2               	movwf	___ftpack@arg+2
  7310  0EC3  083D               	movf	___ftadd@exp1,w
  7311  0EC4  00B7               	movwf	??___ftadd
  7312  0EC5  0837               	movf	??___ftadd,w
  7313  0EC6  00A3               	movwf	___ftpack@exp
  7314  0EC7  083B               	movf	___ftadd@sign,w
  7315  0EC8  00B8               	movwf	??___ftadd+1
  7316  0EC9  0838               	movf	??___ftadd+1,w
  7317  0ECA  00A4               	movwf	___ftpack@sign
  7318  0ECB  160A  118A  269C   	fcall	___ftpack
  7319  0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  7320  0ECF  1303               	bcf	3,6	;RP1=0, select bank0
  7321  0ED0  0820               	movf	?___ftpack,w
  7322  0ED1  00B1               	movwf	?___ftadd
  7323  0ED2  0821               	movf	?___ftpack+1,w
  7324  0ED3  00B2               	movwf	?___ftadd+1
  7325  0ED4  0822               	movf	?___ftpack+2,w
  7326  0ED5  00B3               	movwf	?___ftadd+2
  7327  0ED6  0008               	return
  7328  0ED7                     __end_of___ftadd:	
  7329                           
  7330                           	psect	text28
  7331  1407                     __ptext28:	
  7332 ;; *************** function ___awtoft *****************
  7333 ;; Defined at:
  7334 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;  c               2    8[BANK0 ] int 
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;  sign            1   13[BANK0 ] unsigned char 
  7339 ;; Return value:  Size  Location     Type
  7340 ;;                  3    8[BANK0 ] float 
  7341 ;; Registers used:
  7342 ;;		wreg, status,2, status,0, pclath, cstack
  7343 ;; Tracked objects:
  7344 ;;		On entry : 0/0
  7345 ;;		On exit  : 0/0
  7346 ;;		Unchanged: 0/0
  7347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7348 ;;      Params:         0       3       0       0       0
  7349 ;;      Locals:         0       1       0       0       0
  7350 ;;      Temps:          0       2       0       0       0
  7351 ;;      Totals:         0       6       0       0       0
  7352 ;;Total ram usage:        6 bytes
  7353 ;; Hardware stack levels used:    1
  7354 ;; Hardware stack levels required when called:    3
  7355 ;; This function calls:
  7356 ;;		___ftpack
  7357 ;; This function is called by:
  7358 ;;		_displayPPM
  7359 ;;		_CalcMQ135
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           
  7364                           ;psect for function ___awtoft
  7365  1407                     ___awtoft:	
  7366                           
  7367                           ;incstack = 0
  7368                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7369  1407  1283               	bcf	3,5	;RP0=0, select bank0
  7370  1408  1303               	bcf	3,6	;RP1=0, select bank0
  7371  1409  01AD               	clrf	___awtoft@sign
  7372  140A  1FA9               	btfss	___awtoft@c+1,7
  7373  140B  2C13               	goto	l2270
  7374  140C  09A8               	comf	___awtoft@c,f
  7375  140D  09A9               	comf	___awtoft@c+1,f
  7376  140E  0AA8               	incf	___awtoft@c,f
  7377  140F  1903               	skipnz
  7378  1410  0AA9               	incf	___awtoft@c+1,f
  7379  1411  01AD               	clrf	___awtoft@sign
  7380  1412  0AAD               	incf	___awtoft@sign,f
  7381  1413                     l2270:	
  7382  1413  0828               	movf	___awtoft@c,w
  7383  1414  00A0               	movwf	___ftpack@arg
  7384  1415  0829               	movf	___awtoft@c+1,w
  7385  1416  00A1               	movwf	___ftpack@arg+1
  7386  1417  01A2               	clrf	___ftpack@arg+2
  7387  1418  308E               	movlw	142
  7388  1419  00AB               	movwf	??___awtoft
  7389  141A  082B               	movf	??___awtoft,w
  7390  141B  00A3               	movwf	___ftpack@exp
  7391  141C  082D               	movf	___awtoft@sign,w
  7392  141D  00AC               	movwf	??___awtoft+1
  7393  141E  082C               	movf	??___awtoft+1,w
  7394  141F  00A4               	movwf	___ftpack@sign
  7395  1420  160A  118A  269C   	fcall	___ftpack
  7396  1423  1283               	bcf	3,5	;RP0=0, select bank0
  7397  1424  1303               	bcf	3,6	;RP1=0, select bank0
  7398  1425  0820               	movf	?___ftpack,w
  7399  1426  00A8               	movwf	?___awtoft
  7400  1427  0821               	movf	?___ftpack+1,w
  7401  1428  00A9               	movwf	?___awtoft+1
  7402  1429  0822               	movf	?___ftpack+2,w
  7403  142A  00AA               	movwf	?___awtoft+2
  7404  142B  0008               	return
  7405  142C                     __end_of___awtoft:	
  7406                           
  7407                           	psect	text29
  7408  169C                     __ptext29:	
  7409 ;; *************** function ___ftpack *****************
  7410 ;; Defined at:
  7411 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;  arg             3    0[BANK0 ] unsigned um
  7414 ;;  exp             1    3[BANK0 ] unsigned char 
  7415 ;;  sign            1    4[BANK0 ] unsigned char 
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;		None
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  3    0[BANK0 ] float 
  7420 ;; Registers used:
  7421 ;;		wreg, status,2, status,0
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7427 ;;      Params:         0       5       0       0       0
  7428 ;;      Locals:         0       0       0       0       0
  7429 ;;      Temps:          0       3       0       0       0
  7430 ;;      Totals:         0       8       0       0       0
  7431 ;;Total ram usage:        8 bytes
  7432 ;; Hardware stack levels used:    1
  7433 ;; Hardware stack levels required when called:    2
  7434 ;; This function calls:
  7435 ;;		Nothing
  7436 ;; This function is called by:
  7437 ;;		___awtoft
  7438 ;;		___ftadd
  7439 ;;		___ftdiv
  7440 ;;		___ftmul
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           
  7445                           ;psect for function ___ftpack
  7446  169C                     ___ftpack:	
  7447                           
  7448                           ;incstack = 0
  7449                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7450  169C  1283               	bcf	3,5	;RP0=0, select bank0
  7451  169D  1303               	bcf	3,6	;RP1=0, select bank0
  7452  169E  0823               	movf	___ftpack@exp,w
  7453  169F  1903               	btfsc	3,2
  7454  16A0  2EA6               	goto	l2018
  7455  16A1  0822               	movf	___ftpack@arg+2,w
  7456  16A2  0421               	iorwf	___ftpack@arg+1,w
  7457  16A3  0420               	iorwf	___ftpack@arg,w
  7458  16A4  1D03               	skipz
  7459  16A5  2EB9               	goto	l2024
  7460  16A6                     l2018:	
  7461  16A6  3000               	movlw	0
  7462  16A7  00A0               	movwf	?___ftpack
  7463  16A8  3000               	movlw	0
  7464  16A9  00A1               	movwf	?___ftpack+1
  7465  16AA  3000               	movlw	0
  7466  16AB  00A2               	movwf	?___ftpack+2
  7467  16AC  0008               	return
  7468  16AD                     l2022:	
  7469  16AD  3001               	movlw	1
  7470  16AE  00A5               	movwf	??___ftpack
  7471  16AF  0825               	movf	??___ftpack,w
  7472  16B0  07A3               	addwf	___ftpack@exp,f
  7473  16B1  3001               	movlw	1
  7474  16B2                     u2095:	
  7475  16B2  1003               	clrc
  7476  16B3  0CA2               	rrf	___ftpack@arg+2,f
  7477  16B4  0CA1               	rrf	___ftpack@arg+1,f
  7478  16B5  0CA0               	rrf	___ftpack@arg,f
  7479  16B6  3EFF               	addlw	-1
  7480  16B7  1D03               	skipz
  7481  16B8  2EB2               	goto	u2095
  7482  16B9                     l2024:	
  7483  16B9  30FE               	movlw	254
  7484  16BA  0522               	andwf	___ftpack@arg+2,w
  7485  16BB  1903               	btfsc	3,2
  7486  16BC  2ED4               	goto	l657
  7487  16BD  2EAD               	goto	l2022
  7488  16BE                     l2026:	
  7489  16BE  3001               	movlw	1
  7490  16BF  00A5               	movwf	??___ftpack
  7491  16C0  0825               	movf	??___ftpack,w
  7492  16C1  07A3               	addwf	___ftpack@exp,f
  7493  16C2  3001               	movlw	1
  7494  16C3  07A0               	addwf	___ftpack@arg,f
  7495  16C4  3000               	movlw	0
  7496  16C5  1803               	skipnc
  7497  16C6  3001               	movlw	1
  7498  16C7  07A1               	addwf	___ftpack@arg+1,f
  7499  16C8  3000               	movlw	0
  7500  16C9  1803               	skipnc
  7501  16CA  3001               	movlw	1
  7502  16CB  07A2               	addwf	___ftpack@arg+2,f
  7503  16CC  3001               	movlw	1
  7504  16CD                     u2115:	
  7505  16CD  1003               	clrc
  7506  16CE  0CA2               	rrf	___ftpack@arg+2,f
  7507  16CF  0CA1               	rrf	___ftpack@arg+1,f
  7508  16D0  0CA0               	rrf	___ftpack@arg,f
  7509  16D1  3EFF               	addlw	-1
  7510  16D2  1D03               	skipz
  7511  16D3  2ECD               	goto	u2115
  7512  16D4                     l657:	
  7513  16D4  30FF               	movlw	255
  7514  16D5  0522               	andwf	___ftpack@arg+2,w
  7515  16D6  1903               	btfsc	3,2
  7516  16D7  2EE3               	goto	l2034
  7517  16D8  2EBE               	goto	l2026
  7518  16D9                     l2032:	
  7519  16D9  3001               	movlw	1
  7520  16DA  02A3               	subwf	___ftpack@exp,f
  7521  16DB  3001               	movlw	1
  7522  16DC                     u2135:	
  7523  16DC  1003               	clrc
  7524  16DD  0DA0               	rlf	___ftpack@arg,f
  7525  16DE  0DA1               	rlf	___ftpack@arg+1,f
  7526  16DF  0DA2               	rlf	___ftpack@arg+2,f
  7527  16E0  3EFF               	addlw	-1
  7528  16E1  1D03               	skipz
  7529  16E2  2EDC               	goto	u2135
  7530  16E3                     l2034:	
  7531  16E3  1FA1               	btfss	___ftpack@arg+1,7
  7532  16E4  2ED9               	goto	l2032
  7533  16E5  1823               	btfsc	___ftpack@exp,0
  7534  16E6  2EED               	goto	l663
  7535  16E7  30FF               	movlw	255
  7536  16E8  05A0               	andwf	___ftpack@arg,f
  7537  16E9  307F               	movlw	127
  7538  16EA  05A1               	andwf	___ftpack@arg+1,f
  7539  16EB  30FF               	movlw	255
  7540  16EC  05A2               	andwf	___ftpack@arg+2,f
  7541  16ED                     l663:	
  7542  16ED  1003               	clrc
  7543  16EE  0CA3               	rrf	___ftpack@exp,f
  7544  16EF  0823               	movf	___ftpack@exp,w
  7545  16F0  00A5               	movwf	??___ftpack
  7546  16F1  01A6               	clrf	??___ftpack+1
  7547  16F2  01A7               	clrf	??___ftpack+2
  7548  16F3  3010               	movlw	16
  7549  16F4                     u2165:	
  7550  16F4  1003               	clrc
  7551  16F5  0DA5               	rlf	??___ftpack,f
  7552  16F6  0DA6               	rlf	??___ftpack+1,f
  7553  16F7  0DA7               	rlf	??___ftpack+2,f
  7554  16F8  3EFF               	addlw	-1
  7555  16F9  1D03               	skipz
  7556  16FA  2EF4               	goto	u2165
  7557  16FB  0825               	movf	??___ftpack,w
  7558  16FC  04A0               	iorwf	___ftpack@arg,f
  7559  16FD  0826               	movf	??___ftpack+1,w
  7560  16FE  04A1               	iorwf	___ftpack@arg+1,f
  7561  16FF  0827               	movf	??___ftpack+2,w
  7562  1700  04A2               	iorwf	___ftpack@arg+2,f
  7563  1701  0824               	movf	___ftpack@sign,w
  7564  1702  1903               	btfsc	3,2
  7565  1703  0008               	return
  7566  1704  17A2               	bsf	___ftpack@arg+2,7
  7567  1705  0008               	return
  7568  1706                     __end_of___ftpack:	
  7569                           
  7570                           	psect	text30
  7571  1317                     __ptext30:	
  7572 ;; *************** function _runClock *****************
  7573 ;; Defined at:
  7574 ;;		line 33 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\time_scheduler.h
      +"
  7575 ;; Parameters:    Size  Location     Type
  7576 ;;		None
  7577 ;; Auto vars:     Size  Location     Type
  7578 ;;		None
  7579 ;; Return value:  Size  Location     Type
  7580 ;;		None               void
  7581 ;; Registers used:
  7582 ;;		wreg, status,2, status,0
  7583 ;; Tracked objects:
  7584 ;;		On entry : 0/0
  7585 ;;		On exit  : 0/0
  7586 ;;		Unchanged: 0/0
  7587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7588 ;;      Params:         0       0       0       0       0
  7589 ;;      Locals:         0       0       0       0       0
  7590 ;;      Temps:          0       2       0       0       0
  7591 ;;      Totals:         0       2       0       0       0
  7592 ;;Total ram usage:        2 bytes
  7593 ;; Hardware stack levels used:    1
  7594 ;; Hardware stack levels required when called:    2
  7595 ;; This function calls:
  7596 ;;		Nothing
  7597 ;; This function is called by:
  7598 ;;		_main
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           
  7603                           ;psect for function _runClock
  7604  1317                     _runClock:	
  7605                           
  7606                           ;time_scheduler.h: 36: minutes++;
  7607                           
  7608                           ;incstack = 0
  7609                           ; Regs used in _runClock: [wreg+status,2+status,0]
  7610  1317  3001               	movlw	1
  7611  1318  1283               	bcf	3,5	;RP0=0, select bank0
  7612  1319  1303               	bcf	3,6	;RP1=0, select bank0
  7613  131A  00A0               	movwf	??_runClock
  7614  131B  0820               	movf	??_runClock,w
  7615  131C  07FB               	addwf	_minutes,f	;volatile
  7616                           
  7617                           ;time_scheduler.h: 37: if (minutes >= 60)
  7618  131D  303C               	movlw	60
  7619  131E  027B               	subwf	_minutes,w	;volatile
  7620  131F  1C03               	skipc
  7621  1320  2B2A               	goto	l2748
  7622                           
  7623                           ;time_scheduler.h: 38: {
  7624                           ;time_scheduler.h: 39: minutes = 0;
  7625  1321  01FB               	clrf	_minutes	;volatile
  7626                           
  7627                           ;time_scheduler.h: 40: hours++;
  7628  1322  3001               	movlw	1
  7629  1323  00A0               	movwf	??_runClock
  7630  1324  0820               	movf	??_runClock,w
  7631  1325  07FC               	addwf	_hours,f	;volatile
  7632                           
  7633                           ;time_scheduler.h: 41: if (hours >= 24)
  7634  1326  3018               	movlw	24
  7635  1327  027C               	subwf	_hours,w	;volatile
  7636  1328  1803               	btfsc	3,0
  7637                           
  7638                           ;time_scheduler.h: 42: {
  7639                           ;time_scheduler.h: 43: hours = 0;
  7640  1329  01FC               	clrf	_hours	;volatile
  7641  132A                     l2748:	
  7642                           
  7643                           ;time_scheduler.h: 44: }
  7644                           ;time_scheduler.h: 45: }
  7645                           ;time_scheduler.h: 46: _delay((unsigned long)((100)*(4000000/4000.0)));
  7646  132A  3082               	movlw	130
  7647  132B  00A1               	movwf	??_runClock+1
  7648  132C  30DD               	movlw	221
  7649  132D  00A0               	movwf	??_runClock
  7650  132E                     u5037:	
  7651  132E  0BA0               	decfsz	??_runClock,f
  7652  132F  2B2E               	goto	u5037
  7653  1330  0BA1               	decfsz	??_runClock+1,f
  7654  1331  2B2E               	goto	u5037
  7655  1332  2B33               	nop2
  7656  1333  0008               	return
  7657  1334                     __end_of_runClock:	
  7658                           
  7659                           	psect	text31
  7660  121F                     __ptext31:	
  7661 ;; *************** function _initInterrupt *****************
  7662 ;; Defined at:
  7663 ;;		line 78 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  7664 ;; Parameters:    Size  Location     Type
  7665 ;;		None
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;		None
  7668 ;; Return value:  Size  Location     Type
  7669 ;;		None               void
  7670 ;; Registers used:
  7671 ;;		None
  7672 ;; Tracked objects:
  7673 ;;		On entry : 0/0
  7674 ;;		On exit  : 0/0
  7675 ;;		Unchanged: 0/0
  7676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7677 ;;      Params:         0       0       0       0       0
  7678 ;;      Locals:         0       0       0       0       0
  7679 ;;      Temps:          0       0       0       0       0
  7680 ;;      Totals:         0       0       0       0       0
  7681 ;;Total ram usage:        0 bytes
  7682 ;; Hardware stack levels used:    1
  7683 ;; Hardware stack levels required when called:    2
  7684 ;; This function calls:
  7685 ;;		Nothing
  7686 ;; This function is called by:
  7687 ;;		_main
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           
  7692                           ;psect for function _initInterrupt
  7693  121F                     _initInterrupt:	
  7694                           
  7695                           ;main.c: 80: GIE = 1;
  7696                           
  7697                           ;incstack = 0
  7698                           ; Regs used in _initInterrupt: []
  7699  121F  178B               	bsf	11,7	;volatile
  7700                           
  7701                           ;main.c: 81: INTE = 1;
  7702  1220  160B               	bsf	11,4	;volatile
  7703                           
  7704                           ;main.c: 82: INTF = 0;
  7705  1221  108B               	bcf	11,1	;volatile
  7706                           
  7707                           ;main.c: 83: INTEDG = 0;
  7708  1222  1683               	bsf	3,5	;RP0=1, select bank1
  7709  1223  1303               	bcf	3,6	;RP1=0, select bank1
  7710  1224  1301               	bcf	1,6	;volatile
  7711  1225  0008               	return
  7712  1226                     __end_of_initInterrupt:	
  7713                           
  7714                           	psect	text32
  7715  1235                     __ptext32:	
  7716 ;; *************** function _initADC *****************
  7717 ;; Defined at:
  7718 ;;		line 65 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  7719 ;; Parameters:    Size  Location     Type
  7720 ;;		None
  7721 ;; Auto vars:     Size  Location     Type
  7722 ;;		None
  7723 ;; Return value:  Size  Location     Type
  7724 ;;		None               void
  7725 ;; Registers used:
  7726 ;;		wreg
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7732 ;;      Params:         0       0       0       0       0
  7733 ;;      Locals:         0       0       0       0       0
  7734 ;;      Temps:          0       0       0       0       0
  7735 ;;      Totals:         0       0       0       0       0
  7736 ;;Total ram usage:        0 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; Hardware stack levels required when called:    2
  7739 ;; This function calls:
  7740 ;;		Nothing
  7741 ;; This function is called by:
  7742 ;;		_main
  7743 ;; This function uses a non-reentrant model
  7744 ;;
  7745                           
  7746                           
  7747                           ;psect for function _initADC
  7748  1235                     _initADC:	
  7749                           
  7750                           ;main.c: 67: ADCON1 = 0x80;
  7751                           
  7752                           ;incstack = 0
  7753                           ; Regs used in _initADC: [wreg]
  7754  1235  3080               	movlw	128
  7755  1236  1683               	bsf	3,5	;RP0=1, select bank1
  7756  1237  1303               	bcf	3,6	;RP1=0, select bank1
  7757  1238  009F               	movwf	31	;volatile
  7758                           
  7759                           ;main.c: 68: ADCON0 = 0x01;
  7760  1239  3001               	movlw	1
  7761  123A  1283               	bcf	3,5	;RP0=0, select bank0
  7762  123B  1303               	bcf	3,6	;RP1=0, select bank0
  7763  123C  009F               	movwf	31	;volatile
  7764  123D  0008               	return
  7765  123E                     __end_of_initADC:	
  7766                           
  7767                           	psect	text33
  7768  12C3                     __ptext33:	
  7769 ;; *************** function _handleTemp *****************
  7770 ;; Defined at:
  7771 ;;		line 31 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\temp_module.h"
  7772 ;; Parameters:    Size  Location     Type
  7773 ;;		None
  7774 ;; Auto vars:     Size  Location     Type
  7775 ;;		None
  7776 ;; Return value:  Size  Location     Type
  7777 ;;                  1    wreg      unsigned char 
  7778 ;; Registers used:
  7779 ;;		wreg, status,2, btemp+1
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7785 ;;      Params:         0       0       0       0       0
  7786 ;;      Locals:         0       0       0       0       0
  7787 ;;      Temps:          0       0       0       0       0
  7788 ;;      Totals:         0       0       0       0       0
  7789 ;;Total ram usage:        0 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; Hardware stack levels required when called:    2
  7792 ;; This function calls:
  7793 ;;		Nothing
  7794 ;; This function is called by:
  7795 ;;		_main
  7796 ;; This function uses a non-reentrant model
  7797 ;;
  7798                           
  7799                           
  7800                           ;psect for function _handleTemp
  7801  12C3                     _handleTemp:	
  7802                           
  7803                           ;temp_module.h: 33: if (tempBuffer > 32)
  7804                           
  7805                           ;incstack = 0
  7806                           ; Regs used in _handleTemp: [wreg+status,2+btemp+1]
  7807  12C3  1683               	bsf	3,5	;RP0=1, select bank1
  7808  12C4  1303               	bcf	3,6	;RP1=0, select bank1
  7809  12C5  084E               	movf	(_tempBuffer+1)^(0+128),w
  7810  12C6  3A80               	xorlw	128
  7811  12C7  00FF               	movwf	127
  7812  12C8  3080               	movlw	128
  7813  12C9  027F               	subwf	127,w
  7814  12CA  1D03               	skipz
  7815  12CB  2ACE               	goto	u4885
  7816  12CC  3021               	movlw	33
  7817  12CD  024D               	subwf	_tempBuffer^(0+128),w
  7818  12CE                     u4885:	
  7819  12CE  1C03               	skipc
  7820  12CF  2AD8               	goto	l246
  7821                           
  7822                           ;temp_module.h: 34: {
  7823                           ;temp_module.h: 35: RC5 = 1;
  7824  12D0  1283               	bcf	3,5	;RP0=0, select bank0
  7825  12D1  1303               	bcf	3,6	;RP1=0, select bank0
  7826  12D2  1687               	bsf	7,5	;volatile
  7827                           
  7828                           ;temp_module.h: 36: tempFlag = 1;
  7829  12D3  1683               	bsf	3,5	;RP0=1, select bank1
  7830  12D4  1303               	bcf	3,6	;RP1=0, select bank1
  7831  12D5  01D8               	clrf	_tempFlag^(0+128)
  7832  12D6  0AD8               	incf	_tempFlag^(0+128),f
  7833                           
  7834                           ;temp_module.h: 38: }
  7835                           
  7836                           ;temp_module.h: 37: return 1;
  7837                           ;	Return value of _handleTemp is never used
  7838  12D7  0008               	return
  7839  12D8                     l246:	
  7840                           
  7841                           ;temp_module.h: 39: else
  7842                           ;temp_module.h: 40: {
  7843                           ;temp_module.h: 41: RC5 = 0;
  7844  12D8  1283               	bcf	3,5	;RP0=0, select bank0
  7845  12D9  1303               	bcf	3,6	;RP1=0, select bank0
  7846  12DA  1287               	bcf	7,5	;volatile
  7847                           
  7848                           ;temp_module.h: 42: tempFlag = 0;
  7849  12DB  1683               	bsf	3,5	;RP0=1, select bank1
  7850  12DC  1303               	bcf	3,6	;RP1=0, select bank1
  7851  12DD  01D8               	clrf	_tempFlag^(0+128)
  7852                           
  7853                           ;temp_module.h: 43: return 0;
  7854                           ;	Return value of _handleTemp is never used
  7855  12DE  0008               	return
  7856  12DF                     __end_of_handleTemp:	
  7857                           
  7858                           	psect	text34
  7859  14AF                     __ptext34:	
  7860 ;; *************** function _handlePPM *****************
  7861 ;; Defined at:
  7862 ;;		line 54 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\mq135_module.h"
  7863 ;; Parameters:    Size  Location     Type
  7864 ;;		None
  7865 ;; Auto vars:     Size  Location     Type
  7866 ;;		None
  7867 ;; Return value:  Size  Location     Type
  7868 ;;                  1    wreg      unsigned char 
  7869 ;; Registers used:
  7870 ;;		wreg, status,2, status,0, pclath, cstack
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7876 ;;      Params:         0       0       0       0       0
  7877 ;;      Locals:         0       0       0       0       0
  7878 ;;      Temps:          0       0       0       0       0
  7879 ;;      Totals:         0       0       0       0       0
  7880 ;;Total ram usage:        0 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; Hardware stack levels required when called:    3
  7883 ;; This function calls:
  7884 ;;		___ftge
  7885 ;; This function is called by:
  7886 ;;		_main
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           
  7891                           ;psect for function _handlePPM
  7892  14AF                     _handlePPM:	
  7893                           
  7894                           ;mq135_module.h: 56: if (PPM > 9)
  7895                           
  7896                           ;incstack = 0
  7897                           ; Regs used in _handlePPM: [wreg+status,2+status,0+pclath+cstack]
  7898  14AF  3000               	movlw	0
  7899  14B0  1283               	bcf	3,5	;RP0=0, select bank0
  7900  14B1  1303               	bcf	3,6	;RP1=0, select bank0
  7901  14B2  00A0               	movwf	___ftge@ff1
  7902  14B3  3010               	movlw	16
  7903  14B4  00A1               	movwf	___ftge@ff1+1
  7904  14B5  3041               	movlw	65
  7905  14B6  00A2               	movwf	___ftge@ff1+2
  7906  14B7  1683               	bsf	3,5	;RP0=1, select bank1
  7907  14B8  1303               	bcf	3,6	;RP1=0, select bank1
  7908  14B9  084A               	movf	_PPM^(0+128),w	;volatile
  7909  14BA  1283               	bcf	3,5	;RP0=0, select bank0
  7910  14BB  1303               	bcf	3,6	;RP1=0, select bank0
  7911  14BC  00A3               	movwf	___ftge@ff2
  7912  14BD  1683               	bsf	3,5	;RP0=1, select bank1
  7913  14BE  1303               	bcf	3,6	;RP1=0, select bank1
  7914  14BF  084B               	movf	(_PPM+1)^(0+128),w	;volatile
  7915  14C0  1283               	bcf	3,5	;RP0=0, select bank0
  7916  14C1  1303               	bcf	3,6	;RP1=0, select bank0
  7917  14C2  00A4               	movwf	___ftge@ff2+1
  7918  14C3  1683               	bsf	3,5	;RP0=1, select bank1
  7919  14C4  1303               	bcf	3,6	;RP1=0, select bank1
  7920  14C5  084C               	movf	(_PPM+2)^(0+128),w	;volatile
  7921  14C6  1283               	bcf	3,5	;RP0=0, select bank0
  7922  14C7  1303               	bcf	3,6	;RP1=0, select bank0
  7923  14C8  00A5               	movwf	___ftge@ff2+2
  7924  14C9  160A  118A  25D8  160A  118A  	fcall	___ftge
  7925  14CE  1803               	btfsc	3,0
  7926  14CF  2CD8               	goto	l113
  7927                           
  7928                           ;mq135_module.h: 57: {
  7929                           ;mq135_module.h: 58: RC3 = 1;
  7930  14D0  1283               	bcf	3,5	;RP0=0, select bank0
  7931  14D1  1303               	bcf	3,6	;RP1=0, select bank0
  7932  14D2  1587               	bsf	7,3	;volatile
  7933                           
  7934                           ;mq135_module.h: 59: ppmFlag = 1;
  7935  14D3  1683               	bsf	3,5	;RP0=1, select bank1
  7936  14D4  1303               	bcf	3,6	;RP1=0, select bank1
  7937  14D5  01D6               	clrf	_ppmFlag^(0+128)
  7938  14D6  0AD6               	incf	_ppmFlag^(0+128),f
  7939                           
  7940                           ;mq135_module.h: 61: }
  7941                           
  7942                           ;mq135_module.h: 60: return 1;
  7943                           ;	Return value of _handlePPM is never used
  7944  14D7  0008               	return
  7945  14D8                     l113:	
  7946                           
  7947                           ;mq135_module.h: 62: else
  7948                           ;mq135_module.h: 63: {
  7949                           ;mq135_module.h: 64: RC3 = 0;
  7950  14D8  1283               	bcf	3,5	;RP0=0, select bank0
  7951  14D9  1303               	bcf	3,6	;RP1=0, select bank0
  7952  14DA  1187               	bcf	7,3	;volatile
  7953                           
  7954                           ;mq135_module.h: 65: ppmFlag = 0;
  7955  14DB  1683               	bsf	3,5	;RP0=1, select bank1
  7956  14DC  1303               	bcf	3,6	;RP1=0, select bank1
  7957  14DD  01D6               	clrf	_ppmFlag^(0+128)
  7958                           
  7959                           ;mq135_module.h: 66: return 0;
  7960                           ;	Return value of _handlePPM is never used
  7961  14DE  0008               	return
  7962  14DF                     __end_of_handlePPM:	
  7963                           
  7964                           	psect	text35
  7965  15D8                     __ptext35:	
  7966 ;; *************** function ___ftge *****************
  7967 ;; Defined at:
  7968 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;  ff1             3    0[BANK0 ] float 
  7971 ;;  ff2             3    3[BANK0 ] float 
  7972 ;; Auto vars:     Size  Location     Type
  7973 ;;		None
  7974 ;; Return value:  Size  Location     Type
  7975 ;;		None               void
  7976 ;; Registers used:
  7977 ;;		wreg, status,2, status,0
  7978 ;; Tracked objects:
  7979 ;;		On entry : 0/0
  7980 ;;		On exit  : 0/0
  7981 ;;		Unchanged: 0/0
  7982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7983 ;;      Params:         0       6       0       0       0
  7984 ;;      Locals:         0       0       0       0       0
  7985 ;;      Temps:          0       6       0       0       0
  7986 ;;      Totals:         0      12       0       0       0
  7987 ;;Total ram usage:       12 bytes
  7988 ;; Hardware stack levels used:    1
  7989 ;; Hardware stack levels required when called:    2
  7990 ;; This function calls:
  7991 ;;		Nothing
  7992 ;; This function is called by:
  7993 ;;		_handlePPM
  7994 ;; This function uses a non-reentrant model
  7995 ;;
  7996                           
  7997                           
  7998                           ;psect for function ___ftge
  7999  15D8                     ___ftge:	
  8000                           
  8001                           ;incstack = 0
  8002                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8003  15D8  1283               	bcf	3,5	;RP0=0, select bank0
  8004  15D9  1303               	bcf	3,6	;RP1=0, select bank0
  8005  15DA  1FA2               	btfss	___ftge@ff1+2,7
  8006  15DB  2E01               	goto	l2708
  8007  15DC  3000               	movlw	0
  8008  15DD  00A6               	movwf	??___ftge
  8009  15DE  3000               	movlw	0
  8010  15DF  00A7               	movwf	??___ftge+1
  8011  15E0  3080               	movlw	128
  8012  15E1  00A8               	movwf	??___ftge+2
  8013  15E2  0920               	comf	___ftge@ff1,w
  8014  15E3  00A9               	movwf	??___ftge+3
  8015  15E4  0921               	comf	___ftge@ff1+1,w
  8016  15E5  00AA               	movwf	??___ftge+4
  8017  15E6  0922               	comf	___ftge@ff1+2,w
  8018  15E7  00AB               	movwf	??___ftge+5
  8019  15E8  0AA9               	incf	??___ftge+3,f
  8020  15E9  1903               	skipnz
  8021  15EA  0AAA               	incf	??___ftge+4,f
  8022  15EB  1903               	skipnz
  8023  15EC  0AAB               	incf	??___ftge+5,f
  8024  15ED  0829               	movf	??___ftge+3,w
  8025  15EE  07A6               	addwf	??___ftge,f
  8026  15EF  082A               	movf	??___ftge+4,w
  8027  15F0  1803               	skipnc
  8028  15F1  0F2A               	incfsz	??___ftge+4,w
  8029  15F2  2DF4               	goto	u3621
  8030  15F3  2DF5               	goto	u3622
  8031  15F4                     u3621:	
  8032  15F4  07A7               	addwf	??___ftge+1,f
  8033  15F5                     u3622:	
  8034  15F5  082B               	movf	??___ftge+5,w
  8035  15F6  1803               	skipnc
  8036  15F7  0F2B               	incfsz	??___ftge+5,w
  8037  15F8  2DFA               	goto	u3623
  8038  15F9  2DFB               	goto	u3624
  8039  15FA                     u3623:	
  8040  15FA  07A8               	addwf	??___ftge+2,f
  8041  15FB                     u3624:	
  8042  15FB  0826               	movf	??___ftge,w
  8043  15FC  00A0               	movwf	___ftge@ff1
  8044  15FD  0827               	movf	??___ftge+1,w
  8045  15FE  00A1               	movwf	___ftge@ff1+1
  8046  15FF  0828               	movf	??___ftge+2,w
  8047  1600  00A2               	movwf	___ftge@ff1+2
  8048  1601                     l2708:	
  8049  1601  1FA5               	btfss	___ftge@ff2+2,7
  8050  1602  2E28               	goto	l2712
  8051  1603  3000               	movlw	0
  8052  1604  00A6               	movwf	??___ftge
  8053  1605  3000               	movlw	0
  8054  1606  00A7               	movwf	??___ftge+1
  8055  1607  3080               	movlw	128
  8056  1608  00A8               	movwf	??___ftge+2
  8057  1609  0923               	comf	___ftge@ff2,w
  8058  160A  00A9               	movwf	??___ftge+3
  8059  160B  0924               	comf	___ftge@ff2+1,w
  8060  160C  00AA               	movwf	??___ftge+4
  8061  160D  0925               	comf	___ftge@ff2+2,w
  8062  160E  00AB               	movwf	??___ftge+5
  8063  160F  0AA9               	incf	??___ftge+3,f
  8064  1610  1903               	skipnz
  8065  1611  0AAA               	incf	??___ftge+4,f
  8066  1612  1903               	skipnz
  8067  1613  0AAB               	incf	??___ftge+5,f
  8068  1614  0829               	movf	??___ftge+3,w
  8069  1615  07A6               	addwf	??___ftge,f
  8070  1616  082A               	movf	??___ftge+4,w
  8071  1617  1803               	skipnc
  8072  1618  0F2A               	incfsz	??___ftge+4,w
  8073  1619  2E1B               	goto	u3641
  8074  161A  2E1C               	goto	u3642
  8075  161B                     u3641:	
  8076  161B  07A7               	addwf	??___ftge+1,f
  8077  161C                     u3642:	
  8078  161C  082B               	movf	??___ftge+5,w
  8079  161D  1803               	skipnc
  8080  161E  0F2B               	incfsz	??___ftge+5,w
  8081  161F  2E21               	goto	u3643
  8082  1620  2E22               	goto	u3644
  8083  1621                     u3643:	
  8084  1621  07A8               	addwf	??___ftge+2,f
  8085  1622                     u3644:	
  8086  1622  0826               	movf	??___ftge,w
  8087  1623  00A3               	movwf	___ftge@ff2
  8088  1624  0827               	movf	??___ftge+1,w
  8089  1625  00A4               	movwf	___ftge@ff2+1
  8090  1626  0828               	movf	??___ftge+2,w
  8091  1627  00A5               	movwf	___ftge@ff2+2
  8092  1628                     l2712:	
  8093  1628  3080               	movlw	128
  8094  1629  06A2               	xorwf	___ftge@ff1+2,f
  8095  162A  3080               	movlw	128
  8096  162B  06A5               	xorwf	___ftge@ff2+2,f
  8097  162C  0825               	movf	___ftge@ff2+2,w
  8098  162D  0222               	subwf	___ftge@ff1+2,w
  8099  162E  1D03               	skipz
  8100  162F  0008               	return
  8101  1630  0824               	movf	___ftge@ff2+1,w
  8102  1631  0221               	subwf	___ftge@ff1+1,w
  8103  1632  1D03               	skipz
  8104  1633  0008               	return
  8105  1634  0823               	movf	___ftge@ff2,w
  8106  1635  0220               	subwf	___ftge@ff1,w
  8107  1636  0008               	return
  8108  1637                     __end_of___ftge:	
  8109                           
  8110                           	psect	text36
  8111  1706                     __ptext36:	
  8112 ;; *************** function _checkTime *****************
  8113 ;; Defined at:
  8114 ;;		line 208 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\time_scheduler.
      +h"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;		None
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;		None
  8119 ;; Return value:  Size  Location     Type
  8120 ;;		None               void
  8121 ;; Registers used:
  8122 ;;		wreg
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8128 ;;      Params:         0       0       0       0       0
  8129 ;;      Locals:         0       0       0       0       0
  8130 ;;      Temps:          0       0       0       0       0
  8131 ;;      Totals:         0       0       0       0       0
  8132 ;;Total ram usage:        0 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    2
  8135 ;; This function calls:
  8136 ;;		Nothing
  8137 ;; This function is called by:
  8138 ;;		_main
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           
  8143                           ;psect for function _checkTime
  8144  1706                     _checkTime:	
  8145                           
  8146                           ;time_scheduler.h: 210: if (hours == savedHoursEnd && minutes == savedMinutesEnd)
  8147                           
  8148                           ;incstack = 0
  8149                           ; Regs used in _checkTime: [wreg]
  8150  1706  087C               	movf	_hours,w	;volatile
  8151  1707  1683               	bsf	3,5	;RP0=1, select bank1
  8152  1708  1303               	bcf	3,6	;RP1=0, select bank1
  8153  1709  0664               	xorwf	_savedHoursEnd^(0+128),w	;volatile
  8154  170A  1D03               	skipz
  8155  170B  2F14               	goto	l3406
  8156  170C  087B               	movf	_minutes,w	;volatile
  8157  170D  0666               	xorwf	_savedMinutesEnd^(0+128),w	;volatile
  8158  170E  1D03               	skipz
  8159  170F  2F14               	goto	l3406
  8160                           
  8161                           ;time_scheduler.h: 211: {
  8162                           ;time_scheduler.h: 212: RC4 = 1;
  8163  1710  1283               	bcf	3,5	;RP0=0, select bank0
  8164  1711  1303               	bcf	3,6	;RP1=0, select bank0
  8165  1712  1607               	bsf	7,4	;volatile
  8166                           
  8167                           ;time_scheduler.h: 213: }
  8168  1713  0008               	return
  8169  1714                     l3406:	
  8170                           
  8171                           ;time_scheduler.h: 214: else if (savedHoursEnd > savedHoursStart)
  8172  1714  1683               	bsf	3,5	;RP0=1, select bank1
  8173  1715  1303               	bcf	3,6	;RP1=0, select bank1
  8174  1716  0864               	movf	_savedHoursEnd^(0+128),w	;volatile
  8175  1717  0265               	subwf	_savedHoursStart^(0+128),w	;volatile
  8176  1718  1803               	skipnc
  8177  1719  2F3A               	goto	l3420
  8178                           
  8179                           ;time_scheduler.h: 215: {
  8180                           ;time_scheduler.h: 217: if ((hours > savedHoursStart || (hours == savedHoursStart && min
      +                          utes >= savedMinutesStart)) &&
  8181                           ;time_scheduler.h: 218: (hours < savedHoursEnd || (hours == savedHoursEnd && minutes < s
      +                          avedMinutesEnd)))
  8182  171A  087C               	movf	_hours,w	;volatile
  8183  171B  0265               	subwf	_savedHoursStart^(0+128),w	;volatile
  8184  171C  1C03               	skipc
  8185  171D  2F26               	goto	l3414
  8186  171E  087C               	movf	_hours,w	;volatile
  8187  171F  0665               	xorwf	_savedHoursStart^(0+128),w	;volatile
  8188  1720  1D03               	skipz
  8189  1721  2F36               	goto	l214
  8190  1722  0867               	movf	_savedMinutesStart^(0+128),w	;volatile
  8191  1723  027B               	subwf	_minutes,w	;volatile
  8192  1724  1C03               	skipc
  8193  1725  2F36               	goto	l214
  8194  1726                     l3414:	
  8195  1726  0864               	movf	_savedHoursEnd^(0+128),w	;volatile
  8196  1727  027C               	subwf	_hours,w	;volatile
  8197  1728  1C03               	skipc
  8198  1729  2F32               	goto	l218
  8199  172A  087C               	movf	_hours,w	;volatile
  8200  172B  0664               	xorwf	_savedHoursEnd^(0+128),w	;volatile
  8201  172C  1D03               	skipz
  8202  172D  2F36               	goto	l214
  8203  172E  0866               	movf	_savedMinutesEnd^(0+128),w	;volatile
  8204  172F  027B               	subwf	_minutes,w	;volatile
  8205  1730  1803               	skipnc
  8206  1731  2F36               	goto	l214
  8207  1732                     l218:	
  8208                           
  8209                           ;time_scheduler.h: 219: {
  8210                           ;time_scheduler.h: 220: RC4 = 1;
  8211  1732  1283               	bcf	3,5	;RP0=0, select bank0
  8212  1733  1303               	bcf	3,6	;RP1=0, select bank0
  8213  1734  1607               	bsf	7,4	;volatile
  8214                           
  8215                           ;time_scheduler.h: 221: }
  8216  1735  0008               	return
  8217  1736                     l214:	
  8218                           
  8219                           ;time_scheduler.h: 222: else
  8220                           ;time_scheduler.h: 223: {
  8221                           ;time_scheduler.h: 224: RC4 = 0;
  8222  1736  1283               	bcf	3,5	;RP0=0, select bank0
  8223  1737  1303               	bcf	3,6	;RP1=0, select bank0
  8224  1738  1207               	bcf	7,4	;volatile
  8225                           
  8226                           ;time_scheduler.h: 225: }
  8227                           ;time_scheduler.h: 226: }
  8228  1739  0008               	return
  8229  173A                     l3420:	
  8230                           
  8231                           ;time_scheduler.h: 227: else if (savedHoursEnd < savedHoursStart)
  8232  173A  1683               	bsf	3,5	;RP0=1, select bank1
  8233  173B  1303               	bcf	3,6	;RP1=0, select bank1
  8234  173C  0865               	movf	_savedHoursStart^(0+128),w	;volatile
  8235  173D  0264               	subwf	_savedHoursEnd^(0+128),w	;volatile
  8236  173E  1803               	skipnc
  8237  173F  2F60               	goto	l3434
  8238                           
  8239                           ;time_scheduler.h: 228: {
  8240                           ;time_scheduler.h: 230: if ((hours > savedHoursStart || (hours == savedHoursStart && min
      +                          utes >= savedMinutesStart)) ||
  8241                           ;time_scheduler.h: 231: (hours < savedHoursEnd || (hours == savedHoursEnd && minutes < s
      +                          avedMinutesEnd)))
  8242  1740  087C               	movf	_hours,w	;volatile
  8243  1741  0265               	subwf	_savedHoursStart^(0+128),w	;volatile
  8244  1742  1C03               	skipc
  8245  1743  2F58               	goto	l224
  8246  1744  087C               	movf	_hours,w	;volatile
  8247  1745  0665               	xorwf	_savedHoursStart^(0+128),w	;volatile
  8248  1746  1D03               	skipz
  8249  1747  2F4C               	goto	l3428
  8250  1748  0867               	movf	_savedMinutesStart^(0+128),w	;volatile
  8251  1749  027B               	subwf	_minutes,w	;volatile
  8252  174A  1803               	skipnc
  8253  174B  2F58               	goto	l224
  8254  174C                     l3428:	
  8255  174C  0864               	movf	_savedHoursEnd^(0+128),w	;volatile
  8256  174D  027C               	subwf	_hours,w	;volatile
  8257  174E  1C03               	skipc
  8258  174F  2F58               	goto	l224
  8259  1750  087C               	movf	_hours,w	;volatile
  8260  1751  0664               	xorwf	_savedHoursEnd^(0+128),w	;volatile
  8261  1752  1D03               	skipz
  8262  1753  2F5C               	goto	l222
  8263  1754  0866               	movf	_savedMinutesEnd^(0+128),w	;volatile
  8264  1755  027B               	subwf	_minutes,w	;volatile
  8265  1756  1803               	skipnc
  8266  1757  2F5C               	goto	l222
  8267  1758                     l224:	
  8268                           
  8269                           ;time_scheduler.h: 232: {
  8270                           ;time_scheduler.h: 233: RC4 = 1;
  8271  1758  1283               	bcf	3,5	;RP0=0, select bank0
  8272  1759  1303               	bcf	3,6	;RP1=0, select bank0
  8273  175A  1607               	bsf	7,4	;volatile
  8274                           
  8275                           ;time_scheduler.h: 234: }
  8276  175B  0008               	return
  8277  175C                     l222:	
  8278                           
  8279                           ;time_scheduler.h: 235: else
  8280                           ;time_scheduler.h: 236: {
  8281                           ;time_scheduler.h: 237: RC4 = 0;
  8282  175C  1283               	bcf	3,5	;RP0=0, select bank0
  8283  175D  1303               	bcf	3,6	;RP1=0, select bank0
  8284  175E  1207               	bcf	7,4	;volatile
  8285                           
  8286                           ;time_scheduler.h: 238: }
  8287                           ;time_scheduler.h: 239: }
  8288  175F  0008               	return
  8289  1760                     l3434:	
  8290                           
  8291                           ;time_scheduler.h: 240: else
  8292                           ;time_scheduler.h: 241: {
  8293                           ;time_scheduler.h: 242: if (minutes >= savedMinutesStart && minutes < savedMinutesEnd)
  8294  1760  1683               	bsf	3,5	;RP0=1, select bank1
  8295  1761  1303               	bcf	3,6	;RP1=0, select bank1
  8296  1762  0867               	movf	_savedMinutesStart^(0+128),w	;volatile
  8297  1763  027B               	subwf	_minutes,w	;volatile
  8298  1764  1C03               	skipc
  8299  1765  2F6E               	goto	l231
  8300  1766  0866               	movf	_savedMinutesEnd^(0+128),w	;volatile
  8301  1767  027B               	subwf	_minutes,w	;volatile
  8302  1768  1803               	skipnc
  8303  1769  2F6E               	goto	l231
  8304                           
  8305                           ;time_scheduler.h: 243: {
  8306                           ;time_scheduler.h: 244: RC4 = 1;
  8307  176A  1283               	bcf	3,5	;RP0=0, select bank0
  8308  176B  1303               	bcf	3,6	;RP1=0, select bank0
  8309  176C  1607               	bsf	7,4	;volatile
  8310                           
  8311                           ;time_scheduler.h: 245: }
  8312  176D  0008               	return
  8313  176E                     l231:	
  8314                           
  8315                           ;time_scheduler.h: 246: else
  8316                           ;time_scheduler.h: 247: {
  8317                           ;time_scheduler.h: 248: RC4 = 0;
  8318  176E  1283               	bcf	3,5	;RP0=0, select bank0
  8319  176F  1303               	bcf	3,6	;RP1=0, select bank0
  8320  1770  1207               	bcf	7,4	;volatile
  8321  1771  0008               	return
  8322  1772                     __end_of_checkTime:	
  8323                           
  8324                           	psect	text37
  8325  14DF                     __ptext37:	
  8326 ;; *************** function _checkSelect *****************
  8327 ;; Defined at:
  8328 ;;		line 193 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;		None
  8331 ;; Auto vars:     Size  Location     Type
  8332 ;;  currentRB1St    2    4[BANK0 ] int 
  8333 ;; Return value:  Size  Location     Type
  8334 ;;		None               void
  8335 ;; Registers used:
  8336 ;;		wreg, status,2, status,0, pclath, cstack
  8337 ;; Tracked objects:
  8338 ;;		On entry : 0/0
  8339 ;;		On exit  : 0/0
  8340 ;;		Unchanged: 0/0
  8341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8342 ;;      Params:         0       0       0       0       0
  8343 ;;      Locals:         0       2       0       0       0
  8344 ;;      Temps:          0       2       0       0       0
  8345 ;;      Totals:         0       4       0       0       0
  8346 ;;Total ram usage:        4 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; Hardware stack levels required when called:    3
  8349 ;; This function calls:
  8350 ;;		_instCTRL
  8351 ;; This function is called by:
  8352 ;;		_main
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           
  8357                           ;psect for function _checkSelect
  8358  14DF                     _checkSelect:	
  8359                           
  8360                           ;main.c: 195: static int lastRB1State = 0;
  8361                           ;main.c: 196: int currentRB1State = RB1;
  8362                           
  8363                           ;incstack = 0
  8364                           ; Regs used in _checkSelect: [wreg+status,2+status,0+pclath+cstack]
  8365  14DF  1003               	clrc
  8366  14E0  1283               	bcf	3,5	;RP0=0, select bank0
  8367  14E1  1303               	bcf	3,6	;RP1=0, select bank0
  8368  14E2  1886               	btfsc	6,1	;volatile
  8369  14E3  1403               	setc
  8370  14E4  3000               	movlw	0
  8371  14E5  1803               	skipnc
  8372  14E6  3001               	movlw	1
  8373  14E7  00A2               	movwf	??_checkSelect
  8374  14E8  01A3               	clrf	??_checkSelect+1
  8375  14E9  0822               	movf	??_checkSelect,w
  8376  14EA  00A4               	movwf	checkSelect@currentRB1State
  8377  14EB  0823               	movf	??_checkSelect+1,w
  8378  14EC  00A5               	movwf	checkSelect@currentRB1State+1
  8379                           
  8380                           ;main.c: 197: if (currentRB1State == 1 && lastRB1State == 0)
  8381  14ED  3001               	movlw	1
  8382  14EE  0624               	xorwf	checkSelect@currentRB1State,w
  8383  14EF  0425               	iorwf	checkSelect@currentRB1State+1,w
  8384  14F0  1D03               	skipz
  8385  14F1  2D04               	goto	l2816
  8386  14F2  1683               	bsf	3,5	;RP0=1, select bank1
  8387  14F3  1303               	bcf	3,6	;RP1=0, select bank1
  8388  14F4  0850               	movf	(checkSelect@lastRB1State+1)^(0+128),w
  8389  14F5  044F               	iorwf	checkSelect@lastRB1State^(0+128),w
  8390  14F6  1D03               	skipz
  8391  14F7  2D04               	goto	l2816
  8392                           
  8393                           ;main.c: 198: {
  8394                           ;main.c: 199: select ^= 1;
  8395  14F8  3001               	movlw	1
  8396  14F9  1283               	bcf	3,5	;RP0=0, select bank0
  8397  14FA  1303               	bcf	3,6	;RP1=0, select bank0
  8398  14FB  00A2               	movwf	??_checkSelect
  8399  14FC  0822               	movf	??_checkSelect,w
  8400  14FD  1683               	bsf	3,5	;RP0=1, select bank1
  8401  14FE  1303               	bcf	3,6	;RP1=0, select bank1
  8402  14FF  06D7               	xorwf	_select^(0+128),f	;volatile
  8403                           
  8404                           ;main.c: 201: instCTRL(0x01);
  8405  1500  3001               	movlw	1
  8406  1501  160A  118A  2288   	fcall	_instCTRL
  8407  1504                     l2816:	
  8408                           
  8409                           ;main.c: 202: }
  8410                           ;main.c: 203: lastRB1State = currentRB1State;
  8411  1504  1283               	bcf	3,5	;RP0=0, select bank0
  8412  1505  1303               	bcf	3,6	;RP1=0, select bank0
  8413  1506  0825               	movf	checkSelect@currentRB1State+1,w
  8414  1507  1683               	bsf	3,5	;RP0=1, select bank1
  8415  1508  1303               	bcf	3,6	;RP1=0, select bank1
  8416  1509  01D0               	clrf	(checkSelect@lastRB1State+1)^(0+128)
  8417  150A  07D0               	addwf	(checkSelect@lastRB1State+1)^(0+128),f
  8418  150B  1283               	bcf	3,5	;RP0=0, select bank0
  8419  150C  1303               	bcf	3,6	;RP1=0, select bank0
  8420  150D  0824               	movf	checkSelect@currentRB1State,w
  8421  150E  1683               	bsf	3,5	;RP0=1, select bank1
  8422  150F  1303               	bcf	3,6	;RP1=0, select bank1
  8423  1510  01CF               	clrf	checkSelect@lastRB1State^(0+128)
  8424  1511  07CF               	addwf	checkSelect@lastRB1State^(0+128),f
  8425  1512  0008               	return
  8426  1513                     __end_of_checkSelect:	
  8427                           
  8428                           	psect	text38
  8429  1354                     __ptext38:	
  8430 ;; *************** function _checkMode *****************
  8431 ;; Defined at:
  8432 ;;		line 182 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  8433 ;; Parameters:    Size  Location     Type
  8434 ;;		None
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;		None
  8437 ;; Return value:  Size  Location     Type
  8438 ;;		None               void
  8439 ;; Registers used:
  8440 ;;		wreg, status,2, status,0, pclath, cstack
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 0/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8446 ;;      Params:         0       0       0       0       0
  8447 ;;      Locals:         0       0       0       0       0
  8448 ;;      Temps:          0       2       0       0       0
  8449 ;;      Totals:         0       2       0       0       0
  8450 ;;Total ram usage:        2 bytes
  8451 ;; Hardware stack levels used:    1
  8452 ;; Hardware stack levels required when called:    3
  8453 ;; This function calls:
  8454 ;;		_instCTRL
  8455 ;; This function is called by:
  8456 ;;		_main
  8457 ;; This function uses a non-reentrant model
  8458 ;;
  8459                           
  8460                           
  8461                           ;psect for function _checkMode
  8462  1354                     _checkMode:	
  8463                           
  8464                           ;main.c: 184: if (lastMode != mode)
  8465                           
  8466                           ;incstack = 0
  8467                           ; Regs used in _checkMode: [wreg+status,2+status,0+pclath+cstack]
  8468  1354  1683               	bsf	3,5	;RP0=1, select bank1
  8469  1355  1303               	bcf	3,6	;RP1=0, select bank1
  8470  1356  0863               	movf	_lastMode^(0+128),w
  8471  1357  0655               	xorwf	_mode^(0+128),w
  8472  1358  1903               	skipnz
  8473  1359  0008               	return
  8474                           
  8475                           ;main.c: 185: {
  8476                           ;main.c: 187: instCTRL(0x01);
  8477  135A  3001               	movlw	1
  8478  135B  160A  118A  2288  160A  118A  	fcall	_instCTRL
  8479                           
  8480                           ;main.c: 188: _delay((unsigned long)((50)*(4000000/4000.0)));
  8481  1360  3041               	movlw	65
  8482  1361  1283               	bcf	3,5	;RP0=0, select bank0
  8483  1362  1303               	bcf	3,6	;RP1=0, select bank0
  8484  1363  00A3               	movwf	??_checkMode+1
  8485  1364  30EE               	movlw	238
  8486  1365  00A2               	movwf	??_checkMode
  8487  1366                     u5047:	
  8488  1366  0BA2               	decfsz	??_checkMode,f
  8489  1367  2B66               	goto	u5047
  8490  1368  0BA3               	decfsz	??_checkMode+1,f
  8491  1369  2B66               	goto	u5047
  8492  136A  0000               	nop
  8493                           
  8494                           ;main.c: 189: lastMode = mode;
  8495  136B  1683               	bsf	3,5	;RP0=1, select bank1
  8496  136C  1303               	bcf	3,6	;RP1=0, select bank1
  8497  136D  0855               	movf	_mode^(0+128),w
  8498  136E  1283               	bcf	3,5	;RP0=0, select bank0
  8499  136F  1303               	bcf	3,6	;RP1=0, select bank0
  8500  1370  00A2               	movwf	??_checkMode
  8501  1371  0822               	movf	??_checkMode,w
  8502  1372  1683               	bsf	3,5	;RP0=1, select bank1
  8503  1373  1303               	bcf	3,6	;RP1=0, select bank1
  8504  1374  00E3               	movwf	_lastMode^(0+128)
  8505  1375  0008               	return
  8506  1376                     __end_of_checkMode:	
  8507                           
  8508                           	psect	text39
  8509  1288                     __ptext39:	
  8510 ;; *************** function _instCTRL *****************
  8511 ;; Defined at:
  8512 ;;		line 17 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\lcd_functions.h"
  8513 ;; Parameters:    Size  Location     Type
  8514 ;;  CMD             1    wreg     unsigned char 
  8515 ;; Auto vars:     Size  Location     Type
  8516 ;;  CMD             1    1[BANK0 ] unsigned char 
  8517 ;; Return value:  Size  Location     Type
  8518 ;;		None               void
  8519 ;; Registers used:
  8520 ;;		wreg
  8521 ;; Tracked objects:
  8522 ;;		On entry : 0/0
  8523 ;;		On exit  : 0/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8526 ;;      Params:         0       0       0       0       0
  8527 ;;      Locals:         0       1       0       0       0
  8528 ;;      Temps:          0       1       0       0       0
  8529 ;;      Totals:         0       2       0       0       0
  8530 ;;Total ram usage:        2 bytes
  8531 ;; Hardware stack levels used:    1
  8532 ;; Hardware stack levels required when called:    2
  8533 ;; This function calls:
  8534 ;;		Nothing
  8535 ;; This function is called by:
  8536 ;;		_initLCD
  8537 ;;		_printToLCD
  8538 ;;		_displayDHT11Stat
  8539 ;;		_main
  8540 ;;		_startUpLCD
  8541 ;;		_updateState
  8542 ;;		_checkMode
  8543 ;;		_checkSelect
  8544 ;;		_runDHT11Stat
  8545 ;; This function uses a non-reentrant model
  8546 ;;
  8547                           
  8548                           
  8549                           ;psect for function _instCTRL
  8550  1288                     _instCTRL:	
  8551                           
  8552                           ;incstack = 0
  8553                           ; Regs used in _instCTRL: [wreg]
  8554                           ;instCTRL@CMD stored from wreg
  8555  1288  1283               	bcf	3,5	;RP0=0, select bank0
  8556  1289  1303               	bcf	3,6	;RP1=0, select bank0
  8557  128A  00A1               	movwf	instCTRL@CMD
  8558                           
  8559                           ;lcd_functions.h: 19: PORTD = CMD;
  8560  128B  0821               	movf	instCTRL@CMD,w
  8561  128C  0088               	movwf	8	;volatile
  8562                           
  8563                           ;lcd_functions.h: 20: RC0 = 0;
  8564  128D  1007               	bcf	7,0	;volatile
  8565                           
  8566                           ;lcd_functions.h: 21: RC1 = 0;
  8567  128E  1087               	bcf	7,1	;volatile
  8568                           
  8569                           ;lcd_functions.h: 22: RC2 = 1;
  8570  128F  1507               	bsf	7,2	;volatile
  8571                           
  8572                           ;lcd_functions.h: 23: _delay((unsigned long)((1)*(4000000/4000.0)));
  8573  1290  30F9               	movlw	249
  8574  1291  00A0               	movwf	??_instCTRL
  8575  1292                     u5057:	
  8576  1292  0000               	nop
  8577  1293  0BA0               	decfsz	??_instCTRL,f
  8578  1294  2A92               	goto	u5057
  8579  1295  2A96               	nop2	;nop
  8580  1296  0000               	nop
  8581                           
  8582                           ;lcd_functions.h: 24: RC2 = 0;
  8583  1297  1283               	bcf	3,5	;RP0=0, select bank0
  8584  1298  1303               	bcf	3,6	;RP1=0, select bank0
  8585  1299  1107               	bcf	7,2	;volatile
  8586  129A  0008               	return
  8587  129B                     __end_of_instCTRL:	
  8588                           
  8589                           	psect	text40
  8590  1480                     __ptext40:	
  8591 ;; *************** function _calculateTemp *****************
  8592 ;; Defined at:
  8593 ;;		line 19 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\temp_module.h"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;  adcValue        2   14[BANK0 ] unsigned int 
  8596 ;; Auto vars:     Size  Location     Type
  8597 ;;		None
  8598 ;; Return value:  Size  Location     Type
  8599 ;;		None               void
  8600 ;; Registers used:
  8601 ;;		wreg, status,2, status,0, pclath, cstack
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8607 ;;      Params:         0       2       0       0       0
  8608 ;;      Locals:         0       0       0       0       0
  8609 ;;      Temps:          0       0       0       0       0
  8610 ;;      Totals:         0       2       0       0       0
  8611 ;;Total ram usage:        2 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; Hardware stack levels required when called:    3
  8614 ;; This function calls:
  8615 ;;		___lwdiv
  8616 ;;		___wmul
  8617 ;; This function is called by:
  8618 ;;		_main
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           
  8623                           ;psect for function _calculateTemp
  8624  1480                     _calculateTemp:	
  8625                           
  8626                           ;temp_module.h: 21: tempBuffer = (adcValue * 500) / 1023;
  8627                           
  8628                           ;incstack = 0
  8629                           ; Regs used in _calculateTemp: [wreg+status,2+status,0+pclath+cstack]
  8630  1480  30FF               	movlw	255
  8631  1481  1283               	bcf	3,5	;RP0=0, select bank0
  8632  1482  1303               	bcf	3,6	;RP1=0, select bank0
  8633  1483  00A6               	movwf	___lwdiv@divisor
  8634  1484  3003               	movlw	3
  8635  1485  00A7               	movwf	___lwdiv@divisor+1
  8636  1486  082F               	movf	calculateTemp@adcValue+1,w
  8637  1487  01A1               	clrf	___wmul@multiplier+1
  8638  1488  07A1               	addwf	___wmul@multiplier+1,f
  8639  1489  082E               	movf	calculateTemp@adcValue,w
  8640  148A  01A0               	clrf	___wmul@multiplier
  8641  148B  07A0               	addwf	___wmul@multiplier,f
  8642  148C  30F4               	movlw	244
  8643  148D  00A2               	movwf	___wmul@multiplicand
  8644  148E  3001               	movlw	1
  8645  148F  00A3               	movwf	___wmul@multiplicand+1
  8646  1490  160A  118A  23E2  160A  118A  	fcall	___wmul
  8647  1495  1283               	bcf	3,5	;RP0=0, select bank0
  8648  1496  1303               	bcf	3,6	;RP1=0, select bank0
  8649  1497  0821               	movf	?___wmul+1,w
  8650  1498  01A9               	clrf	___lwdiv@dividend+1
  8651  1499  07A9               	addwf	___lwdiv@dividend+1,f
  8652  149A  0820               	movf	?___wmul,w
  8653  149B  01A8               	clrf	___lwdiv@dividend
  8654  149C  07A8               	addwf	___lwdiv@dividend,f
  8655  149D  160A  118A  2549   	fcall	___lwdiv
  8656  14A0  1283               	bcf	3,5	;RP0=0, select bank0
  8657  14A1  1303               	bcf	3,6	;RP1=0, select bank0
  8658  14A2  0827               	movf	?___lwdiv+1,w
  8659  14A3  1683               	bsf	3,5	;RP0=1, select bank1
  8660  14A4  1303               	bcf	3,6	;RP1=0, select bank1
  8661  14A5  01CE               	clrf	(_tempBuffer+1)^(0+128)
  8662  14A6  07CE               	addwf	(_tempBuffer+1)^(0+128),f
  8663  14A7  1283               	bcf	3,5	;RP0=0, select bank0
  8664  14A8  1303               	bcf	3,6	;RP1=0, select bank0
  8665  14A9  0826               	movf	?___lwdiv,w
  8666  14AA  1683               	bsf	3,5	;RP0=1, select bank1
  8667  14AB  1303               	bcf	3,6	;RP1=0, select bank1
  8668  14AC  01CD               	clrf	_tempBuffer^(0+128)
  8669  14AD  07CD               	addwf	_tempBuffer^(0+128),f
  8670  14AE  0008               	return
  8671  14AF                     __end_of_calculateTemp:	
  8672                           
  8673                           	psect	text41
  8674  13E2                     __ptext41:	
  8675 ;; *************** function ___wmul *****************
  8676 ;; Defined at:
  8677 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  8678 ;; Parameters:    Size  Location     Type
  8679 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8680 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;  product         2    4[BANK0 ] unsigned int 
  8683 ;; Return value:  Size  Location     Type
  8684 ;;                  2    0[BANK0 ] unsigned int 
  8685 ;; Registers used:
  8686 ;;		wreg, status,2, status,0
  8687 ;; Tracked objects:
  8688 ;;		On entry : 0/0
  8689 ;;		On exit  : 0/0
  8690 ;;		Unchanged: 0/0
  8691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8692 ;;      Params:         0       4       0       0       0
  8693 ;;      Locals:         0       2       0       0       0
  8694 ;;      Temps:          0       0       0       0       0
  8695 ;;      Totals:         0       6       0       0       0
  8696 ;;Total ram usage:        6 bytes
  8697 ;; Hardware stack levels used:    1
  8698 ;; Hardware stack levels required when called:    2
  8699 ;; This function calls:
  8700 ;;		Nothing
  8701 ;; This function is called by:
  8702 ;;		_calculateTemp
  8703 ;;		_sprintf
  8704 ;; This function uses a non-reentrant model
  8705 ;;
  8706                           
  8707                           
  8708                           ;psect for function ___wmul
  8709  13E2                     ___wmul:	
  8710                           
  8711                           ;incstack = 0
  8712                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8713  13E2  1283               	bcf	3,5	;RP0=0, select bank0
  8714  13E3  1303               	bcf	3,6	;RP1=0, select bank0
  8715  13E4  01A4               	clrf	___wmul@product
  8716  13E5  01A5               	clrf	___wmul@product+1
  8717  13E6                     l3046:	
  8718  13E6  1C20               	btfss	___wmul@multiplier,0
  8719  13E7  2BEE               	goto	l496
  8720  13E8  0822               	movf	___wmul@multiplicand,w
  8721  13E9  07A4               	addwf	___wmul@product,f
  8722  13EA  1803               	skipnc
  8723  13EB  0AA5               	incf	___wmul@product+1,f
  8724  13EC  0823               	movf	___wmul@multiplicand+1,w
  8725  13ED  07A5               	addwf	___wmul@product+1,f
  8726  13EE                     l496:	
  8727  13EE  3001               	movlw	1
  8728  13EF                     u4045:	
  8729  13EF  1003               	clrc
  8730  13F0  0DA2               	rlf	___wmul@multiplicand,f
  8731  13F1  0DA3               	rlf	___wmul@multiplicand+1,f
  8732  13F2  3EFF               	addlw	-1
  8733  13F3  1D03               	skipz
  8734  13F4  2BEF               	goto	u4045
  8735  13F5  3001               	movlw	1
  8736  13F6                     u4055:	
  8737  13F6  1003               	clrc
  8738  13F7  0CA1               	rrf	___wmul@multiplier+1,f
  8739  13F8  0CA0               	rrf	___wmul@multiplier,f
  8740  13F9  3EFF               	addlw	-1
  8741  13FA  1D03               	skipz
  8742  13FB  2BF6               	goto	u4055
  8743  13FC  0821               	movf	___wmul@multiplier+1,w
  8744  13FD  0420               	iorwf	___wmul@multiplier,w
  8745  13FE  1D03               	skipz
  8746  13FF  2BE6               	goto	l3046
  8747  1400  0825               	movf	___wmul@product+1,w
  8748  1401  01A1               	clrf	?___wmul+1
  8749  1402  07A1               	addwf	?___wmul+1,f
  8750  1403  0824               	movf	___wmul@product,w
  8751  1404  01A0               	clrf	?___wmul
  8752  1405  07A0               	addwf	?___wmul,f
  8753  1406  0008               	return
  8754  1407                     __end_of___wmul:	
  8755                           
  8756                           	psect	text42
  8757  1549                     __ptext42:	
  8758 ;; *************** function ___lwdiv *****************
  8759 ;; Defined at:
  8760 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  8761 ;; Parameters:    Size  Location     Type
  8762 ;;  divisor         2    6[BANK0 ] unsigned int 
  8763 ;;  dividend        2    8[BANK0 ] unsigned int 
  8764 ;; Auto vars:     Size  Location     Type
  8765 ;;  quotient        2   11[BANK0 ] unsigned int 
  8766 ;;  counter         1   13[BANK0 ] unsigned char 
  8767 ;; Return value:  Size  Location     Type
  8768 ;;                  2    6[BANK0 ] unsigned int 
  8769 ;; Registers used:
  8770 ;;		wreg, status,2, status,0
  8771 ;; Tracked objects:
  8772 ;;		On entry : 0/0
  8773 ;;		On exit  : 0/0
  8774 ;;		Unchanged: 0/0
  8775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8776 ;;      Params:         0       4       0       0       0
  8777 ;;      Locals:         0       3       0       0       0
  8778 ;;      Temps:          0       1       0       0       0
  8779 ;;      Totals:         0       8       0       0       0
  8780 ;;Total ram usage:        8 bytes
  8781 ;; Hardware stack levels used:    1
  8782 ;; Hardware stack levels required when called:    2
  8783 ;; This function calls:
  8784 ;;		Nothing
  8785 ;; This function is called by:
  8786 ;;		_calculateTemp
  8787 ;;		_sprintf
  8788 ;; This function uses a non-reentrant model
  8789 ;;
  8790                           
  8791                           
  8792                           ;psect for function ___lwdiv
  8793  1549                     ___lwdiv:	
  8794                           
  8795                           ;incstack = 0
  8796                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8797  1549  1283               	bcf	3,5	;RP0=0, select bank0
  8798  154A  1303               	bcf	3,6	;RP1=0, select bank0
  8799  154B  01AB               	clrf	___lwdiv@quotient
  8800  154C  01AC               	clrf	___lwdiv@quotient+1
  8801  154D  0827               	movf	___lwdiv@divisor+1,w
  8802  154E  0426               	iorwf	___lwdiv@divisor,w
  8803  154F  1903               	skipnz
  8804  1550  2D82               	goto	l2066
  8805  1551  01AD               	clrf	___lwdiv@counter
  8806  1552  0AAD               	incf	___lwdiv@counter,f
  8807  1553                     l2054:	
  8808  1553  1BA7               	btfsc	___lwdiv@divisor+1,7
  8809  1554  2D61               	goto	l2056
  8810  1555  3001               	movlw	1
  8811  1556                     u2195:	
  8812  1556  1003               	clrc
  8813  1557  0DA6               	rlf	___lwdiv@divisor,f
  8814  1558  0DA7               	rlf	___lwdiv@divisor+1,f
  8815  1559  3EFF               	addlw	-1
  8816  155A  1D03               	skipz
  8817  155B  2D56               	goto	u2195
  8818  155C  3001               	movlw	1
  8819  155D  00AA               	movwf	??___lwdiv
  8820  155E  082A               	movf	??___lwdiv,w
  8821  155F  07AD               	addwf	___lwdiv@counter,f
  8822  1560  2D53               	goto	l2054
  8823  1561                     l2056:	
  8824  1561  3001               	movlw	1
  8825  1562                     u2215:	
  8826  1562  1003               	clrc
  8827  1563  0DAB               	rlf	___lwdiv@quotient,f
  8828  1564  0DAC               	rlf	___lwdiv@quotient+1,f
  8829  1565  3EFF               	addlw	-1
  8830  1566  1D03               	skipz
  8831  1567  2D62               	goto	u2215
  8832  1568  0827               	movf	___lwdiv@divisor+1,w
  8833  1569  0229               	subwf	___lwdiv@dividend+1,w
  8834  156A  1D03               	skipz
  8835  156B  2D6E               	goto	u2225
  8836  156C  0826               	movf	___lwdiv@divisor,w
  8837  156D  0228               	subwf	___lwdiv@dividend,w
  8838  156E                     u2225:	
  8839  156E  1C03               	skipc
  8840  156F  2D77               	goto	l2062
  8841  1570  0826               	movf	___lwdiv@divisor,w
  8842  1571  02A8               	subwf	___lwdiv@dividend,f
  8843  1572  0827               	movf	___lwdiv@divisor+1,w
  8844  1573  1C03               	skipc
  8845  1574  03A9               	decf	___lwdiv@dividend+1,f
  8846  1575  02A9               	subwf	___lwdiv@dividend+1,f
  8847  1576  142B               	bsf	___lwdiv@quotient,0
  8848  1577                     l2062:	
  8849  1577  3001               	movlw	1
  8850  1578                     u2235:	
  8851  1578  1003               	clrc
  8852  1579  0CA7               	rrf	___lwdiv@divisor+1,f
  8853  157A  0CA6               	rrf	___lwdiv@divisor,f
  8854  157B  3EFF               	addlw	-1
  8855  157C  1D03               	skipz
  8856  157D  2D78               	goto	u2235
  8857  157E  3001               	movlw	1
  8858  157F  02AD               	subwf	___lwdiv@counter,f
  8859  1580  1D03               	btfss	3,2
  8860  1581  2D61               	goto	l2056
  8861  1582                     l2066:	
  8862  1582  082C               	movf	___lwdiv@quotient+1,w
  8863  1583  01A7               	clrf	?___lwdiv+1
  8864  1584  07A7               	addwf	?___lwdiv+1,f
  8865  1585  082B               	movf	___lwdiv@quotient,w
  8866  1586  01A6               	clrf	?___lwdiv
  8867  1587  07A6               	addwf	?___lwdiv,f
  8868  1588  0008               	return
  8869  1589                     __end_of___lwdiv:	
  8870                           
  8871                           	psect	text43
  8872  1334                     __ptext43:	
  8873 ;; *************** function _ISR *****************
  8874 ;; Defined at:
  8875 ;;		line 86 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\main.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;		None
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;		None
  8880 ;; Return value:  Size  Location     Type
  8881 ;;		None               void
  8882 ;; Registers used:
  8883 ;;		wreg, status,2, status,0, pclath, cstack
  8884 ;; Tracked objects:
  8885 ;;		On entry : 0/0
  8886 ;;		On exit  : 0/0
  8887 ;;		Unchanged: 0/0
  8888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8889 ;;      Params:         0       0       0       0       0
  8890 ;;      Locals:         0       0       0       0       0
  8891 ;;      Temps:          5       0       0       0       0
  8892 ;;      Totals:         5       0       0       0       0
  8893 ;;Total ram usage:        5 bytes
  8894 ;; Hardware stack levels used:    1
  8895 ;; Hardware stack levels required when called:    1
  8896 ;; This function calls:
  8897 ;;		i1_instCTRL
  8898 ;; This function is called by:
  8899 ;;		Interrupt level 1
  8900 ;; This function uses a non-reentrant model
  8901 ;;
  8902                           
  8903                           
  8904                           ;psect for function _ISR
  8905  1334                     _ISR:	
  8906                           
  8907                           ;main.c: 88: GIE = 0;
  8908  1334  138B               	bcf	11,7	;volatile
  8909                           
  8910                           ;main.c: 89: if (INTF == 1)
  8911  1335  1C8B               	btfss	11,1	;volatile
  8912  1336  2B40               	goto	i1l3028
  8913                           
  8914                           ;main.c: 90: {
  8915                           ;main.c: 91: INTF = 0;
  8916  1337  108B               	bcf	11,1	;volatile
  8917                           
  8918                           ;main.c: 92: mode = (mode + 1) % 4;
  8919  1338  1683               	bsf	3,5	;RP0=1, select bank1
  8920  1339  1303               	bcf	3,6	;RP1=0, select bank1
  8921  133A  0855               	movf	_mode^(0+128),w
  8922  133B  3E01               	addlw	1
  8923  133C  3903               	andlw	3
  8924  133D  00F2               	movwf	??_ISR
  8925  133E  0872               	movf	??_ISR,w
  8926  133F  00D5               	movwf	_mode^(0+128)
  8927  1340                     i1l3028:	
  8928                           
  8929                           ;main.c: 93: }
  8930                           ;main.c: 94: instCTRL(0x01);
  8931  1340  3001               	movlw	1
  8932  1341  160A  118A  2275  160A  118A  	fcall	i1_instCTRL
  8933                           
  8934                           ;main.c: 95: GIE = 1;
  8935  1346  178B               	bsf	11,7	;volatile
  8936  1347  0876               	movf	??_ISR+4,w
  8937  1348  1283               	bcf	3,5	;RP0=0, select bank0
  8938  1349  1303               	bcf	3,6	;RP1=0, select bank0
  8939  134A  00FF               	movwf	127
  8940  134B  0875               	movf	??_ISR+3,w
  8941  134C  008A               	movwf	10
  8942  134D  0874               	movf	??_ISR+2,w
  8943  134E  0084               	movwf	4
  8944  134F  0E73               	swapf	(??_ISR+1)^(0+-128),w
  8945  1350  0083               	movwf	3
  8946  1351  0EFE               	swapf	126,f
  8947  1352  0E7E               	swapf	126,w
  8948  1353  0009               	retfie
  8949  1354                     __end_of_ISR:	
  8950                           
  8951                           	psect	intentry
  8952  0004                     __pintentry:	
  8953                           ;incstack = 0
  8954                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  8955                           
  8956  0004                     interrupt_function:	
  8957  007E                     saved_w	set	btemp
  8958  0004  00FE               	movwf	btemp
  8959  0005  0E03               	swapf	3,w
  8960  0006  00F3               	movwf	??_ISR+1
  8961  0007  0804               	movf	4,w
  8962  0008  00F4               	movwf	??_ISR+2
  8963  0009  080A               	movf	10,w
  8964  000A  00F5               	movwf	??_ISR+3
  8965  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8966  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8967  000D  087F               	movf	btemp+1,w
  8968  000E  00F6               	movwf	??_ISR+4
  8969  000F  160A  118A  2B34   	ljmp	_ISR
  8970                           
  8971                           	psect	text44
  8972  1275                     __ptext44:	
  8973 ;; *************** function i1_instCTRL *****************
  8974 ;; Defined at:
  8975 ;;		line 17 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\working-build\first-version\lcd_functions.h"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;  CMD             1    wreg     unsigned char 
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;  CMD             1    1[COMMON] unsigned char 
  8980 ;; Return value:  Size  Location     Type
  8981 ;;		None               void
  8982 ;; Registers used:
  8983 ;;		wreg
  8984 ;; Tracked objects:
  8985 ;;		On entry : 0/0
  8986 ;;		On exit  : 0/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8989 ;;      Params:         0       0       0       0       0
  8990 ;;      Locals:         1       0       0       0       0
  8991 ;;      Temps:          1       0       0       0       0
  8992 ;;      Totals:         2       0       0       0       0
  8993 ;;Total ram usage:        2 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; This function calls:
  8996 ;;		Nothing
  8997 ;; This function is called by:
  8998 ;;		_ISR
  8999 ;; This function uses a non-reentrant model
  9000 ;;
  9001                           
  9002                           
  9003                           ;psect for function i1_instCTRL
  9004  1275                     i1_instCTRL:	
  9005                           
  9006                           ;incstack = 0
  9007                           ; Regs used in i1_instCTRL: [wreg]
  9008                           ;i1instCTRL@CMD stored from wreg
  9009  1275  00F1               	movwf	i1instCTRL@CMD
  9010                           
  9011                           ;lcd_functions.h: 19: PORTD = CMD;
  9012  1276  0871               	movf	i1instCTRL@CMD,w
  9013  1277  1283               	bcf	3,5	;RP0=0, select bank0
  9014  1278  1303               	bcf	3,6	;RP1=0, select bank0
  9015  1279  0088               	movwf	8	;volatile
  9016                           
  9017                           ;lcd_functions.h: 20: RC0 = 0;
  9018  127A  1007               	bcf	7,0	;volatile
  9019                           
  9020                           ;lcd_functions.h: 21: RC1 = 0;
  9021  127B  1087               	bcf	7,1	;volatile
  9022                           
  9023                           ;lcd_functions.h: 22: RC2 = 1;
  9024  127C  1507               	bsf	7,2	;volatile
  9025                           
  9026                           ;lcd_functions.h: 23: _delay((unsigned long)((1)*(4000000/4000.0)));
  9027  127D  30F9               	movlw	249
  9028  127E  00F0               	movwf	??i1_instCTRL
  9029  127F                     u506_27:	
  9030  127F  0000               	nop
  9031  1280  0BF0               	decfsz	??i1_instCTRL,f
  9032  1281  2A7F               	goto	u506_27
  9033  1282  2A83               	nop2	;nop
  9034  1283  0000               	nop
  9035                           
  9036                           ;lcd_functions.h: 24: RC2 = 0;
  9037  1284  1283               	bcf	3,5	;RP0=0, select bank0
  9038  1285  1303               	bcf	3,6	;RP1=0, select bank0
  9039  1286  1107               	bcf	7,2	;volatile
  9040  1287  0008               	return
  9041  1288                     __end_ofi1_instCTRL:	
  9042  007E                     btemp	set	126	;btemp
  9043  007E                     wtemp	set	126
  9044  007E                     wtemp0	set	126
  9045  0080                     wtemp1	set	128
  9046  0082                     wtemp2	set	130
  9047  0084                     wtemp3	set	132
  9048  0086                     wtemp4	set	134
  9049  0088                     wtemp5	set	136
  9050  007F                     wtemp6	set	127
  9051  007E                     ttemp	set	126
  9052  007E                     ttemp0	set	126
  9053  0081                     ttemp1	set	129
  9054  0084                     ttemp2	set	132
  9055  0087                     ttemp3	set	135
  9056  007F                     ttemp4	set	127
  9057  007E                     ltemp	set	126
  9058  007E                     ltemp0	set	126
  9059  0082                     ltemp1	set	130
  9060  0086                     ltemp2	set	134
  9061  0080                     ltemp3	set	128


Data Sizes:
    Strings     280
    Constant    10
    Data        21
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     80      80
    BANK1            80     42      79
    BANK3            96      0       7
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_31(CODE[13]), STR_30(CODE[14]), STR_26(CODE[6]), STR_25(CODE[6]), 
		 -> STR_19(CODE[11]), STR_18(CODE[10]), STR_17(CODE[10]), STR_16(CODE[10]), 
		 -> STR_15(CODE[10]), STR_14(CODE[10]), STR_13(CODE[10]), STR_12(CODE[10]), 
		 -> STR_11(CODE[10]), STR_10(CODE[10]), STR_9(CODE[10]), STR_8(CODE[10]), 
		 -> STR_7(CODE[10]), STR_6(CODE[16]), STR_3(CODE[9]), STR_2(CODE[3]), 
		 -> STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> updateState@buffer(BANK0[10]), displayDHT11Stat@buffer(BANK0[20]), displayTemp@buffer(BANK0[20]), debugInfo(BANK1[10]), 
		 -> displayTime@timeFormat(BANK0[16]), displayPPM@strBuffer(BANK1[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S280$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    displayPPM@bufPtr	PTR unsigned char  size(1) Largest target is 20
		 -> displayPPM@strBuffer(BANK1[20]), 

    printToLCD@str	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_39(CODE[11]), STR_38(CODE[12]), STR_37(CODE[10]), STR_36(CODE[14]), 
		 -> STR_35(CODE[12]), STR_34(CODE[10]), STR_33(CODE[16]), STR_32(CODE[15]), 
		 -> updateState@buffer(BANK0[10]), STR_29(CODE[15]), STR_28(CODE[7]), STR_27(CODE[7]), 
		 -> message2(BANK3[7]), displayDHT11Stat@buffer(BANK0[20]), message1(BANK1[7]), STR_24(CODE[19]), 
		 -> STR_23(CODE[6]), STR_22(CODE[10]), STR_21(CODE[8]), STR_20(CODE[9]), 
		 -> displayTemp@buffer(BANK0[20]), debugInfo(BANK1[10]), displayTime@timeFormat(BANK0[16]), STR_5(CODE[8]), 
		 -> STR_4(CODE[8]), displayPPM@strBuffer(BANK1[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_instCTRL

Critical Paths under _main in BANK0

    _main->_updateState
    _updateState->_displayDHT11Stat
    _setMinutesStart->_sprintf
    _setMinutesEnd->_sprintf
    _setHoursStart->_sprintf
    _setHoursEnd->_sprintf
    _printStatusTMP->_printToLCD
    _printStatusPPM->_printToLCD
    _displayTime->_sprintf
    _displayPPM->___fttol
    ___fttol->___ftmul
    ___ftneg->___awtoft
    _displayDHT11Stat->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _startUpLCD->_printToLCD
    _printToLCD->_dataCTRL
    _printToLCD->_instCTRL
    _initLCD->_instCTRL
    _runMQ135->_CalcMQ135
    _CalcMQ135->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _handlePPM->___ftge
    _checkSelect->_instCTRL
    _checkMode->_instCTRL
    _calculateTemp->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _updateState->_displayPPM
    _runMQ135->_CalcMQ135

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   87326
                                             39 BANK1      3     3      0
                      _calculateTemp
                          _checkMode
                        _checkSelect
                          _checkTime
                          _handlePPM
                         _handleTemp
                            _initADC
                      _initInterrupt
                           _instCTRL
                            _readADC
                           _runClock
                           _runMQ135
                  _setPortDirections
                         _startUpLCD
                        _updateState
 ---------------------------------------------------------------------------------
 (1) _updateState                                         14    14      0   72112
                                             66 BANK0     14    14      0
                   _displayDHT11Stat
                         _displayPPM
                        _displayTime
                           _instCTRL
                     _printStatusPPM
                     _printStatusTMP
                         _printToLCD
                        _setHoursEnd
                      _setHoursStart
                      _setMinutesEnd
                    _setMinutesStart
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setMinutesStart                                      2     2      0    7773
                                             42 BANK0      2     2      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setMinutesEnd                                        2     2      0    7773
                                             42 BANK0      2     2      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setHoursStart                                        2     2      0    7773
                                             42 BANK0      2     2      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setHoursEnd                                          2     2      0    7773
                                             42 BANK0      2     2      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1144
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _printStatusTMP                                       1     1      0    2186
                                              4 BANK0      1     1      0
                         _printToLCD
 ---------------------------------------------------------------------------------
 (2) _printStatusPPM                                       1     1      0    2186
                                              4 BANK0      1     1      0
                         _printToLCD
 ---------------------------------------------------------------------------------
 (2) _displayTime                                         20    20      0    6739
                                             42 BANK0     20    20      0
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _displayPPM                                          26    26      0   16263
                                             60 BANK0      1     1      0
                                              0 BANK1     25    25      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     358
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     130
                                             14 BANK0      3     0      3
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _displayDHT11Stat                                    24    24      0    6823
                                             42 BANK0     24    24      0
                           _instCTRL
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    16      6    4505
                                             20 BANK0     22    16      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     265
                                             14 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _startUpLCD                                           0     0      0    2168
                            _initLCD
                           _instCTRL
                         _printToLCD
 ---------------------------------------------------------------------------------
 (3) _printToLCD                                           2     0      2    2124
                                              2 BANK0      2     0      2
                           _dataCTRL
                           _instCTRL
 ---------------------------------------------------------------------------------
 (4) _dataCTRL                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0      22
                                              2 BANK0      1     1      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (1) _setPortDirections                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _runMQ135                                             0     0      0   11805
                          _CalcMQ135
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              5     3      2      22
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _CalcMQ135                                           42    39      3   11783
                                             62 BANK0      3     0      3
                                              0 BANK1     39    39      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3495
                                             30 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2177
                                             46 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3347
                                             17 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    1882
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1685
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _runClock                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleTemp                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handlePPM                                            0     0      0     242
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     242
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (1) _checkTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkSelect                                          4     4      0      67
                                              2 BANK0      4     4      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (1) _checkMode                                            2     2      0      22
                                              2 BANK0      2     2      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (4) _instCTRL                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _calculateTemp                                        2     0      2     866
                                             14 BANK0      2     0      2
                            ___lwdiv
                             ___wmul
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     374
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  5     5      0      22
                                              2 COMMON     5     5      0
                         i1_instCTRL
 ---------------------------------------------------------------------------------
 (6) i1_instCTRL                                           2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculateTemp
     ___lwdiv
       ___wmul (ARG)
     ___wmul
     _readADC (ARG)
   _checkMode
     _instCTRL
   _checkSelect
     _instCTRL
   _checkTime
   _handlePPM
     ___ftge
   _handleTemp
   _initADC
   _initInterrupt
   _instCTRL
   _readADC
   _runClock
   _runMQ135
     _CalcMQ135
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       _readADC (ARG)
     _readADC
   _setPortDirections
   _startUpLCD
     _initLCD
       _instCTRL
     _instCTRL
     _printToLCD
       _dataCTRL
       _instCTRL
   _updateState
     _displayDHT11Stat
       _instCTRL
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _displayPPM
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _displayTime
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _instCTRL
     _printStatusPPM
       _printToLCD
         _dataCTRL
         _instCTRL
     _printStatusTMP
       _printToLCD
         _dataCTRL
         _instCTRL
     _printToLCD
       _dataCTRL
       _instCTRL
     _setHoursEnd
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _setHoursStart
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _setMinutesEnd
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _setMinutesStart
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _sprintf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _isdigit

 _ISR (ROOT)
   i1_instCTRL

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       7       9        7.3%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2A      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B4      12        0.0%
ABS                  0      0      B4       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue May 14 22:56:36 2024

                         pc 0002                ?_displayTime 0070                 __CFG_CP$OFF 0000  
                        l81 1448                          fsr 0004         ___wmul@multiplicand 0022  
  __size_of_setMinutesStart 00C0                ___ftadd@exp1 003D                ___ftadd@exp2 003C  
              ___ftadd@sign 003B                         l113 14D8                         l222 175C  
                       l214 1736                         l231 176E                         l224 1758  
                       l218 1732                         l171 0A92                         l157 0B52  
                       l246 12D8                         l351 078E                         l185 0CD2  
                       l199 0C12                         l377 042F                         l395 0506  
                       l663 16ED                         l496 13EE                         l657 16D4  
                       l686 0E76                         _GIE 005F                         _RB1 0031  
                       _RC0 0038                         _RB2 0032                         _RC1 0039  
                       _RC2 003A                         _RC3 003B                         _RC4 003C  
                       _RC5 003D                __CFG_CPD$OFF 0000                         _ISR 1334  
                       _PPM 00CA                         _key 0079                         fsr0 0004  
                       indf 0000                ___awmod@sign 0026                __CFG_FOSC$HS 0000  
             printToLCD@str 0022                __CFG_LVP$OFF 0000                        ?_ISR 0070  
              ___ftdiv@cntr 0058                ___ftdiv@sign 005D                        l2022 16AD  
                      l2032 16D9                        l2024 16B9                        l2034 16E3  
                      l2026 16BE                        l2018 16A6                        l2062 1577  
                      l2054 1553                        l2310 0E3C                        l2056 1561  
                      l2312 0E48                        l2304 0E27                        l2400 0D29  
                      l2080 1529                        l3040 1262                        l3120 04F8  
                      l3112 04D3                        l2232 1595                        l2066 1582  
                      l2322 0E66                        l2314 0E4D                        l3130 0529  
                      l2250 15BE                        l2332 0E9A                        l2324 0E72  
                      l2316 0E51                        l2412 0D68                        l2084 1537  
                      l3140 0540                        l3108 04CD                        l3220 0FDA  
                      l2244 15A2                        l2236 159C                        l3046 13E6  
                      l2270 1413                        l2342 0EBD                        l3062 145B  
                      l2078 151B                        l3150 055C                        l2246 15B0  
                      l2254 15C9                        l2328 0E88                        l2352 095B  
                      l2424 0D90                        l2416 0D78                        l2088 1542  
                      l3152 0560                        l3160 057B                        l3128 0525  
                      l3080 0434                        l2282 0DF7                        l3082 0441  
                      l2258 15D1                        l3330 0CE3                        l3322 0CB7  
                      l3420 173A                        l2292 0E0D                        l2380 09D5  
                      l2372 09B6                        l2428 0DA0                        l3076 042B  
                      l3180 03FD                        l2452 178C                        l3228 12EE  
                      l3316 0C8F                        l3332 0CF1                        l3414 1726  
                      l3406 1714                        l2286 0DFE                        l2358 0971  
                      l3182 05E6                        l3086 0455                        l2470 17BE  
                      l3262 0B63                        l3254 0B37                        l3350 0BCF  
                      l3510 06BE                        l2712 1628                        l3168 0590  
                      l3096 0497                        l2480 17E6                        l2472 17CE  
                      l3248 0B0F                        l3264 0B71                        l3504 06A1  
                      l3434 1760                        l2394 0D13                        l3178 0594  
                      l3098 04B4                        l2482 17E9                        l3282 0A4F  
                      l3530 0711                        l3506 06AC                        l3428 174C  
                      l2708 1601                        l3364 0C23                        l3356 0BF7  
                      l3516 06D9                        l3524 06F4                        l2486 17F7  
                      l2478 17DB                        l3374 130A                        l3366 0C31  
                      l3526 06FF                        l2816 1504                        l3296 0AA3  
                      l3288 0A77                        l3536 072C                        l3544 0747  
                      l3480 0606                        l3298 0AB1                        l3546 0752  
                      l2748 132A                        l3476 05F4                        l3494 0681  
                      l3558 077E                        l3596 1660                        STR_1 0922  
                      STR_2 092B                        STR_3 08EA                        STR_4 0904  
                      STR_5 090C                        STR_6 083F                        STR_7 08D6  
                      STR_8 08CC                        STR_9 08E0                  i1_instCTRL 1275  
                      u2115 16CD                        u3005 0D81                        u2215 1562  
                      u2135 16DC                        u2225 156E                        u2235 1578  
                      u2165 16F4                        u3045 0DA1                        u3125 17BF  
                      u2095 16B2                        u3055 0DA9                        u2265 151E  
                      u2195 1556                        u3155 17DD                        u4045 13EF  
                      u2285 152F                        u4055 13F6                        u5007 12A5  
                      u2295 1538                        u4135 04EE                        u3095 1793  
                      u2705 0E28                        u3185 1436                        u5017 13A4  
                      u2545 15A5                        u5027 1442                        u4315 0AC0  
                      u3621 15F4                        u5037 132E                        u2565 15B6  
                      u4405 0A00                        u4325 0ACD                        u3622 15F5  
                      u5047 1366                        u3623 15FA                        u2735 0E3D  
                      u4175 0515                        u2575 15BF                        u4415 0A0D  
                      u3624 15FB                        u5057 1292                        u3641 161B  
                      u2905 09C8                        u4505 0C4D                        u3642 161C  
                      u3643 1621                        u2915 09D6                        u3644 1622  
                      u2765 0E52                        u4285 0FC5                        _INTE 005C  
                      _INTF 0059                        u2795 0E67                        u2875 0983  
                      u2955 0D35                        u2885 0995                        u2965 0D47  
                      u2895 09B7                        u4495 0C40                        u4585 0B80  
                      u2995 0D79                        u4595 0B8D                        u4917 1653  
                      u4927 0C5B                        u4937 0CEB                        u4947 0B9B  
                      u4885 12CE                        u4957 0C2B                        u4967 0ADB  
                      u4977 0B6B                        u4987 0A1B                        u4997 0AAB  
              __CFG_WRT$OFF 0000                        _main 1637                ___ftpack@arg 0020  
                      _mode 00D5                ___ftpack@exp 0023                        btemp 007E  
             __CFG_BOREN$ON 0000                        ltemp 007E                        start 0012  
                      ttemp 007E                        wtemp 007E       displayPPM@ppmFraction 00B6  
              ___ftmul@cntr 004C                ___ftmul@sign 004D                       ??_ISR 0072  
              ___fttol@exp1 005B                ___fttol@lval 0057                       ?_main 0070  
           __end_of___ftadd 0ED7                       STR_10 08D6                       STR_11 08CC  
                     STR_12 08E0                       STR_20 08F3                       STR_13 08D6  
                     STR_21 08FC                       STR_14 08CC                       STR_22 08B8  
                     STR_30 087B                       STR_15 08E0                       STR_23 092E  
                     STR_31 0889                       STR_16 08D6                       STR_32 085E  
                     STR_24 081C                       STR_17 08CC                       STR_25 0928  
                     STR_33 082F               __CFG_WDTE$OFF 0000                       STR_26 0928  
                     STR_18 08E0                       STR_34 08C2                       STR_27 091B  
                     STR_19 08AD                       STR_35 0896                       STR_28 0914  
                     STR_36 086D             __end_of___awmod 15D8                       STR_37 08C2  
                     STR_29 084F                       STR_38 0896                       STR_39 08A2  
           __end_of___ftdiv 09FB             __end_of___ftneg 1248             __end_of___ftmul 0DCE  
           __end_of___fttol 1800             __end_of___lwdiv 1589             __end_of___lwmod 1549  
                     _PORTA 0005                       _PORTB 0006                       _PORTC 0007  
                     _PORTD 0008                       _TRISA 0085                       _TRISB 0086  
                     _TRISC 0087                       _TRISD 0088        __size_of_checkSelect 0034  
              CalcMQ135@co2 00C1             __end_of_initADC 123E           ?_displayDHT11Stat 0070  
           __end_of_readADC 1455             __end_of_initLCD 13BE               ___awtoft@sign 002D  
           __end_of_dpowers 081C             __end_of_isdigit 1264                       _hours 007C  
             ___ftpack@sign 0024          ??_displayDHT11Stat 004A                       pclath 000A  
                     ltemp0 007E                       ltemp1 0082                       ltemp2 0086  
                     ltemp3 0080          __size_of_CalcMQ135 03A7                       ttemp0 007E  
                     ttemp1 0081                       ttemp2 0084                       ttemp3 0087  
                     ttemp4 007F                       status 0003                       wtemp0 007E  
                     wtemp1 0080                       wtemp2 0082                       wtemp3 0084  
                     wtemp4 0086                       wtemp5 0088                       wtemp6 007F  
           __end_of_sprintf 05F3       __end_of_setHoursStart 0B7B       __end_of_setMinutesEnd 0C3B  
           __initialization 0015          displayPPM@ppmWhole 00B4      __size_of_initInterrupt 0007  
              __end_of_main 169C       printStatusPPM@handler 0024  checkSelect@currentRB1State 0024  
                    ??_main 00C7               ___fttol@sign1 0056                ?_setHoursEnd 0070  
         ??_setMinutesStart 004A                      _ADCON0 001F                      _ADCON1 009F  
                    _ADRESH 001E                      _ADRESL 009E            __end_of___awtoft 142C  
          __end_of___ftpack 1706                 ?i1_instCTRL 0070                      i1l3028 1340  
                    _INTEDG 040E                      u506_27 127F            __end_of_dataCTRL 12AE  
                    _TRISB2 0432                 instCTRL@CMD 0021              __CFG_PWRTE$OFF 0000  
     printStatusTMP@handler 0024                      ___ftge 15D8           _setPortDirections 0934  
                    ___wmul 13E2                   ??___ftadd 0037                   ??___awmod 0024  
                 ??___ftdiv 0054                   ??___ftneg 0031                   ??___ftmul 0044  
                 ??___fttol 0052                   ??___lwdiv 002A                   ??___lwmod 0032  
          ??_printStatusPPM 0024            ??_printStatusTMP 0024            __end_of_instCTRL 129B  
     displayTime@timeFormat 004E          ?_setPortDirections 0070             ___awmod@divisor 0020  
                    _select 00D7             ___awmod@counter 0025           __end_of_CalcMQ135 03F4  
      __size_of_displayTime 0024                   ??_initADC 0020       ___ftmul@f3_as_product 0049  
                 ??_readADC 0022                   ??_initLCD 0022            __end_of_runMQ135 139A  
              __pdataCOMMON 007C                   ??_isdigit 0020         ??_setPortDirections 0020  
                    saved_w 007E            __end_of_runClock 1334               _initInterrupt 121F  
                 ??_sprintf 003A     __end_of__initialization 0049                  ___ftadd@f1 0031  
                ___ftadd@f2 0034                  ___ftge@ff1 0020                  ___ftge@ff2 0023  
     calculateTemp@adcValue 002E                  ___ftdiv@f1 0051                  ___ftdiv@f2 004E  
                ___ftdiv@f3 0059                  ___ftneg@f1 002E                  ___awtoft@c 0028  
 __end_of_setPortDirections 0943                  ___ftmul@f1 003E                  ___ftmul@f2 0041  
              ?_updateState 0070                  ___fttol@f1 004E              __pcstackCOMMON 0070  
              __pidataBANK1 1248                __pidataBANK3 1226          __size_of_checkMode 0022  
        __size_of_checkTime 006C         __size_ofi1_instCTRL 0013          __size_of_handlePPM 0030  
       displayPPM@strBuffer 00A0     checkSelect@lastRB1State 00CF              ?_initInterrupt 0070  
         updateState@buffer 0066                sprintf@width 0046                  __pbssBANK1 00CA  
                __pmaintext 1637                     ?___ftge 0020                     ?___wmul 0020  
                __pintentry 0004                  _handleTemp 12C3                   ?___awtoft 0028  
                 ?___ftpack 0020                   ?_dataCTRL 0070      __size_of_calculateTemp 002F  
                   _GO_DONE 00FA                  _displayPPM 0ED7        __size_of_setHoursEnd 00C0  
         __end_of_checkMode 1376           __end_of_checkTime 1772                  __stringtab 0800  
                 ?_instCTRL 0070           __end_of_handlePPM 14DF                     _T_byte1 0077  
                   _T_byte2 0078                   ?_runMQ135 0070  __size_of_setPortDirections 000F  
            CalcMQ135@ratio 00C4   __size_of_displayDHT11Stat 006D             _savedHoursStart 00E5  
                 ?_runClock 0070             __size_of___ftge 005F                     ___ftadd 0DCE  
                   ___awmod 1589                     ___ftdiv 0943                     ___ftneg 123E  
           __size_of___wmul 0025                     ___ftmul 0CFB                     ___fttol 1772  
                   ___lwdiv 1549                     ___lwmod 1513             _savedMinutesEnd 00E6  
           _setMinutesStart 0C3B                  ??___awtoft 002B                  ??___ftpack 0025  
             ??_checkSelect 0022                     __ptext1 05F3                     __ptext2 0C3B  
                   __ptext3 0B7B                     __ptext4 0ABB                     __ptext5 09FB  
                   __ptext6 1589                     __ptext7 12FB                     __ptext8 12DF  
                   __ptext9 13BE                     _initADC 1235                  ??_dataCTRL 0020  
                   _readADC 142C                     _initLCD 139A                __size_of_ISR 0020  
           ??_initInterrupt 0020                     _dpowers 0812                     _isdigit 1254  
          ___awmod@dividend 0022                     _ppmFlag 00D6                     _minutes 007B  
                   _sprintf 03F4                     clrloop0 122E                ??i1_instCTRL 0070  
      end_of_initialization 0049                  ??_instCTRL 0020               _calculateTemp 1480  
                _tempBuffer 00CD                  ??_runMQ135 0061                  ??_runClock 0020  
      __size_of_updateState 019C                __pstringtext 0800                 ?_handleTemp 0070  
                _printToLCD 1455          __end_ofi1_instCTRL 1288      __size_of_setHoursStart 00C0  
                 _CalcMQ135 004D         __end_of_checkSelect 1513                 ?_displayPPM 0070  
    __size_of_setMinutesEnd 00C0                  _startUpLCD 12AE              ?_calculateTemp 002E  
               ___ftdiv@exp 005C            displayPPM@bufPtr 00B8            CalcMQ135@RAW_ADC 005E  
   __end_of_setMinutesStart 0CFB                 ___ftmul@exp 0048               ??_displayTime 004A  
            __end_of___ftge 1637              __end_of___wmul 1407               __pidataCOMMON 07FC  
       start_initialization 0015                  ?_CalcMQ135 005E                 __end_of_ISR 1354  
              _lastKeyState 007D         __size_of_handleTemp 001C               _setHoursStart 0ABB  
          _displayDHT11Stat 078F               _savedHoursEnd 00E4               _setMinutesEnd 0B7B  
          CalcMQ135@voltage 00A0                    ??___ftge 0026                    ??___wmul 0024  
                init_fetch0 1264         __size_of_displayPPM 0129                 __pdataBANK1 00E3  
               __pdataBANK3 0190                 ?_printToLCD 0022                 _checkSelect 14DF  
         __size_of___awtoft 0025           __size_of___ftpack 006A         __end_of_displayTime 13E2  
               __pbssCOMMON 0077                   ___latbits 0002               __pcstackBANK0 0020  
             __pcstackBANK1 00A0           __size_of_dataCTRL 0013     __size_of_printStatusPPM 001C  
   __size_of_printStatusTMP 001C         __end_of__stringdata 0934                 ?_startUpLCD 0070  
           ??_calculateTemp 0030                 sprintf@ccnt 003F                 sprintf@_val 0041  
         _savedMinutesStart 00E7                 sprintf@flag 0045                 sprintf@prec 003E  
                 _checkMode 1354                   _checkTime 1706              ?_setHoursStart 0070  
                 _debugInfo 00D9           __size_of_instCTRL 0013            ___lwdiv@dividend 0028  
            ?_setMinutesEnd 0070            ?_setMinutesStart 0070                   _handlePPM 14AF  
         __size_of_runMQ135 0024                    ?___ftadd 0031                    ?___awmod 0020  
                  ?___ftdiv 004E                    ?___ftneg 002E                    ?___ftmul 003E  
                  ?___fttol 004E                    ?___lwdiv 0026                    ?___lwmod 002E  
         __size_of_runClock 001D                    ?_initADC 0070                    ?_readADC 0020  
                  ?_initLCD 0070                    ?_isdigit 0070               ??_setHoursEnd 004A  
               ??_CalcMQ135 0061            ___lwdiv@quotient 002B                    ?_sprintf 0034  
         interrupt_function 0004              ___wmul@product 0024                  ?_checkMode 0070  
                ?_checkTime 0070         __size_of_printToLCD 002B                   clear_ram0 122D  
             i1instCTRL@CMD 0071                 dataCTRL@DAT 0021                  ?_handlePPM 0070  
               _displayTime 13BE         __size_of_startUpLCD 0015                ??_handleTemp 0020  
               __stringbase 0812                 __stringdata 081C           ___wmul@multiplier 0020  
                  _RH_byte1 00D2                    _RH_byte2 00D3                    _CheckSum 00D1  
     __end_of_initInterrupt 1226                ??_displayPPM 005C         __end_of_setHoursEnd 0ABB  
           ??_setHoursStart 004A          __end_of_handleTemp 12DF             ??_setMinutesEnd 004A  
           CalcMQ135@ratio2 00B5             CalcMQ135@ratio3 00B8             CalcMQ135@ratio4 00BB  
           CalcMQ135@ratio5 00BE             CalcMQ135@ratio6 00A3               ??_updateState 0062  
        __end_of_displayPPM 1000            __size_of___ftadd 0109            __size_of___awmod 004F  
          __size_of___ftdiv 00B8            __size_of___ftneg 000A            __size_of___ftmul 00D3  
          __size_of___fttol 008E            __size_of___lwdiv 0040            __size_of___lwmod 0036  
            readADC@channel 0024                    ___awtoft 1407                    ___ftpack 169C  
        __end_of__stringtab 0812                 _isdigit$476 0020                    _dataCTRL 129B  
          __size_of_initADC 0009            __size_of_readADC 0029            __size_of_initLCD 0024  
                  _checkbit 00D4            __size_of_isdigit 0010              _printStatusPPM 12DF  
            _printStatusTMP 12FB    __end_of_displayDHT11Stat 07FC             ___lwdiv@divisor 0026  
           ___lwdiv@counter 002D                    __ptext10 0ED7                    __ptext11 1772  
                  __ptext20 139A                    __ptext12 123E                    __ptext21 0934  
                  __ptext13 078F                    __ptext30 1317                    __ptext22 1376  
                  __ptext14 03F4                    __ptext31 121F                    __ptext23 142C  
                  __ptext15 1254                    __ptext40 1480                    __ptext32 1235  
                  __ptext24 004D                    __ptext16 1513                    __ptext41 13E2  
                  __ptext33 12C3                    __ptext25 0CFB                    __ptext17 12AE  
                  __ptext42 1549                    __ptext34 14AF                    __ptext26 0943  
                  __ptext18 1455                    __ptext43 1334                    __ptext35 15D8  
                  __ptext27 0DCE                    __ptext19 129B                    __ptext44 1275  
                  __ptext36 1706                    __ptext28 1407                    __ptext37 14DF  
                  __ptext29 169C                    __ptext38 1354                    __ptext39 1288  
          __size_of_sprintf 01FF                    _keyValid 007A                    _lastMode 00E3  
                  _instCTRL 1288               __size_of_main 0065                 ??_checkMode 0022  
               ??_checkTime 0020                    _message1 00E8                    _message2 0190  
                  _runMQ135 1376                    _tempFlag 00D8                 ??_handlePPM 002C  
                  _runClock 1317         __end_of_updateState 078F                ??_printToLCD 0024  
              ?_checkSelect 0070      __end_of_printStatusPPM 12FB      __end_of_printStatusTMP 1317  
               _setHoursEnd 09FB                    init_ram0 1268                    isdigit@c 0021  
              ??_startUpLCD 0024      displayDHT11Stat@buffer 004E                    intlevel1 0000  
                 sprintf@ap 003D                   sprintf@sp 0049            ___lwmod@dividend 0030  
        __end_of_printToLCD 1480                   stringcode 080A          __end_of_startUpLCD 12C3  
             _CalcMQ135$723 00A6               _CalcMQ135$724 00A9               _CalcMQ135$725 00AC  
             _CalcMQ135$726 00AF               _CalcMQ135$727 00B2                    sprintf@c 0048  
                  sprintf@f 0034             ?_printStatusPPM 0070             ?_printStatusTMP 0070  
           ___lwmod@divisor 002E             ___lwmod@counter 0033                    stringtab 0800  
     __end_of_calculateTemp 14AF                 _updateState 05F3  
