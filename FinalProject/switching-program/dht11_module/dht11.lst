

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon May 13 13:59:58 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     	;# 
    22  0001                     	;# 
    23  0002                     	;# 
    24  0003                     	;# 
    25  0004                     	;# 
    26  0005                     	;# 
    27  0006                     	;# 
    28  0007                     	;# 
    29  0008                     	;# 
    30  0009                     	;# 
    31  000A                     	;# 
    32  000B                     	;# 
    33  000C                     	;# 
    34  000D                     	;# 
    35  000E                     	;# 
    36  000E                     	;# 
    37  000F                     	;# 
    38  0010                     	;# 
    39  0011                     	;# 
    40  0012                     	;# 
    41  0013                     	;# 
    42  0014                     	;# 
    43  0015                     	;# 
    44  0015                     	;# 
    45  0016                     	;# 
    46  0017                     	;# 
    47  0018                     	;# 
    48  0019                     	;# 
    49  001A                     	;# 
    50  001B                     	;# 
    51  001B                     	;# 
    52  001C                     	;# 
    53  001D                     	;# 
    54  001E                     	;# 
    55  001F                     	;# 
    56  0081                     	;# 
    57  0085                     	;# 
    58  0086                     	;# 
    59  0087                     	;# 
    60  0088                     	;# 
    61  0089                     	;# 
    62  008C                     	;# 
    63  008D                     	;# 
    64  008E                     	;# 
    65  0091                     	;# 
    66  0092                     	;# 
    67  0093                     	;# 
    68  0094                     	;# 
    69  0098                     	;# 
    70  0099                     	;# 
    71  009C                     	;# 
    72  009D                     	;# 
    73  009E                     	;# 
    74  009F                     	;# 
    75  010C                     	;# 
    76  010D                     	;# 
    77  010E                     	;# 
    78  010F                     	;# 
    79  018C                     	;# 
    80  018D                     	;# 
    81                           
    82                           	psect	strings
    83  0003                     __pstrings:	
    84  0003                     stringtab:	
    85  0003                     __stringtab:	
    86                           
    87                           ;	String table - string pointers are 1 byte each
    88  0003  1BFF               	btfsc	btemp+1,7
    89  0004  280D               	ljmp	stringcode
    90  0005  1383               	bcf	3,7
    91  0006  187F               	btfsc	btemp+1,0
    92  0007  1783               	bsf	3,7
    93  0008  0800               	movf	0,w
    94  0009  0A84               	incf	4,f
    95  000A  1903               	skipnz
    96  000B  0AFF               	incf	btemp+1,f
    97  000C  0008               	return
    98  000D                     stringcode:	
    99  000D                     stringdir:	
   100  000D  3000               	movlw	high stringdir
   101  000E  008A               	movwf	10
   102  000F  0804               	movf	4,w
   103  0010  0A84               	incf	4,f
   104  0011  0782               	addwf	2,f
   105  0012                     __stringbase:	
   106  0012  3400               	retlw	0
   107  0013                     __end_of__stringtab:	
   108  0013                     _dpowers:	
   109  0013  3401               	retlw	1
   110  0014  3400               	retlw	0
   111  0015  340A               	retlw	10
   112  0016  3400               	retlw	0
   113  0017  3464               	retlw	100
   114  0018  3400               	retlw	0
   115  0019  34E8               	retlw	232
   116  001A  3403               	retlw	3
   117  001B  3410               	retlw	16
   118  001C  3427               	retlw	39
   119  001D                     __end_of_dpowers:	
   120  001F                     _ADCON0	set	31
   121  001E                     _ADRESH	set	30
   122  0007                     _PORTC	set	7
   123  0008                     _PORTD	set	8
   124  00FA                     _GO_DONE	set	250
   125  0038                     _RC0	set	56
   126  0039                     _RC1	set	57
   127  003A                     _RC2	set	58
   128  009F                     _ADCON1	set	159
   129  009E                     _ADRESL	set	158
   130  0085                     _TRISA	set	133
   131  0087                     _TRISC	set	135
   132  0088                     _TRISD	set	136
   133  001D                     __stringdata:	
   134  001D                     STR_2:	
   135  001D  3441               	retlw	65	;'A'
   136  001E  3444               	retlw	68	;'D'
   137  001F  3443               	retlw	67	;'C'
   138  0020  3430               	retlw	48	;'0'
   139  0021  343A               	retlw	58	;':'
   140  0022  3420               	retlw	32	;' '
   141  0023  3425               	retlw	37	;'%'
   142  0024  3464               	retlw	100	;'d'
   143  0025  3420               	retlw	32	;' '
   144  0026  3420               	retlw	32	;' '
   145  0027  3420               	retlw	32	;' '
   146  0028  3420               	retlw	32	;' '
   147  0029  3420               	retlw	32	;' '
   148  002A  3420               	retlw	32	;' '
   149  002B  3420               	retlw	32	;' '
   150  002C  3420               	retlw	32	;' '
   151  002D  3400               	retlw	0
   152  002E                     STR_3:	
   153  002E  3441               	retlw	65	;'A'
   154  002F  3444               	retlw	68	;'D'
   155  0030  3443               	retlw	67	;'C'
   156  0031  3431               	retlw	49	;'1'
   157  0032  343A               	retlw	58	;':'
   158  0033  3420               	retlw	32	;' '
   159  0034  3425               	retlw	37	;'%'
   160  0035  3464               	retlw	100	;'d'
   161  0036  3420               	retlw	32	;' '
   162  0037  3420               	retlw	32	;' '
   163  0038  3420               	retlw	32	;' '
   164  0039  3420               	retlw	32	;' '
   165  003A  3420               	retlw	32	;' '
   166  003B  3420               	retlw	32	;' '
   167  003C  3420               	retlw	32	;' '
   168  003D  3420               	retlw	32	;' '
   169  003E  3400               	retlw	0
   170  003F                     STR_1:	
   171  003F  3441               	retlw	65	;'A'
   172  0040  3444               	retlw	68	;'D'
   173  0041  3443               	retlw	67	;'C'
   174  0042  3420               	retlw	32	;' '
   175  0043  3454               	retlw	84	;'T'
   176  0044  3465               	retlw	101	;'e'
   177  0045  3473               	retlw	115	;'s'
   178  0046  3474               	retlw	116	;'t'
   179  0047  3400               	retlw	0
   180  0048                     __end_of__stringdata:	
   181                           
   182                           ; #config settings
   183  0000                     
   184                           	psect	cinit
   185  07FA                     start_initialization:	
   186  07FA                     __initialization:	
   187                           
   188                           ; Clear objects allocated to BANK0
   189  07FA  01CD               	clrf	__pbssBANK0& (0+127)
   190  07FB  01CE               	clrf	(__pbssBANK0+1)& (0+127)
   191  07FC                     end_of_initialization:	
   192                           ;End of C runtime variable initialization code
   193                           
   194  07FC                     __end_of__initialization:	
   195  07FC  0183               	clrf	3
   196  07FD  120A  118A  2E68   	ljmp	_main	;jump to C main() function
   197                           
   198                           	psect	bssBANK0
   199  004D                     __pbssBANK0:	
   200  004D                     _adcValue:	
   201  004D                     	ds	2
   202                           
   203                           	psect	cstackCOMMON
   204  0070                     __pcstackCOMMON:	
   205  0070                     ?_initADC:	
   206  0070                     ??_initADC:	
   207                           ; 0 bytes @ 0x0
   208                           
   209  0070                     ?_initLCD:	
   210                           ; 0 bytes @ 0x0
   211                           
   212  0070                     ?_instCTRL:	
   213                           ; 0 bytes @ 0x0
   214                           
   215  0070                     ??_instCTRL:	
   216                           ; 0 bytes @ 0x0
   217                           
   218  0070                     ?_main:	
   219                           ; 0 bytes @ 0x0
   220                           
   221  0070                     ?_dataCTRL:	
   222                           ; 0 bytes @ 0x0
   223                           
   224  0070                     ??_dataCTRL:	
   225                           ; 0 bytes @ 0x0
   226                           
   227  0070                     ?_readADC:	
   228                           ; 0 bytes @ 0x0
   229                           
   230  0070                     ?___wmul:	
   231                           ; 2 bytes @ 0x0
   232                           
   233  0070                     ___wmul@multiplier:	
   234                           ; 2 bytes @ 0x0
   235                           
   236                           
   237                           ; 2 bytes @ 0x0
   238  0070                     	ds	1
   239  0071                     instCTRL@CMD:	
   240  0071                     dataCTRL@DAT:	
   241                           ; 1 bytes @ 0x1
   242                           
   243                           
   244                           ; 1 bytes @ 0x1
   245  0071                     	ds	1
   246  0072                     ??_initLCD:	
   247  0072                     ?_printToLCD:	
   248                           ; 0 bytes @ 0x2
   249                           
   250  0072                     ??_readADC:	
   251                           ; 0 bytes @ 0x2
   252                           
   253  0072                     printToLCD@str:	
   254                           ; 0 bytes @ 0x2
   255                           
   256  0072                     ___wmul@multiplicand:	
   257                           ; 2 bytes @ 0x2
   258                           
   259                           
   260                           ; 2 bytes @ 0x2
   261  0072                     	ds	2
   262  0074                     ??_printToLCD:	
   263  0074                     ??___wmul:	
   264                           ; 0 bytes @ 0x4
   265                           
   266  0074                     readADC@channel:	
   267                           ; 0 bytes @ 0x4
   268                           
   269  0074                     ___wmul@product:	
   270                           ; 1 bytes @ 0x4
   271                           
   272                           
   273                           ; 2 bytes @ 0x4
   274  0074                     	ds	2
   275  0076                     ?___lwdiv:	
   276  0076                     ___lwdiv@divisor:	
   277                           ; 2 bytes @ 0x6
   278                           
   279                           
   280                           ; 2 bytes @ 0x6
   281  0076                     	ds	2
   282  0078                     ___lwdiv@dividend:	
   283                           
   284                           ; 2 bytes @ 0x8
   285  0078                     	ds	2
   286  007A                     ??___lwdiv:	
   287                           
   288                           ; 0 bytes @ 0xA
   289  007A                     	ds	1
   290  007B                     ___lwdiv@quotient:	
   291                           
   292                           ; 2 bytes @ 0xB
   293  007B                     	ds	2
   294  007D                     ___lwdiv@counter:	
   295                           
   296                           ; 1 bytes @ 0xD
   297  007D                     	ds	1
   298                           
   299                           	psect	cstackBANK0
   300  0020                     __pcstackBANK0:	
   301  0020                     ?___lwmod:	
   302  0020                     ___lwmod@divisor:	
   303                           ; 2 bytes @ 0x0
   304                           
   305                           
   306                           ; 2 bytes @ 0x0
   307  0020                     	ds	2
   308  0022                     ___lwmod@dividend:	
   309                           
   310                           ; 2 bytes @ 0x2
   311  0022                     	ds	2
   312  0024                     ??___lwmod:	
   313                           
   314                           ; 0 bytes @ 0x4
   315  0024                     	ds	1
   316  0025                     ___lwmod@counter:	
   317                           
   318                           ; 1 bytes @ 0x5
   319  0025                     	ds	1
   320  0026                     ?_sprintf:	
   321  0026                     sprintf@f:	
   322                           ; 2 bytes @ 0x6
   323                           
   324                           
   325                           ; 1 bytes @ 0x6
   326  0026                     	ds	3
   327  0029                     ??_sprintf:	
   328                           
   329                           ; 0 bytes @ 0x9
   330  0029                     	ds	3
   331  002C                     sprintf@ap:	
   332                           
   333                           ; 1 bytes @ 0xC
   334  002C                     	ds	1
   335  002D                     sprintf@flag:	
   336                           
   337                           ; 1 bytes @ 0xD
   338  002D                     	ds	1
   339  002E                     sprintf@prec:	
   340                           
   341                           ; 1 bytes @ 0xE
   342  002E                     	ds	1
   343  002F                     sprintf@_val:	
   344                           
   345                           ; 4 bytes @ 0xF
   346  002F                     	ds	4
   347  0033                     sprintf@sp:	
   348                           
   349                           ; 1 bytes @ 0x13
   350  0033                     	ds	1
   351  0034                     sprintf@c:	
   352                           
   353                           ; 1 bytes @ 0x14
   354  0034                     	ds	1
   355  0035                     ??_main:	
   356                           
   357                           ; 0 bytes @ 0x15
   358  0035                     	ds	2
   359  0037                     main@buffer:	
   360                           
   361                           ; 20 bytes @ 0x17
   362  0037                     	ds	20
   363  004B                     main@adcValue:	
   364                           
   365                           ; 2 bytes @ 0x2B
   366  004B                     	ds	2
   367                           
   368                           	psect	maintext
   369  0668                     __pmaintext:	
   370 ;;
   371 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   372 ;;
   373 ;; *************** function _main *****************
   374 ;; Defined at:
   375 ;;		line 36 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\dht11_module\main.c"
   376 ;; Parameters:    Size  Location     Type
   377 ;;		None
   378 ;; Auto vars:     Size  Location     Type
   379 ;;  adcValue        2   43[BANK0 ] unsigned int 
   380 ;;  buffer         20   23[BANK0 ] unsigned char [20]
   381 ;; Return value:  Size  Location     Type
   382 ;;		None               void
   383 ;; Registers used:
   384 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   385 ;; Tracked objects:
   386 ;;		On entry : 17F/0
   387 ;;		On exit  : 0/0
   388 ;;		Unchanged: 0/0
   389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   390 ;;      Params:         0       0       0       0       0
   391 ;;      Locals:         0      22       0       0       0
   392 ;;      Temps:          0       2       0       0       0
   393 ;;      Totals:         0      24       0       0       0
   394 ;;Total ram usage:       24 bytes
   395 ;; Hardware stack levels required when called:    2
   396 ;; This function calls:
   397 ;;		___lwdiv
   398 ;;		___wmul
   399 ;;		_initADC
   400 ;;		_initLCD
   401 ;;		_instCTRL
   402 ;;		_printToLCD
   403 ;;		_readADC
   404 ;;		_sprintf
   405 ;; This function is called by:
   406 ;;		Startup code after reset
   407 ;; This function uses a non-reentrant model
   408 ;;
   409                           
   410                           
   411                           ;psect for function _main
   412  0668                     _main:	
   413                           
   414                           ;main.c: 38: char buffer[20];
   415                           ;main.c: 39: TRISC = 0x00;
   416                           
   417                           ;incstack = 0
   418                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   419  0668  1683               	bsf	3,5	;RP0=1, select bank1
   420  0669  1303               	bcf	3,6	;RP1=0, select bank1
   421  066A  0187               	clrf	7	;volatile
   422                           
   423                           ;main.c: 40: TRISD = 0x00;
   424  066B  0188               	clrf	8	;volatile
   425                           
   426                           ;main.c: 41: PORTC = 0x00;
   427  066C  1283               	bcf	3,5	;RP0=0, select bank0
   428  066D  1303               	bcf	3,6	;RP1=0, select bank0
   429  066E  0187               	clrf	7	;volatile
   430                           
   431                           ;main.c: 42: initADC();
   432  066F  120A  118A  252D  120A  118A  	fcall	_initADC
   433                           
   434                           ;main.c: 43: initLCD();
   435  0674  120A  118A  255E  120A  118A  	fcall	_initLCD
   436                           
   437                           ;main.c: 44: instCTRL(0x80);
   438  0679  3080               	movlw	128
   439  067A  120A  118A  2538  120A  118A  	fcall	_instCTRL
   440                           
   441                           ;main.c: 45: printToLCD("ADC Test");
   442  067F  302D               	movlw	low (STR_1-__stringbase)
   443  0680  00F2               	movwf	printToLCD@str
   444  0681  3080               	movlw	128
   445  0682  00F3               	movwf	printToLCD@str+1
   446  0683  120A  118A  25CB  120A  118A  	fcall	_printToLCD
   447  0688                     l943:	
   448                           ;main.c: 47: while (1)
   449                           
   450                           
   451                           ;main.c: 48: {
   452                           ;main.c: 49: uint16_t adcValue = readADC(0);
   453  0688  3000               	movlw	0
   454  0689  120A  118A  25A3  120A  118A  	fcall	_readADC
   455  068E  0871               	movf	?_readADC+1,w
   456  068F  1283               	bcf	3,5	;RP0=0, select bank0
   457  0690  1303               	bcf	3,6	;RP1=0, select bank0
   458  0691  01CC               	clrf	main@adcValue+1
   459  0692  07CC               	addwf	main@adcValue+1,f
   460  0693  0870               	movf	?_readADC,w
   461  0694  01CB               	clrf	main@adcValue
   462  0695  07CB               	addwf	main@adcValue,f
   463                           
   464                           ;main.c: 50: sprintf(buffer, "ADC0: %d        ", adcValue);
   465  0696  300B               	movlw	(STR_2-__stringbase)& (0+255)
   466  0697  00B5               	movwf	??_main
   467  0698  0835               	movf	??_main,w
   468  0699  00A6               	movwf	sprintf@f
   469  069A  084C               	movf	main@adcValue+1,w
   470  069B  01A8               	clrf	?_sprintf+2
   471  069C  07A8               	addwf	?_sprintf+2,f
   472  069D  084B               	movf	main@adcValue,w
   473  069E  01A7               	clrf	?_sprintf+1
   474  069F  07A7               	addwf	?_sprintf+1,f
   475  06A0  3037               	movlw	main@buffer& (0+255)
   476  06A1  120A  118A  271F  120A  118A  	fcall	_sprintf
   477                           
   478                           ;main.c: 51: instCTRL(0xC0);
   479  06A6  30C0               	movlw	192
   480  06A7  120A  118A  2538  120A  118A  	fcall	_instCTRL
   481                           
   482                           ;main.c: 52: printToLCD(buffer);
   483  06AC  3037               	movlw	main@buffer& (0+255)
   484  06AD  00F2               	movwf	printToLCD@str
   485  06AE  3000               	movlw	0
   486  06AF  00F3               	movwf	printToLCD@str+1
   487  06B0  120A  118A  25CB  120A  118A  	fcall	_printToLCD
   488                           
   489                           ;main.c: 53: _delay((unsigned long)((50)*(4000000/4000.0)));
   490  06B5  3041               	movlw	65
   491  06B6  1283               	bcf	3,5	;RP0=0, select bank0
   492  06B7  1303               	bcf	3,6	;RP1=0, select bank0
   493  06B8  00B6               	movwf	??_main+1
   494  06B9  30EE               	movlw	238
   495  06BA  00B5               	movwf	??_main
   496  06BB                     u577:	
   497  06BB  0BB5               	decfsz	??_main,f
   498  06BC  2EBB               	goto	u577
   499  06BD  0BB6               	decfsz	??_main+1,f
   500  06BE  2EBB               	goto	u577
   501  06BF  0000               	nop
   502                           
   503                           ;main.c: 55: adcValue = readADC(1);
   504  06C0  3001               	movlw	1
   505  06C1  120A  118A  25A3  120A  118A  	fcall	_readADC
   506  06C6  0871               	movf	?_readADC+1,w
   507  06C7  1283               	bcf	3,5	;RP0=0, select bank0
   508  06C8  1303               	bcf	3,6	;RP1=0, select bank0
   509  06C9  01CC               	clrf	main@adcValue+1
   510  06CA  07CC               	addwf	main@adcValue+1,f
   511  06CB  0870               	movf	?_readADC,w
   512  06CC  01CB               	clrf	main@adcValue
   513  06CD  07CB               	addwf	main@adcValue,f
   514                           
   515                           ;main.c: 56: adcValue = (adcValue * 500) / 1023;
   516  06CE  30FF               	movlw	255
   517  06CF  00F6               	movwf	___lwdiv@divisor
   518  06D0  3003               	movlw	3
   519  06D1  00F7               	movwf	___lwdiv@divisor+1
   520  06D2  084C               	movf	main@adcValue+1,w
   521  06D3  01F1               	clrf	___wmul@multiplier+1
   522  06D4  07F1               	addwf	___wmul@multiplier+1,f
   523  06D5  084B               	movf	main@adcValue,w
   524  06D6  01F0               	clrf	___wmul@multiplier
   525  06D7  07F0               	addwf	___wmul@multiplier,f
   526  06D8  30F4               	movlw	244
   527  06D9  00F2               	movwf	___wmul@multiplicand
   528  06DA  3001               	movlw	1
   529  06DB  00F3               	movwf	___wmul@multiplicand+1
   530  06DC  120A  118A  2580  120A  118A  	fcall	___wmul
   531  06E1  0871               	movf	?___wmul+1,w
   532  06E2  01F9               	clrf	___lwdiv@dividend+1
   533  06E3  07F9               	addwf	___lwdiv@dividend+1,f
   534  06E4  0870               	movf	?___wmul,w
   535  06E5  01F8               	clrf	___lwdiv@dividend
   536  06E6  07F8               	addwf	___lwdiv@dividend,f
   537  06E7  120A  118A  262A  120A  118A  	fcall	___lwdiv
   538  06EC  0877               	movf	?___lwdiv+1,w
   539  06ED  1283               	bcf	3,5	;RP0=0, select bank0
   540  06EE  1303               	bcf	3,6	;RP1=0, select bank0
   541  06EF  01CC               	clrf	main@adcValue+1
   542  06F0  07CC               	addwf	main@adcValue+1,f
   543  06F1  0876               	movf	?___lwdiv,w
   544  06F2  01CB               	clrf	main@adcValue
   545  06F3  07CB               	addwf	main@adcValue,f
   546                           
   547                           ;main.c: 57: sprintf(buffer, "ADC1: %d        ", adcValue);
   548  06F4  301C               	movlw	(STR_3-__stringbase)& (0+255)
   549  06F5  00B5               	movwf	??_main
   550  06F6  0835               	movf	??_main,w
   551  06F7  00A6               	movwf	sprintf@f
   552  06F8  084C               	movf	main@adcValue+1,w
   553  06F9  01A8               	clrf	?_sprintf+2
   554  06FA  07A8               	addwf	?_sprintf+2,f
   555  06FB  084B               	movf	main@adcValue,w
   556  06FC  01A7               	clrf	?_sprintf+1
   557  06FD  07A7               	addwf	?_sprintf+1,f
   558  06FE  3037               	movlw	main@buffer& (0+255)
   559  06FF  120A  118A  271F  120A  118A  	fcall	_sprintf
   560                           
   561                           ;main.c: 58: instCTRL(0x94);
   562  0704  3094               	movlw	148
   563  0705  120A  118A  2538  120A  118A  	fcall	_instCTRL
   564                           
   565                           ;main.c: 59: printToLCD(buffer);
   566  070A  3037               	movlw	main@buffer& (0+255)
   567  070B  00F2               	movwf	printToLCD@str
   568  070C  3000               	movlw	0
   569  070D  00F3               	movwf	printToLCD@str+1
   570  070E  120A  118A  25CB  120A  118A  	fcall	_printToLCD
   571                           
   572                           ;main.c: 60: _delay((unsigned long)((50)*(4000000/4000.0)));
   573  0713  3041               	movlw	65
   574  0714  1283               	bcf	3,5	;RP0=0, select bank0
   575  0715  1303               	bcf	3,6	;RP1=0, select bank0
   576  0716  00B6               	movwf	??_main+1
   577  0717  30EE               	movlw	238
   578  0718  00B5               	movwf	??_main
   579  0719                     u587:	
   580  0719  0BB5               	decfsz	??_main,f
   581  071A  2F19               	goto	u587
   582  071B  0BB6               	decfsz	??_main+1,f
   583  071C  2F19               	goto	u587
   584  071D  0000               	nop
   585  071E  2E88               	goto	l943
   586  071F                     __end_of_main:	
   587                           
   588                           	psect	text1
   589  071F                     __ptext1:	
   590 ;; *************** function _sprintf *****************
   591 ;; Defined at:
   592 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
   593 ;; Parameters:    Size  Location     Type
   594 ;;  sp              1    wreg     PTR unsigned char 
   595 ;;		 -> main@buffer(20), 
   596 ;;  f               1    6[BANK0 ] PTR const unsigned char 
   597 ;;		 -> STR_3(17), STR_2(17), 
   598 ;; Auto vars:     Size  Location     Type
   599 ;;  sp              1   19[BANK0 ] PTR unsigned char 
   600 ;;		 -> main@buffer(20), 
   601 ;;  _val            4   15[BANK0 ] struct .
   602 ;;  c               1   20[BANK0 ] char 
   603 ;;  prec            1   14[BANK0 ] char 
   604 ;;  flag            1   13[BANK0 ] unsigned char 
   605 ;;  ap              1   12[BANK0 ] PTR void [1]
   606 ;;		 -> ?_sprintf(2), 
   607 ;; Return value:  Size  Location     Type
   608 ;;                  2    6[BANK0 ] int 
   609 ;; Registers used:
   610 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   611 ;; Tracked objects:
   612 ;;		On entry : 0/0
   613 ;;		On exit  : 0/0
   614 ;;		Unchanged: 0/0
   615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   616 ;;      Params:         0       3       0       0       0
   617 ;;      Locals:         0       9       0       0       0
   618 ;;      Temps:          0       3       0       0       0
   619 ;;      Totals:         0      15       0       0       0
   620 ;;Total ram usage:       15 bytes
   621 ;; Hardware stack levels used:    1
   622 ;; Hardware stack levels required when called:    1
   623 ;; This function calls:
   624 ;;		___lwdiv
   625 ;;		___lwmod
   626 ;; This function is called by:
   627 ;;		_main
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631                           
   632                           ;psect for function _sprintf
   633  071F                     _sprintf:	
   634                           
   635                           ;incstack = 0
   636                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   637                           ;sprintf@sp stored from wreg
   638  071F  1283               	bcf	3,5	;RP0=0, select bank0
   639  0720  1303               	bcf	3,6	;RP1=0, select bank0
   640  0721  00B3               	movwf	sprintf@sp
   641                           
   642                           ;doprnt.c: 494: va_list ap;
   643                           ;doprnt.c: 499: signed char c;
   644                           ;doprnt.c: 506: signed char prec;
   645                           ;doprnt.c: 508: unsigned char flag;
   646                           ;doprnt.c: 527: union {
   647                           ;doprnt.c: 528: unsigned int _val;
   648                           ;doprnt.c: 529: struct {
   649                           ;doprnt.c: 530: const char * _cp;
   650                           ;doprnt.c: 531: unsigned _len;
   651                           ;doprnt.c: 532: } _str;
   652                           ;doprnt.c: 533: } _val;
   653                           ;doprnt.c: 542: *ap = __va_start();
   654  0722  3027               	movlw	(?_sprintf+1)& (0+255)
   655  0723  00A9               	movwf	??_sprintf
   656  0724  0829               	movf	??_sprintf,w
   657  0725  00AC               	movwf	sprintf@ap
   658  0726                     l915:	
   659                           ;doprnt.c: 545: while(c = *f++) {
   660                           
   661  0726  3001               	movlw	1
   662  0727  07A6               	addwf	sprintf@f,f
   663  0728  30FF               	movlw	-1
   664  0729  0726               	addwf	sprintf@f,w
   665  072A  0084               	movwf	4
   666  072B  120A  118A  200D  120A  118A  	fcall	stringdir
   667  0730  00A9               	movwf	??_sprintf
   668  0731  0829               	movf	??_sprintf,w
   669  0732  00B4               	movwf	sprintf@c
   670  0733  08B4               	movf	sprintf@c,f
   671  0734  1903               	btfsc	3,2
   672  0735  2FF5               	goto	l917
   673                           
   674                           ;doprnt.c: 547: if(c != '%')
   675  0736  0834               	movf	sprintf@c,w
   676  0737  3A25               	xorlw	37
   677  0738  1903               	skipnz
   678  0739  2F46               	goto	l871
   679                           
   680                           ;doprnt.c: 549: {
   681                           ;doprnt.c: 550: ((*sp++ = (c)));
   682  073A  0834               	movf	sprintf@c,w
   683  073B  00A9               	movwf	??_sprintf
   684  073C  0833               	movf	sprintf@sp,w
   685  073D  0084               	movwf	4
   686  073E  0829               	movf	??_sprintf,w
   687  073F  1383               	bcf	3,7	;select IRP bank0
   688  0740  0080               	movwf	0
   689  0741  3001               	movlw	1
   690  0742  00A9               	movwf	??_sprintf
   691  0743  0829               	movf	??_sprintf,w
   692  0744  07B3               	addwf	sprintf@sp,f
   693                           
   694                           ;doprnt.c: 551: continue;
   695  0745  2F26               	goto	l915
   696  0746                     l871:	
   697                           
   698                           ;doprnt.c: 552: }
   699                           ;doprnt.c: 557: flag = 0;
   700  0746  01AD               	clrf	sprintf@flag
   701                           
   702                           ;doprnt.c: 831: }
   703                           
   704                           ;doprnt.c: 822: continue;
   705                           
   706                           ;doprnt.c: 811: default:
   707                           
   708                           ;doprnt.c: 707: case 'i':
   709                           ;doprnt.c: 708: break;
   710                           
   711                           ;doprnt.c: 706: case 'd':
   712                           
   713                           ;doprnt.c: 647: goto alldone;
   714                           
   715                           ;doprnt.c: 646: case 0:
   716                           
   717                           ;doprnt.c: 644: switch(c = *f++) {
   718  0747  3001               	movlw	1
   719  0748  07A6               	addwf	sprintf@f,f
   720  0749  30FF               	movlw	-1
   721  074A  0726               	addwf	sprintf@f,w
   722  074B  0084               	movwf	4
   723  074C  120A  118A  200D  120A  118A  	fcall	stringdir
   724  0751  00B4               	movwf	sprintf@c
   725                           
   726                           ; Switch size 1, requested type "space"
   727                           ; Number of cases is 3, Range of values is 0 to 105
   728                           ; switch strategies available:
   729                           ; Name         Instructions Cycles
   730                           ; simple_byte           10     6 (average)
   731                           ; jumptable            260     6 (fixed)
   732                           ;	Chosen strategy is simple_byte
   733  0752  3A00               	xorlw	0	; case 0
   734  0753  1903               	skipnz
   735  0754  2FF5               	goto	l917
   736  0755  3A64               	xorlw	100	; case 100
   737  0756  1903               	skipnz
   738  0757  2F5C               	goto	l877
   739  0758  3A0D               	xorlw	13	; case 105
   740  0759  1903               	skipnz
   741  075A  2F5C               	goto	l877
   742  075B  2F26               	goto	l915
   743  075C                     l877:	
   744                           
   745                           ;doprnt.c: 1262: {
   746                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   747  075C  082C               	movf	sprintf@ap,w
   748  075D  0084               	movwf	4
   749  075E  1383               	bcf	3,7	;select IRP bank0
   750  075F  0800               	movf	0,w
   751  0760  00AF               	movwf	sprintf@_val
   752  0761  0A84               	incf	4,f
   753  0762  0800               	movf	0,w
   754  0763  00B0               	movwf	sprintf@_val+1
   755  0764  3002               	movlw	2
   756  0765  00A9               	movwf	??_sprintf
   757  0766  0829               	movf	??_sprintf,w
   758  0767  07AC               	addwf	sprintf@ap,f
   759                           
   760                           ;doprnt.c: 1270: if((int)_val._val < 0) {
   761  0768  1FB0               	btfss	sprintf@_val+1,7
   762  0769  2F73               	goto	l887
   763                           
   764                           ;doprnt.c: 1271: flag |= 0x03;
   765  076A  3003               	movlw	3
   766  076B  00A9               	movwf	??_sprintf
   767  076C  0829               	movf	??_sprintf,w
   768  076D  04AD               	iorwf	sprintf@flag,f
   769                           
   770                           ;doprnt.c: 1272: _val._val = -_val._val;
   771  076E  09AF               	comf	sprintf@_val,f
   772  076F  09B0               	comf	sprintf@_val+1,f
   773  0770  0AAF               	incf	sprintf@_val,f
   774  0771  1903               	skipnz
   775  0772  0AB0               	incf	sprintf@_val+1,f
   776  0773                     l887:	
   777                           
   778                           ;doprnt.c: 1273: }
   779                           ;doprnt.c: 1275: }
   780                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   781  0773  01B4               	clrf	sprintf@c
   782  0774  0AB4               	incf	sprintf@c,f
   783  0775  0834               	movf	sprintf@c,w
   784  0776  3A05               	xorlw	5
   785  0777  1903               	btfsc	3,2
   786  0778  2F9A               	goto	l899
   787  0779                     l891:	
   788                           
   789                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
   790  0779  0834               	movf	sprintf@c,w
   791  077A  00A9               	movwf	??_sprintf
   792  077B  0729               	addwf	??_sprintf,w
   793  077C  3E01               	addlw	low (_dpowers-__stringbase)
   794  077D  0084               	movwf	4
   795  077E  120A  118A  200D  120A  118A  	fcall	stringdir
   796  0783  00AA               	movwf	??_sprintf+1
   797  0784  120A  118A  200D  120A  118A  	fcall	stringdir
   798  0789  00AB               	movwf	??_sprintf+2
   799  078A  082B               	movf	??_sprintf+2,w
   800  078B  0230               	subwf	sprintf@_val+1,w
   801  078C  1D03               	skipz
   802  078D  2F90               	goto	u485
   803  078E  082A               	movf	??_sprintf+1,w
   804  078F  022F               	subwf	sprintf@_val,w
   805  0790                     u485:	
   806  0790  1C03               	btfss	3,0
   807  0791  2F9A               	goto	l899
   808                           
   809                           ;doprnt.c: 1316: break;
   810  0792  3001               	movlw	1
   811  0793  00A9               	movwf	??_sprintf
   812  0794  0829               	movf	??_sprintf,w
   813  0795  07B4               	addwf	sprintf@c,f
   814  0796  0834               	movf	sprintf@c,w
   815  0797  3A05               	xorlw	5
   816  0798  1D03               	skipz
   817  0799  2F79               	goto	l891
   818  079A                     l899:	
   819                           
   820                           ;doprnt.c: 1431: {
   821                           ;doprnt.c: 1447: if(flag & 0x03)
   822  079A  082D               	movf	sprintf@flag,w
   823  079B  3903               	andlw	3
   824  079C  1903               	btfsc	3,2
   825  079D  2FA9               	goto	l905
   826                           
   827                           ;doprnt.c: 1448: ((*sp++ = ('-')));
   828  079E  302D               	movlw	45
   829  079F  00A9               	movwf	??_sprintf
   830  07A0  0833               	movf	sprintf@sp,w
   831  07A1  0084               	movwf	4
   832  07A2  0829               	movf	??_sprintf,w
   833  07A3  1383               	bcf	3,7	;select IRP bank0
   834  07A4  0080               	movwf	0
   835  07A5  3001               	movlw	1
   836  07A6  00A9               	movwf	??_sprintf
   837  07A7  0829               	movf	??_sprintf,w
   838  07A8  07B3               	addwf	sprintf@sp,f
   839  07A9                     l905:	
   840                           
   841                           ;doprnt.c: 1478: }
   842                           ;doprnt.c: 1481: prec = c;
   843  07A9  0834               	movf	sprintf@c,w
   844  07AA  00A9               	movwf	??_sprintf
   845  07AB  0829               	movf	??_sprintf,w
   846  07AC  00AE               	movwf	sprintf@prec
   847  07AD                     l913:	
   848                           ;doprnt.c: 1483: while(prec--) {
   849                           
   850  07AD  30FF               	movlw	-1
   851  07AE  00A9               	movwf	??_sprintf
   852  07AF  0829               	movf	??_sprintf,w
   853  07B0  07AE               	addwf	sprintf@prec,f
   854  07B1  082E               	movf	sprintf@prec,w
   855  07B2  3AFF               	xorlw	-1
   856  07B3  1903               	btfsc	3,2
   857  07B4  2F26               	goto	l915
   858                           
   859                           ;doprnt.c: 1487: {
   860                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
   861  07B5  300A               	movlw	10
   862  07B6  00A0               	movwf	___lwmod@divisor
   863  07B7  3000               	movlw	0
   864  07B8  00A1               	movwf	___lwmod@divisor+1
   865  07B9  082E               	movf	sprintf@prec,w
   866  07BA  00A9               	movwf	??_sprintf
   867  07BB  0729               	addwf	??_sprintf,w
   868  07BC  3E01               	addlw	low (_dpowers-__stringbase)
   869  07BD  0084               	movwf	4
   870  07BE  120A  118A  200D  120A  118A  	fcall	stringdir
   871  07C3  00F6               	movwf	___lwdiv@divisor
   872  07C4  120A  118A  200D  120A  118A  	fcall	stringdir
   873  07C9  00F7               	movwf	___lwdiv@divisor+1
   874  07CA  0830               	movf	sprintf@_val+1,w
   875  07CB  01F9               	clrf	___lwdiv@dividend+1
   876  07CC  07F9               	addwf	___lwdiv@dividend+1,f
   877  07CD  082F               	movf	sprintf@_val,w
   878  07CE  01F8               	clrf	___lwdiv@dividend
   879  07CF  07F8               	addwf	___lwdiv@dividend,f
   880  07D0  120A  118A  262A  120A  118A  	fcall	___lwdiv
   881  07D5  0877               	movf	?___lwdiv+1,w
   882  07D6  1283               	bcf	3,5	;RP0=0, select bank0
   883  07D7  1303               	bcf	3,6	;RP1=0, select bank0
   884  07D8  01A3               	clrf	___lwmod@dividend+1
   885  07D9  07A3               	addwf	___lwmod@dividend+1,f
   886  07DA  0876               	movf	?___lwdiv,w
   887  07DB  01A2               	clrf	___lwmod@dividend
   888  07DC  07A2               	addwf	___lwmod@dividend,f
   889  07DD  120A  118A  25F4  120A  118A  	fcall	___lwmod
   890  07E2  1283               	bcf	3,5	;RP0=0, select bank0
   891  07E3  1303               	bcf	3,6	;RP1=0, select bank0
   892  07E4  0820               	movf	?___lwmod,w
   893  07E5  3E30               	addlw	48
   894  07E6  00AA               	movwf	??_sprintf+1
   895  07E7  082A               	movf	??_sprintf+1,w
   896  07E8  00B4               	movwf	sprintf@c
   897                           
   898                           ;doprnt.c: 1532: }
   899                           ;doprnt.c: 1533: ((*sp++ = (c)));
   900  07E9  0834               	movf	sprintf@c,w
   901  07EA  00A9               	movwf	??_sprintf
   902  07EB  0833               	movf	sprintf@sp,w
   903  07EC  0084               	movwf	4
   904  07ED  0829               	movf	??_sprintf,w
   905  07EE  1383               	bcf	3,7	;select IRP bank0
   906  07EF  0080               	movwf	0
   907  07F0  3001               	movlw	1
   908  07F1  00A9               	movwf	??_sprintf
   909  07F2  0829               	movf	??_sprintf,w
   910  07F3  07B3               	addwf	sprintf@sp,f
   911  07F4  2FAD               	goto	l913
   912  07F5                     l917:	
   913                           ;doprnt.c: 1534: }
   914                           ;doprnt.c: 1542: }
   915                           ;doprnt.c: 1544: alldone:
   916                           
   917                           
   918                           ;doprnt.c: 1547: *sp = 0;
   919  07F5  0833               	movf	sprintf@sp,w
   920  07F6  0084               	movwf	4
   921  07F7  1383               	bcf	3,7	;select IRP bank0
   922  07F8  0180               	clrf	0
   923  07F9  0008               	return
   924  07FA                     __end_of_sprintf:	
   925                           ;doprnt.c: 1549: return 0;
   926                           ;	Return value of _sprintf is never used
   927                           
   928                           
   929                           	psect	text2
   930  05F4                     __ptext2:	
   931 ;; *************** function ___lwmod *****************
   932 ;; Defined at:
   933 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;  divisor         2    0[BANK0 ] unsigned int 
   936 ;;  dividend        2    2[BANK0 ] unsigned int 
   937 ;; Auto vars:     Size  Location     Type
   938 ;;  counter         1    5[BANK0 ] unsigned char 
   939 ;; Return value:  Size  Location     Type
   940 ;;                  2    0[BANK0 ] unsigned int 
   941 ;; Registers used:
   942 ;;		wreg, status,2, status,0
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   948 ;;      Params:         0       4       0       0       0
   949 ;;      Locals:         0       1       0       0       0
   950 ;;      Temps:          0       1       0       0       0
   951 ;;      Totals:         0       6       0       0       0
   952 ;;Total ram usage:        6 bytes
   953 ;; Hardware stack levels used:    1
   954 ;; This function calls:
   955 ;;		Nothing
   956 ;; This function is called by:
   957 ;;		_sprintf
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           
   962                           ;psect for function ___lwmod
   963  05F4                     ___lwmod:	
   964                           
   965                           ;incstack = 0
   966                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   967  05F4  1283               	bcf	3,5	;RP0=0, select bank0
   968  05F5  1303               	bcf	3,6	;RP1=0, select bank0
   969  05F6  0821               	movf	___lwmod@divisor+1,w
   970  05F7  0420               	iorwf	___lwmod@divisor,w
   971  05F8  1903               	skipnz
   972  05F9  2E23               	goto	l825
   973  05FA  01A5               	clrf	___lwmod@counter
   974  05FB  0AA5               	incf	___lwmod@counter,f
   975  05FC                     l815:	
   976  05FC  1BA1               	btfsc	___lwmod@divisor+1,7
   977  05FD  2E0A               	goto	l817
   978  05FE  3001               	movlw	1
   979  05FF                     u375:	
   980  05FF  1003               	clrc
   981  0600  0DA0               	rlf	___lwmod@divisor,f
   982  0601  0DA1               	rlf	___lwmod@divisor+1,f
   983  0602  3EFF               	addlw	-1
   984  0603  1D03               	skipz
   985  0604  2DFF               	goto	u375
   986  0605  3001               	movlw	1
   987  0606  00A4               	movwf	??___lwmod
   988  0607  0824               	movf	??___lwmod,w
   989  0608  07A5               	addwf	___lwmod@counter,f
   990  0609  2DFC               	goto	l815
   991  060A                     l817:	
   992  060A  0821               	movf	___lwmod@divisor+1,w
   993  060B  0223               	subwf	___lwmod@dividend+1,w
   994  060C  1D03               	skipz
   995  060D  2E10               	goto	u395
   996  060E  0820               	movf	___lwmod@divisor,w
   997  060F  0222               	subwf	___lwmod@dividend,w
   998  0610                     u395:	
   999  0610  1C03               	skipc
  1000  0611  2E18               	goto	l821
  1001  0612  0820               	movf	___lwmod@divisor,w
  1002  0613  02A2               	subwf	___lwmod@dividend,f
  1003  0614  0821               	movf	___lwmod@divisor+1,w
  1004  0615  1C03               	skipc
  1005  0616  03A3               	decf	___lwmod@dividend+1,f
  1006  0617  02A3               	subwf	___lwmod@dividend+1,f
  1007  0618                     l821:	
  1008  0618  3001               	movlw	1
  1009  0619                     u405:	
  1010  0619  1003               	clrc
  1011  061A  0CA1               	rrf	___lwmod@divisor+1,f
  1012  061B  0CA0               	rrf	___lwmod@divisor,f
  1013  061C  3EFF               	addlw	-1
  1014  061D  1D03               	skipz
  1015  061E  2E19               	goto	u405
  1016  061F  3001               	movlw	1
  1017  0620  02A5               	subwf	___lwmod@counter,f
  1018  0621  1D03               	btfss	3,2
  1019  0622  2E0A               	goto	l817
  1020  0623                     l825:	
  1021  0623  0823               	movf	___lwmod@dividend+1,w
  1022  0624  01A1               	clrf	?___lwmod+1
  1023  0625  07A1               	addwf	?___lwmod+1,f
  1024  0626  0822               	movf	___lwmod@dividend,w
  1025  0627  01A0               	clrf	?___lwmod
  1026  0628  07A0               	addwf	?___lwmod,f
  1027  0629  0008               	return
  1028  062A                     __end_of___lwmod:	
  1029                           
  1030                           	psect	text3
  1031  062A                     __ptext3:	
  1032 ;; *************** function ___lwdiv *****************
  1033 ;; Defined at:
  1034 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;  divisor         2    6[COMMON] unsigned int 
  1037 ;;  dividend        2    8[COMMON] unsigned int 
  1038 ;; Auto vars:     Size  Location     Type
  1039 ;;  quotient        2   11[COMMON] unsigned int 
  1040 ;;  counter         1   13[COMMON] unsigned char 
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  2    6[COMMON] unsigned int 
  1043 ;; Registers used:
  1044 ;;		wreg, status,2, status,0
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1050 ;;      Params:         4       0       0       0       0
  1051 ;;      Locals:         3       0       0       0       0
  1052 ;;      Temps:          1       0       0       0       0
  1053 ;;      Totals:         8       0       0       0       0
  1054 ;;Total ram usage:        8 bytes
  1055 ;; Hardware stack levels used:    1
  1056 ;; This function calls:
  1057 ;;		Nothing
  1058 ;; This function is called by:
  1059 ;;		_main
  1060 ;;		_sprintf
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           
  1065                           ;psect for function ___lwdiv
  1066  062A                     ___lwdiv:	
  1067                           
  1068                           ;incstack = 0
  1069                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1070  062A  01FB               	clrf	___lwdiv@quotient
  1071  062B  01FC               	clrf	___lwdiv@quotient+1
  1072  062C  0877               	movf	___lwdiv@divisor+1,w
  1073  062D  0476               	iorwf	___lwdiv@divisor,w
  1074  062E  1903               	skipnz
  1075  062F  2E61               	goto	l803
  1076  0630  01FD               	clrf	___lwdiv@counter
  1077  0631  0AFD               	incf	___lwdiv@counter,f
  1078  0632                     l791:	
  1079  0632  1BF7               	btfsc	___lwdiv@divisor+1,7
  1080  0633  2E40               	goto	l793
  1081  0634  3001               	movlw	1
  1082  0635                     u305:	
  1083  0635  1003               	clrc
  1084  0636  0DF6               	rlf	___lwdiv@divisor,f
  1085  0637  0DF7               	rlf	___lwdiv@divisor+1,f
  1086  0638  3EFF               	addlw	-1
  1087  0639  1D03               	skipz
  1088  063A  2E35               	goto	u305
  1089  063B  3001               	movlw	1
  1090  063C  00FA               	movwf	??___lwdiv
  1091  063D  087A               	movf	??___lwdiv,w
  1092  063E  07FD               	addwf	___lwdiv@counter,f
  1093  063F  2E32               	goto	l791
  1094  0640                     l793:	
  1095  0640  3001               	movlw	1
  1096  0641                     u325:	
  1097  0641  1003               	clrc
  1098  0642  0DFB               	rlf	___lwdiv@quotient,f
  1099  0643  0DFC               	rlf	___lwdiv@quotient+1,f
  1100  0644  3EFF               	addlw	-1
  1101  0645  1D03               	skipz
  1102  0646  2E41               	goto	u325
  1103  0647  0877               	movf	___lwdiv@divisor+1,w
  1104  0648  0279               	subwf	___lwdiv@dividend+1,w
  1105  0649  1D03               	skipz
  1106  064A  2E4D               	goto	u335
  1107  064B  0876               	movf	___lwdiv@divisor,w
  1108  064C  0278               	subwf	___lwdiv@dividend,w
  1109  064D                     u335:	
  1110  064D  1C03               	skipc
  1111  064E  2E56               	goto	l799
  1112  064F  0876               	movf	___lwdiv@divisor,w
  1113  0650  02F8               	subwf	___lwdiv@dividend,f
  1114  0651  0877               	movf	___lwdiv@divisor+1,w
  1115  0652  1C03               	skipc
  1116  0653  03F9               	decf	___lwdiv@dividend+1,f
  1117  0654  02F9               	subwf	___lwdiv@dividend+1,f
  1118  0655  147B               	bsf	___lwdiv@quotient,0
  1119  0656                     l799:	
  1120  0656  3001               	movlw	1
  1121  0657                     u345:	
  1122  0657  1003               	clrc
  1123  0658  0CF7               	rrf	___lwdiv@divisor+1,f
  1124  0659  0CF6               	rrf	___lwdiv@divisor,f
  1125  065A  3EFF               	addlw	-1
  1126  065B  1D03               	skipz
  1127  065C  2E57               	goto	u345
  1128  065D  3001               	movlw	1
  1129  065E  02FD               	subwf	___lwdiv@counter,f
  1130  065F  1D03               	btfss	3,2
  1131  0660  2E40               	goto	l793
  1132  0661                     l803:	
  1133  0661  087C               	movf	___lwdiv@quotient+1,w
  1134  0662  01F7               	clrf	?___lwdiv+1
  1135  0663  07F7               	addwf	?___lwdiv+1,f
  1136  0664  087B               	movf	___lwdiv@quotient,w
  1137  0665  01F6               	clrf	?___lwdiv
  1138  0666  07F6               	addwf	?___lwdiv,f
  1139  0667  0008               	return
  1140  0668                     __end_of___lwdiv:	
  1141                           
  1142                           	psect	text4
  1143  05A3                     __ptext4:	
  1144 ;; *************** function _readADC *****************
  1145 ;; Defined at:
  1146 ;;		line 71 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\dht11_module\main.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;  channel         1    wreg     unsigned char 
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;  channel         1    4[COMMON] unsigned char 
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  2    0[COMMON] unsigned int 
  1153 ;; Registers used:
  1154 ;;		wreg, status,2, status,0
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1160 ;;      Params:         2       0       0       0       0
  1161 ;;      Locals:         1       0       0       0       0
  1162 ;;      Temps:          2       0       0       0       0
  1163 ;;      Totals:         5       0       0       0       0
  1164 ;;Total ram usage:        5 bytes
  1165 ;; Hardware stack levels used:    1
  1166 ;; This function calls:
  1167 ;;		Nothing
  1168 ;; This function is called by:
  1169 ;;		_main
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           
  1174                           ;psect for function _readADC
  1175  05A3                     _readADC:	
  1176                           
  1177                           ;incstack = 0
  1178                           ; Regs used in _readADC: [wreg+status,2+status,0]
  1179                           ;readADC@channel stored from wreg
  1180  05A3  00F4               	movwf	readADC@channel
  1181                           
  1182                           ;main.c: 73: ADCON0 &= 0xC3;
  1183  05A4  30C3               	movlw	195
  1184  05A5  00F2               	movwf	??_readADC
  1185  05A6  0872               	movf	??_readADC,w
  1186  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  1187  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  1188  05A9  059F               	andwf	31,f	;volatile
  1189                           
  1190                           ;main.c: 74: ADCON0 |= (channel << 3);
  1191  05AA  0874               	movf	readADC@channel,w
  1192  05AB  00F2               	movwf	??_readADC
  1193  05AC  3002               	movlw	2
  1194  05AD                     u435:	
  1195  05AD  1003               	clrc
  1196  05AE  0DF2               	rlf	??_readADC,f
  1197  05AF  3EFF               	addlw	-1
  1198  05B0  1D03               	skipz
  1199  05B1  2DAD               	goto	u435
  1200  05B2  1003               	clrc
  1201  05B3  0D72               	rlf	??_readADC,w
  1202  05B4  00F3               	movwf	??_readADC+1
  1203  05B5  0873               	movf	??_readADC+1,w
  1204  05B6  049F               	iorwf	31,f	;volatile
  1205                           
  1206                           ;main.c: 75: ADCON0 |= 0x01;
  1207  05B7  141F               	bsf	31,0	;volatile
  1208                           
  1209                           ;main.c: 76: _delay((unsigned long)((20)*(4000000/4000000.0)));
  1210  05B8  3006               	movlw	6
  1211  05B9  00F2               	movwf	??_readADC
  1212  05BA                     u597:	
  1213  05BA  0BF2               	decfsz	??_readADC,f
  1214  05BB  2DBA               	goto	u597
  1215  05BC  0000               	nop
  1216                           
  1217                           ;main.c: 77: GO_DONE = 1;
  1218  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  1219  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  1220  05BF  151F               	bsf	31,2	;volatile
  1221  05C0                     l54:	
  1222                           ;main.c: 79: ;
  1223                           
  1224                           ;main.c: 78: while (GO_DONE)
  1225                           
  1226  05C0  191F               	btfsc	31,2	;volatile
  1227  05C1  2DC0               	goto	l54
  1228                           
  1229                           ;main.c: 80: return ((uint16_t)ADRESH << 8) | ADRESL;
  1230  05C2  081E               	movf	30,w	;volatile
  1231  05C3  01F1               	clrf	?_readADC+1
  1232  05C4  07F1               	addwf	?_readADC+1,f
  1233  05C5  1683               	bsf	3,5	;RP0=1, select bank1
  1234  05C6  1303               	bcf	3,6	;RP1=0, select bank1
  1235  05C7  081E               	movf	30,w	;volatile
  1236  05C8  01F0               	clrf	?_readADC
  1237  05C9  07F0               	addwf	?_readADC,f
  1238  05CA  0008               	return
  1239  05CB                     __end_of_readADC:	
  1240                           
  1241                           	psect	text5
  1242  05CB                     __ptext5:	
  1243 ;; *************** function _printToLCD *****************
  1244 ;; Defined at:
  1245 ;;		line 113 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\dht11_module\main.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;  str             2    2[COMMON] PTR const unsigned char 
  1248 ;;		 -> main@buffer(20), STR_1(9), 
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;		None
  1251 ;; Return value:  Size  Location     Type
  1252 ;;		None               void
  1253 ;; Registers used:
  1254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1255 ;; Tracked objects:
  1256 ;;		On entry : 0/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1260 ;;      Params:         2       0       0       0       0
  1261 ;;      Locals:         0       0       0       0       0
  1262 ;;      Temps:          0       0       0       0       0
  1263 ;;      Totals:         2       0       0       0       0
  1264 ;;Total ram usage:        2 bytes
  1265 ;; Hardware stack levels used:    1
  1266 ;; Hardware stack levels required when called:    1
  1267 ;; This function calls:
  1268 ;;		_dataCTRL
  1269 ;;		_instCTRL
  1270 ;; This function is called by:
  1271 ;;		_main
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           
  1276                           ;psect for function _printToLCD
  1277  05CB                     _printToLCD:	
  1278                           
  1279                           ;main.c: 115: instCTRL(0x0C);
  1280                           
  1281                           ;incstack = 0
  1282                           ; Regs used in _printToLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1283  05CB  300C               	movlw	12
  1284  05CC  120A  118A  2538  120A  118A  	fcall	_instCTRL
  1285  05D1                     l849:	
  1286                           ;main.c: 116: while (*str)
  1287                           
  1288  05D1  0873               	movf	printToLCD@str+1,w
  1289  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  1290  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  1291  05D4  00FF               	movwf	127
  1292  05D5  0872               	movf	printToLCD@str,w
  1293  05D6  0084               	movwf	4
  1294  05D7  120A  118A  2003  120A  118A  	fcall	stringtab
  1295  05DC  3800               	iorlw	0
  1296  05DD  1903               	btfsc	3,2
  1297  05DE  0008               	return
  1298                           
  1299                           ;main.c: 117: {
  1300                           ;main.c: 118: dataCTRL(*str);
  1301  05DF  0873               	movf	printToLCD@str+1,w
  1302  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  1303  05E1  1303               	bcf	3,6	;RP1=0, select bank0
  1304  05E2  00FF               	movwf	127
  1305  05E3  0872               	movf	printToLCD@str,w
  1306  05E4  0084               	movwf	4
  1307  05E5  120A  118A  2003  120A  118A  	fcall	stringtab
  1308  05EA  120A  118A  254B  120A  118A  	fcall	_dataCTRL
  1309                           
  1310                           ;main.c: 119: str++;
  1311  05EF  3001               	movlw	1
  1312  05F0  07F2               	addwf	printToLCD@str,f
  1313  05F1  1803               	skipnc
  1314  05F2  0AF3               	incf	printToLCD@str+1,f
  1315  05F3  2DD1               	goto	l849
  1316  05F4                     __end_of_printToLCD:	
  1317                           
  1318                           	psect	text6
  1319  054B                     __ptext6:	
  1320 ;; *************** function _dataCTRL *****************
  1321 ;; Defined at:
  1322 ;;		line 93 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\dht11_module\main.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;  DAT             1    wreg     unsigned char 
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;  DAT             1    1[COMMON] unsigned char 
  1327 ;; Return value:  Size  Location     Type
  1328 ;;		None               void
  1329 ;; Registers used:
  1330 ;;		wreg
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1336 ;;      Params:         0       0       0       0       0
  1337 ;;      Locals:         1       0       0       0       0
  1338 ;;      Temps:          1       0       0       0       0
  1339 ;;      Totals:         2       0       0       0       0
  1340 ;;Total ram usage:        2 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; This function calls:
  1343 ;;		Nothing
  1344 ;; This function is called by:
  1345 ;;		_printToLCD
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           
  1350                           ;psect for function _dataCTRL
  1351  054B                     _dataCTRL:	
  1352                           
  1353                           ;incstack = 0
  1354                           ; Regs used in _dataCTRL: [wreg]
  1355                           ;dataCTRL@DAT stored from wreg
  1356  054B  00F1               	movwf	dataCTRL@DAT
  1357                           
  1358                           ;main.c: 95: PORTD = DAT;
  1359  054C  0871               	movf	dataCTRL@DAT,w
  1360  054D  1283               	bcf	3,5	;RP0=0, select bank0
  1361  054E  1303               	bcf	3,6	;RP1=0, select bank0
  1362  054F  0088               	movwf	8	;volatile
  1363                           
  1364                           ;main.c: 96: RC0 = 1;
  1365  0550  1407               	bsf	7,0	;volatile
  1366                           
  1367                           ;main.c: 97: RC1 = 0;
  1368  0551  1087               	bcf	7,1	;volatile
  1369                           
  1370                           ;main.c: 98: RC2 = 1;
  1371  0552  1507               	bsf	7,2	;volatile
  1372                           
  1373                           ;main.c: 99: _delay((unsigned long)((1)*(4000000/4000.0)));
  1374  0553  30F9               	movlw	249
  1375  0554  00F0               	movwf	??_dataCTRL
  1376  0555                     u607:	
  1377  0555  0000               	nop
  1378  0556  0BF0               	decfsz	??_dataCTRL,f
  1379  0557  2D55               	goto	u607
  1380  0558  2D59               	nop2	;nop
  1381  0559  0000               	nop
  1382                           
  1383                           ;main.c: 100: RC2 = 0;
  1384  055A  1283               	bcf	3,5	;RP0=0, select bank0
  1385  055B  1303               	bcf	3,6	;RP1=0, select bank0
  1386  055C  1107               	bcf	7,2	;volatile
  1387  055D  0008               	return
  1388  055E                     __end_of_dataCTRL:	
  1389                           
  1390                           	psect	text7
  1391  055E                     __ptext7:	
  1392 ;; *************** function _initLCD *****************
  1393 ;; Defined at:
  1394 ;;		line 103 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\dht11_module\main.c"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;		None
  1397 ;; Auto vars:     Size  Location     Type
  1398 ;;		None
  1399 ;; Return value:  Size  Location     Type
  1400 ;;		None               void
  1401 ;; Registers used:
  1402 ;;		wreg, status,2, status,0, pclath, cstack
  1403 ;; Tracked objects:
  1404 ;;		On entry : 0/0
  1405 ;;		On exit  : 0/0
  1406 ;;		Unchanged: 0/0
  1407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1408 ;;      Params:         0       0       0       0       0
  1409 ;;      Locals:         0       0       0       0       0
  1410 ;;      Temps:          1       0       0       0       0
  1411 ;;      Totals:         1       0       0       0       0
  1412 ;;Total ram usage:        1 bytes
  1413 ;; Hardware stack levels used:    1
  1414 ;; Hardware stack levels required when called:    1
  1415 ;; This function calls:
  1416 ;;		_instCTRL
  1417 ;; This function is called by:
  1418 ;;		_main
  1419 ;; This function uses a non-reentrant model
  1420 ;;
  1421                           
  1422                           
  1423                           ;psect for function _initLCD
  1424  055E                     _initLCD:	
  1425                           
  1426                           ;main.c: 105: instCTRL(0x38);
  1427                           
  1428                           ;incstack = 0
  1429                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  1430  055E  3038               	movlw	56
  1431  055F  120A  118A  2538  120A  118A  	fcall	_instCTRL
  1432                           
  1433                           ;main.c: 106: _delay((unsigned long)((50)*(4000000/4000000.0)));
  1434  0564  3010               	movlw	16
  1435  0565  00F2               	movwf	??_initLCD
  1436  0566                     u617:	
  1437  0566  0BF2               	decfsz	??_initLCD,f
  1438  0567  2D66               	goto	u617
  1439  0568  0000               	nop
  1440                           
  1441                           ;main.c: 107: instCTRL(0x0C);
  1442  0569  300C               	movlw	12
  1443  056A  120A  118A  2538  120A  118A  	fcall	_instCTRL
  1444                           
  1445                           ;main.c: 108: instCTRL(0x01);
  1446  056F  3001               	movlw	1
  1447  0570  120A  118A  2538  120A  118A  	fcall	_instCTRL
  1448                           
  1449                           ;main.c: 109: instCTRL(0x06);
  1450  0575  3006               	movlw	6
  1451  0576  120A  118A  2538  120A  118A  	fcall	_instCTRL
  1452                           
  1453                           ;main.c: 110: instCTRL(0x0F);
  1454  057B  300F               	movlw	15
  1455  057C  120A  118A  2538   	fcall	_instCTRL
  1456  057F  0008               	return
  1457  0580                     __end_of_initLCD:	
  1458                           
  1459                           	psect	text8
  1460  0538                     __ptext8:	
  1461 ;; *************** function _instCTRL *****************
  1462 ;; Defined at:
  1463 ;;		line 83 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\dht11_module\main.c"
  1464 ;; Parameters:    Size  Location     Type
  1465 ;;  CMD             1    wreg     unsigned char 
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;  CMD             1    1[COMMON] unsigned char 
  1468 ;; Return value:  Size  Location     Type
  1469 ;;		None               void
  1470 ;; Registers used:
  1471 ;;		wreg
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1477 ;;      Params:         0       0       0       0       0
  1478 ;;      Locals:         1       0       0       0       0
  1479 ;;      Temps:          1       0       0       0       0
  1480 ;;      Totals:         2       0       0       0       0
  1481 ;;Total ram usage:        2 bytes
  1482 ;; Hardware stack levels used:    1
  1483 ;; This function calls:
  1484 ;;		Nothing
  1485 ;; This function is called by:
  1486 ;;		_main
  1487 ;;		_initLCD
  1488 ;;		_printToLCD
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492                           
  1493                           ;psect for function _instCTRL
  1494  0538                     _instCTRL:	
  1495                           
  1496                           ;incstack = 0
  1497                           ; Regs used in _instCTRL: [wreg]
  1498                           ;instCTRL@CMD stored from wreg
  1499  0538  00F1               	movwf	instCTRL@CMD
  1500                           
  1501                           ;main.c: 85: PORTD = CMD;
  1502  0539  0871               	movf	instCTRL@CMD,w
  1503  053A  1283               	bcf	3,5	;RP0=0, select bank0
  1504  053B  1303               	bcf	3,6	;RP1=0, select bank0
  1505  053C  0088               	movwf	8	;volatile
  1506                           
  1507                           ;main.c: 86: RC0 = 0;
  1508  053D  1007               	bcf	7,0	;volatile
  1509                           
  1510                           ;main.c: 87: RC1 = 0;
  1511  053E  1087               	bcf	7,1	;volatile
  1512                           
  1513                           ;main.c: 88: RC2 = 1;
  1514  053F  1507               	bsf	7,2	;volatile
  1515                           
  1516                           ;main.c: 89: _delay((unsigned long)((1)*(4000000/4000.0)));
  1517  0540  30F9               	movlw	249
  1518  0541  00F0               	movwf	??_instCTRL
  1519  0542                     u627:	
  1520  0542  0000               	nop
  1521  0543  0BF0               	decfsz	??_instCTRL,f
  1522  0544  2D42               	goto	u627
  1523  0545  2D46               	nop2	;nop
  1524  0546  0000               	nop
  1525                           
  1526                           ;main.c: 90: RC2 = 0;
  1527  0547  1283               	bcf	3,5	;RP0=0, select bank0
  1528  0548  1303               	bcf	3,6	;RP1=0, select bank0
  1529  0549  1107               	bcf	7,2	;volatile
  1530  054A  0008               	return
  1531  054B                     __end_of_instCTRL:	
  1532                           
  1533                           	psect	text9
  1534  052D                     __ptext9:	
  1535 ;; *************** function _initADC *****************
  1536 ;; Defined at:
  1537 ;;		line 64 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\dht11_module\main.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;		None
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;		None
  1542 ;; Return value:  Size  Location     Type
  1543 ;;		None               void
  1544 ;; Registers used:
  1545 ;;		wreg
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1551 ;;      Params:         0       0       0       0       0
  1552 ;;      Locals:         0       0       0       0       0
  1553 ;;      Temps:          0       0       0       0       0
  1554 ;;      Totals:         0       0       0       0       0
  1555 ;;Total ram usage:        0 bytes
  1556 ;; Hardware stack levels used:    1
  1557 ;; This function calls:
  1558 ;;		Nothing
  1559 ;; This function is called by:
  1560 ;;		_main
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           
  1565                           ;psect for function _initADC
  1566  052D                     _initADC:	
  1567                           
  1568                           ;main.c: 66: TRISA = 0xFF;
  1569                           
  1570                           ;incstack = 0
  1571                           ; Regs used in _initADC: [wreg]
  1572  052D  30FF               	movlw	255
  1573  052E  1683               	bsf	3,5	;RP0=1, select bank1
  1574  052F  1303               	bcf	3,6	;RP1=0, select bank1
  1575  0530  0085               	movwf	5	;volatile
  1576                           
  1577                           ;main.c: 67: ADCON1 = 0x80;
  1578  0531  3080               	movlw	128
  1579  0532  009F               	movwf	31	;volatile
  1580                           
  1581                           ;main.c: 68: ADCON0 = 0x01;
  1582  0533  3001               	movlw	1
  1583  0534  1283               	bcf	3,5	;RP0=0, select bank0
  1584  0535  1303               	bcf	3,6	;RP1=0, select bank0
  1585  0536  009F               	movwf	31	;volatile
  1586  0537  0008               	return
  1587  0538                     __end_of_initADC:	
  1588                           
  1589                           	psect	text10
  1590  0580                     __ptext10:	
  1591 ;; *************** function ___wmul *****************
  1592 ;; Defined at:
  1593 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;  multiplier      2    0[COMMON] unsigned int 
  1596 ;;  multiplicand    2    2[COMMON] unsigned int 
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;  product         2    4[COMMON] unsigned int 
  1599 ;; Return value:  Size  Location     Type
  1600 ;;                  2    0[COMMON] unsigned int 
  1601 ;; Registers used:
  1602 ;;		wreg, status,2, status,0
  1603 ;; Tracked objects:
  1604 ;;		On entry : 0/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1608 ;;      Params:         4       0       0       0       0
  1609 ;;      Locals:         2       0       0       0       0
  1610 ;;      Temps:          0       0       0       0       0
  1611 ;;      Totals:         6       0       0       0       0
  1612 ;;Total ram usage:        6 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; This function calls:
  1615 ;;		Nothing
  1616 ;; This function is called by:
  1617 ;;		_main
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           
  1622                           ;psect for function ___wmul
  1623  0580                     ___wmul:	
  1624                           
  1625                           ;incstack = 0
  1626                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1627  0580  01F4               	clrf	___wmul@product
  1628  0581  01F5               	clrf	___wmul@product+1
  1629  0582                     l923:	
  1630  0582  1C70               	btfss	___wmul@multiplier,0
  1631  0583  2D8A               	goto	l184
  1632  0584  0872               	movf	___wmul@multiplicand,w
  1633  0585  07F4               	addwf	___wmul@product,f
  1634  0586  1803               	skipnc
  1635  0587  0AF5               	incf	___wmul@product+1,f
  1636  0588  0873               	movf	___wmul@multiplicand+1,w
  1637  0589  07F5               	addwf	___wmul@product+1,f
  1638  058A                     l184:	
  1639  058A  3001               	movlw	1
  1640  058B                     u545:	
  1641  058B  1003               	clrc
  1642  058C  0DF2               	rlf	___wmul@multiplicand,f
  1643  058D  0DF3               	rlf	___wmul@multiplicand+1,f
  1644  058E  3EFF               	addlw	-1
  1645  058F  1D03               	skipz
  1646  0590  2D8B               	goto	u545
  1647  0591  3001               	movlw	1
  1648  0592                     u555:	
  1649  0592  1003               	clrc
  1650  0593  0CF1               	rrf	___wmul@multiplier+1,f
  1651  0594  0CF0               	rrf	___wmul@multiplier,f
  1652  0595  3EFF               	addlw	-1
  1653  0596  1D03               	skipz
  1654  0597  2D92               	goto	u555
  1655  0598  0871               	movf	___wmul@multiplier+1,w
  1656  0599  0470               	iorwf	___wmul@multiplier,w
  1657  059A  1D03               	skipz
  1658  059B  2D82               	goto	l923
  1659  059C  0875               	movf	___wmul@product+1,w
  1660  059D  01F1               	clrf	?___wmul+1
  1661  059E  07F1               	addwf	?___wmul+1,f
  1662  059F  0874               	movf	___wmul@product,w
  1663  05A0  01F0               	clrf	?___wmul
  1664  05A1  07F0               	addwf	?___wmul,f
  1665  05A2  0008               	return
  1666  05A3                     __end_of___wmul:	
  1667  007E                     btemp	set	126	;btemp
  1668  007E                     wtemp	set	126
  1669  007E                     wtemp0	set	126
  1670  0080                     wtemp1	set	128
  1671  0082                     wtemp2	set	130
  1672  0084                     wtemp3	set	132
  1673  0086                     wtemp4	set	134
  1674  0088                     wtemp5	set	136
  1675  007F                     wtemp6	set	127
  1676  007E                     ttemp	set	126
  1677  007E                     ttemp0	set	126
  1678  0081                     ttemp1	set	129
  1679  0084                     ttemp2	set	132
  1680  0087                     ttemp3	set	135
  1681  007F                     ttemp4	set	127
  1682  007E                     ltemp	set	126
  1683  007E                     ltemp0	set	126
  1684  0082                     ltemp1	set	130
  1685  0086                     ltemp2	set	134
  1686  0080                     ltemp3	set	128


Data Sizes:
    Strings     43
    Constant    10
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     45      47
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_3(CODE[17]), STR_2(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S102$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    printToLCD@str	PTR const unsigned char  size(2) Largest target is 20
		 -> main@buffer(BANK0[20]), STR_1(CODE[9]), 


Critical Paths under _main in COMMON

    _main->___lwdiv
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    _printToLCD->_dataCTRL
    _printToLCD->_instCTRL
    _initLCD->_instCTRL

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    2329
                                             21 BANK0     24    24      0
                            ___lwdiv
                             ___wmul
                            _initADC
                            _initLCD
                           _instCTRL
                         _printToLCD
                            _readADC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             15    12      3    1276
                                              6 BANK0     15    12      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     374
                                              6 COMMON     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printToLCD                                           2     0      2     248
                                              2 COMMON     2     0      2
                           _dataCTRL
                           _instCTRL
 ---------------------------------------------------------------------------------
 (2) _dataCTRL                                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      22
                                              2 COMMON     1     1      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (2) _instCTRL                                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwdiv
     ___wmul (ARG)
   ___wmul
   _initADC
   _initLCD
     _instCTRL
   _instCTRL
   _printToLCD
     _dataCTRL
     _instCTRL
   _readADC
   _sprintf
     ___lwdiv
       ___wmul (ARG)
     ___lwmod
       ___lwdiv (ARG)
         ___wmul (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2D      2F       5       58.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3D      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon May 13 13:59:58 2024

                      pc 0002              __CFG_CP$OFF 0000                       l54 05C0  
                     fsr 0004      ___wmul@multiplicand 0072                      l184 058A  
                    l803 0661                      l821 0618                      l815 05FC  
                    l817 060A                      l825 0623                      l913 07AD  
                    l905 07A9                      l923 0582                      l915 0726  
                    l917 07F5                      l791 0632                      l871 0746  
                    l943 0688                      l849 05D1                      l793 0640  
                    l891 0779                      l877 075C                      l799 0656  
                    l887 0773                      l899 079A                      _RC0 0038  
                    _RC1 0039                      _RC2 003A                      u305 0635  
                    u325 0641                      u405 0619                      u335 064D  
                    u345 0657             __CFG_CPD$OFF 0000                      u435 05AD  
                    u607 0555                      u375 05FF                      u545 058B  
                    u617 0566                      u555 0592                      u627 0542  
                    u395 0610                      u485 0790                      u577 06BB  
                    u587 0719                      u597 05BA                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000            printToLCD@str 0072  
           __CFG_LVP$OFF 0000                     STR_1 003F                     STR_2 001D  
                   STR_3 002E             __CFG_WRT$OFF 0000                     _main 0668  
                   btemp 007E            __CFG_BOREN$ON 0000             main@adcValue 004B  
                   ltemp 007E                     start 0000                     ttemp 007E  
                   wtemp 007E                    ?_main 0070            __CFG_WDTE$OFF 0000  
        __end_of___lwdiv 0668          __end_of___lwmod 062A                    _PORTC 0007  
                  _PORTD 0008                    _TRISA 0085                    _TRISC 0087  
                  _TRISD 0088          __end_of_initADC 0538          __end_of_readADC 05CB  
        __end_of_initLCD 0580          __end_of_dpowers 001D                    pclath 000A  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F          __end_of_sprintf 07FA  
        __initialization 07FA             __end_of_main 071F                   ??_main 0035  
                 _ADCON0 001F                   _ADCON1 009F                   _ADRESH 001E  
                 _ADRESL 009E         __end_of_dataCTRL 055E              instCTRL@CMD 0071  
         __CFG_PWRTE$OFF 0000                   ___wmul 0580                ??___lwdiv 007A  
              ??___lwmod 0024         __end_of_instCTRL 054B                ??_initADC 0070  
              ??_readADC 0072                ??_initLCD 0072                ??_sprintf 0029  
__end_of__initialization 07FC           __pcstackCOMMON 0070               __pbssBANK0 004D  
             __pmaintext 0668                  ?___wmul 0070                ?_dataCTRL 0070  
                _GO_DONE 00FA               __stringtab 0003                ?_instCTRL 0070  
        __size_of___wmul 0023                  ___lwdiv 062A                  ___lwmod 05F4  
                __ptext1 071F                  __ptext2 05F4                  __ptext3 062A  
                __ptext4 05A3                  __ptext5 05CB                  __ptext6 054B  
                __ptext7 055E                  __ptext8 0538                  __ptext9 052D  
                _initADC 052D               ??_dataCTRL 0070                  _readADC 05A3  
                _initLCD 055E                  _dpowers 0013                  _sprintf 071F  
   end_of_initialization 07FC               ??_instCTRL 0070               _printToLCD 05CB  
             main@buffer 0037           __end_of___wmul 05A3      start_initialization 07FA  
               ??___wmul 0074              ?_printToLCD 0072                ___latbits 0002  
          __pcstackBANK0 0020        __size_of_dataCTRL 0013      __end_of__stringdata 0048  
            sprintf@_val 002F              sprintf@flag 002D              sprintf@prec 002E  
      __size_of_instCTRL 0013         ___lwdiv@dividend 0078                 ?___lwdiv 0076  
               ?___lwmod 0020                __pstrings 0003                 ?_initADC 0070  
               ?_readADC 0070                 ?_initLCD 0070         ___lwdiv@quotient 007B  
               ?_sprintf 0026           ___wmul@product 0074      __size_of_printToLCD 0029  
            dataCTRL@DAT 0071              __stringbase 0012              __stringdata 001D  
      ___wmul@multiplier 0070         __size_of___lwdiv 003E         __size_of___lwmod 0036  
               _adcValue 004D           readADC@channel 0074       __end_of__stringtab 0013  
               _dataCTRL 054B         __size_of_initADC 000B         __size_of_readADC 0028  
       __size_of_initLCD 0022          ___lwdiv@divisor 0076          ___lwdiv@counter 007D  
               __ptext10 0580         __size_of_sprintf 00DB                 _instCTRL 0538  
          __size_of_main 00B7             ??_printToLCD 0074                sprintf@ap 002C  
              sprintf@sp 0033         ___lwmod@dividend 0022       __end_of_printToLCD 05F4  
              stringcode 000D                 sprintf@c 0034                 sprintf@f 0026  
        ___lwmod@divisor 0020          ___lwmod@counter 0025                 stringdir 000D  
               stringtab 0003  
