

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri May 10 23:23:50 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  010F                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115                           
   116                           	psect	idataCOMMON
   117  16B3                     __pidataCOMMON:	
   118                           
   119                           ;initializer for _lastMode
   120  16B3  34FF               	retlw	255
   121                           
   122                           ;initializer for _savedMinutesEnd
   123  16B4  341E               	retlw	30
   124                           
   125                           	psect	idataBANK0
   126  16B5                     __pidataBANK0:	
   127                           
   128                           ;initializer for _hours
   129  16B5  3408               	retlw	8
   130                           
   131                           ;initializer for _savedHoursEnd
   132  16B6  340A               	retlw	10
   133                           
   134                           ;initializer for _savedHoursStart
   135  16B7  3409               	retlw	9
   136                           
   137                           ;initializer for setHours@lastKeyState
   138  16B8  34FF               	retlw	255
   139                           
   140                           ;initializer for setMinutes@lastKeyState
   141  16B9  34FF               	retlw	255
   142                           
   143                           	psect	strings
   144  0800                     __pstrings:	
   145  0800                     stringtab:	
   146  0800                     __stringtab:	
   147                           
   148                           ;	String table - string pointers are 1 byte each
   149  0800  1BFF               	btfsc	btemp+1,7
   150  0801  280A               	ljmp	stringcode
   151  0802  1383               	bcf	3,7
   152  0803  187F               	btfsc	btemp+1,0
   153  0804  1783               	bsf	3,7
   154  0805  0800               	movf	0,w
   155  0806  0A84               	incf	4,f
   156  0807  1903               	skipnz
   157  0808  0AFF               	incf	btemp+1,f
   158  0809  0008               	return
   159  080A                     stringcode:	
   160  080A                     stringdir:	
   161  080A  3008               	movlw	high stringdir
   162  080B  008A               	movwf	10
   163  080C  0804               	movf	4,w
   164  080D  0A84               	incf	4,f
   165  080E  0782               	addwf	2,f
   166  080F                     __stringbase:	
   167  080F  3400               	retlw	0
   168  0810                     __end_of__stringtab:	
   169  0810                     _dpowers:	
   170  0810  3401               	retlw	1
   171  0811  3400               	retlw	0
   172  0812  340A               	retlw	10
   173  0813  3400               	retlw	0
   174  0814  3464               	retlw	100
   175  0815  3400               	retlw	0
   176  0816  34E8               	retlw	232
   177  0817  3403               	retlw	3
   178  0818  3410               	retlw	16
   179  0819  3427               	retlw	39
   180  081A                     __end_of_dpowers:	
   181  001F                     _ADCON0	set	31
   182  001E                     _ADRESH	set	30
   183  0005                     _PORTA	set	5
   184  0006                     _PORTB	set	6
   185  0007                     _PORTC	set	7
   186  0008                     _PORTD	set	8
   187  005F                     _GIE	set	95
   188  00FA                     _GO_DONE	set	250
   189  005C                     _INTE	set	92
   190  0059                     _INTF	set	89
   191  0031                     _RB1	set	49
   192  0038                     _RC0	set	56
   193  0039                     _RC1	set	57
   194  003A                     _RC2	set	58
   195  003B                     _RC3	set	59
   196  003C                     _RC4	set	60
   197  009F                     _ADCON1	set	159
   198  009E                     _ADRESL	set	158
   199  0085                     _TRISA	set	133
   200  0086                     _TRISB	set	134
   201  0087                     _TRISC	set	135
   202  0088                     _TRISD	set	136
   203  040E                     _INTEDG	set	1038
   204  081A                     __stringdata:	
   205  081A                     STR_10:	
   206  081A  344D               	retlw	77	;'M'
   207  081B  344F               	retlw	79	;'O'
   208  081C  3444               	retlw	68	;'D'
   209  081D  3445               	retlw	69	;'E'
   210  081E  343A               	retlw	58	;':'
   211  081F  3420               	retlw	32	;' '
   212  0820  3453               	retlw	83	;'S'
   213  0821  3445               	retlw	69	;'E'
   214  0822  3454               	retlw	84	;'T'
   215  0823  3420               	retlw	32	;' '
   216  0824  3441               	retlw	65	;'A'
   217  0825  3443               	retlw	67	;'C'
   218  0826  3454               	retlw	84	;'T'
   219  0827  3456               	retlw	86	;'V'
   220  0828  3420               	retlw	32	;' '
   221  0829  3448               	retlw	72	;'H'
   222  082A  3452               	retlw	82	;'R'
   223  082B  3453               	retlw	83	;'S'
   224  082C  3400               	retlw	0
   225  082D                     STR_5:	
   226  082D  3441               	retlw	65	;'A'
   227  082E  3469               	retlw	105	;'i'
   228  082F  3472               	retlw	114	;'r'
   229  0830  3420               	retlw	32	;' '
   230  0831  3450               	retlw	80	;'P'
   231  0832  3475               	retlw	117	;'u'
   232  0833  3472               	retlw	114	;'r'
   233  0834  3469               	retlw	105	;'i'
   234  0835  3466               	retlw	102	;'f'
   235  0836  3469               	retlw	105	;'i'
   236  0837  3465               	retlw	101	;'e'
   237  0838  3472               	retlw	114	;'r'
   238  0839  3420               	retlw	32	;' '
   239  083A  344F               	retlw	79	;'O'
   240  083B  344E               	retlw	78	;'N'
   241  083C  3420               	retlw	32	;' '
   242  083D  3400               	retlw	0
   243  083E                     STR_4:	
   244  083E  3441               	retlw	65	;'A'
   245  083F  3469               	retlw	105	;'i'
   246  0840  3472               	retlw	114	;'r'
   247  0841  3420               	retlw	32	;' '
   248  0842  3450               	retlw	80	;'P'
   249  0843  3475               	retlw	117	;'u'
   250  0844  3472               	retlw	114	;'r'
   251  0845  3469               	retlw	105	;'i'
   252  0846  3466               	retlw	102	;'f'
   253  0847  3469               	retlw	105	;'i'
   254  0848  3465               	retlw	101	;'e'
   255  0849  3472               	retlw	114	;'r'
   256  084A  3420               	retlw	32	;' '
   257  084B  344F               	retlw	79	;'O'
   258  084C  3446               	retlw	70	;'F'
   259  084D  3446               	retlw	70	;'F'
   260  084E  3400               	retlw	0
   261  084F                     STR_13:	
   262  084F  3454               	retlw	84	;'T'
   263  0850  3469               	retlw	105	;'i'
   264  0851  346D               	retlw	109	;'m'
   265  0852  3465               	retlw	101	;'e'
   266  0853  343A               	retlw	58	;':'
   267  0854  3420               	retlw	32	;' '
   268  0855  3425               	retlw	37	;'%'
   269  0856  3430               	retlw	48	;'0'
   270  0857  3432               	retlw	50	;'2'
   271  0858  3464               	retlw	100	;'d'
   272  0859  343A               	retlw	58	;':'
   273  085A  3425               	retlw	37	;'%'
   274  085B  3430               	retlw	48	;'0'
   275  085C  3432               	retlw	50	;'2'
   276  085D  3464               	retlw	100	;'d'
   277  085E  3400               	retlw	0
   278  085F                     STR_8:	
   279  085F  3444               	retlw	68	;'D'
   280  0860  3449               	retlw	73	;'I'
   281  0861  3453               	retlw	83	;'S'
   282  0862  3450               	retlw	80	;'P'
   283  0863  3420               	retlw	32	;' '
   284  0864  3443               	retlw	67	;'C'
   285  0865  344D               	retlw	77	;'M'
   286  0866  344D               	retlw	77	;'M'
   287  0867  344F               	retlw	79	;'O'
   288  0868  344E               	retlw	78	;'N'
   289  0869  3420               	retlw	32	;' '
   290  086A  3450               	retlw	80	;'P'
   291  086B  3447               	retlw	71	;'G'
   292  086C  3431               	retlw	49	;'1'
   293  086D  3400               	retlw	0
   294  086E                     STR_9:	
   295  086E  3444               	retlw	68	;'D'
   296  086F  3449               	retlw	73	;'I'
   297  0870  3453               	retlw	83	;'S'
   298  0871  3450               	retlw	80	;'P'
   299  0872  3420               	retlw	32	;' '
   300  0873  3443               	retlw	67	;'C'
   301  0874  344D               	retlw	77	;'M'
   302  0875  344D               	retlw	77	;'M'
   303  0876  344F               	retlw	79	;'O'
   304  0877  344E               	retlw	78	;'N'
   305  0878  3420               	retlw	32	;' '
   306  0879  3450               	retlw	80	;'P'
   307  087A  3447               	retlw	71	;'G'
   308  087B  3432               	retlw	50	;'2'
   309  087C  3400               	retlw	0
   310  087D                     STR_12:	
   311  087D  3453               	retlw	83	;'S'
   312  087E  3445               	retlw	69	;'E'
   313  087F  3454               	retlw	84	;'T'
   314  0880  3420               	retlw	32	;' '
   315  0881  344D               	retlw	77	;'M'
   316  0882  3449               	retlw	73	;'I'
   317  0883  344E               	retlw	78	;'N'
   318  0884  3455               	retlw	85	;'U'
   319  0885  3454               	retlw	84	;'T'
   320  0886  3445               	retlw	69	;'E'
   321  0887  3453               	retlw	83	;'S'
   322  0888  3400               	retlw	0
   323  0889                     STR_11:	
   324  0889  3453               	retlw	83	;'S'
   325  088A  3445               	retlw	69	;'E'
   326  088B  3454               	retlw	84	;'T'
   327  088C  3420               	retlw	32	;' '
   328  088D  3448               	retlw	72	;'H'
   329  088E  344F               	retlw	79	;'O'
   330  088F  3455               	retlw	85	;'U'
   331  0890  3452               	retlw	82	;'R'
   332  0891  3453               	retlw	83	;'S'
   333  0892  3400               	retlw	0
   334  0893                     STR_15:	
   335  0893  3444               	retlw	68	;'D'
   336  0894  3445               	retlw	69	;'E'
   337  0895  3443               	retlw	67	;'C'
   338  0896  343A               	retlw	58	;':'
   339  0897  3420               	retlw	32	;' '
   340  0898  3425               	retlw	37	;'%'
   341  0899  3430               	retlw	48	;'0'
   342  089A  3432               	retlw	50	;'2'
   343  089B  3464               	retlw	100	;'d'
   344  089C  3400               	retlw	0
   345  089D                     STR_14:	
   346  089D  3449               	retlw	73	;'I'
   347  089E  344E               	retlw	78	;'N'
   348  089F  3443               	retlw	67	;'C'
   349  08A0  343A               	retlw	58	;':'
   350  08A1  3420               	retlw	32	;' '
   351  08A2  3425               	retlw	37	;'%'
   352  08A3  3430               	retlw	48	;'0'
   353  08A4  3432               	retlw	50	;'2'
   354  08A5  3464               	retlw	100	;'d'
   355  08A6  3400               	retlw	0
   356  08A7                     STR_16:	
   357  08A7  3453               	retlw	83	;'S'
   358  08A8  3445               	retlw	69	;'E'
   359  08A9  3454               	retlw	84	;'T'
   360  08AA  343A               	retlw	58	;':'
   361  08AB  3420               	retlw	32	;' '
   362  08AC  3425               	retlw	37	;'%'
   363  08AD  3430               	retlw	48	;'0'
   364  08AE  3432               	retlw	50	;'2'
   365  08AF  3464               	retlw	100	;'d'
   366  08B0  3400               	retlw	0
   367  08B1                     STR_3:	
   368  08B1  3425               	retlw	37	;'%'
   369  08B2  3464               	retlw	100	;'d'
   370  08B3  3420               	retlw	32	;' '
   371  08B4  3470               	retlw	112	;'p'
   372  08B5  3470               	retlw	112	;'p'
   373  08B6  346D               	retlw	109	;'m'
   374  08B7  3420               	retlw	32	;' '
   375  08B8  3420               	retlw	32	;' '
   376  08B9  3400               	retlw	0
   377  08BA                     STR_7:	
   378  08BA  344D               	retlw	77	;'M'
   379  08BB  344F               	retlw	79	;'O'
   380  08BC  3444               	retlw	68	;'D'
   381  08BD  3445               	retlw	69	;'E'
   382  08BE  343A               	retlw	58	;':'
   383  08BF  3420               	retlw	32	;' '
   384  08C0  3400               	retlw	0
   385  08C1                     STR_1:	
   386  08C1  3443               	retlw	67	;'C'
   387  08C2  344F               	retlw	79	;'O'
   388  08C3  3432               	retlw	50	;'2'
   389  08C4  343A               	retlw	58	;':'
   390  08C5  3420               	retlw	32	;' '
   391  08C6  3400               	retlw	0
   392  08C7                     STR_6:	
   393  08C7  3454               	retlw	84	;'T'
   394  08C8  3445               	retlw	69	;'E'
   395  08C9  3453               	retlw	83	;'S'
   396  08CA  3454               	retlw	84	;'T'
   397  08CB  3400               	retlw	0
   398  08CC                     STR_2:	
   399  08CC  3425               	retlw	37	;'%'
   400  08CD  3464               	retlw	100	;'d'
   401  08CE  3400               	retlw	0
   402  08CF                     __end_of__stringdata:	
   403                           
   404                           ; #config settings
   405  0000                     
   406                           	psect	cinit
   407  0015                     start_initialization:	
   408  0015                     __initialization:	
   409                           
   410                           ; Clear objects allocated to COMMON
   411  0015  01F7               	clrf	__pbssCOMMON& (0+127)
   412  0016  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   413                           
   414                           ; Clear objects allocated to BANK0
   415  0017  01E4               	clrf	__pbssBANK0& (0+127)
   416  0018  01E5               	clrf	(__pbssBANK0+1)& (0+127)
   417  0019  01E6               	clrf	(__pbssBANK0+2)& (0+127)
   418  001A  01E7               	clrf	(__pbssBANK0+3)& (0+127)
   419  001B  01E8               	clrf	(__pbssBANK0+4)& (0+127)
   420  001C  01E9               	clrf	(__pbssBANK0+5)& (0+127)
   421  001D  01EA               	clrf	(__pbssBANK0+6)& (0+127)
   422                           
   423                           ; Clear objects allocated to BANK1
   424  001E  1383               	bcf	3,7	;select IRP bank0
   425  001F  30D7               	movlw	low __pbssBANK1
   426  0020  0084               	movwf	4
   427  0021  30ED               	movlw	low (__pbssBANK1+22)
   428  0022  160A  118A  26C1  120A  118A  	fcall	clear_ram0
   429                           
   430                           ; Initialize objects allocated to BANK0
   431  0027  160A  118A  26B5  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   432  002C  00EB               	movwf	__pdataBANK0& (0+127)
   433  002D  160A  118A  26B6  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   434  0032  00EC               	movwf	(__pdataBANK0+1)& (0+127)
   435  0033  160A  118A  26B7  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   436  0038  00ED               	movwf	(__pdataBANK0+2)& (0+127)
   437  0039  160A  118A  26B8  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   438  003E  00EE               	movwf	(__pdataBANK0+3)& (0+127)
   439  003F  160A  118A  26B9  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   440  0044  00EF               	movwf	(__pdataBANK0+4)& (0+127)
   441                           
   442                           ; Initialize objects allocated to COMMON
   443  0045  160A  118A  26B3  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   444  004A  00F9               	movwf	__pdataCOMMON& (0+127)
   445  004B  160A  118A  26B4   	fcall	__pidataCOMMON+1	;fetch initializer
   446  004E  00FA               	movwf	(__pdataCOMMON+1)& (0+127)
   447  004F                     end_of_initialization:	
   448                           ;End of C runtime variable initialization code
   449                           
   450  004F                     __end_of__initialization:	
   451  004F  0183               	clrf	3
   452  0050  120A  158A  2B18   	ljmp	_main	;jump to C main() function
   453                           
   454                           	psect	bssCOMMON
   455  0077                     __pbssCOMMON:	
   456  0077                     checkSelect@lastRB1State:	
   457  0077                     	ds	2
   458                           
   459                           	psect	dataCOMMON
   460  0079                     __pdataCOMMON:	
   461  0079                     _lastMode:	
   462  0079                     	ds	1
   463  007A                     _savedMinutesEnd:	
   464  007A                     	ds	1
   465                           
   466                           	psect	bssBANK0
   467  0064                     __pbssBANK0:	
   468  0064                     _PPM:	
   469  0064                     	ds	3
   470  0067                     _minutes:	
   471  0067                     	ds	1
   472  0068                     _mode:	
   473  0068                     	ds	1
   474  0069                     _savedMinutesStart:	
   475  0069                     	ds	1
   476  006A                     _select:	
   477  006A                     	ds	1
   478                           
   479                           	psect	dataBANK0
   480  006B                     __pdataBANK0:	
   481  006B                     _hours:	
   482  006B                     	ds	1
   483  006C                     _savedHoursEnd:	
   484  006C                     	ds	1
   485  006D                     _savedHoursStart:	
   486  006D                     	ds	1
   487  006E                     setHours@lastKeyState:	
   488  006E                     	ds	1
   489  006F                     setMinutes@lastKeyState:	
   490  006F                     	ds	1
   491                           
   492                           	psect	bssBANK1
   493  00D7                     __pbssBANK1:	
   494  00D7                     _ppmHandler:	
   495  00D7                     	ds	2
   496  00D9                     setHours@debugInfo:	
   497  00D9                     	ds	10
   498  00E3                     setMinutes@debugInfo:	
   499  00E3                     	ds	10
   500                           
   501                           	psect	clrtext
   502  16C1                     clear_ram0:	
   503                           ;	Called with FSR containing the base address, and
   504                           ;	W with the last address+1
   505                           
   506  16C1  0064               	clrwdt	;clear the watchdog before getting into this loop
   507  16C2                     clrloop0:	
   508  16C2  0180               	clrf	0	;clear RAM location pointed to by FSR
   509  16C3  0A84               	incf	4,f	;increment pointer
   510  16C4  0604               	xorwf	4,w	;XOR with final address
   511  16C5  1903               	btfsc	3,2	;have we reached the end yet?
   512  16C6  3400               	retlw	0	;all done for this memory range, return
   513  16C7  0604               	xorwf	4,w	;XOR again to restore value
   514  16C8  2EC2               	goto	clrloop0	;do the next byte
   515                           
   516                           	psect	cstackBANK1
   517  00A0                     __pcstackBANK1:	
   518  00A0                     CalcMQ135@voltage:	
   519  00A0                     displayPPM@strBuffer:	
   520                           ; 3 bytes @ 0x0
   521                           
   522                           
   523                           ; 50 bytes @ 0x0
   524  00A0                     	ds	3
   525  00A3                     CalcMQ135@ratio6:	
   526                           
   527                           ; 3 bytes @ 0x3
   528  00A3                     	ds	3
   529  00A6                     _CalcMQ135$628:	
   530                           
   531                           ; 3 bytes @ 0x6
   532  00A6                     	ds	3
   533  00A9                     _CalcMQ135$629:	
   534                           
   535                           ; 3 bytes @ 0x9
   536  00A9                     	ds	3
   537  00AC                     _CalcMQ135$630:	
   538                           
   539                           ; 3 bytes @ 0xC
   540  00AC                     	ds	3
   541  00AF                     _CalcMQ135$631:	
   542                           
   543                           ; 3 bytes @ 0xF
   544  00AF                     	ds	3
   545  00B2                     _CalcMQ135$632:	
   546                           
   547                           ; 3 bytes @ 0x12
   548  00B2                     	ds	3
   549  00B5                     CalcMQ135@ratio2:	
   550                           
   551                           ; 3 bytes @ 0x15
   552  00B5                     	ds	3
   553  00B8                     CalcMQ135@ratio3:	
   554                           
   555                           ; 3 bytes @ 0x18
   556  00B8                     	ds	3
   557  00BB                     CalcMQ135@ratio4:	
   558                           
   559                           ; 3 bytes @ 0x1B
   560  00BB                     	ds	3
   561  00BE                     CalcMQ135@ratio5:	
   562                           
   563                           ; 3 bytes @ 0x1E
   564  00BE                     	ds	3
   565  00C1                     CalcMQ135@co2:	
   566                           
   567                           ; 3 bytes @ 0x21
   568  00C1                     	ds	3
   569  00C4                     CalcMQ135@ratio:	
   570                           
   571                           ; 3 bytes @ 0x24
   572  00C4                     	ds	14
   573  00D2                     displayPPM@ppmWhole:	
   574                           
   575                           ; 2 bytes @ 0x32
   576  00D2                     	ds	2
   577  00D4                     displayPPM@ppmFraction:	
   578                           
   579                           ; 2 bytes @ 0x34
   580  00D4                     	ds	2
   581  00D6                     displayPPM@bufPtr:	
   582                           
   583                           ; 1 bytes @ 0x36
   584  00D6                     	ds	1
   585                           
   586                           	psect	cstackCOMMON
   587  0070                     __pcstackCOMMON:	
   588  0070                     ?_setPortDirections:	
   589  0070                     ?_initADC:	
   590                           ; 0 bytes @ 0x0
   591                           
   592  0070                     ?_initInterrupt:	
   593                           ; 0 bytes @ 0x0
   594                           
   595  0070                     ?_startUpLCD:	
   596                           ; 0 bytes @ 0x0
   597                           
   598  0070                     ?_runClock:	
   599                           ; 0 bytes @ 0x0
   600                           
   601  0070                     ?_checkSelect:	
   602                           ; 0 bytes @ 0x0
   603                           
   604  0070                     ?_checkMode:	
   605                           ; 0 bytes @ 0x0
   606                           
   607  0070                     ?_updateState:	
   608                           ; 0 bytes @ 0x0
   609                           
   610  0070                     ?_displayTime:	
   611                           ; 0 bytes @ 0x0
   612                           
   613  0070                     ?_setHours:	
   614                           ; 0 bytes @ 0x0
   615                           
   616  0070                     ?_setMinutes:	
   617                           ; 0 bytes @ 0x0
   618                           
   619  0070                     ?_isdigit:	
   620                           ; 0 bytes @ 0x0
   621                           
   622  0070                     ?_instCTRL:	
   623                           ; 1 bit 
   624                           
   625  0070                     ?_dataCTRL:	
   626                           ; 0 bytes @ 0x0
   627                           
   628  0070                     ?_initLCD:	
   629                           ; 0 bytes @ 0x0
   630                           
   631  0070                     ?_main:	
   632                           ; 0 bytes @ 0x0
   633                           
   634  0070                     ?_ISR:	
   635                           ; 0 bytes @ 0x0
   636                           
   637  0070                     ?i1_instCTRL:	
   638                           ; 0 bytes @ 0x0
   639                           
   640  0070                     ??i1_instCTRL:	
   641                           ; 0 bytes @ 0x0
   642                           
   643                           
   644                           ; 0 bytes @ 0x0
   645  0070                     	ds	1
   646  0071                     i1instCTRL@CMD:	
   647                           
   648                           ; 1 bytes @ 0x1
   649  0071                     	ds	1
   650  0072                     ??_ISR:	
   651                           
   652                           ; 0 bytes @ 0x2
   653  0072                     	ds	5
   654                           
   655                           	psect	cstackBANK0
   656  0020                     __pcstackBANK0:	
   657  0020                     ??_setPortDirections:	
   658  0020                     ??_initADC:	
   659                           ; 0 bytes @ 0x0
   660                           
   661  0020                     ??_initInterrupt:	
   662                           ; 0 bytes @ 0x0
   663                           
   664  0020                     ??_runClock:	
   665                           ; 0 bytes @ 0x0
   666                           
   667  0020                     ??_isdigit:	
   668                           ; 0 bytes @ 0x0
   669                           
   670  0020                     ??_instCTRL:	
   671                           ; 0 bytes @ 0x0
   672                           
   673  0020                     ??_dataCTRL:	
   674                           ; 0 bytes @ 0x0
   675                           
   676  0020                     ?___ftge:	
   677                           ; 0 bytes @ 0x0
   678                           
   679  0020                     ?_Read_ADC_MQ135:	
   680                           ; 1 bit 
   681                           
   682  0020                     ?___wmul:	
   683                           ; 2 bytes @ 0x0
   684                           
   685  0020                     ?___awmod:	
   686                           ; 2 bytes @ 0x0
   687                           
   688  0020                     ?___lwdiv:	
   689                           ; 2 bytes @ 0x0
   690                           
   691  0020                     ?___ftpack:	
   692                           ; 2 bytes @ 0x0
   693                           
   694  0020                     _isdigit$411:	
   695                           ; 3 bytes @ 0x0
   696                           
   697  0020                     ___wmul@multiplier:	
   698                           ; 1 bytes @ 0x0
   699                           
   700  0020                     ___awmod@divisor:	
   701                           ; 2 bytes @ 0x0
   702                           
   703  0020                     ___lwdiv@divisor:	
   704                           ; 2 bytes @ 0x0
   705                           
   706  0020                     ___ftpack@arg:	
   707                           ; 2 bytes @ 0x0
   708                           
   709  0020                     ___ftge@ff1:	
   710                           ; 3 bytes @ 0x0
   711                           
   712                           
   713                           ; 3 bytes @ 0x0
   714  0020                     	ds	1
   715  0021                     instCTRL@CMD:	
   716  0021                     dataCTRL@DAT:	
   717                           ; 1 bytes @ 0x1
   718                           
   719  0021                     isdigit@c:	
   720                           ; 1 bytes @ 0x1
   721                           
   722                           
   723                           ; 1 bytes @ 0x1
   724  0021                     	ds	1
   725  0022                     ??_checkSelect:	
   726  0022                     ??_checkMode:	
   727                           ; 0 bytes @ 0x2
   728                           
   729  0022                     ??_initLCD:	
   730                           ; 0 bytes @ 0x2
   731                           
   732  0022                     ?_printToLCD:	
   733                           ; 0 bytes @ 0x2
   734                           
   735  0022                     ??_Read_ADC_MQ135:	
   736                           ; 0 bytes @ 0x2
   737                           
   738  0022                     printToLCD@str:	
   739                           ; 0 bytes @ 0x2
   740                           
   741  0022                     ___wmul@multiplicand:	
   742                           ; 2 bytes @ 0x2
   743                           
   744  0022                     ___awmod@dividend:	
   745                           ; 2 bytes @ 0x2
   746                           
   747  0022                     ___lwdiv@dividend:	
   748                           ; 2 bytes @ 0x2
   749                           
   750                           
   751                           ; 2 bytes @ 0x2
   752  0022                     	ds	1
   753  0023                     ___ftpack@exp:	
   754  0023                     ___ftge@ff2:	
   755                           ; 1 bytes @ 0x3
   756                           
   757                           
   758                           ; 3 bytes @ 0x3
   759  0023                     	ds	1
   760  0024                     ??_startUpLCD:	
   761  0024                     ??_printToLCD:	
   762                           ; 0 bytes @ 0x4
   763                           
   764  0024                     ??___wmul:	
   765                           ; 0 bytes @ 0x4
   766                           
   767  0024                     ??___awmod:	
   768                           ; 0 bytes @ 0x4
   769                           
   770  0024                     ??___lwdiv:	
   771                           ; 0 bytes @ 0x4
   772                           
   773  0024                     ___ftpack@sign:	
   774                           ; 0 bytes @ 0x4
   775                           
   776  0024                     checkSelect@currentRB1State:	
   777                           ; 1 bytes @ 0x4
   778                           
   779  0024                     ___wmul@product:	
   780                           ; 2 bytes @ 0x4
   781                           
   782                           
   783                           ; 2 bytes @ 0x4
   784  0024                     	ds	1
   785  0025                     ??___ftpack:	
   786  0025                     ___awmod@counter:	
   787                           ; 0 bytes @ 0x5
   788                           
   789  0025                     ___lwdiv@quotient:	
   790                           ; 1 bytes @ 0x5
   791                           
   792                           
   793                           ; 2 bytes @ 0x5
   794  0025                     	ds	1
   795  0026                     ??___ftge:	
   796  0026                     ___awmod@sign:	
   797                           ; 0 bytes @ 0x6
   798                           
   799                           
   800                           ; 1 bytes @ 0x6
   801  0026                     	ds	1
   802  0027                     ___lwdiv@counter:	
   803                           
   804                           ; 1 bytes @ 0x7
   805  0027                     	ds	1
   806  0028                     ?___lwmod:	
   807  0028                     ?___awtoft:	
   808                           ; 2 bytes @ 0x8
   809                           
   810  0028                     ___awtoft@c:	
   811                           ; 3 bytes @ 0x8
   812                           
   813  0028                     ___lwmod@divisor:	
   814                           ; 2 bytes @ 0x8
   815                           
   816                           
   817                           ; 2 bytes @ 0x8
   818  0028                     	ds	2
   819  002A                     ___lwmod@dividend:	
   820                           
   821                           ; 2 bytes @ 0xA
   822  002A                     	ds	1
   823  002B                     ??___awtoft:	
   824                           
   825                           ; 0 bytes @ 0xB
   826  002B                     	ds	1
   827  002C                     ??___lwmod:	
   828  002C                     ?_handlePPM:	
   829                           ; 0 bytes @ 0xC
   830                           
   831                           
   832                           ; 2 bytes @ 0xC
   833  002C                     	ds	1
   834  002D                     ___awtoft@sign:	
   835  002D                     ___lwmod@counter:	
   836                           ; 1 bytes @ 0xD
   837                           
   838                           
   839                           ; 1 bytes @ 0xD
   840  002D                     	ds	1
   841  002E                     ??_handlePPM:	
   842  002E                     ?_sprintf:	
   843                           ; 0 bytes @ 0xE
   844                           
   845  002E                     ?___ftneg:	
   846                           ; 2 bytes @ 0xE
   847                           
   848  002E                     sprintf@f:	
   849                           ; 3 bytes @ 0xE
   850                           
   851  002E                     ___ftneg@f1:	
   852                           ; 1 bytes @ 0xE
   853                           
   854                           
   855                           ; 3 bytes @ 0xE
   856  002E                     	ds	3
   857  0031                     ??___ftneg:	
   858  0031                     ?___ftadd:	
   859                           ; 0 bytes @ 0x11
   860                           
   861  0031                     ___ftadd@f1:	
   862                           ; 3 bytes @ 0x11
   863                           
   864                           
   865                           ; 3 bytes @ 0x11
   866  0031                     	ds	2
   867  0033                     ??_sprintf:	
   868                           
   869                           ; 0 bytes @ 0x13
   870  0033                     	ds	1
   871  0034                     ___ftadd@f2:	
   872                           
   873                           ; 3 bytes @ 0x14
   874  0034                     	ds	2
   875  0036                     sprintf@ap:	
   876                           
   877                           ; 1 bytes @ 0x16
   878  0036                     	ds	1
   879  0037                     ??___ftadd:	
   880  0037                     sprintf@prec:	
   881                           ; 0 bytes @ 0x17
   882                           
   883                           
   884                           ; 1 bytes @ 0x17
   885  0037                     	ds	1
   886  0038                     sprintf@ccnt:	
   887                           
   888                           ; 2 bytes @ 0x18
   889  0038                     	ds	2
   890  003A                     sprintf@_val:	
   891                           
   892                           ; 4 bytes @ 0x1A
   893  003A                     	ds	1
   894  003B                     ___ftadd@sign:	
   895                           
   896                           ; 1 bytes @ 0x1B
   897  003B                     	ds	1
   898  003C                     ___ftadd@exp2:	
   899                           
   900                           ; 1 bytes @ 0x1C
   901  003C                     	ds	1
   902  003D                     ___ftadd@exp1:	
   903                           
   904                           ; 1 bytes @ 0x1D
   905  003D                     	ds	1
   906  003E                     ?___ftmul:	
   907  003E                     sprintf@flag:	
   908                           ; 3 bytes @ 0x1E
   909                           
   910  003E                     ___ftmul@f1:	
   911                           ; 1 bytes @ 0x1E
   912                           
   913                           
   914                           ; 3 bytes @ 0x1E
   915  003E                     	ds	1
   916  003F                     sprintf@width:	
   917                           
   918                           ; 2 bytes @ 0x1F
   919  003F                     	ds	2
   920  0041                     sprintf@c:	
   921  0041                     ___ftmul@f2:	
   922                           ; 1 bytes @ 0x21
   923                           
   924                           
   925                           ; 3 bytes @ 0x21
   926  0041                     	ds	1
   927  0042                     sprintf@sp:	
   928                           
   929                           ; 1 bytes @ 0x22
   930  0042                     	ds	1
   931  0043                     ??_displayTime:	
   932  0043                     ??_setHours:	
   933                           ; 0 bytes @ 0x23
   934                           
   935  0043                     ??_setMinutes:	
   936                           ; 0 bytes @ 0x23
   937                           
   938                           
   939                           ; 0 bytes @ 0x23
   940  0043                     	ds	1
   941  0044                     ??___ftmul:	
   942                           
   943                           ; 0 bytes @ 0x24
   944  0044                     	ds	2
   945  0046                     setHours@keyValid:	
   946  0046                     setMinutes@keyValid:	
   947                           ; 1 bytes @ 0x26
   948                           
   949                           
   950                           ; 1 bytes @ 0x26
   951  0046                     	ds	1
   952  0047                     setHours@key:	
   953  0047                     setMinutes@key:	
   954                           ; 1 bytes @ 0x27
   955                           
   956                           
   957                           ; 1 bytes @ 0x27
   958  0047                     	ds	1
   959  0048                     ___ftmul@exp:	
   960  0048                     displayTime@timeFormat:	
   961                           ; 1 bytes @ 0x28
   962                           
   963                           
   964                           ; 10 bytes @ 0x28
   965  0048                     	ds	1
   966  0049                     ___ftmul@f3_as_product:	
   967                           
   968                           ; 3 bytes @ 0x29
   969  0049                     	ds	3
   970  004C                     ___ftmul@cntr:	
   971                           
   972                           ; 1 bytes @ 0x2C
   973  004C                     	ds	1
   974  004D                     ___ftmul@sign:	
   975                           
   976                           ; 1 bytes @ 0x2D
   977  004D                     	ds	1
   978  004E                     ?___ftdiv:	
   979  004E                     ?___fttol:	
   980                           ; 3 bytes @ 0x2E
   981                           
   982  004E                     ___ftdiv@f2:	
   983                           ; 4 bytes @ 0x2E
   984                           
   985  004E                     ___fttol@f1:	
   986                           ; 3 bytes @ 0x2E
   987                           
   988                           
   989                           ; 3 bytes @ 0x2E
   990  004E                     	ds	3
   991  0051                     ___ftdiv@f1:	
   992                           
   993                           ; 3 bytes @ 0x31
   994  0051                     	ds	1
   995  0052                     ??___fttol:	
   996                           
   997                           ; 0 bytes @ 0x32
   998  0052                     	ds	2
   999  0054                     ??___ftdiv:	
  1000                           
  1001                           ; 0 bytes @ 0x34
  1002  0054                     	ds	2
  1003  0056                     ___fttol@sign1:	
  1004                           
  1005                           ; 1 bytes @ 0x36
  1006  0056                     	ds	1
  1007  0057                     ___fttol@lval:	
  1008                           
  1009                           ; 4 bytes @ 0x37
  1010  0057                     	ds	1
  1011  0058                     ___ftdiv@cntr:	
  1012                           
  1013                           ; 1 bytes @ 0x38
  1014  0058                     	ds	1
  1015  0059                     ___ftdiv@f3:	
  1016                           
  1017                           ; 3 bytes @ 0x39
  1018  0059                     	ds	2
  1019  005B                     ___fttol@exp1:	
  1020                           
  1021                           ; 1 bytes @ 0x3B
  1022  005B                     	ds	1
  1023  005C                     ?_displayPPM:	
  1024  005C                     ___ftdiv@exp:	
  1025                           ; 0 bytes @ 0x3C
  1026                           
  1027  005C                     displayPPM@ppmHandler:	
  1028                           ; 1 bytes @ 0x3C
  1029                           
  1030                           
  1031                           ; 2 bytes @ 0x3C
  1032  005C                     	ds	1
  1033  005D                     ___ftdiv@sign:	
  1034                           
  1035                           ; 1 bytes @ 0x3D
  1036  005D                     	ds	1
  1037  005E                     ??_displayPPM:	
  1038  005E                     ?_CalcMQ135:	
  1039                           ; 0 bytes @ 0x3E
  1040                           
  1041  005E                     CalcMQ135@RAW_ADC:	
  1042                           ; 3 bytes @ 0x3E
  1043                           
  1044                           
  1045                           ; 2 bytes @ 0x3E
  1046  005E                     	ds	2
  1047  0060                     ??_updateState:	
  1048                           
  1049                           ; 0 bytes @ 0x40
  1050  0060                     	ds	1
  1051  0061                     ??_CalcMQ135:	
  1052  0061                     ??_main:	
  1053                           ; 0 bytes @ 0x41
  1054                           
  1055                           
  1056                           ; 0 bytes @ 0x41
  1057  0061                     	ds	3
  1058                           
  1059                           	psect	maintext
  1060  0B18                     __pmaintext:	
  1061 ;;
  1062 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1063 ;;
  1064 ;; *************** function _main *****************
  1065 ;; Defined at:
  1066 ;;		line 37 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  1067 ;; Parameters:    Size  Location     Type
  1068 ;;		None
  1069 ;; Auto vars:     Size  Location     Type
  1070 ;;		None
  1071 ;; Return value:  Size  Location     Type
  1072 ;;		None               void
  1073 ;; Registers used:
  1074 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1075 ;; Tracked objects:
  1076 ;;		On entry : 17F/0
  1077 ;;		On exit  : 0/0
  1078 ;;		Unchanged: 0/0
  1079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1080 ;;      Params:         0       0       0       0       0
  1081 ;;      Locals:         0       0       0       0       0
  1082 ;;      Temps:          0       3       0       0       0
  1083 ;;      Totals:         0       3       0       0       0
  1084 ;;Total ram usage:        3 bytes
  1085 ;; Hardware stack levels required when called:    6
  1086 ;; This function calls:
  1087 ;;		_CalcMQ135
  1088 ;;		_Read_ADC_MQ135
  1089 ;;		_checkMode
  1090 ;;		_checkSelect
  1091 ;;		_handlePPM
  1092 ;;		_initADC
  1093 ;;		_initInterrupt
  1094 ;;		_runClock
  1095 ;;		_setPortDirections
  1096 ;;		_startUpLCD
  1097 ;;		_updateState
  1098 ;; This function is called by:
  1099 ;;		Startup code after reset
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           
  1104                           ;psect for function _main
  1105  0B18                     _main:	
  1106                           
  1107                           ;main.c: 39: setPortDirections();
  1108                           
  1109                           ;incstack = 0
  1110                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1111  0B18  160A  118A  26D2  120A  158A  	fcall	_setPortDirections
  1112                           
  1113                           ;main.c: 40: initADC();
  1114  0B1D  160A  118A  26C9  120A  158A  	fcall	_initADC
  1115                           
  1116                           ;main.c: 41: initInterrupt();
  1117  0B22  160A  118A  26BA  120A  158A  	fcall	_initInterrupt
  1118                           
  1119                           ;main.c: 42: startUpLCD();
  1120  0B27  160A  118A  272A  120A  158A  	fcall	_startUpLCD
  1121                           
  1122                           ;main.c: 43: _delay((unsigned long)((250)*(4000000/4000.0)));
  1123  0B2C  3002               	movlw	2
  1124  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  1125  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  1126  0B2F  00E3               	movwf	??_main+2
  1127  0B30  3045               	movlw	69
  1128  0B31  00E2               	movwf	??_main+1
  1129  0B32  30A9               	movlw	169
  1130  0B33  00E1               	movwf	??_main
  1131  0B34                     u3527:	
  1132  0B34  0BE1               	decfsz	??_main,f
  1133  0B35  2B34               	goto	u3527
  1134  0B36  0BE2               	decfsz	??_main+1,f
  1135  0B37  2B34               	goto	u3527
  1136  0B38  0BE3               	decfsz	??_main+2,f
  1137  0B39  2B34               	goto	u3527
  1138  0B3A  2B3B               	nop2
  1139  0B3B  2B41               	goto	l2852
  1140  0B3C                     l2866:	
  1141  0B3C  086B               	movf	_hours,w	;volatile
  1142  0B3D  026C               	subwf	_savedHoursEnd,w	;volatile
  1143  0B3E  1C03               	skipc
  1144  0B3F  2B88               	goto	l135
  1145                           
  1146                           ;main.c: 53: {
  1147                           ;main.c: 54: RC4 = 1;
  1148  0B40  1607               	bsf	7,4	;volatile
  1149  0B41                     l2852:	
  1150                           ;main.c: 44: while (1)
  1151                           
  1152                           ;main.c: 55: }
  1153                           
  1154                           
  1155                           ;main.c: 45: {
  1156                           ;main.c: 46: runClock();
  1157  0B41  160A  118A  275A  120A  158A  	fcall	_runClock
  1158                           
  1159                           ;main.c: 47: PPM = CalcMQ135(Read_ADC_MQ135());
  1160  0B46  160A  118A  273F  120A  158A  	fcall	_Read_ADC_MQ135
  1161  0B4B  1283               	bcf	3,5	;RP0=0, select bank0
  1162  0B4C  1303               	bcf	3,6	;RP1=0, select bank0
  1163  0B4D  0821               	movf	?_Read_ADC_MQ135+1,w
  1164  0B4E  01DF               	clrf	CalcMQ135@RAW_ADC+1
  1165  0B4F  07DF               	addwf	CalcMQ135@RAW_ADC+1,f
  1166  0B50  0820               	movf	?_Read_ADC_MQ135,w
  1167  0B51  01DE               	clrf	CalcMQ135@RAW_ADC
  1168  0B52  07DE               	addwf	CalcMQ135@RAW_ADC,f
  1169  0B53  120A  118A  2053  120A  158A  	fcall	_CalcMQ135
  1170  0B58  1283               	bcf	3,5	;RP0=0, select bank0
  1171  0B59  1303               	bcf	3,6	;RP1=0, select bank0
  1172  0B5A  085E               	movf	?_CalcMQ135,w
  1173  0B5B  00E4               	movwf	_PPM	;volatile
  1174  0B5C  085F               	movf	?_CalcMQ135+1,w
  1175  0B5D  00E5               	movwf	_PPM+1	;volatile
  1176  0B5E  0860               	movf	?_CalcMQ135+2,w
  1177  0B5F  00E6               	movwf	_PPM+2	;volatile
  1178                           
  1179                           ;main.c: 48: ppmHandler = handlePPM();
  1180  0B60  160A  118A  2795  120A  158A  	fcall	_handlePPM
  1181  0B65  1283               	bcf	3,5	;RP0=0, select bank0
  1182  0B66  1303               	bcf	3,6	;RP1=0, select bank0
  1183  0B67  082D               	movf	?_handlePPM+1,w
  1184  0B68  1683               	bsf	3,5	;RP0=1, select bank1
  1185  0B69  1303               	bcf	3,6	;RP1=0, select bank1
  1186  0B6A  01D8               	clrf	(_ppmHandler+1)^(0+128)
  1187  0B6B  07D8               	addwf	(_ppmHandler+1)^(0+128),f
  1188  0B6C  1283               	bcf	3,5	;RP0=0, select bank0
  1189  0B6D  1303               	bcf	3,6	;RP1=0, select bank0
  1190  0B6E  082C               	movf	?_handlePPM,w
  1191  0B6F  1683               	bsf	3,5	;RP0=1, select bank1
  1192  0B70  1303               	bcf	3,6	;RP1=0, select bank1
  1193  0B71  01D7               	clrf	_ppmHandler^(0+128)
  1194  0B72  07D7               	addwf	_ppmHandler^(0+128),f
  1195                           
  1196                           ;main.c: 49: checkSelect();
  1197  0B73  120A  158A  2137  120A  158A  	fcall	_checkSelect
  1198                           
  1199                           ;main.c: 50: checkMode();
  1200  0B78  120A  158A  20CF  120A  158A  	fcall	_checkMode
  1201                           
  1202                           ;main.c: 51: updateState();
  1203  0B7D  120A  158A  24BE  120A  158A  	fcall	_updateState
  1204                           
  1205                           ;main.c: 52: if (hours >= savedHoursStart && hours <= savedHoursEnd)
  1206  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  1207  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  1208  0B84  086D               	movf	_savedHoursStart,w	;volatile
  1209  0B85  026B               	subwf	_hours,w	;volatile
  1210  0B86  1803               	btfsc	3,0
  1211  0B87  2B3C               	goto	l2866
  1212  0B88                     l135:	
  1213                           
  1214                           ;main.c: 56: else
  1215                           ;main.c: 57: {
  1216                           ;main.c: 58: RC4 = 0;
  1217  0B88  1207               	bcf	7,4	;volatile
  1218  0B89  2B41               	goto	l2852
  1219  0B8A                     __end_of_main:	
  1220                           
  1221                           	psect	text1
  1222  0CBE                     __ptext1:	
  1223 ;; *************** function _updateState *****************
  1224 ;; Defined at:
  1225 ;;		line 110 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;		None
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;  buffer         10    0        unsigned char [10]
  1230 ;; Return value:  Size  Location     Type
  1231 ;;		None               void
  1232 ;; Registers used:
  1233 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1239 ;;      Params:         0       0       0       0       0
  1240 ;;      Locals:         0       0       0       0       0
  1241 ;;      Temps:          0       0       0       0       0
  1242 ;;      Totals:         0       0       0       0       0
  1243 ;;Total ram usage:        0 bytes
  1244 ;; Hardware stack levels used:    1
  1245 ;; Hardware stack levels required when called:    5
  1246 ;; This function calls:
  1247 ;;		_displayPPM
  1248 ;;		_displayTime
  1249 ;;		_instCTRL
  1250 ;;		_printToLCD
  1251 ;;		_setHours
  1252 ;;		_setMinutes
  1253 ;; This function is called by:
  1254 ;;		_main
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           
  1259                           ;psect for function _updateState
  1260  0CBE                     _updateState:	
  1261                           
  1262                           ;main.c: 112: char buffer[10];
  1263                           ;main.c: 113: switch (mode)
  1264                           
  1265                           ;incstack = 0
  1266                           ; Regs used in _updateState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1267  0CBE  2D67               	goto	l2842
  1268  0CBF                     l2800:	
  1269                           ;main.c: 114: {
  1270                           ;main.c: 115: case DISP_CMN:
  1271                           
  1272                           
  1273                           ;main.c: 116: instCTRL(0x80);
  1274  0CBF  3080               	movlw	128
  1275  0CC0  160A  118A  2704  120A  158A  	fcall	_instCTRL
  1276                           
  1277                           ;main.c: 117: printToLCD("MODE: ");
  1278  0CC5  30AB               	movlw	low (STR_7-__stringbase)
  1279  0CC6  1283               	bcf	3,5	;RP0=0, select bank0
  1280  0CC7  1303               	bcf	3,6	;RP1=0, select bank0
  1281  0CC8  00A2               	movwf	printToLCD@str
  1282  0CC9  3080               	movlw	128
  1283  0CCA  00A3               	movwf	printToLCD@str+1
  1284  0CCB  120A  158A  215F  120A  158A  	fcall	_printToLCD
  1285                           
  1286                           ;main.c: 118: switch (select)
  1287  0CD0  2D09               	goto	l2818
  1288  0CD1                     l2804:	
  1289                           ;main.c: 119: {
  1290                           ;main.c: 120: case 0:
  1291                           
  1292                           
  1293                           ;main.c: 121: printToLCD("DISP CMMON PG1");
  1294  0CD1  3050               	movlw	low (STR_8-__stringbase)
  1295  0CD2  1283               	bcf	3,5	;RP0=0, select bank0
  1296  0CD3  1303               	bcf	3,6	;RP1=0, select bank0
  1297  0CD4  00A2               	movwf	printToLCD@str
  1298  0CD5  3080               	movlw	128
  1299  0CD6  00A3               	movwf	printToLCD@str+1
  1300  0CD7  120A  158A  215F  120A  158A  	fcall	_printToLCD
  1301                           
  1302                           ;main.c: 122: instCTRL(0xC0);
  1303  0CDC  30C0               	movlw	192
  1304  0CDD  160A  118A  2704  120A  158A  	fcall	_instCTRL
  1305                           
  1306                           ;main.c: 123: displayPPM(ppmHandler);
  1307  0CE2  1683               	bsf	3,5	;RP0=1, select bank1
  1308  0CE3  1303               	bcf	3,6	;RP1=0, select bank1
  1309  0CE4  0858               	movf	(_ppmHandler+1)^(0+128),w
  1310  0CE5  1283               	bcf	3,5	;RP0=0, select bank0
  1311  0CE6  1303               	bcf	3,6	;RP1=0, select bank0
  1312  0CE7  01DD               	clrf	displayPPM@ppmHandler+1
  1313  0CE8  07DD               	addwf	displayPPM@ppmHandler+1,f
  1314  0CE9  1683               	bsf	3,5	;RP0=1, select bank1
  1315  0CEA  1303               	bcf	3,6	;RP1=0, select bank1
  1316  0CEB  0857               	movf	_ppmHandler^(0+128),w
  1317  0CEC  1283               	bcf	3,5	;RP0=0, select bank0
  1318  0CED  1303               	bcf	3,6	;RP1=0, select bank0
  1319  0CEE  01DC               	clrf	displayPPM@ppmHandler
  1320  0CEF  07DC               	addwf	displayPPM@ppmHandler,f
  1321  0CF0  120A  118A  25DD   	fcall	_displayPPM
  1322                           
  1323                           ;main.c: 125: break;
  1324  0CF3  0008               	return
  1325  0CF4                     l2810:	
  1326                           ;main.c: 126: case 1:
  1327                           
  1328                           
  1329                           ;main.c: 127: printToLCD("DISP CMMON PG2");
  1330  0CF4  305F               	movlw	low (STR_9-__stringbase)
  1331  0CF5  1283               	bcf	3,5	;RP0=0, select bank0
  1332  0CF6  1303               	bcf	3,6	;RP1=0, select bank0
  1333  0CF7  00A2               	movwf	printToLCD@str
  1334  0CF8  3080               	movlw	128
  1335  0CF9  00A3               	movwf	printToLCD@str+1
  1336  0CFA  120A  158A  215F  120A  158A  	fcall	_printToLCD
  1337                           
  1338                           ;main.c: 128: instCTRL(0xC0);
  1339  0CFF  30C0               	movlw	192
  1340  0D00  160A  118A  2704  120A  158A  	fcall	_instCTRL
  1341                           
  1342                           ;main.c: 129: displayTime();
  1343  0D05  160A  118A  27DC   	fcall	_displayTime
  1344                           
  1345                           ;main.c: 131: }
  1346                           
  1347                           ;main.c: 130: break;
  1348  0D08  0008               	return
  1349  0D09                     l2818:	
  1350  0D09  1283               	bcf	3,5	;RP0=0, select bank0
  1351  0D0A  1303               	bcf	3,6	;RP1=0, select bank0
  1352  0D0B  086A               	movf	_select,w	;volatile
  1353                           
  1354                           ; Switch size 1, requested type "space"
  1355                           ; Number of cases is 2, Range of values is 0 to 1
  1356                           ; switch strategies available:
  1357                           ; Name         Instructions Cycles
  1358                           ; simple_byte            7     4 (average)
  1359                           ; direct_byte           14     8 (fixed)
  1360                           ; jumptable            260     6 (fixed)
  1361                           ;	Chosen strategy is simple_byte
  1362  0D0C  3A00               	xorlw	0	; case 0
  1363  0D0D  1903               	skipnz
  1364  0D0E  2CD1               	goto	l2804
  1365  0D0F  3A01               	xorlw	1	; case 1
  1366  0D10  1903               	skipnz
  1367  0D11  2CF4               	goto	l2810
  1368  0D12  2D71               	goto	l171
  1369                           
  1370                           ;main.c: 132: break;
  1371  0D13  0008               	return
  1372  0D14                     l2820:	
  1373                           ;main.c: 133: case SET_ACTV:
  1374                           
  1375                           
  1376                           ;main.c: 134: instCTRL(0x80);
  1377  0D14  3080               	movlw	128
  1378  0D15  160A  118A  2704  120A  158A  	fcall	_instCTRL
  1379                           
  1380                           ;main.c: 135: printToLCD("MODE: SET ACTV HRS");
  1381  0D1A  300B               	movlw	low (STR_10-__stringbase)
  1382  0D1B  1283               	bcf	3,5	;RP0=0, select bank0
  1383  0D1C  1303               	bcf	3,6	;RP1=0, select bank0
  1384  0D1D  00A2               	movwf	printToLCD@str
  1385  0D1E  3080               	movlw	128
  1386  0D1F  00A3               	movwf	printToLCD@str+1
  1387  0D20  120A  158A  215F  120A  158A  	fcall	_printToLCD
  1388                           
  1389                           ;main.c: 136: switch (select)
  1390  0D25  2D5C               	goto	l2838
  1391  0D26                     l2824:	
  1392                           ;main.c: 137: {
  1393                           ;main.c: 138: case 0:
  1394                           
  1395                           
  1396                           ;main.c: 139: instCTRL(0xC0);
  1397  0D26  30C0               	movlw	192
  1398  0D27  160A  118A  2704  120A  158A  	fcall	_instCTRL
  1399                           
  1400                           ;main.c: 140: printToLCD("SET HOURS");
  1401  0D2C  307A               	movlw	low (STR_11-__stringbase)
  1402  0D2D  1283               	bcf	3,5	;RP0=0, select bank0
  1403  0D2E  1303               	bcf	3,6	;RP1=0, select bank0
  1404  0D2F  00A2               	movwf	printToLCD@str
  1405  0D30  3080               	movlw	128
  1406  0D31  00A3               	movwf	printToLCD@str+1
  1407  0D32  120A  158A  215F  120A  158A  	fcall	_printToLCD
  1408                           
  1409                           ;main.c: 141: instCTRL(0x94);
  1410  0D37  3094               	movlw	148
  1411  0D38  160A  118A  2704  120A  158A  	fcall	_instCTRL
  1412                           
  1413                           ;main.c: 142: setHours();
  1414  0D3D  120A  158A  262A   	fcall	_setHours
  1415                           
  1416                           ;main.c: 143: break;
  1417  0D40  0008               	return
  1418  0D41                     l2830:	
  1419                           ;main.c: 144: case 1:
  1420                           
  1421                           
  1422                           ;main.c: 145: instCTRL(0xC0);
  1423  0D41  30C0               	movlw	192
  1424  0D42  160A  118A  2704  120A  158A  	fcall	_instCTRL
  1425                           
  1426                           ;main.c: 146: printToLCD("SET MINUTES");
  1427  0D47  306E               	movlw	low (STR_12-__stringbase)
  1428  0D48  1283               	bcf	3,5	;RP0=0, select bank0
  1429  0D49  1303               	bcf	3,6	;RP1=0, select bank0
  1430  0D4A  00A2               	movwf	printToLCD@str
  1431  0D4B  3080               	movlw	128
  1432  0D4C  00A3               	movwf	printToLCD@str+1
  1433  0D4D  120A  158A  215F  120A  158A  	fcall	_printToLCD
  1434                           
  1435                           ;main.c: 147: instCTRL(0x94);
  1436  0D52  3094               	movlw	148
  1437  0D53  160A  118A  2704  120A  158A  	fcall	_instCTRL
  1438                           
  1439                           ;main.c: 148: setMinutes();
  1440  0D58  120A  158A  2418   	fcall	_setMinutes
  1441                           
  1442                           ;main.c: 150: }
  1443                           
  1444                           ;main.c: 149: break;
  1445  0D5B  0008               	return
  1446  0D5C                     l2838:	
  1447  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  1448  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  1449  0D5E  086A               	movf	_select,w	;volatile
  1450                           
  1451                           ; Switch size 1, requested type "space"
  1452                           ; Number of cases is 2, Range of values is 0 to 1
  1453                           ; switch strategies available:
  1454                           ; Name         Instructions Cycles
  1455                           ; simple_byte            7     4 (average)
  1456                           ; direct_byte           14     8 (fixed)
  1457                           ; jumptable            260     6 (fixed)
  1458                           ;	Chosen strategy is simple_byte
  1459  0D5F  3A00               	xorlw	0	; case 0
  1460  0D60  1903               	skipnz
  1461  0D61  2D26               	goto	l2824
  1462  0D62  3A01               	xorlw	1	; case 1
  1463  0D63  1903               	skipnz
  1464  0D64  2D41               	goto	l2830
  1465  0D65  2D71               	goto	l171
  1466                           
  1467                           ;main.c: 154: }
  1468                           
  1469                           ;main.c: 153: break;
  1470                           
  1471                           ;main.c: 152: default:
  1472                           
  1473                           ;main.c: 151: break;
  1474  0D66  0008               	return
  1475  0D67                     l2842:	
  1476  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  1477  0D68  1303               	bcf	3,6	;RP1=0, select bank0
  1478  0D69  0868               	movf	_mode,w
  1479                           
  1480                           ; Switch size 1, requested type "space"
  1481                           ; Number of cases is 2, Range of values is 0 to 1
  1482                           ; switch strategies available:
  1483                           ; Name         Instructions Cycles
  1484                           ; simple_byte            7     4 (average)
  1485                           ; direct_byte           14     8 (fixed)
  1486                           ; jumptable            260     6 (fixed)
  1487                           ;	Chosen strategy is simple_byte
  1488  0D6A  3A00               	xorlw	0	; case 0
  1489  0D6B  1903               	skipnz
  1490  0D6C  2CBF               	goto	l2800
  1491  0D6D  3A01               	xorlw	1	; case 1
  1492  0D6E  1903               	skipnz
  1493  0D6F  2D14               	goto	l2820
  1494  0D70  2D71               	goto	l171
  1495  0D71                     l171:	
  1496  0D71  0008               	return
  1497  0D72                     __end_of_updateState:	
  1498                           
  1499                           	psect	text2
  1500  0C18                     __ptext2:	
  1501 ;; *************** function _setMinutes *****************
  1502 ;; Defined at:
  1503 ;;		line 245 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;		None
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;  key             1   39[BANK0 ] unsigned char 
  1508 ;;  keyValid        1   38[BANK0 ] unsigned char 
  1509 ;; Return value:  Size  Location     Type
  1510 ;;		None               void
  1511 ;; Registers used:
  1512 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1518 ;;      Params:         0       0       0       0       0
  1519 ;;      Locals:         0       2       0       0       0
  1520 ;;      Temps:          0       3       0       0       0
  1521 ;;      Totals:         0       5       0       0       0
  1522 ;;Total ram usage:        5 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; Hardware stack levels required when called:    4
  1525 ;; This function calls:
  1526 ;;		___awmod
  1527 ;;		_printToLCD
  1528 ;;		_sprintf
  1529 ;; This function is called by:
  1530 ;;		_updateState
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           
  1535                           ;psect for function _setMinutes
  1536  0C18                     _setMinutes:	
  1537                           
  1538                           ;main.c: 247: static char debugInfo[10];
  1539                           ;main.c: 248: static unsigned char lastKeyState = 0xFF;
  1540                           ;main.c: 250: unsigned char keyValid = (PORTB & 0x08) >> 3;
  1541                           
  1542                           ;incstack = 0
  1543                           ; Regs used in _setMinutes: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1544  0C18  1283               	bcf	3,5	;RP0=0, select bank0
  1545  0C19  1303               	bcf	3,6	;RP1=0, select bank0
  1546  0C1A  0806               	movf	6,w	;volatile
  1547  0C1B  00C3               	movwf	??_setMinutes
  1548  0C1C  3003               	movlw	3
  1549  0C1D                     u3405:	
  1550  0C1D  1003               	clrc
  1551  0C1E  0CC3               	rrf	??_setMinutes,f
  1552  0C1F  3EFF               	addlw	-1
  1553  0C20  1D03               	skipz
  1554  0C21  2C1D               	goto	u3405
  1555  0C22  0843               	movf	??_setMinutes,w
  1556  0C23  3901               	andlw	1
  1557  0C24  00C4               	movwf	??_setMinutes+1
  1558  0C25  0844               	movf	??_setMinutes+1,w
  1559  0C26  00C6               	movwf	setMinutes@keyValid
  1560                           
  1561                           ;main.c: 251: unsigned char key = (PORTB & 0xF0) >> 4;
  1562  0C27  0806               	movf	6,w	;volatile
  1563  0C28  00C3               	movwf	??_setMinutes
  1564  0C29  3004               	movlw	4
  1565  0C2A                     u3415:	
  1566  0C2A  1003               	clrc
  1567  0C2B  0CC3               	rrf	??_setMinutes,f
  1568  0C2C  3EFF               	addlw	-1
  1569  0C2D  1D03               	skipz
  1570  0C2E  2C2A               	goto	u3415
  1571  0C2F  0843               	movf	??_setMinutes,w
  1572  0C30  390F               	andlw	15
  1573  0C31  00C4               	movwf	??_setMinutes+1
  1574  0C32  0844               	movf	??_setMinutes+1,w
  1575  0C33  00C7               	movwf	setMinutes@key
  1576                           
  1577                           ;main.c: 253: _delay((unsigned long)((50)*(4000000/4000.0)));
  1578  0C34  3041               	movlw	65
  1579  0C35  00C4               	movwf	??_setMinutes+1
  1580  0C36  30EE               	movlw	238
  1581  0C37  00C3               	movwf	??_setMinutes
  1582  0C38                     u3537:	
  1583  0C38  0BC3               	decfsz	??_setMinutes,f
  1584  0C39  2C38               	goto	u3537
  1585  0C3A  0BC4               	decfsz	??_setMinutes+1,f
  1586  0C3B  2C38               	goto	u3537
  1587  0C3C  0000               	nop
  1588                           
  1589                           ;main.c: 255: if (keyValid && key != lastKeyState)
  1590  0C3D  1283               	bcf	3,5	;RP0=0, select bank0
  1591  0C3E  1303               	bcf	3,6	;RP1=0, select bank0
  1592  0C3F  0846               	movf	setMinutes@keyValid,w
  1593  0C40  1903               	btfsc	3,2
  1594  0C41  2CB6               	goto	l2752
  1595  0C42  0847               	movf	setMinutes@key,w
  1596  0C43  066F               	xorwf	setMinutes@lastKeyState,w
  1597  0C44  1903               	skipnz
  1598  0C45  2CB6               	goto	l2752
  1599                           
  1600                           ;main.c: 256: {
  1601                           ;main.c: 257: if (key == 0b00001100)
  1602  0C46  0847               	movf	setMinutes@key,w
  1603  0C47  3A0C               	xorlw	12
  1604  0C48  1D03               	skipz
  1605  0C49  2C62               	goto	l2736
  1606                           
  1607                           ;main.c: 258: {
  1608                           ;main.c: 259: savedMinutesStart = (savedMinutesStart + 5) % 60;
  1609  0C4A  303C               	movlw	60
  1610  0C4B  00A0               	movwf	___awmod@divisor
  1611  0C4C  3000               	movlw	0
  1612  0C4D  00A1               	movwf	___awmod@divisor+1
  1613  0C4E  0869               	movf	_savedMinutesStart,w	;volatile
  1614  0C4F  3E05               	addlw	5
  1615  0C50  00A2               	movwf	___awmod@dividend
  1616  0C51  3000               	movlw	0
  1617  0C52  1803               	skipnc
  1618  0C53  3001               	movlw	1
  1619  0C54  00A3               	movwf	___awmod@dividend+1
  1620  0C55  120A  158A  2200  120A  158A  	fcall	___awmod
  1621  0C5A  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0C5B  1303               	bcf	3,6	;RP1=0, select bank0
  1623  0C5C  0820               	movf	?___awmod,w
  1624  0C5D  00C3               	movwf	??_setMinutes
  1625  0C5E  0843               	movf	??_setMinutes,w
  1626  0C5F  00E9               	movwf	_savedMinutesStart	;volatile
  1627                           
  1628                           ;main.c: 260: sprintf(debugInfo, "INC: %02d", savedMinutesStart);
  1629  0C60  308E               	movlw	(STR_14-__stringbase)& (0+255)
  1630  0C61  2C87               	goto	L1
  1631  0C62                     l2736:	
  1632                           ;main.c: 261: }
  1633                           
  1634                           
  1635                           ;main.c: 262: else if (key == 0b00001110)
  1636  0C62  1283               	bcf	3,5	;RP0=0, select bank0
  1637  0C63  1303               	bcf	3,6	;RP1=0, select bank0
  1638  0C64  0847               	movf	setMinutes@key,w
  1639  0C65  3A0E               	xorlw	14
  1640  0C66  1D03               	skipz
  1641  0C67  2C80               	goto	l2742
  1642                           
  1643                           ;main.c: 263: {
  1644                           ;main.c: 264: savedMinutesStart = (savedMinutesStart - 5 + 60) % 60;
  1645  0C68  303C               	movlw	60
  1646  0C69  00A0               	movwf	___awmod@divisor
  1647  0C6A  3000               	movlw	0
  1648  0C6B  00A1               	movwf	___awmod@divisor+1
  1649  0C6C  0869               	movf	_savedMinutesStart,w	;volatile
  1650  0C6D  3E37               	addlw	55
  1651  0C6E  00A2               	movwf	___awmod@dividend
  1652  0C6F  3000               	movlw	0
  1653  0C70  1803               	skipnc
  1654  0C71  3001               	movlw	1
  1655  0C72  00A3               	movwf	___awmod@dividend+1
  1656  0C73  120A  158A  2200  120A  158A  	fcall	___awmod
  1657  0C78  1283               	bcf	3,5	;RP0=0, select bank0
  1658  0C79  1303               	bcf	3,6	;RP1=0, select bank0
  1659  0C7A  0820               	movf	?___awmod,w
  1660  0C7B  00C3               	movwf	??_setMinutes
  1661  0C7C  0843               	movf	??_setMinutes,w
  1662  0C7D  00E9               	movwf	_savedMinutesStart	;volatile
  1663                           
  1664                           ;main.c: 265: sprintf(debugInfo, "DEC: %02d", savedMinutesStart);
  1665  0C7E  3084               	movlw	(STR_15-__stringbase)& (0+255)
  1666  0C7F  2C87               	goto	L1
  1667  0C80                     l2742:	
  1668                           ;main.c: 266: }
  1669                           
  1670                           
  1671                           ;main.c: 267: else if (key == 0b00001101)
  1672  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  1673  0C81  1303               	bcf	3,6	;RP1=0, select bank0
  1674  0C82  0847               	movf	setMinutes@key,w
  1675  0C83  3A0D               	xorlw	13
  1676  0C84  1D03               	skipz
  1677  0C85  2C97               	goto	l216
  1678                           
  1679                           ;main.c: 268: {
  1680                           ;main.c: 269: sprintf(debugInfo, "SET: %02d", savedMinutesStart);
  1681  0C86  3098               	movlw	(STR_16-__stringbase)& (0+255)
  1682  0C87                     L1:	
  1683  0C87  00C3               	movwf	??_setMinutes
  1684  0C88  0843               	movf	??_setMinutes,w
  1685  0C89  00AE               	movwf	sprintf@f
  1686  0C8A  0869               	movf	_savedMinutesStart,w	;volatile
  1687  0C8B  00C4               	movwf	??_setMinutes+1
  1688  0C8C  01C5               	clrf	??_setMinutes+2
  1689  0C8D  0844               	movf	??_setMinutes+1,w
  1690  0C8E  00AF               	movwf	?_sprintf+1
  1691  0C8F  0845               	movf	??_setMinutes+2,w
  1692  0C90  00B0               	movwf	?_sprintf+2
  1693  0C91  30E3               	movlw	setMinutes@debugInfo& (0+255)
  1694  0C92  120A  118A  23FA  120A  158A  	fcall	_sprintf
  1695  0C97                     l216:	
  1696                           
  1697                           ;main.c: 270: }
  1698                           ;main.c: 272: printToLCD(debugInfo);
  1699  0C97  30E3               	movlw	setMinutes@debugInfo& (0+255)
  1700  0C98  1283               	bcf	3,5	;RP0=0, select bank0
  1701  0C99  1303               	bcf	3,6	;RP1=0, select bank0
  1702  0C9A  00A2               	movwf	printToLCD@str
  1703  0C9B  3000               	movlw	0
  1704  0C9C  00A3               	movwf	printToLCD@str+1
  1705  0C9D  120A  158A  215F  120A  158A  	fcall	_printToLCD
  1706                           
  1707                           ;main.c: 273: lastKeyState = key;
  1708  0CA2  1283               	bcf	3,5	;RP0=0, select bank0
  1709  0CA3  1303               	bcf	3,6	;RP1=0, select bank0
  1710  0CA4  0847               	movf	setMinutes@key,w
  1711  0CA5  00C3               	movwf	??_setMinutes
  1712  0CA6  0843               	movf	??_setMinutes,w
  1713  0CA7  00EF               	movwf	setMinutes@lastKeyState
  1714  0CA8                     l2750:	
  1715                           ;main.c: 275: while ((PORTB & 0x08) != 0)
  1716                           
  1717  0CA8  1283               	bcf	3,5	;RP0=0, select bank0
  1718  0CA9  1303               	bcf	3,6	;RP1=0, select bank0
  1719  0CAA  1D86               	btfss	6,3	;volatile
  1720  0CAB  0008               	return
  1721                           
  1722                           ;main.c: 276: {
  1723                           ;main.c: 277: _delay((unsigned long)((10)*(4000000/4000.0)));
  1724  0CAC  300D               	movlw	13
  1725  0CAD  00C4               	movwf	??_setMinutes+1
  1726  0CAE  30FB               	movlw	251
  1727  0CAF  00C3               	movwf	??_setMinutes
  1728  0CB0                     u3547:	
  1729  0CB0  0BC3               	decfsz	??_setMinutes,f
  1730  0CB1  2CB0               	goto	u3547
  1731  0CB2  0BC4               	decfsz	??_setMinutes+1,f
  1732  0CB3  2CB0               	goto	u3547
  1733  0CB4  2CB5               	nop2
  1734  0CB5  2CA8               	goto	l2750
  1735  0CB6                     l2752:	
  1736                           ;main.c: 278: }
  1737                           ;main.c: 279: }
  1738                           
  1739                           
  1740                           ;main.c: 280: else if (!keyValid)
  1741  0CB6  08C6               	movf	setMinutes@keyValid,f
  1742  0CB7  1D03               	skipz
  1743  0CB8  0008               	return
  1744                           
  1745                           ;main.c: 281: {
  1746                           ;main.c: 282: lastKeyState = 0xFF;
  1747  0CB9  30FF               	movlw	255
  1748  0CBA  00C3               	movwf	??_setMinutes
  1749  0CBB  0843               	movf	??_setMinutes,w
  1750  0CBC  00EF               	movwf	setMinutes@lastKeyState
  1751  0CBD  0008               	return
  1752  0CBE                     __end_of_setMinutes:	
  1753                           
  1754                           	psect	text3
  1755  0E2A                     __ptext3:	
  1756 ;; *************** function _setHours *****************
  1757 ;; Defined at:
  1758 ;;		line 203 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;		None
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;  key             1   39[BANK0 ] unsigned char 
  1763 ;;  keyValid        1   38[BANK0 ] unsigned char 
  1764 ;; Return value:  Size  Location     Type
  1765 ;;		None               void
  1766 ;; Registers used:
  1767 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1773 ;;      Params:         0       0       0       0       0
  1774 ;;      Locals:         0       2       0       0       0
  1775 ;;      Temps:          0       3       0       0       0
  1776 ;;      Totals:         0       5       0       0       0
  1777 ;;Total ram usage:        5 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    4
  1780 ;; This function calls:
  1781 ;;		___awmod
  1782 ;;		_printToLCD
  1783 ;;		_sprintf
  1784 ;; This function is called by:
  1785 ;;		_updateState
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789                           
  1790                           ;psect for function _setHours
  1791  0E2A                     _setHours:	
  1792                           
  1793                           ;main.c: 205: static char debugInfo[10];
  1794                           ;main.c: 206: static unsigned char lastKeyState = 0xFF;
  1795                           ;main.c: 208: unsigned char keyValid = (PORTB & 0x08) >> 3;
  1796                           
  1797                           ;incstack = 0
  1798                           ; Regs used in _setHours: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1799  0E2A  1283               	bcf	3,5	;RP0=0, select bank0
  1800  0E2B  1303               	bcf	3,6	;RP1=0, select bank0
  1801  0E2C  0806               	movf	6,w	;volatile
  1802  0E2D  00C3               	movwf	??_setHours
  1803  0E2E  3003               	movlw	3
  1804  0E2F                     u3315:	
  1805  0E2F  1003               	clrc
  1806  0E30  0CC3               	rrf	??_setHours,f
  1807  0E31  3EFF               	addlw	-1
  1808  0E32  1D03               	skipz
  1809  0E33  2E2F               	goto	u3315
  1810  0E34  0843               	movf	??_setHours,w
  1811  0E35  3901               	andlw	1
  1812  0E36  00C4               	movwf	??_setHours+1
  1813  0E37  0844               	movf	??_setHours+1,w
  1814  0E38  00C6               	movwf	setHours@keyValid
  1815                           
  1816                           ;main.c: 209: unsigned char key = (PORTB & 0xF0) >> 4;
  1817  0E39  0806               	movf	6,w	;volatile
  1818  0E3A  00C3               	movwf	??_setHours
  1819  0E3B  3004               	movlw	4
  1820  0E3C                     u3325:	
  1821  0E3C  1003               	clrc
  1822  0E3D  0CC3               	rrf	??_setHours,f
  1823  0E3E  3EFF               	addlw	-1
  1824  0E3F  1D03               	skipz
  1825  0E40  2E3C               	goto	u3325
  1826  0E41  0843               	movf	??_setHours,w
  1827  0E42  390F               	andlw	15
  1828  0E43  00C4               	movwf	??_setHours+1
  1829  0E44  0844               	movf	??_setHours+1,w
  1830  0E45  00C7               	movwf	setHours@key
  1831                           
  1832                           ;main.c: 211: _delay((unsigned long)((50)*(4000000/4000.0)));
  1833  0E46  3041               	movlw	65
  1834  0E47  00C4               	movwf	??_setHours+1
  1835  0E48  30EE               	movlw	238
  1836  0E49  00C3               	movwf	??_setHours
  1837  0E4A                     u3557:	
  1838  0E4A  0BC3               	decfsz	??_setHours,f
  1839  0E4B  2E4A               	goto	u3557
  1840  0E4C  0BC4               	decfsz	??_setHours+1,f
  1841  0E4D  2E4A               	goto	u3557
  1842  0E4E  0000               	nop
  1843                           
  1844                           ;main.c: 213: if (keyValid && key != lastKeyState)
  1845  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
  1846  0E50  1303               	bcf	3,6	;RP1=0, select bank0
  1847  0E51  0846               	movf	setHours@keyValid,w
  1848  0E52  1903               	btfsc	3,2
  1849  0E53  2EEF               	goto	l2718
  1850  0E54  0847               	movf	setHours@key,w
  1851  0E55  066E               	xorwf	setHours@lastKeyState,w
  1852  0E56  1903               	skipnz
  1853  0E57  2EEF               	goto	l2718
  1854                           
  1855                           ;main.c: 214: {
  1856                           ;main.c: 215: if (key == 0b00001100)
  1857  0E58  0847               	movf	setHours@key,w
  1858  0E59  3A0C               	xorlw	12
  1859  0E5A  1D03               	skipz
  1860  0E5B  2E84               	goto	l2698
  1861                           
  1862                           ;main.c: 216: {
  1863                           ;main.c: 217: savedHoursStart = (savedHoursStart + 1) % 24;
  1864  0E5C  3018               	movlw	24
  1865  0E5D  00A0               	movwf	___awmod@divisor
  1866  0E5E  3000               	movlw	0
  1867  0E5F  00A1               	movwf	___awmod@divisor+1
  1868  0E60  086D               	movf	_savedHoursStart,w	;volatile
  1869  0E61  3E01               	addlw	1
  1870  0E62  00A2               	movwf	___awmod@dividend
  1871  0E63  3000               	movlw	0
  1872  0E64  1803               	skipnc
  1873  0E65  3001               	movlw	1
  1874  0E66  00A3               	movwf	___awmod@dividend+1
  1875  0E67  120A  158A  2200  120A  158A  	fcall	___awmod
  1876  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  1877  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  1878  0E6E  0820               	movf	?___awmod,w
  1879  0E6F  00C3               	movwf	??_setHours
  1880  0E70  0843               	movf	??_setHours,w
  1881  0E71  00ED               	movwf	_savedHoursStart	;volatile
  1882                           
  1883                           ;main.c: 218: sprintf(debugInfo, "INC: %02d", savedHoursStart);
  1884  0E72  308E               	movlw	(STR_14-__stringbase)& (0+255)
  1885  0E73  00C3               	movwf	??_setHours
  1886  0E74  0843               	movf	??_setHours,w
  1887  0E75  00AE               	movwf	sprintf@f
  1888  0E76  086D               	movf	_savedHoursStart,w	;volatile
  1889  0E77  00C4               	movwf	??_setHours+1
  1890  0E78  01C5               	clrf	??_setHours+2
  1891  0E79  0844               	movf	??_setHours+1,w
  1892  0E7A  00AF               	movwf	?_sprintf+1
  1893  0E7B  0845               	movf	??_setHours+2,w
  1894  0E7C  00B0               	movwf	?_sprintf+2
  1895  0E7D  30D9               	movlw	setHours@debugInfo& (0+255)
  1896  0E7E  120A  118A  23FA  120A  158A  	fcall	_sprintf
  1897                           
  1898                           ;main.c: 219: }
  1899  0E83  2ED0               	goto	l2710
  1900  0E84                     l2698:	
  1901                           
  1902                           ;main.c: 220: else if (key == 0b00001110)
  1903  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  1904  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  1905  0E86  0847               	movf	setHours@key,w
  1906  0E87  3A0E               	xorlw	14
  1907  0E88  1D03               	skipz
  1908  0E89  2EB2               	goto	l2704
  1909                           
  1910                           ;main.c: 221: {
  1911                           ;main.c: 222: savedHoursStart = (savedHoursStart - 1 + 24) % 24;
  1912  0E8A  3018               	movlw	24
  1913  0E8B  00A0               	movwf	___awmod@divisor
  1914  0E8C  3000               	movlw	0
  1915  0E8D  00A1               	movwf	___awmod@divisor+1
  1916  0E8E  086D               	movf	_savedHoursStart,w	;volatile
  1917  0E8F  3E17               	addlw	23
  1918  0E90  00A2               	movwf	___awmod@dividend
  1919  0E91  3000               	movlw	0
  1920  0E92  1803               	skipnc
  1921  0E93  3001               	movlw	1
  1922  0E94  00A3               	movwf	___awmod@dividend+1
  1923  0E95  120A  158A  2200  120A  158A  	fcall	___awmod
  1924  0E9A  1283               	bcf	3,5	;RP0=0, select bank0
  1925  0E9B  1303               	bcf	3,6	;RP1=0, select bank0
  1926  0E9C  0820               	movf	?___awmod,w
  1927  0E9D  00C3               	movwf	??_setHours
  1928  0E9E  0843               	movf	??_setHours,w
  1929  0E9F  00ED               	movwf	_savedHoursStart	;volatile
  1930                           
  1931                           ;main.c: 223: sprintf(debugInfo, "DEC: %02d", savedHoursStart);
  1932  0EA0  3084               	movlw	(STR_15-__stringbase)& (0+255)
  1933  0EA1  00C3               	movwf	??_setHours
  1934  0EA2  0843               	movf	??_setHours,w
  1935  0EA3  00AE               	movwf	sprintf@f
  1936  0EA4  086D               	movf	_savedHoursStart,w	;volatile
  1937  0EA5  00C4               	movwf	??_setHours+1
  1938  0EA6  01C5               	clrf	??_setHours+2
  1939  0EA7  0844               	movf	??_setHours+1,w
  1940  0EA8  00AF               	movwf	?_sprintf+1
  1941  0EA9  0845               	movf	??_setHours+2,w
  1942  0EAA  00B0               	movwf	?_sprintf+2
  1943  0EAB  30D9               	movlw	setHours@debugInfo& (0+255)
  1944  0EAC  120A  118A  23FA  120A  158A  	fcall	_sprintf
  1945                           
  1946                           ;main.c: 224: }
  1947  0EB1  2ED0               	goto	l2710
  1948  0EB2                     l2704:	
  1949                           
  1950                           ;main.c: 225: else if (key == 0b00001101)
  1951  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
  1952  0EB3  1303               	bcf	3,6	;RP1=0, select bank0
  1953  0EB4  0847               	movf	setHours@key,w
  1954  0EB5  3A0D               	xorlw	13
  1955  0EB6  1D03               	skipz
  1956  0EB7  2ED0               	goto	l2710
  1957                           
  1958                           ;main.c: 226: {
  1959                           ;main.c: 227: sprintf(debugInfo, "SET: %02d", savedHoursStart);
  1960  0EB8  3098               	movlw	(STR_16-__stringbase)& (0+255)
  1961  0EB9  00C3               	movwf	??_setHours
  1962  0EBA  0843               	movf	??_setHours,w
  1963  0EBB  00AE               	movwf	sprintf@f
  1964  0EBC  086D               	movf	_savedHoursStart,w	;volatile
  1965  0EBD  00C4               	movwf	??_setHours+1
  1966  0EBE  01C5               	clrf	??_setHours+2
  1967  0EBF  0844               	movf	??_setHours+1,w
  1968  0EC0  00AF               	movwf	?_sprintf+1
  1969  0EC1  0845               	movf	??_setHours+2,w
  1970  0EC2  00B0               	movwf	?_sprintf+2
  1971  0EC3  30D9               	movlw	setHours@debugInfo& (0+255)
  1972  0EC4  120A  118A  23FA  120A  158A  	fcall	_sprintf
  1973                           
  1974                           ;main.c: 228: savedHoursEnd = savedHoursStart + 2;
  1975  0EC9  1283               	bcf	3,5	;RP0=0, select bank0
  1976  0ECA  1303               	bcf	3,6	;RP1=0, select bank0
  1977  0ECB  086D               	movf	_savedHoursStart,w	;volatile
  1978  0ECC  3E02               	addlw	2
  1979  0ECD  00C3               	movwf	??_setHours
  1980  0ECE  0843               	movf	??_setHours,w
  1981  0ECF  00EC               	movwf	_savedHoursEnd	;volatile
  1982  0ED0                     l2710:	
  1983                           
  1984                           ;main.c: 229: }
  1985                           ;main.c: 231: printToLCD(debugInfo);
  1986  0ED0  30D9               	movlw	setHours@debugInfo& (0+255)
  1987  0ED1  1283               	bcf	3,5	;RP0=0, select bank0
  1988  0ED2  1303               	bcf	3,6	;RP1=0, select bank0
  1989  0ED3  00A2               	movwf	printToLCD@str
  1990  0ED4  3000               	movlw	0
  1991  0ED5  00A3               	movwf	printToLCD@str+1
  1992  0ED6  120A  158A  215F  120A  158A  	fcall	_printToLCD
  1993                           
  1994                           ;main.c: 232: lastKeyState = key;
  1995  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  1996  0EDC  1303               	bcf	3,6	;RP1=0, select bank0
  1997  0EDD  0847               	movf	setHours@key,w
  1998  0EDE  00C3               	movwf	??_setHours
  1999  0EDF  0843               	movf	??_setHours,w
  2000  0EE0  00EE               	movwf	setHours@lastKeyState
  2001  0EE1                     l2716:	
  2002                           ;main.c: 234: while ((PORTB & 0x08) != 0)
  2003                           
  2004  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  2005  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  2006  0EE3  1D86               	btfss	6,3	;volatile
  2007  0EE4  0008               	return
  2008                           
  2009                           ;main.c: 235: {
  2010                           ;main.c: 236: _delay((unsigned long)((10)*(4000000/4000.0)));
  2011  0EE5  300D               	movlw	13
  2012  0EE6  00C4               	movwf	??_setHours+1
  2013  0EE7  30FB               	movlw	251
  2014  0EE8  00C3               	movwf	??_setHours
  2015  0EE9                     u3567:	
  2016  0EE9  0BC3               	decfsz	??_setHours,f
  2017  0EEA  2EE9               	goto	u3567
  2018  0EEB  0BC4               	decfsz	??_setHours+1,f
  2019  0EEC  2EE9               	goto	u3567
  2020  0EED  2EEE               	nop2
  2021  0EEE  2EE1               	goto	l2716
  2022  0EEF                     l2718:	
  2023                           ;main.c: 237: }
  2024                           ;main.c: 238: }
  2025                           
  2026                           
  2027                           ;main.c: 239: else if (!keyValid)
  2028  0EEF  08C6               	movf	setHours@keyValid,f
  2029  0EF0  1D03               	skipz
  2030  0EF1  0008               	return
  2031                           
  2032                           ;main.c: 240: {
  2033                           ;main.c: 241: lastKeyState = 0xFF;
  2034  0EF2  30FF               	movlw	255
  2035  0EF3  00C3               	movwf	??_setHours
  2036  0EF4  0843               	movf	??_setHours,w
  2037  0EF5  00EE               	movwf	setHours@lastKeyState
  2038  0EF6  0008               	return
  2039  0EF7                     __end_of_setHours:	
  2040                           
  2041                           	psect	text4
  2042  0A00                     __ptext4:	
  2043 ;; *************** function ___awmod *****************
  2044 ;; Defined at:
  2045 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;  divisor         2    0[BANK0 ] int 
  2048 ;;  dividend        2    2[BANK0 ] int 
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;  sign            1    6[BANK0 ] unsigned char 
  2051 ;;  counter         1    5[BANK0 ] unsigned char 
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  2    0[BANK0 ] int 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2, status,0
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2061 ;;      Params:         0       4       0       0       0
  2062 ;;      Locals:         0       2       0       0       0
  2063 ;;      Temps:          0       1       0       0       0
  2064 ;;      Totals:         0       7       0       0       0
  2065 ;;Total ram usage:        7 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    2
  2068 ;; This function calls:
  2069 ;;		Nothing
  2070 ;; This function is called by:
  2071 ;;		_setHours
  2072 ;;		_setMinutes
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           
  2077                           ;psect for function ___awmod
  2078  0A00                     ___awmod:	
  2079                           
  2080                           ;incstack = 0
  2081                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2082  0A00  1283               	bcf	3,5	;RP0=0, select bank0
  2083  0A01  1303               	bcf	3,6	;RP1=0, select bank0
  2084  0A02  01A6               	clrf	___awmod@sign
  2085  0A03  1FA3               	btfss	___awmod@dividend+1,7
  2086  0A04  2A0C               	goto	l1880
  2087  0A05  09A2               	comf	___awmod@dividend,f
  2088  0A06  09A3               	comf	___awmod@dividend+1,f
  2089  0A07  0AA2               	incf	___awmod@dividend,f
  2090  0A08  1903               	skipnz
  2091  0A09  0AA3               	incf	___awmod@dividend+1,f
  2092  0A0A  01A6               	clrf	___awmod@sign
  2093  0A0B  0AA6               	incf	___awmod@sign,f
  2094  0A0C                     l1880:	
  2095  0A0C  1FA1               	btfss	___awmod@divisor+1,7
  2096  0A0D  2A13               	goto	l1884
  2097  0A0E  09A0               	comf	___awmod@divisor,f
  2098  0A0F  09A1               	comf	___awmod@divisor+1,f
  2099  0A10  0AA0               	incf	___awmod@divisor,f
  2100  0A11  1903               	skipnz
  2101  0A12  0AA1               	incf	___awmod@divisor+1,f
  2102  0A13                     l1884:	
  2103  0A13  0821               	movf	___awmod@divisor+1,w
  2104  0A14  0420               	iorwf	___awmod@divisor,w
  2105  0A15  1903               	skipnz
  2106  0A16  2A40               	goto	l1902
  2107  0A17  01A5               	clrf	___awmod@counter
  2108  0A18  0AA5               	incf	___awmod@counter,f
  2109  0A19                     l1892:	
  2110  0A19  1BA1               	btfsc	___awmod@divisor+1,7
  2111  0A1A  2A27               	goto	l1894
  2112  0A1B  3001               	movlw	1
  2113  0A1C                     u2055:	
  2114  0A1C  1003               	clrc
  2115  0A1D  0DA0               	rlf	___awmod@divisor,f
  2116  0A1E  0DA1               	rlf	___awmod@divisor+1,f
  2117  0A1F  3EFF               	addlw	-1
  2118  0A20  1D03               	skipz
  2119  0A21  2A1C               	goto	u2055
  2120  0A22  3001               	movlw	1
  2121  0A23  00A4               	movwf	??___awmod
  2122  0A24  0824               	movf	??___awmod,w
  2123  0A25  07A5               	addwf	___awmod@counter,f
  2124  0A26  2A19               	goto	l1892
  2125  0A27                     l1894:	
  2126  0A27  0821               	movf	___awmod@divisor+1,w
  2127  0A28  0223               	subwf	___awmod@dividend+1,w
  2128  0A29  1D03               	skipz
  2129  0A2A  2A2D               	goto	u2075
  2130  0A2B  0820               	movf	___awmod@divisor,w
  2131  0A2C  0222               	subwf	___awmod@dividend,w
  2132  0A2D                     u2075:	
  2133  0A2D  1C03               	skipc
  2134  0A2E  2A35               	goto	l1898
  2135  0A2F  0820               	movf	___awmod@divisor,w
  2136  0A30  02A2               	subwf	___awmod@dividend,f
  2137  0A31  0821               	movf	___awmod@divisor+1,w
  2138  0A32  1C03               	skipc
  2139  0A33  03A3               	decf	___awmod@dividend+1,f
  2140  0A34  02A3               	subwf	___awmod@dividend+1,f
  2141  0A35                     l1898:	
  2142  0A35  3001               	movlw	1
  2143  0A36                     u2085:	
  2144  0A36  1003               	clrc
  2145  0A37  0CA1               	rrf	___awmod@divisor+1,f
  2146  0A38  0CA0               	rrf	___awmod@divisor,f
  2147  0A39  3EFF               	addlw	-1
  2148  0A3A  1D03               	skipz
  2149  0A3B  2A36               	goto	u2085
  2150  0A3C  3001               	movlw	1
  2151  0A3D  02A5               	subwf	___awmod@counter,f
  2152  0A3E  1D03               	btfss	3,2
  2153  0A3F  2A27               	goto	l1894
  2154  0A40                     l1902:	
  2155  0A40  0826               	movf	___awmod@sign,w
  2156  0A41  1903               	btfsc	3,2
  2157  0A42  2A48               	goto	l1906
  2158  0A43  09A2               	comf	___awmod@dividend,f
  2159  0A44  09A3               	comf	___awmod@dividend+1,f
  2160  0A45  0AA2               	incf	___awmod@dividend,f
  2161  0A46  1903               	skipnz
  2162  0A47  0AA3               	incf	___awmod@dividend+1,f
  2163  0A48                     l1906:	
  2164  0A48  0823               	movf	___awmod@dividend+1,w
  2165  0A49  01A1               	clrf	?___awmod+1
  2166  0A4A  07A1               	addwf	?___awmod+1,f
  2167  0A4B  0822               	movf	___awmod@dividend,w
  2168  0A4C  01A0               	clrf	?___awmod
  2169  0A4D  07A0               	addwf	?___awmod,f
  2170  0A4E  0008               	return
  2171  0A4F                     __end_of___awmod:	
  2172                           
  2173                           	psect	text5
  2174  17DC                     __ptext5:	
  2175 ;; *************** function _displayTime *****************
  2176 ;; Defined at:
  2177 ;;		line 196 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;		None
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;  timeFormat     10   40[BANK0 ] unsigned char [10]
  2182 ;; Return value:  Size  Location     Type
  2183 ;;		None               void
  2184 ;; Registers used:
  2185 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2186 ;; Tracked objects:
  2187 ;;		On entry : 0/0
  2188 ;;		On exit  : 0/0
  2189 ;;		Unchanged: 0/0
  2190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2191 ;;      Params:         0       0       0       0       0
  2192 ;;      Locals:         0      10       0       0       0
  2193 ;;      Temps:          0       5       0       0       0
  2194 ;;      Totals:         0      15       0       0       0
  2195 ;;Total ram usage:       15 bytes
  2196 ;; Hardware stack levels used:    1
  2197 ;; Hardware stack levels required when called:    4
  2198 ;; This function calls:
  2199 ;;		_printToLCD
  2200 ;;		_sprintf
  2201 ;; This function is called by:
  2202 ;;		_updateState
  2203 ;; This function uses a non-reentrant model
  2204 ;;
  2205                           
  2206                           
  2207                           ;psect for function _displayTime
  2208  17DC                     _displayTime:	
  2209                           
  2210                           ;main.c: 198: char timeFormat[10];
  2211                           ;main.c: 199: sprintf(timeFormat, "Time: %02d:%02d", hours, minutes);
  2212                           
  2213                           ;incstack = 0
  2214                           ; Regs used in _displayTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2215  17DC  3040               	movlw	(STR_13-__stringbase)& (0+255)
  2216  17DD  1283               	bcf	3,5	;RP0=0, select bank0
  2217  17DE  1303               	bcf	3,6	;RP1=0, select bank0
  2218  17DF  00C3               	movwf	??_displayTime
  2219  17E0  0843               	movf	??_displayTime,w
  2220  17E1  00AE               	movwf	sprintf@f
  2221  17E2  086B               	movf	_hours,w	;volatile
  2222  17E3  00C4               	movwf	??_displayTime+1
  2223  17E4  01C5               	clrf	??_displayTime+2
  2224  17E5  0844               	movf	??_displayTime+1,w
  2225  17E6  00AF               	movwf	?_sprintf+1
  2226  17E7  0845               	movf	??_displayTime+2,w
  2227  17E8  00B0               	movwf	?_sprintf+2
  2228  17E9  0867               	movf	_minutes,w	;volatile
  2229  17EA  00C6               	movwf	??_displayTime+3
  2230  17EB  01C7               	clrf	??_displayTime+4
  2231  17EC  0846               	movf	??_displayTime+3,w
  2232  17ED  00B1               	movwf	?_sprintf+3
  2233  17EE  0847               	movf	??_displayTime+4,w
  2234  17EF  00B2               	movwf	?_sprintf+4
  2235  17F0  3048               	movlw	displayTime@timeFormat& (0+255)
  2236  17F1  120A  118A  23FA  160A  118A  	fcall	_sprintf
  2237                           
  2238                           ;main.c: 200: printToLCD(timeFormat);
  2239  17F6  3048               	movlw	displayTime@timeFormat& (0+255)
  2240  17F7  1283               	bcf	3,5	;RP0=0, select bank0
  2241  17F8  1303               	bcf	3,6	;RP1=0, select bank0
  2242  17F9  00A2               	movwf	printToLCD@str
  2243  17FA  3000               	movlw	0
  2244  17FB  00A3               	movwf	printToLCD@str+1
  2245  17FC  120A  158A  215F   	fcall	_printToLCD
  2246  17FF  0008               	return
  2247  1800                     __end_of_displayTime:	
  2248                           
  2249                           	psect	text6
  2250  05DD                     __ptext6:	
  2251 ;; *************** function _displayPPM *****************
  2252 ;; Defined at:
  2253 ;;		line 57 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  ppmHandler      2   60[BANK0 ] int 
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;  strBuffer      50    0[BANK1 ] unsigned char [50]
  2258 ;;  ppmFraction     2   52[BANK1 ] int 
  2259 ;;  ppmWhole        2   50[BANK1 ] int 
  2260 ;;  bufPtr          1   54[BANK1 ] PTR unsigned char 
  2261 ;;		 -> displayPPM@strBuffer(50), 
  2262 ;; Return value:  Size  Location     Type
  2263 ;;		None               void
  2264 ;; Registers used:
  2265 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2271 ;;      Params:         0       2       0       0       0
  2272 ;;      Locals:         0       0      55       0       0
  2273 ;;      Temps:          0       2       0       0       0
  2274 ;;      Totals:         0       4      55       0       0
  2275 ;;Total ram usage:       59 bytes
  2276 ;; Hardware stack levels used:    1
  2277 ;; Hardware stack levels required when called:    4
  2278 ;; This function calls:
  2279 ;;		___awtoft
  2280 ;;		___ftadd
  2281 ;;		___ftmul
  2282 ;;		___ftneg
  2283 ;;		___fttol
  2284 ;;		_instCTRL
  2285 ;;		_printToLCD
  2286 ;;		_sprintf
  2287 ;; This function is called by:
  2288 ;;		_updateState
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           
  2293                           ;psect for function _displayPPM
  2294  05DD                     _displayPPM:	
  2295                           
  2296                           ;mq135_module.h: 59: char strBuffer[50];
  2297                           ;mq135_module.h: 61: int ppmWhole = (int)PPM;
  2298                           
  2299                           ;incstack = 0
  2300                           ; Regs used in _displayPPM: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2301  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  2302  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  2303  05DF  0864               	movf	_PPM,w	;volatile
  2304  05E0  00CE               	movwf	___fttol@f1
  2305  05E1  0865               	movf	_PPM+1,w	;volatile
  2306  05E2  00CF               	movwf	___fttol@f1+1
  2307  05E3  0866               	movf	_PPM+2,w	;volatile
  2308  05E4  00D0               	movwf	___fttol@f1+2
  2309  05E5  120A  158A  238A  120A  118A  	fcall	___fttol
  2310  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  2311  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  2312  05EC  084F               	movf	?___fttol+1,w
  2313  05ED  1683               	bsf	3,5	;RP0=1, select bank1
  2314  05EE  1303               	bcf	3,6	;RP1=0, select bank1
  2315  05EF  01D3               	clrf	(displayPPM@ppmWhole+1)^(0+128)
  2316  05F0  07D3               	addwf	(displayPPM@ppmWhole+1)^(0+128),f
  2317  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  2318  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  2319  05F3  084E               	movf	?___fttol,w
  2320  05F4  1683               	bsf	3,5	;RP0=1, select bank1
  2321  05F5  1303               	bcf	3,6	;RP1=0, select bank1
  2322  05F6  01D2               	clrf	displayPPM@ppmWhole^(0+128)
  2323  05F7  07D2               	addwf	displayPPM@ppmWhole^(0+128),f
  2324                           
  2325                           ;mq135_module.h: 62: int ppmFraction = (int)((PPM - ppmWhole) * 100);
  2326  05F8  0853               	movf	(displayPPM@ppmWhole+1)^(0+128),w
  2327  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  2328  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  2329  05FB  01A9               	clrf	___awtoft@c+1
  2330  05FC  07A9               	addwf	___awtoft@c+1,f
  2331  05FD  1683               	bsf	3,5	;RP0=1, select bank1
  2332  05FE  1303               	bcf	3,6	;RP1=0, select bank1
  2333  05FF  0852               	movf	displayPPM@ppmWhole^(0+128),w
  2334  0600  1283               	bcf	3,5	;RP0=0, select bank0
  2335  0601  1303               	bcf	3,6	;RP1=0, select bank0
  2336  0602  01A8               	clrf	___awtoft@c
  2337  0603  07A8               	addwf	___awtoft@c,f
  2338  0604  120A  158A  20ED  120A  118A  	fcall	___awtoft
  2339  0609  1283               	bcf	3,5	;RP0=0, select bank0
  2340  060A  1303               	bcf	3,6	;RP1=0, select bank0
  2341  060B  0828               	movf	?___awtoft,w
  2342  060C  00AE               	movwf	___ftneg@f1
  2343  060D  0829               	movf	?___awtoft+1,w
  2344  060E  00AF               	movwf	___ftneg@f1+1
  2345  060F  082A               	movf	?___awtoft+2,w
  2346  0610  00B0               	movwf	___ftneg@f1+2
  2347  0611  120A  118A  27F5  120A  118A  	fcall	___ftneg
  2348  0616  1283               	bcf	3,5	;RP0=0, select bank0
  2349  0617  1303               	bcf	3,6	;RP1=0, select bank0
  2350  0618  082E               	movf	?___ftneg,w
  2351  0619  00B4               	movwf	___ftadd@f2
  2352  061A  082F               	movf	?___ftneg+1,w
  2353  061B  00B5               	movwf	___ftadd@f2+1
  2354  061C  0830               	movf	?___ftneg+2,w
  2355  061D  00B6               	movwf	___ftadd@f2+2
  2356  061E  0864               	movf	_PPM,w	;volatile
  2357  061F  00B1               	movwf	___ftadd@f1
  2358  0620  0865               	movf	_PPM+1,w	;volatile
  2359  0621  00B2               	movwf	___ftadd@f1+1
  2360  0622  0866               	movf	_PPM+2,w	;volatile
  2361  0623  00B3               	movwf	___ftadd@f1+2
  2362  0624  120A  158A  26F7  120A  118A  	fcall	___ftadd
  2363  0629  1283               	bcf	3,5	;RP0=0, select bank0
  2364  062A  1303               	bcf	3,6	;RP1=0, select bank0
  2365  062B  0831               	movf	?___ftadd,w
  2366  062C  00C1               	movwf	___ftmul@f2
  2367  062D  0832               	movf	?___ftadd+1,w
  2368  062E  00C2               	movwf	___ftmul@f2+1
  2369  062F  0833               	movf	?___ftadd+2,w
  2370  0630  00C3               	movwf	___ftmul@f2+2
  2371  0631  3000               	movlw	0
  2372  0632  00BE               	movwf	___ftmul@f1
  2373  0633  30C8               	movlw	200
  2374  0634  00BF               	movwf	___ftmul@f1+1
  2375  0635  3042               	movlw	66
  2376  0636  00C0               	movwf	___ftmul@f1+2
  2377  0637  120A  118A  2722  120A  118A  	fcall	___ftmul
  2378  063C  1283               	bcf	3,5	;RP0=0, select bank0
  2379  063D  1303               	bcf	3,6	;RP1=0, select bank0
  2380  063E  083E               	movf	?___ftmul,w
  2381  063F  00CE               	movwf	___fttol@f1
  2382  0640  083F               	movf	?___ftmul+1,w
  2383  0641  00CF               	movwf	___fttol@f1+1
  2384  0642  0840               	movf	?___ftmul+2,w
  2385  0643  00D0               	movwf	___fttol@f1+2
  2386  0644  120A  158A  238A  120A  118A  	fcall	___fttol
  2387  0649  1283               	bcf	3,5	;RP0=0, select bank0
  2388  064A  1303               	bcf	3,6	;RP1=0, select bank0
  2389  064B  084F               	movf	?___fttol+1,w
  2390  064C  1683               	bsf	3,5	;RP0=1, select bank1
  2391  064D  1303               	bcf	3,6	;RP1=0, select bank1
  2392  064E  01D5               	clrf	(displayPPM@ppmFraction+1)^(0+128)
  2393  064F  07D5               	addwf	(displayPPM@ppmFraction+1)^(0+128),f
  2394  0650  1283               	bcf	3,5	;RP0=0, select bank0
  2395  0651  1303               	bcf	3,6	;RP1=0, select bank0
  2396  0652  084E               	movf	?___fttol,w
  2397  0653  1683               	bsf	3,5	;RP0=1, select bank1
  2398  0654  1303               	bcf	3,6	;RP1=0, select bank1
  2399  0655  01D4               	clrf	displayPPM@ppmFraction^(0+128)
  2400  0656  07D4               	addwf	displayPPM@ppmFraction^(0+128),f
  2401                           
  2402                           ;mq135_module.h: 65: char *bufPtr = strBuffer;
  2403  0657  30A0               	movlw	displayPPM@strBuffer& (0+255)
  2404  0658  1283               	bcf	3,5	;RP0=0, select bank0
  2405  0659  1303               	bcf	3,6	;RP1=0, select bank0
  2406  065A  00DE               	movwf	??_displayPPM
  2407  065B  085E               	movf	??_displayPPM,w
  2408  065C  1683               	bsf	3,5	;RP0=1, select bank1
  2409  065D  1303               	bcf	3,6	;RP1=0, select bank1
  2410  065E  00D6               	movwf	displayPPM@bufPtr^(0+128)
  2411                           
  2412                           ;mq135_module.h: 66: bufPtr += sprintf(bufPtr, "CO2: ");
  2413  065F  30B2               	movlw	(STR_1-__stringbase)& (0+255)
  2414  0660  1283               	bcf	3,5	;RP0=0, select bank0
  2415  0661  1303               	bcf	3,6	;RP1=0, select bank0
  2416  0662  00DE               	movwf	??_displayPPM
  2417  0663  085E               	movf	??_displayPPM,w
  2418  0664  00AE               	movwf	sprintf@f
  2419  0665  1683               	bsf	3,5	;RP0=1, select bank1
  2420  0666  1303               	bcf	3,6	;RP1=0, select bank1
  2421  0667  0856               	movf	displayPPM@bufPtr^(0+128),w
  2422  0668  120A  118A  23FA  120A  118A  	fcall	_sprintf
  2423  066D  1283               	bcf	3,5	;RP0=0, select bank0
  2424  066E  1303               	bcf	3,6	;RP1=0, select bank0
  2425  066F  082E               	movf	?_sprintf,w
  2426  0670  00DF               	movwf	??_displayPPM+1
  2427  0671  085F               	movf	??_displayPPM+1,w
  2428  0672  1683               	bsf	3,5	;RP0=1, select bank1
  2429  0673  1303               	bcf	3,6	;RP1=0, select bank1
  2430  0674  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  2431                           
  2432                           ;mq135_module.h: 67: bufPtr += sprintf(bufPtr, "%d", ppmWhole);
  2433  0675  30BD               	movlw	(STR_2-__stringbase)& (0+255)
  2434  0676  1283               	bcf	3,5	;RP0=0, select bank0
  2435  0677  1303               	bcf	3,6	;RP1=0, select bank0
  2436  0678  00DE               	movwf	??_displayPPM
  2437  0679  085E               	movf	??_displayPPM,w
  2438  067A  00AE               	movwf	sprintf@f
  2439  067B  1683               	bsf	3,5	;RP0=1, select bank1
  2440  067C  1303               	bcf	3,6	;RP1=0, select bank1
  2441  067D  0853               	movf	(displayPPM@ppmWhole+1)^(0+128),w
  2442  067E  1283               	bcf	3,5	;RP0=0, select bank0
  2443  067F  1303               	bcf	3,6	;RP1=0, select bank0
  2444  0680  01B0               	clrf	?_sprintf+2
  2445  0681  07B0               	addwf	?_sprintf+2,f
  2446  0682  1683               	bsf	3,5	;RP0=1, select bank1
  2447  0683  1303               	bcf	3,6	;RP1=0, select bank1
  2448  0684  0852               	movf	displayPPM@ppmWhole^(0+128),w
  2449  0685  1283               	bcf	3,5	;RP0=0, select bank0
  2450  0686  1303               	bcf	3,6	;RP1=0, select bank0
  2451  0687  01AF               	clrf	?_sprintf+1
  2452  0688  07AF               	addwf	?_sprintf+1,f
  2453  0689  1683               	bsf	3,5	;RP0=1, select bank1
  2454  068A  1303               	bcf	3,6	;RP1=0, select bank1
  2455  068B  0856               	movf	displayPPM@bufPtr^(0+128),w
  2456  068C  120A  118A  23FA  120A  118A  	fcall	_sprintf
  2457  0691  1283               	bcf	3,5	;RP0=0, select bank0
  2458  0692  1303               	bcf	3,6	;RP1=0, select bank0
  2459  0693  082E               	movf	?_sprintf,w
  2460  0694  00DF               	movwf	??_displayPPM+1
  2461  0695  085F               	movf	??_displayPPM+1,w
  2462  0696  1683               	bsf	3,5	;RP0=1, select bank1
  2463  0697  1303               	bcf	3,6	;RP1=0, select bank1
  2464  0698  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  2465                           
  2466                           ;mq135_module.h: 68: *bufPtr++ = '.';
  2467  0699  302E               	movlw	46
  2468  069A  1283               	bcf	3,5	;RP0=0, select bank0
  2469  069B  1303               	bcf	3,6	;RP1=0, select bank0
  2470  069C  00DE               	movwf	??_displayPPM
  2471  069D  1683               	bsf	3,5	;RP0=1, select bank1
  2472  069E  1303               	bcf	3,6	;RP1=0, select bank1
  2473  069F  0856               	movf	displayPPM@bufPtr^(0+128),w
  2474  06A0  0084               	movwf	4
  2475  06A1  1283               	bcf	3,5	;RP0=0, select bank0
  2476  06A2  1303               	bcf	3,6	;RP1=0, select bank0
  2477  06A3  085E               	movf	??_displayPPM,w
  2478  06A4  1383               	bcf	3,7	;select IRP bank0
  2479  06A5  0080               	movwf	0
  2480  06A6  3001               	movlw	1
  2481  06A7  00DE               	movwf	??_displayPPM
  2482  06A8  085E               	movf	??_displayPPM,w
  2483  06A9  1683               	bsf	3,5	;RP0=1, select bank1
  2484  06AA  1303               	bcf	3,6	;RP1=0, select bank1
  2485  06AB  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  2486                           
  2487                           ;mq135_module.h: 69: if (ppmFraction < 10)
  2488  06AC  0855               	movf	(displayPPM@ppmFraction+1)^(0+128),w
  2489  06AD  3A80               	xorlw	128
  2490  06AE  00FF               	movwf	127
  2491  06AF  3080               	movlw	128
  2492  06B0  027F               	subwf	127,w
  2493  06B1  1D03               	skipz
  2494  06B2  2EB5               	goto	u3305
  2495  06B3  300A               	movlw	10
  2496  06B4  0254               	subwf	displayPPM@ppmFraction^(0+128),w
  2497  06B5                     u3305:	
  2498  06B5  1803               	skipnc
  2499  06B6  2ECA               	goto	l2662
  2500                           
  2501                           ;mq135_module.h: 70: *bufPtr++ = '0';
  2502  06B7  3030               	movlw	48
  2503  06B8  1283               	bcf	3,5	;RP0=0, select bank0
  2504  06B9  1303               	bcf	3,6	;RP1=0, select bank0
  2505  06BA  00DE               	movwf	??_displayPPM
  2506  06BB  1683               	bsf	3,5	;RP0=1, select bank1
  2507  06BC  1303               	bcf	3,6	;RP1=0, select bank1
  2508  06BD  0856               	movf	displayPPM@bufPtr^(0+128),w
  2509  06BE  0084               	movwf	4
  2510  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  2511  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  2512  06C1  085E               	movf	??_displayPPM,w
  2513  06C2  1383               	bcf	3,7	;select IRP bank0
  2514  06C3  0080               	movwf	0
  2515  06C4  3001               	movlw	1
  2516  06C5  00DE               	movwf	??_displayPPM
  2517  06C6  085E               	movf	??_displayPPM,w
  2518  06C7  1683               	bsf	3,5	;RP0=1, select bank1
  2519  06C8  1303               	bcf	3,6	;RP1=0, select bank1
  2520  06C9  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  2521  06CA                     l2662:	
  2522                           
  2523                           ;mq135_module.h: 71: sprintf(bufPtr, "%d ppm  ", ppmFraction);
  2524  06CA  30A2               	movlw	(STR_3-__stringbase)& (0+255)
  2525  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  2526  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  2527  06CD  00DE               	movwf	??_displayPPM
  2528  06CE  085E               	movf	??_displayPPM,w
  2529  06CF  00AE               	movwf	sprintf@f
  2530  06D0  1683               	bsf	3,5	;RP0=1, select bank1
  2531  06D1  1303               	bcf	3,6	;RP1=0, select bank1
  2532  06D2  0855               	movf	(displayPPM@ppmFraction+1)^(0+128),w
  2533  06D3  1283               	bcf	3,5	;RP0=0, select bank0
  2534  06D4  1303               	bcf	3,6	;RP1=0, select bank0
  2535  06D5  01B0               	clrf	?_sprintf+2
  2536  06D6  07B0               	addwf	?_sprintf+2,f
  2537  06D7  1683               	bsf	3,5	;RP0=1, select bank1
  2538  06D8  1303               	bcf	3,6	;RP1=0, select bank1
  2539  06D9  0854               	movf	displayPPM@ppmFraction^(0+128),w
  2540  06DA  1283               	bcf	3,5	;RP0=0, select bank0
  2541  06DB  1303               	bcf	3,6	;RP1=0, select bank0
  2542  06DC  01AF               	clrf	?_sprintf+1
  2543  06DD  07AF               	addwf	?_sprintf+1,f
  2544  06DE  1683               	bsf	3,5	;RP0=1, select bank1
  2545  06DF  1303               	bcf	3,6	;RP1=0, select bank1
  2546  06E0  0856               	movf	displayPPM@bufPtr^(0+128),w
  2547  06E1  120A  118A  23FA  120A  118A  	fcall	_sprintf
  2548                           
  2549                           ;mq135_module.h: 72: printToLCD(strBuffer);
  2550  06E6  30A0               	movlw	displayPPM@strBuffer& (0+255)
  2551  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  2552  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  2553  06E9  00A2               	movwf	printToLCD@str
  2554  06EA  3000               	movlw	0
  2555  06EB  00A3               	movwf	printToLCD@str+1
  2556  06EC  120A  158A  215F  120A  118A  	fcall	_printToLCD
  2557                           
  2558                           ;mq135_module.h: 73: switch (ppmHandler)
  2559  06F1  2F12               	goto	l2676
  2560  06F2                     l2666:	
  2561                           ;mq135_module.h: 74: {
  2562                           ;mq135_module.h: 75: case 0:
  2563                           
  2564                           
  2565                           ;mq135_module.h: 76: instCTRL(0x94);
  2566  06F2  3094               	movlw	148
  2567  06F3  160A  118A  2704  120A  118A  	fcall	_instCTRL
  2568                           
  2569                           ;mq135_module.h: 77: printToLCD("Air Purifier OFF");
  2570  06F8  302F               	movlw	low (STR_4-__stringbase)
  2571  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  2572  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  2573  06FB  00A2               	movwf	printToLCD@str
  2574  06FC  3080               	movlw	128
  2575  06FD  00A3               	movwf	printToLCD@str+1
  2576  06FE  120A  158A  215F   	fcall	_printToLCD
  2577                           
  2578                           ;mq135_module.h: 78: break;
  2579  0701  0008               	return
  2580  0702                     l2670:	
  2581                           ;mq135_module.h: 79: case 1:
  2582                           
  2583                           
  2584                           ;mq135_module.h: 80: instCTRL(0x94);
  2585  0702  3094               	movlw	148
  2586  0703  160A  118A  2704  120A  118A  	fcall	_instCTRL
  2587                           
  2588                           ;mq135_module.h: 81: printToLCD("Air Purifier ON ");
  2589  0708  301E               	movlw	low (STR_5-__stringbase)
  2590  0709  1283               	bcf	3,5	;RP0=0, select bank0
  2591  070A  1303               	bcf	3,6	;RP1=0, select bank0
  2592  070B  00A2               	movwf	printToLCD@str
  2593  070C  3080               	movlw	128
  2594  070D  00A3               	movwf	printToLCD@str+1
  2595  070E  120A  158A  215F   	fcall	_printToLCD
  2596                           
  2597                           ;mq135_module.h: 83: }
  2598                           
  2599                           ;mq135_module.h: 82: break;
  2600  0711  0008               	return
  2601  0712                     l2676:	
  2602                           
  2603                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2604                           ; Switch size 1, requested type "space"
  2605                           ; Number of cases is 1, Range of values is 0 to 0
  2606                           ; switch strategies available:
  2607                           ; Name         Instructions Cycles
  2608                           ; simple_byte            4     3 (average)
  2609                           ; direct_byte           11     8 (fixed)
  2610                           ; jumptable            260     6 (fixed)
  2611                           ;	Chosen strategy is simple_byte
  2612  0712  1283               	bcf	3,5	;RP0=0, select bank0
  2613  0713  1303               	bcf	3,6	;RP1=0, select bank0
  2614  0714  085D               	movf	displayPPM@ppmHandler+1,w
  2615  0715  3A00               	xorlw	0	; case 0
  2616  0716  1903               	skipnz
  2617  0717  2F19               	goto	l2890
  2618  0718  2F21               	goto	l106
  2619  0719                     l2890:	
  2620                           
  2621                           ; Switch size 1, requested type "space"
  2622                           ; Number of cases is 2, Range of values is 0 to 1
  2623                           ; switch strategies available:
  2624                           ; Name         Instructions Cycles
  2625                           ; simple_byte            7     4 (average)
  2626                           ; direct_byte           14     8 (fixed)
  2627                           ; jumptable            260     6 (fixed)
  2628                           ;	Chosen strategy is simple_byte
  2629  0719  085C               	movf	displayPPM@ppmHandler,w
  2630  071A  3A00               	xorlw	0	; case 0
  2631  071B  1903               	skipnz
  2632  071C  2EF2               	goto	l2666
  2633  071D  3A01               	xorlw	1	; case 1
  2634  071E  1903               	skipnz
  2635  071F  2F02               	goto	l2670
  2636  0720  2F21               	goto	l106
  2637  0721                     l106:	
  2638  0721  0008               	return
  2639  0722                     __end_of_displayPPM:	
  2640                           
  2641                           	psect	text7
  2642  03FA                     __ptext7:	
  2643 ;; *************** function _sprintf *****************
  2644 ;; Defined at:
  2645 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;  sp              1    wreg     PTR unsigned char 
  2648 ;;		 -> setMinutes@debugInfo(10), setHours@debugInfo(10), displayTime@timeFormat(10), displayPPM@strBuffer(50), 
  2649 ;;  f               1   14[BANK0 ] PTR const unsigned char 
  2650 ;;		 -> STR_19(10), STR_18(10), STR_17(10), STR_16(10), 
  2651 ;;		 -> STR_15(10), STR_14(10), STR_13(16), STR_3(9), 
  2652 ;;		 -> STR_2(3), STR_1(6), 
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;  sp              1   34[BANK0 ] PTR unsigned char 
  2655 ;;		 -> setMinutes@debugInfo(10), setHours@debugInfo(10), displayTime@timeFormat(10), displayPPM@strBuffer(50), 
  2656 ;;  _val            4   26[BANK0 ] struct .
  2657 ;;  width           2   31[BANK0 ] int 
  2658 ;;  ccnt            2   24[BANK0 ] int 
  2659 ;;  c               1   33[BANK0 ] char 
  2660 ;;  flag            1   30[BANK0 ] unsigned char 
  2661 ;;  prec            1   23[BANK0 ] char 
  2662 ;;  ap              1   22[BANK0 ] PTR void [1]
  2663 ;;		 -> ?_sprintf(2), 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  2   14[BANK0 ] int 
  2666 ;; Registers used:
  2667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2673 ;;      Params:         0       5       0       0       0
  2674 ;;      Locals:         0      13       0       0       0
  2675 ;;      Temps:          0       3       0       0       0
  2676 ;;      Totals:         0      21       0       0       0
  2677 ;;Total ram usage:       21 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    3
  2680 ;; This function calls:
  2681 ;;		___lwdiv
  2682 ;;		___lwmod
  2683 ;;		___wmul
  2684 ;;		_isdigit
  2685 ;; This function is called by:
  2686 ;;		_displayPPM
  2687 ;;		_displayTime
  2688 ;;		_setHours
  2689 ;;		_setMinutes
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           
  2694                           ;psect for function _sprintf
  2695  03FA                     _sprintf:	
  2696                           
  2697                           ;incstack = 0
  2698                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2699                           ;sprintf@sp stored from wreg
  2700  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2701  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  2702  03FC  00C2               	movwf	sprintf@sp
  2703                           
  2704                           ;doprnt.c: 494: va_list ap;
  2705                           ;doprnt.c: 499: signed char c;
  2706                           ;doprnt.c: 501: int width;
  2707                           ;doprnt.c: 506: signed char prec;
  2708                           ;doprnt.c: 508: unsigned char flag;
  2709                           ;doprnt.c: 510: int ccnt = 0;
  2710  03FD  01B8               	clrf	sprintf@ccnt
  2711  03FE  01B9               	clrf	sprintf@ccnt+1
  2712                           
  2713                           ;doprnt.c: 527: union {
  2714                           ;doprnt.c: 528: unsigned int _val;
  2715                           ;doprnt.c: 529: struct {
  2716                           ;doprnt.c: 530: const char * _cp;
  2717                           ;doprnt.c: 531: unsigned _len;
  2718                           ;doprnt.c: 532: } _str;
  2719                           ;doprnt.c: 533: } _val;
  2720                           ;doprnt.c: 542: *ap = __va_start();
  2721  03FF  302F               	movlw	(?_sprintf+1)& (0+255)
  2722  0400  00B3               	movwf	??_sprintf
  2723  0401  0833               	movf	??_sprintf,w
  2724  0402  00B6               	movwf	sprintf@ap
  2725  0403                     l2628:	
  2726                           ;doprnt.c: 545: while(c = *f++) {
  2727                           
  2728  0403  3001               	movlw	1
  2729  0404  1283               	bcf	3,5	;RP0=0, select bank0
  2730  0405  1303               	bcf	3,6	;RP1=0, select bank0
  2731  0406  07AE               	addwf	sprintf@f,f
  2732  0407  30FF               	movlw	-1
  2733  0408  072E               	addwf	sprintf@f,w
  2734  0409  0084               	movwf	4
  2735  040A  120A  158A  200A  120A  118A  	fcall	stringdir
  2736  040F  00B3               	movwf	??_sprintf
  2737  0410  0833               	movf	??_sprintf,w
  2738  0411  00C1               	movwf	sprintf@c
  2739  0412  08C1               	movf	sprintf@c,f
  2740  0413  1903               	btfsc	3,2
  2741  0414  2DD0               	goto	l2630
  2742                           
  2743                           ;doprnt.c: 547: if(c != '%')
  2744  0415  0841               	movf	sprintf@c,w
  2745  0416  3A25               	xorlw	37
  2746  0417  1903               	skipnz
  2747  0418  2C2B               	goto	l2522
  2748                           
  2749                           ;doprnt.c: 549: {
  2750                           ;doprnt.c: 550: ((*sp++ = (c)),(++ccnt));
  2751  0419  0841               	movf	sprintf@c,w
  2752  041A  00B3               	movwf	??_sprintf
  2753  041B  0842               	movf	sprintf@sp,w
  2754  041C  0084               	movwf	4
  2755  041D  0833               	movf	??_sprintf,w
  2756  041E  1383               	bcf	3,7	;select IRP bank0
  2757  041F  0080               	movwf	0
  2758  0420  3001               	movlw	1
  2759  0421  00B3               	movwf	??_sprintf
  2760  0422  0833               	movf	??_sprintf,w
  2761  0423  07C2               	addwf	sprintf@sp,f
  2762  0424  3001               	movlw	1
  2763  0425  07B8               	addwf	sprintf@ccnt,f
  2764  0426  1803               	skipnc
  2765  0427  0AB9               	incf	sprintf@ccnt+1,f
  2766  0428  3000               	movlw	0
  2767  0429  07B9               	addwf	sprintf@ccnt+1,f
  2768                           
  2769                           ;doprnt.c: 551: continue;
  2770  042A  2C03               	goto	l2628
  2771  042B                     l2522:	
  2772                           
  2773                           ;doprnt.c: 552: }
  2774                           ;doprnt.c: 555: width = 0;
  2775  042B  01BF               	clrf	sprintf@width
  2776  042C  01C0               	clrf	sprintf@width+1
  2777                           
  2778                           ;doprnt.c: 557: flag = 0;
  2779  042D  01BE               	clrf	sprintf@flag
  2780                           
  2781                           ;doprnt.c: 560: switch(*f) {
  2782                           
  2783                           ;doprnt.c: 559: for(;;) {
  2784  042E  2C34               	goto	l2528
  2785  042F                     l241:	
  2786                           ;doprnt.c: 588: case '0':
  2787                           
  2788                           
  2789                           ;doprnt.c: 589: flag |= 0x04;
  2790  042F  153E               	bsf	sprintf@flag,2
  2791                           
  2792                           ;doprnt.c: 590: f++;
  2793  0430  3001               	movlw	1
  2794  0431  00B3               	movwf	??_sprintf
  2795  0432  0833               	movf	??_sprintf,w
  2796  0433  07AE               	addwf	sprintf@f,f
  2797  0434                     l2528:	
  2798                           ;doprnt.c: 593: }
  2799                           
  2800                           ;doprnt.c: 591: continue;
  2801                           
  2802  0434  082E               	movf	sprintf@f,w
  2803  0435  0084               	movwf	4
  2804  0436  120A  158A  200A  120A  118A  	fcall	stringdir
  2805                           
  2806                           ; Switch size 1, requested type "space"
  2807                           ; Number of cases is 1, Range of values is 48 to 48
  2808                           ; switch strategies available:
  2809                           ; Name         Instructions Cycles
  2810                           ; simple_byte            4     3 (average)
  2811                           ; direct_byte           14    11 (fixed)
  2812                           ; jumptable            263     9 (fixed)
  2813                           ;	Chosen strategy is simple_byte
  2814  043B  3A30               	xorlw	48	; case 48
  2815  043C  1903               	skipnz
  2816  043D  2C2F               	goto	l241
  2817  043E  2C3F               	goto	l2530
  2818  043F                     l2530:	
  2819                           ;doprnt.c: 595: }
  2820                           
  2821                           ;doprnt.c: 594: break;
  2822                           
  2823                           
  2824                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  2825  043F  082E               	movf	sprintf@f,w
  2826  0440  0084               	movwf	4
  2827  0441  120A  158A  200A  120A  118A  	fcall	stringdir
  2828  0446  160A  118A  26E1  120A  118A  	fcall	_isdigit
  2829  044B  1C03               	btfss	3,0
  2830  044C  2C8F               	goto	l2544
  2831                           
  2832                           ;doprnt.c: 607: width = 0;
  2833  044D  1283               	bcf	3,5	;RP0=0, select bank0
  2834  044E  1303               	bcf	3,6	;RP1=0, select bank0
  2835  044F  01BF               	clrf	sprintf@width
  2836  0450  01C0               	clrf	sprintf@width+1
  2837  0451                     l2534:	
  2838                           ;doprnt.c: 608: do {
  2839                           
  2840                           
  2841                           ;doprnt.c: 609: width *= 10;
  2842  0451  300A               	movlw	10
  2843  0452  1283               	bcf	3,5	;RP0=0, select bank0
  2844  0453  1303               	bcf	3,6	;RP1=0, select bank0
  2845  0454  00A0               	movwf	___wmul@multiplier
  2846  0455  3000               	movlw	0
  2847  0456  00A1               	movwf	___wmul@multiplier+1
  2848  0457  0840               	movf	sprintf@width+1,w
  2849  0458  01A3               	clrf	___wmul@multiplicand+1
  2850  0459  07A3               	addwf	___wmul@multiplicand+1,f
  2851  045A  083F               	movf	sprintf@width,w
  2852  045B  01A2               	clrf	___wmul@multiplicand
  2853  045C  07A2               	addwf	___wmul@multiplicand,f
  2854  045D  120A  158A  2112  120A  118A  	fcall	___wmul
  2855  0462  1283               	bcf	3,5	;RP0=0, select bank0
  2856  0463  1303               	bcf	3,6	;RP1=0, select bank0
  2857  0464  0821               	movf	?___wmul+1,w
  2858  0465  01C0               	clrf	sprintf@width+1
  2859  0466  07C0               	addwf	sprintf@width+1,f
  2860  0467  0820               	movf	?___wmul,w
  2861  0468  01BF               	clrf	sprintf@width
  2862  0469  07BF               	addwf	sprintf@width,f
  2863                           
  2864                           ;doprnt.c: 610: width += *f++ - '0';
  2865  046A  082E               	movf	sprintf@f,w
  2866  046B  0084               	movwf	4
  2867  046C  120A  158A  200A  120A  118A  	fcall	stringdir
  2868  0471  3ED0               	addlw	208
  2869  0472  00B3               	movwf	??_sprintf
  2870  0473  30FF               	movlw	255
  2871  0474  1803               	skipnc
  2872  0475  3000               	movlw	0
  2873  0476  00B4               	movwf	??_sprintf+1
  2874  0477  0833               	movf	??_sprintf,w
  2875  0478  07BF               	addwf	sprintf@width,f
  2876  0479  1803               	skipnc
  2877  047A  0AC0               	incf	sprintf@width+1,f
  2878  047B  0834               	movf	??_sprintf+1,w
  2879  047C  07C0               	addwf	sprintf@width+1,f
  2880  047D  3001               	movlw	1
  2881  047E  00B3               	movwf	??_sprintf
  2882  047F  0833               	movf	??_sprintf,w
  2883  0480  07AE               	addwf	sprintf@f,f
  2884                           
  2885                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  2886  0481  082E               	movf	sprintf@f,w
  2887  0482  0084               	movwf	4
  2888  0483  120A  158A  200A  120A  118A  	fcall	stringdir
  2889  0488  160A  118A  26E1  120A  118A  	fcall	_isdigit
  2890  048D  1803               	btfsc	3,0
  2891  048E  2C51               	goto	l2534
  2892  048F                     l2544:	
  2893                           ;doprnt.c: 831: }
  2894                           
  2895                           ;doprnt.c: 822: continue;
  2896                           
  2897                           ;doprnt.c: 811: default:
  2898                           
  2899                           ;doprnt.c: 707: case 'i':
  2900                           ;doprnt.c: 708: break;
  2901                           
  2902                           ;doprnt.c: 706: case 'd':
  2903                           
  2904                           ;doprnt.c: 647: goto alldone;
  2905                           
  2906                           ;doprnt.c: 646: case 0:
  2907                           
  2908                           ;doprnt.c: 617: }
  2909                           ;doprnt.c: 644: switch(c = *f++) {
  2910                           
  2911  048F  3001               	movlw	1
  2912  0490  1283               	bcf	3,5	;RP0=0, select bank0
  2913  0491  1303               	bcf	3,6	;RP1=0, select bank0
  2914  0492  07AE               	addwf	sprintf@f,f
  2915  0493  30FF               	movlw	-1
  2916  0494  072E               	addwf	sprintf@f,w
  2917  0495  0084               	movwf	4
  2918  0496  120A  158A  200A  120A  118A  	fcall	stringdir
  2919  049B  00C1               	movwf	sprintf@c
  2920                           
  2921                           ; Switch size 1, requested type "space"
  2922                           ; Number of cases is 3, Range of values is 0 to 105
  2923                           ; switch strategies available:
  2924                           ; Name         Instructions Cycles
  2925                           ; simple_byte           10     6 (average)
  2926                           ; jumptable            260     6 (fixed)
  2927                           ;	Chosen strategy is simple_byte
  2928  049C  3A00               	xorlw	0	; case 0
  2929  049D  1903               	skipnz
  2930  049E  2DD0               	goto	l2630
  2931  049F  3A64               	xorlw	100	; case 100
  2932  04A0  1903               	skipnz
  2933  04A1  2CA6               	goto	l2546
  2934  04A2  3A0D               	xorlw	13	; case 105
  2935  04A3  1903               	skipnz
  2936  04A4  2CA6               	goto	l2546
  2937  04A5  2C03               	goto	l2628
  2938  04A6                     l2546:	
  2939                           
  2940                           ;doprnt.c: 1262: {
  2941                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2942  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  2943  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  2944  04A8  0836               	movf	sprintf@ap,w
  2945  04A9  0084               	movwf	4
  2946  04AA  1383               	bcf	3,7	;select IRP bank0
  2947  04AB  0800               	movf	0,w
  2948  04AC  00BA               	movwf	sprintf@_val
  2949  04AD  0A84               	incf	4,f
  2950  04AE  0800               	movf	0,w
  2951  04AF  00BB               	movwf	sprintf@_val+1
  2952  04B0  3002               	movlw	2
  2953  04B1  00B3               	movwf	??_sprintf
  2954  04B2  0833               	movf	??_sprintf,w
  2955  04B3  07B6               	addwf	sprintf@ap,f
  2956                           
  2957                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  2958  04B4  1FBB               	btfss	sprintf@_val+1,7
  2959  04B5  2CBF               	goto	l2556
  2960                           
  2961                           ;doprnt.c: 1271: flag |= 0x03;
  2962  04B6  3003               	movlw	3
  2963  04B7  00B3               	movwf	??_sprintf
  2964  04B8  0833               	movf	??_sprintf,w
  2965  04B9  04BE               	iorwf	sprintf@flag,f
  2966                           
  2967                           ;doprnt.c: 1272: _val._val = -_val._val;
  2968  04BA  09BA               	comf	sprintf@_val,f
  2969  04BB  09BB               	comf	sprintf@_val+1,f
  2970  04BC  0ABA               	incf	sprintf@_val,f
  2971  04BD  1903               	skipnz
  2972  04BE  0ABB               	incf	sprintf@_val+1,f
  2973  04BF                     l2556:	
  2974                           
  2975                           ;doprnt.c: 1273: }
  2976                           ;doprnt.c: 1275: }
  2977                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2978  04BF  01C1               	clrf	sprintf@c
  2979  04C0  0AC1               	incf	sprintf@c,f
  2980  04C1  0841               	movf	sprintf@c,w
  2981  04C2  3A05               	xorlw	5
  2982  04C3  1903               	btfsc	3,2
  2983  04C4  2CE6               	goto	l2568
  2984  04C5                     l2560:	
  2985                           
  2986                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2987  04C5  0841               	movf	sprintf@c,w
  2988  04C6  00B3               	movwf	??_sprintf
  2989  04C7  0733               	addwf	??_sprintf,w
  2990  04C8  3E01               	addlw	low (_dpowers-__stringbase)
  2991  04C9  0084               	movwf	4
  2992  04CA  120A  158A  200A  120A  118A  	fcall	stringdir
  2993  04CF  00B4               	movwf	??_sprintf+1
  2994  04D0  120A  158A  200A  120A  118A  	fcall	stringdir
  2995  04D5  00B5               	movwf	??_sprintf+2
  2996  04D6  0835               	movf	??_sprintf+2,w
  2997  04D7  023B               	subwf	sprintf@_val+1,w
  2998  04D8  1D03               	skipz
  2999  04D9  2CDC               	goto	u3155
  3000  04DA  0834               	movf	??_sprintf+1,w
  3001  04DB  023A               	subwf	sprintf@_val,w
  3002  04DC                     u3155:	
  3003  04DC  1C03               	btfss	3,0
  3004  04DD  2CE6               	goto	l2568
  3005                           
  3006                           ;doprnt.c: 1316: break;
  3007  04DE  3001               	movlw	1
  3008  04DF  00B3               	movwf	??_sprintf
  3009  04E0  0833               	movf	??_sprintf,w
  3010  04E1  07C1               	addwf	sprintf@c,f
  3011  04E2  0841               	movf	sprintf@c,w
  3012  04E3  3A05               	xorlw	5
  3013  04E4  1D03               	skipz
  3014  04E5  2CC5               	goto	l2560
  3015  04E6                     l2568:	
  3016                           
  3017                           ;doprnt.c: 1354: if(width && flag & 0x03)
  3018  04E6  0840               	movf	sprintf@width+1,w
  3019  04E7  043F               	iorwf	sprintf@width,w
  3020  04E8  1903               	skipnz
  3021  04E9  2CF4               	goto	l259
  3022  04EA  083E               	movf	sprintf@flag,w
  3023  04EB  3903               	andlw	3
  3024  04EC  1903               	btfsc	3,2
  3025  04ED  2CF4               	goto	l259
  3026                           
  3027                           ;doprnt.c: 1355: width--;
  3028  04EE  30FF               	movlw	255
  3029  04EF  07BF               	addwf	sprintf@width,f
  3030  04F0  1803               	skipnc
  3031  04F1  0AC0               	incf	sprintf@width+1,f
  3032  04F2  30FF               	movlw	255
  3033  04F3  07C0               	addwf	sprintf@width+1,f
  3034  04F4                     l259:	
  3035                           
  3036                           ;doprnt.c: 1390: if(width > c)
  3037  04F4  0841               	movf	sprintf@c,w
  3038  04F5  00B3               	movwf	??_sprintf
  3039  04F6  01B4               	clrf	??_sprintf+1
  3040  04F7  1BB3               	btfsc	??_sprintf,7
  3041  04F8  03B4               	decf	??_sprintf+1,f
  3042  04F9  0834               	movf	??_sprintf+1,w
  3043  04FA  3A80               	xorlw	128
  3044  04FB  00B5               	movwf	??_sprintf+2
  3045  04FC  0840               	movf	sprintf@width+1,w
  3046  04FD  3A80               	xorlw	128
  3047  04FE  0235               	subwf	??_sprintf+2,w
  3048  04FF  1D03               	skipz
  3049  0500  2D03               	goto	u3195
  3050  0501  083F               	movf	sprintf@width,w
  3051  0502  0233               	subwf	??_sprintf,w
  3052  0503                     u3195:	
  3053  0503  1803               	skipnc
  3054  0504  2D13               	goto	l2576
  3055                           
  3056                           ;doprnt.c: 1391: width -= c;
  3057  0505  1283               	bcf	3,5	;RP0=0, select bank0
  3058  0506  1303               	bcf	3,6	;RP1=0, select bank0
  3059  0507  0841               	movf	sprintf@c,w
  3060  0508  00B3               	movwf	??_sprintf
  3061  0509  01B4               	clrf	??_sprintf+1
  3062  050A  1BB3               	btfsc	??_sprintf,7
  3063  050B  03B4               	decf	??_sprintf+1,f
  3064  050C  0833               	movf	??_sprintf,w
  3065  050D  02BF               	subwf	sprintf@width,f
  3066  050E  0834               	movf	??_sprintf+1,w
  3067  050F  1C03               	skipc
  3068  0510  03C0               	decf	sprintf@width+1,f
  3069  0511  02C0               	subwf	sprintf@width+1,f
  3070  0512  2D17               	goto	l2578
  3071  0513                     l2576:	
  3072                           
  3073                           ;doprnt.c: 1392: else
  3074                           ;doprnt.c: 1393: width = 0;
  3075  0513  1283               	bcf	3,5	;RP0=0, select bank0
  3076  0514  1303               	bcf	3,6	;RP1=0, select bank0
  3077  0515  01BF               	clrf	sprintf@width
  3078  0516  01C0               	clrf	sprintf@width+1
  3079  0517                     l2578:	
  3080                           
  3081                           ;doprnt.c: 1396: if(flag & 0x04) {
  3082  0517  1D3E               	btfss	sprintf@flag,2
  3083  0518  2D4A               	goto	l2598
  3084                           
  3085                           ;doprnt.c: 1401: if(flag & 0x03)
  3086  0519  083E               	movf	sprintf@flag,w
  3087  051A  3903               	andlw	3
  3088  051B  1903               	btfsc	3,2
  3089  051C  2D2E               	goto	l2588
  3090                           
  3091                           ;doprnt.c: 1402: ((*sp++ = ('-')),(++ccnt));
  3092  051D  302D               	movlw	45
  3093  051E  00B3               	movwf	??_sprintf
  3094  051F  0842               	movf	sprintf@sp,w
  3095  0520  0084               	movwf	4
  3096  0521  0833               	movf	??_sprintf,w
  3097  0522  1383               	bcf	3,7	;select IRP bank0
  3098  0523  0080               	movwf	0
  3099  0524  3001               	movlw	1
  3100  0525  00B3               	movwf	??_sprintf
  3101  0526  0833               	movf	??_sprintf,w
  3102  0527  07C2               	addwf	sprintf@sp,f
  3103  0528  3001               	movlw	1
  3104  0529  07B8               	addwf	sprintf@ccnt,f
  3105  052A  1803               	skipnc
  3106  052B  0AB9               	incf	sprintf@ccnt+1,f
  3107  052C  3000               	movlw	0
  3108  052D  07B9               	addwf	sprintf@ccnt+1,f
  3109  052E                     l2588:	
  3110                           
  3111                           ;doprnt.c: 1424: if(width)
  3112  052E  0840               	movf	sprintf@width+1,w
  3113  052F  043F               	iorwf	sprintf@width,w
  3114  0530  1903               	skipnz
  3115  0531  2D7E               	goto	l2616
  3116                           
  3117                           ;doprnt.c: 1426: ((*sp++ = ('0')),(++ccnt));
  3118                           
  3119                           ;doprnt.c: 1425: do
  3120  0532  3030               	movlw	48
  3121  0533  00B3               	movwf	??_sprintf
  3122  0534  0842               	movf	sprintf@sp,w
  3123  0535  0084               	movwf	4
  3124  0536  0833               	movf	??_sprintf,w
  3125  0537  1383               	bcf	3,7	;select IRP bank0
  3126  0538  0080               	movwf	0
  3127  0539  3001               	movlw	1
  3128  053A  00B3               	movwf	??_sprintf
  3129  053B  0833               	movf	??_sprintf,w
  3130  053C  07C2               	addwf	sprintf@sp,f
  3131  053D  3001               	movlw	1
  3132  053E  07B8               	addwf	sprintf@ccnt,f
  3133  053F  1803               	skipnc
  3134  0540  0AB9               	incf	sprintf@ccnt+1,f
  3135  0541  3000               	movlw	0
  3136  0542  07B9               	addwf	sprintf@ccnt+1,f
  3137                           
  3138                           ;doprnt.c: 1427: while(--width);
  3139  0543  30FF               	movlw	255
  3140  0544  07BF               	addwf	sprintf@width,f
  3141  0545  1803               	skipnc
  3142  0546  0AC0               	incf	sprintf@width+1,f
  3143  0547  30FF               	movlw	255
  3144  0548  07C0               	addwf	sprintf@width+1,f
  3145  0549  2D2E               	goto	l2588
  3146  054A                     l2598:	
  3147                           ;doprnt.c: 1429: } else
  3148                           
  3149                           
  3150                           ;doprnt.c: 1431: {
  3151                           ;doprnt.c: 1433: if(width
  3152                           ;doprnt.c: 1437: )
  3153  054A  0840               	movf	sprintf@width+1,w
  3154  054B  043F               	iorwf	sprintf@width,w
  3155  054C  1903               	skipnz
  3156  054D  2D69               	goto	l2608
  3157  054E                     l2600:	
  3158                           ;doprnt.c: 1438: do
  3159                           
  3160                           
  3161                           ;doprnt.c: 1439: ((*sp++ = (' ')),(++ccnt));
  3162  054E  3020               	movlw	32
  3163  054F  00B3               	movwf	??_sprintf
  3164  0550  0842               	movf	sprintf@sp,w
  3165  0551  0084               	movwf	4
  3166  0552  0833               	movf	??_sprintf,w
  3167  0553  1383               	bcf	3,7	;select IRP bank0
  3168  0554  0080               	movwf	0
  3169  0555  3001               	movlw	1
  3170  0556  00B3               	movwf	??_sprintf
  3171  0557  0833               	movf	??_sprintf,w
  3172  0558  07C2               	addwf	sprintf@sp,f
  3173  0559  3001               	movlw	1
  3174  055A  07B8               	addwf	sprintf@ccnt,f
  3175  055B  1803               	skipnc
  3176  055C  0AB9               	incf	sprintf@ccnt+1,f
  3177  055D  3000               	movlw	0
  3178  055E  07B9               	addwf	sprintf@ccnt+1,f
  3179                           
  3180                           ;doprnt.c: 1440: while(--width);
  3181  055F  30FF               	movlw	255
  3182  0560  07BF               	addwf	sprintf@width,f
  3183  0561  1803               	skipnc
  3184  0562  0AC0               	incf	sprintf@width+1,f
  3185  0563  30FF               	movlw	255
  3186  0564  07C0               	addwf	sprintf@width+1,f
  3187  0565  0840               	movf	sprintf@width+1,w
  3188  0566  043F               	iorwf	sprintf@width,w
  3189  0567  1D03               	skipz
  3190  0568  2D4E               	goto	l2600
  3191  0569                     l2608:	
  3192                           
  3193                           ;doprnt.c: 1447: if(flag & 0x03)
  3194  0569  083E               	movf	sprintf@flag,w
  3195  056A  3903               	andlw	3
  3196  056B  1903               	btfsc	3,2
  3197  056C  2D7E               	goto	l2616
  3198                           
  3199                           ;doprnt.c: 1448: ((*sp++ = ('-')),(++ccnt));
  3200  056D  302D               	movlw	45
  3201  056E  00B3               	movwf	??_sprintf
  3202  056F  0842               	movf	sprintf@sp,w
  3203  0570  0084               	movwf	4
  3204  0571  0833               	movf	??_sprintf,w
  3205  0572  1383               	bcf	3,7	;select IRP bank0
  3206  0573  0080               	movwf	0
  3207  0574  3001               	movlw	1
  3208  0575  00B3               	movwf	??_sprintf
  3209  0576  0833               	movf	??_sprintf,w
  3210  0577  07C2               	addwf	sprintf@sp,f
  3211  0578  3001               	movlw	1
  3212  0579  07B8               	addwf	sprintf@ccnt,f
  3213  057A  1803               	skipnc
  3214  057B  0AB9               	incf	sprintf@ccnt+1,f
  3215  057C  3000               	movlw	0
  3216  057D  07B9               	addwf	sprintf@ccnt+1,f
  3217  057E                     l2616:	
  3218                           
  3219                           ;doprnt.c: 1478: }
  3220                           ;doprnt.c: 1481: prec = c;
  3221  057E  0841               	movf	sprintf@c,w
  3222  057F  00B3               	movwf	??_sprintf
  3223  0580  0833               	movf	??_sprintf,w
  3224  0581  00B7               	movwf	sprintf@prec
  3225  0582                     l2626:	
  3226                           ;doprnt.c: 1483: while(prec--) {
  3227                           
  3228  0582  30FF               	movlw	-1
  3229  0583  00B3               	movwf	??_sprintf
  3230  0584  0833               	movf	??_sprintf,w
  3231  0585  07B7               	addwf	sprintf@prec,f
  3232  0586  0837               	movf	sprintf@prec,w
  3233  0587  3AFF               	xorlw	-1
  3234  0588  1903               	btfsc	3,2
  3235  0589  2C03               	goto	l2628
  3236                           
  3237                           ;doprnt.c: 1487: {
  3238                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  3239  058A  300A               	movlw	10
  3240  058B  00A8               	movwf	___lwmod@divisor
  3241  058C  3000               	movlw	0
  3242  058D  00A9               	movwf	___lwmod@divisor+1
  3243  058E  0837               	movf	sprintf@prec,w
  3244  058F  00B3               	movwf	??_sprintf
  3245  0590  0733               	addwf	??_sprintf,w
  3246  0591  3E01               	addlw	low (_dpowers-__stringbase)
  3247  0592  0084               	movwf	4
  3248  0593  120A  158A  200A  120A  118A  	fcall	stringdir
  3249  0598  00A0               	movwf	___lwdiv@divisor
  3250  0599  120A  158A  200A  120A  118A  	fcall	stringdir
  3251  059E  00A1               	movwf	___lwdiv@divisor+1
  3252  059F  083B               	movf	sprintf@_val+1,w
  3253  05A0  01A3               	clrf	___lwdiv@dividend+1
  3254  05A1  07A3               	addwf	___lwdiv@dividend+1,f
  3255  05A2  083A               	movf	sprintf@_val,w
  3256  05A3  01A2               	clrf	___lwdiv@dividend
  3257  05A4  07A2               	addwf	___lwdiv@dividend,f
  3258  05A5  120A  158A  21C0  120A  118A  	fcall	___lwdiv
  3259  05AA  1283               	bcf	3,5	;RP0=0, select bank0
  3260  05AB  1303               	bcf	3,6	;RP1=0, select bank0
  3261  05AC  0821               	movf	?___lwdiv+1,w
  3262  05AD  01AB               	clrf	___lwmod@dividend+1
  3263  05AE  07AB               	addwf	___lwmod@dividend+1,f
  3264  05AF  0820               	movf	?___lwdiv,w
  3265  05B0  01AA               	clrf	___lwmod@dividend
  3266  05B1  07AA               	addwf	___lwmod@dividend,f
  3267  05B2  120A  158A  218A  120A  118A  	fcall	___lwmod
  3268  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  3269  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  3270  05B9  0828               	movf	?___lwmod,w
  3271  05BA  3E30               	addlw	48
  3272  05BB  00B4               	movwf	??_sprintf+1
  3273  05BC  0834               	movf	??_sprintf+1,w
  3274  05BD  00C1               	movwf	sprintf@c
  3275                           
  3276                           ;doprnt.c: 1532: }
  3277                           ;doprnt.c: 1533: ((*sp++ = (c)),(++ccnt));
  3278  05BE  0841               	movf	sprintf@c,w
  3279  05BF  00B3               	movwf	??_sprintf
  3280  05C0  0842               	movf	sprintf@sp,w
  3281  05C1  0084               	movwf	4
  3282  05C2  0833               	movf	??_sprintf,w
  3283  05C3  1383               	bcf	3,7	;select IRP bank0
  3284  05C4  0080               	movwf	0
  3285  05C5  3001               	movlw	1
  3286  05C6  00B3               	movwf	??_sprintf
  3287  05C7  0833               	movf	??_sprintf,w
  3288  05C8  07C2               	addwf	sprintf@sp,f
  3289  05C9  3001               	movlw	1
  3290  05CA  07B8               	addwf	sprintf@ccnt,f
  3291  05CB  1803               	skipnc
  3292  05CC  0AB9               	incf	sprintf@ccnt+1,f
  3293  05CD  3000               	movlw	0
  3294  05CE  07B9               	addwf	sprintf@ccnt+1,f
  3295  05CF  2D82               	goto	l2626
  3296  05D0                     l2630:	
  3297                           ;doprnt.c: 1534: }
  3298                           ;doprnt.c: 1542: }
  3299                           ;doprnt.c: 1544: alldone:
  3300                           
  3301                           
  3302                           ;doprnt.c: 1547: *sp = 0;
  3303  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  3304  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  3305  05D2  0842               	movf	sprintf@sp,w
  3306  05D3  0084               	movwf	4
  3307  05D4  1383               	bcf	3,7	;select IRP bank0
  3308  05D5  0180               	clrf	0
  3309                           
  3310                           ;doprnt.c: 1549: return ccnt;
  3311  05D6  0839               	movf	sprintf@ccnt+1,w
  3312  05D7  01AF               	clrf	?_sprintf+1
  3313  05D8  07AF               	addwf	?_sprintf+1,f
  3314  05D9  0838               	movf	sprintf@ccnt,w
  3315  05DA  01AE               	clrf	?_sprintf
  3316  05DB  07AE               	addwf	?_sprintf,f
  3317  05DC  0008               	return
  3318  05DD                     __end_of_sprintf:	
  3319                           
  3320                           	psect	text8
  3321  16E1                     __ptext8:	
  3322 ;; *************** function _isdigit *****************
  3323 ;; Defined at:
  3324 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  3325 ;; Parameters:    Size  Location     Type
  3326 ;;  c               1    wreg     unsigned char 
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  c               1    1[BANK0 ] unsigned char 
  3329 ;; Return value:  Size  Location     Type
  3330 ;;		None               void
  3331 ;; Registers used:
  3332 ;;		wreg, status,2, status,0
  3333 ;; Tracked objects:
  3334 ;;		On entry : 0/0
  3335 ;;		On exit  : 0/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3338 ;;      Params:         0       0       0       0       0
  3339 ;;      Locals:         0       2       0       0       0
  3340 ;;      Temps:          0       0       0       0       0
  3341 ;;      Totals:         0       2       0       0       0
  3342 ;;Total ram usage:        2 bytes
  3343 ;; Hardware stack levels used:    1
  3344 ;; Hardware stack levels required when called:    2
  3345 ;; This function calls:
  3346 ;;		Nothing
  3347 ;; This function is called by:
  3348 ;;		_sprintf
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           
  3353                           ;psect for function _isdigit
  3354  16E1                     _isdigit:	
  3355                           
  3356                           ;incstack = 0
  3357                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3358                           ;isdigit@c stored from wreg
  3359  16E1  1283               	bcf	3,5	;RP0=0, select bank0
  3360  16E2  1303               	bcf	3,6	;RP1=0, select bank0
  3361  16E3  00A1               	movwf	isdigit@c
  3362  16E4  01A0               	clrf	_isdigit$411
  3363  16E5  303A               	movlw	58
  3364  16E6  0221               	subwf	isdigit@c,w
  3365  16E7  1803               	skipnc
  3366  16E8  2EEF               	goto	l2486
  3367  16E9  3030               	movlw	48
  3368  16EA  0221               	subwf	isdigit@c,w
  3369  16EB  1C03               	skipc
  3370  16EC  2EEF               	goto	l2486
  3371  16ED  01A0               	clrf	_isdigit$411
  3372  16EE  0AA0               	incf	_isdigit$411,f
  3373  16EF                     l2486:	
  3374  16EF  0C20               	rrf	_isdigit$411,w
  3375  16F0  0008               	return
  3376  16F1                     __end_of_isdigit:	
  3377                           
  3378                           	psect	text9
  3379  0912                     __ptext9:	
  3380 ;; *************** function ___wmul *****************
  3381 ;; Defined at:
  3382 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  3383 ;; Parameters:    Size  Location     Type
  3384 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3385 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3386 ;; Auto vars:     Size  Location     Type
  3387 ;;  product         2    4[BANK0 ] unsigned int 
  3388 ;; Return value:  Size  Location     Type
  3389 ;;                  2    0[BANK0 ] unsigned int 
  3390 ;; Registers used:
  3391 ;;		wreg, status,2, status,0
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3397 ;;      Params:         0       4       0       0       0
  3398 ;;      Locals:         0       2       0       0       0
  3399 ;;      Temps:          0       0       0       0       0
  3400 ;;      Totals:         0       6       0       0       0
  3401 ;;Total ram usage:        6 bytes
  3402 ;; Hardware stack levels used:    1
  3403 ;; Hardware stack levels required when called:    2
  3404 ;; This function calls:
  3405 ;;		Nothing
  3406 ;; This function is called by:
  3407 ;;		_sprintf
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           
  3412                           ;psect for function ___wmul
  3413  0912                     ___wmul:	
  3414                           
  3415                           ;incstack = 0
  3416                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3417  0912  1283               	bcf	3,5	;RP0=0, select bank0
  3418  0913  1303               	bcf	3,6	;RP1=0, select bank0
  3419  0914  01A4               	clrf	___wmul@product
  3420  0915  01A5               	clrf	___wmul@product+1
  3421  0916                     l2492:	
  3422  0916  1C20               	btfss	___wmul@multiplier,0
  3423  0917  291E               	goto	l360
  3424  0918  0822               	movf	___wmul@multiplicand,w
  3425  0919  07A4               	addwf	___wmul@product,f
  3426  091A  1803               	skipnc
  3427  091B  0AA5               	incf	___wmul@product+1,f
  3428  091C  0823               	movf	___wmul@multiplicand+1,w
  3429  091D  07A5               	addwf	___wmul@product+1,f
  3430  091E                     l360:	
  3431  091E  3001               	movlw	1
  3432  091F                     u3065:	
  3433  091F  1003               	clrc
  3434  0920  0DA2               	rlf	___wmul@multiplicand,f
  3435  0921  0DA3               	rlf	___wmul@multiplicand+1,f
  3436  0922  3EFF               	addlw	-1
  3437  0923  1D03               	skipz
  3438  0924  291F               	goto	u3065
  3439  0925  3001               	movlw	1
  3440  0926                     u3075:	
  3441  0926  1003               	clrc
  3442  0927  0CA1               	rrf	___wmul@multiplier+1,f
  3443  0928  0CA0               	rrf	___wmul@multiplier,f
  3444  0929  3EFF               	addlw	-1
  3445  092A  1D03               	skipz
  3446  092B  2926               	goto	u3075
  3447  092C  0821               	movf	___wmul@multiplier+1,w
  3448  092D  0420               	iorwf	___wmul@multiplier,w
  3449  092E  1D03               	skipz
  3450  092F  2916               	goto	l2492
  3451  0930  0825               	movf	___wmul@product+1,w
  3452  0931  01A1               	clrf	?___wmul+1
  3453  0932  07A1               	addwf	?___wmul+1,f
  3454  0933  0824               	movf	___wmul@product,w
  3455  0934  01A0               	clrf	?___wmul
  3456  0935  07A0               	addwf	?___wmul,f
  3457  0936  0008               	return
  3458  0937                     __end_of___wmul:	
  3459                           
  3460                           	psect	text10
  3461  098A                     __ptext10:	
  3462 ;; *************** function ___lwmod *****************
  3463 ;; Defined at:
  3464 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;  divisor         2    8[BANK0 ] unsigned int 
  3467 ;;  dividend        2   10[BANK0 ] unsigned int 
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;  counter         1   13[BANK0 ] unsigned char 
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  2    8[BANK0 ] unsigned int 
  3472 ;; Registers used:
  3473 ;;		wreg, status,2, status,0
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3479 ;;      Params:         0       4       0       0       0
  3480 ;;      Locals:         0       1       0       0       0
  3481 ;;      Temps:          0       1       0       0       0
  3482 ;;      Totals:         0       6       0       0       0
  3483 ;;Total ram usage:        6 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    2
  3486 ;; This function calls:
  3487 ;;		Nothing
  3488 ;; This function is called by:
  3489 ;;		_sprintf
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           
  3494                           ;psect for function ___lwmod
  3495  098A                     ___lwmod:	
  3496                           
  3497                           ;incstack = 0
  3498                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3499  098A  1283               	bcf	3,5	;RP0=0, select bank0
  3500  098B  1303               	bcf	3,6	;RP1=0, select bank0
  3501  098C  0829               	movf	___lwmod@divisor+1,w
  3502  098D  0428               	iorwf	___lwmod@divisor,w
  3503  098E  1903               	skipnz
  3504  098F  29B9               	goto	l1734
  3505  0990  01AD               	clrf	___lwmod@counter
  3506  0991  0AAD               	incf	___lwmod@counter,f
  3507  0992                     l1724:	
  3508  0992  1BA9               	btfsc	___lwmod@divisor+1,7
  3509  0993  29A0               	goto	l1726
  3510  0994  3001               	movlw	1
  3511  0995                     u1775:	
  3512  0995  1003               	clrc
  3513  0996  0DA8               	rlf	___lwmod@divisor,f
  3514  0997  0DA9               	rlf	___lwmod@divisor+1,f
  3515  0998  3EFF               	addlw	-1
  3516  0999  1D03               	skipz
  3517  099A  2995               	goto	u1775
  3518  099B  3001               	movlw	1
  3519  099C  00AC               	movwf	??___lwmod
  3520  099D  082C               	movf	??___lwmod,w
  3521  099E  07AD               	addwf	___lwmod@counter,f
  3522  099F  2992               	goto	l1724
  3523  09A0                     l1726:	
  3524  09A0  0829               	movf	___lwmod@divisor+1,w
  3525  09A1  022B               	subwf	___lwmod@dividend+1,w
  3526  09A2  1D03               	skipz
  3527  09A3  29A6               	goto	u1795
  3528  09A4  0828               	movf	___lwmod@divisor,w
  3529  09A5  022A               	subwf	___lwmod@dividend,w
  3530  09A6                     u1795:	
  3531  09A6  1C03               	skipc
  3532  09A7  29AE               	goto	l1730
  3533  09A8  0828               	movf	___lwmod@divisor,w
  3534  09A9  02AA               	subwf	___lwmod@dividend,f
  3535  09AA  0829               	movf	___lwmod@divisor+1,w
  3536  09AB  1C03               	skipc
  3537  09AC  03AB               	decf	___lwmod@dividend+1,f
  3538  09AD  02AB               	subwf	___lwmod@dividend+1,f
  3539  09AE                     l1730:	
  3540  09AE  3001               	movlw	1
  3541  09AF                     u1805:	
  3542  09AF  1003               	clrc
  3543  09B0  0CA9               	rrf	___lwmod@divisor+1,f
  3544  09B1  0CA8               	rrf	___lwmod@divisor,f
  3545  09B2  3EFF               	addlw	-1
  3546  09B3  1D03               	skipz
  3547  09B4  29AF               	goto	u1805
  3548  09B5  3001               	movlw	1
  3549  09B6  02AD               	subwf	___lwmod@counter,f
  3550  09B7  1D03               	btfss	3,2
  3551  09B8  29A0               	goto	l1726
  3552  09B9                     l1734:	
  3553  09B9  082B               	movf	___lwmod@dividend+1,w
  3554  09BA  01A9               	clrf	?___lwmod+1
  3555  09BB  07A9               	addwf	?___lwmod+1,f
  3556  09BC  082A               	movf	___lwmod@dividend,w
  3557  09BD  01A8               	clrf	?___lwmod
  3558  09BE  07A8               	addwf	?___lwmod,f
  3559  09BF  0008               	return
  3560  09C0                     __end_of___lwmod:	
  3561                           
  3562                           	psect	text11
  3563  09C0                     __ptext11:	
  3564 ;; *************** function ___lwdiv *****************
  3565 ;; Defined at:
  3566 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;  divisor         2    0[BANK0 ] unsigned int 
  3569 ;;  dividend        2    2[BANK0 ] unsigned int 
  3570 ;; Auto vars:     Size  Location     Type
  3571 ;;  quotient        2    5[BANK0 ] unsigned int 
  3572 ;;  counter         1    7[BANK0 ] unsigned char 
  3573 ;; Return value:  Size  Location     Type
  3574 ;;                  2    0[BANK0 ] unsigned int 
  3575 ;; Registers used:
  3576 ;;		wreg, status,2, status,0
  3577 ;; Tracked objects:
  3578 ;;		On entry : 0/0
  3579 ;;		On exit  : 0/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3582 ;;      Params:         0       4       0       0       0
  3583 ;;      Locals:         0       3       0       0       0
  3584 ;;      Temps:          0       1       0       0       0
  3585 ;;      Totals:         0       8       0       0       0
  3586 ;;Total ram usage:        8 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    2
  3589 ;; This function calls:
  3590 ;;		Nothing
  3591 ;; This function is called by:
  3592 ;;		_sprintf
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           
  3597                           ;psect for function ___lwdiv
  3598  09C0                     ___lwdiv:	
  3599                           
  3600                           ;incstack = 0
  3601                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3602  09C0  1283               	bcf	3,5	;RP0=0, select bank0
  3603  09C1  1303               	bcf	3,6	;RP1=0, select bank0
  3604  09C2  01A5               	clrf	___lwdiv@quotient
  3605  09C3  01A6               	clrf	___lwdiv@quotient+1
  3606  09C4  0821               	movf	___lwdiv@divisor+1,w
  3607  09C5  0420               	iorwf	___lwdiv@divisor,w
  3608  09C6  1903               	skipnz
  3609  09C7  29F9               	goto	l1712
  3610  09C8  01A7               	clrf	___lwdiv@counter
  3611  09C9  0AA7               	incf	___lwdiv@counter,f
  3612  09CA                     l1700:	
  3613  09CA  1BA1               	btfsc	___lwdiv@divisor+1,7
  3614  09CB  29D8               	goto	l1702
  3615  09CC  3001               	movlw	1
  3616  09CD                     u1705:	
  3617  09CD  1003               	clrc
  3618  09CE  0DA0               	rlf	___lwdiv@divisor,f
  3619  09CF  0DA1               	rlf	___lwdiv@divisor+1,f
  3620  09D0  3EFF               	addlw	-1
  3621  09D1  1D03               	skipz
  3622  09D2  29CD               	goto	u1705
  3623  09D3  3001               	movlw	1
  3624  09D4  00A4               	movwf	??___lwdiv
  3625  09D5  0824               	movf	??___lwdiv,w
  3626  09D6  07A7               	addwf	___lwdiv@counter,f
  3627  09D7  29CA               	goto	l1700
  3628  09D8                     l1702:	
  3629  09D8  3001               	movlw	1
  3630  09D9                     u1725:	
  3631  09D9  1003               	clrc
  3632  09DA  0DA5               	rlf	___lwdiv@quotient,f
  3633  09DB  0DA6               	rlf	___lwdiv@quotient+1,f
  3634  09DC  3EFF               	addlw	-1
  3635  09DD  1D03               	skipz
  3636  09DE  29D9               	goto	u1725
  3637  09DF  0821               	movf	___lwdiv@divisor+1,w
  3638  09E0  0223               	subwf	___lwdiv@dividend+1,w
  3639  09E1  1D03               	skipz
  3640  09E2  29E5               	goto	u1735
  3641  09E3  0820               	movf	___lwdiv@divisor,w
  3642  09E4  0222               	subwf	___lwdiv@dividend,w
  3643  09E5                     u1735:	
  3644  09E5  1C03               	skipc
  3645  09E6  29EE               	goto	l1708
  3646  09E7  0820               	movf	___lwdiv@divisor,w
  3647  09E8  02A2               	subwf	___lwdiv@dividend,f
  3648  09E9  0821               	movf	___lwdiv@divisor+1,w
  3649  09EA  1C03               	skipc
  3650  09EB  03A3               	decf	___lwdiv@dividend+1,f
  3651  09EC  02A3               	subwf	___lwdiv@dividend+1,f
  3652  09ED  1425               	bsf	___lwdiv@quotient,0
  3653  09EE                     l1708:	
  3654  09EE  3001               	movlw	1
  3655  09EF                     u1745:	
  3656  09EF  1003               	clrc
  3657  09F0  0CA1               	rrf	___lwdiv@divisor+1,f
  3658  09F1  0CA0               	rrf	___lwdiv@divisor,f
  3659  09F2  3EFF               	addlw	-1
  3660  09F3  1D03               	skipz
  3661  09F4  29EF               	goto	u1745
  3662  09F5  3001               	movlw	1
  3663  09F6  02A7               	subwf	___lwdiv@counter,f
  3664  09F7  1D03               	btfss	3,2
  3665  09F8  29D8               	goto	l1702
  3666  09F9                     l1712:	
  3667  09F9  0826               	movf	___lwdiv@quotient+1,w
  3668  09FA  01A1               	clrf	?___lwdiv+1
  3669  09FB  07A1               	addwf	?___lwdiv+1,f
  3670  09FC  0825               	movf	___lwdiv@quotient,w
  3671  09FD  01A0               	clrf	?___lwdiv
  3672  09FE  07A0               	addwf	?___lwdiv,f
  3673  09FF  0008               	return
  3674  0A00                     __end_of___lwdiv:	
  3675                           
  3676                           	psect	text12
  3677  0B8A                     __ptext12:	
  3678 ;; *************** function ___fttol *****************
  3679 ;; Defined at:
  3680 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;  f1              3   46[BANK0 ] float 
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;  lval            4   55[BANK0 ] unsigned long 
  3685 ;;  exp1            1   59[BANK0 ] unsigned char 
  3686 ;;  sign1           1   54[BANK0 ] unsigned char 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  4   46[BANK0 ] long 
  3689 ;; Registers used:
  3690 ;;		wreg, status,2, status,0
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3696 ;;      Params:         0       4       0       0       0
  3697 ;;      Locals:         0       6       0       0       0
  3698 ;;      Temps:          0       4       0       0       0
  3699 ;;      Totals:         0      14       0       0       0
  3700 ;;Total ram usage:       14 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:    2
  3703 ;; This function calls:
  3704 ;;		Nothing
  3705 ;; This function is called by:
  3706 ;;		_displayPPM
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           
  3711                           ;psect for function ___fttol
  3712  0B8A                     ___fttol:	
  3713                           
  3714                           ;incstack = 0
  3715                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3716  0B8A  1283               	bcf	3,5	;RP0=0, select bank0
  3717  0B8B  1303               	bcf	3,6	;RP1=0, select bank0
  3718  0B8C  084E               	movf	___fttol@f1,w
  3719  0B8D  00D2               	movwf	??___fttol
  3720  0B8E  084F               	movf	___fttol@f1+1,w
  3721  0B8F  00D3               	movwf	??___fttol+1
  3722  0B90  0850               	movf	___fttol@f1+2,w
  3723  0B91  00D4               	movwf	??___fttol+2
  3724  0B92  1003               	clrc
  3725  0B93  0D53               	rlf	??___fttol+1,w
  3726  0B94  0D54               	rlf	??___fttol+2,w
  3727  0B95  00D5               	movwf	??___fttol+3
  3728  0B96  0855               	movf	??___fttol+3,w
  3729  0B97  00DB               	movwf	___fttol@exp1
  3730  0B98  08DB               	movf	___fttol@exp1,f
  3731  0B99  1D03               	skipz
  3732  0B9A  2BA4               	goto	l2058
  3733  0B9B  3000               	movlw	0
  3734  0B9C  00D1               	movwf	?___fttol+3
  3735  0B9D  3000               	movlw	0
  3736  0B9E  00D0               	movwf	?___fttol+2
  3737  0B9F  3000               	movlw	0
  3738  0BA0  00CF               	movwf	?___fttol+1
  3739  0BA1  3000               	movlw	0
  3740  0BA2  00CE               	movwf	?___fttol
  3741  0BA3  0008               	return
  3742  0BA4                     l2058:	
  3743  0BA4  084E               	movf	___fttol@f1,w
  3744  0BA5  00D2               	movwf	??___fttol
  3745  0BA6  084F               	movf	___fttol@f1+1,w
  3746  0BA7  00D3               	movwf	??___fttol+1
  3747  0BA8  0850               	movf	___fttol@f1+2,w
  3748  0BA9  00D4               	movwf	??___fttol+2
  3749  0BAA  3017               	movlw	23
  3750  0BAB                     u2525:	
  3751  0BAB  1003               	clrc
  3752  0BAC  0CD4               	rrf	??___fttol+2,f
  3753  0BAD  0CD3               	rrf	??___fttol+1,f
  3754  0BAE  0CD2               	rrf	??___fttol,f
  3755  0BAF  3EFF               	addlw	-1
  3756  0BB0  1D03               	skipz
  3757  0BB1  2BAB               	goto	u2525
  3758  0BB2  0852               	movf	??___fttol,w
  3759  0BB3  00D5               	movwf	??___fttol+3
  3760  0BB4  0855               	movf	??___fttol+3,w
  3761  0BB5  00D6               	movwf	___fttol@sign1
  3762  0BB6  17CF               	bsf	___fttol@f1+1,7
  3763  0BB7  30FF               	movlw	255
  3764  0BB8  05CE               	andwf	___fttol@f1,f
  3765  0BB9  30FF               	movlw	255
  3766  0BBA  05CF               	andwf	___fttol@f1+1,f
  3767  0BBB  3000               	movlw	0
  3768  0BBC  05D0               	andwf	___fttol@f1+2,f
  3769  0BBD  084E               	movf	___fttol@f1,w
  3770  0BBE  00D7               	movwf	___fttol@lval
  3771  0BBF  084F               	movf	___fttol@f1+1,w
  3772  0BC0  00D8               	movwf	___fttol@lval+1
  3773  0BC1  0850               	movf	___fttol@f1+2,w
  3774  0BC2  00D9               	movwf	___fttol@lval+2
  3775  0BC3  01DA               	clrf	___fttol@lval+3
  3776  0BC4  308E               	movlw	142
  3777  0BC5  02DB               	subwf	___fttol@exp1,f
  3778  0BC6  1FDB               	btfss	___fttol@exp1,7
  3779  0BC7  2BE6               	goto	l2078
  3780  0BC8  085B               	movf	___fttol@exp1,w
  3781  0BC9  3A80               	xorlw	128
  3782  0BCA  3E8F               	addlw	143
  3783  0BCB  1803               	skipnc
  3784  0BCC  2BD6               	goto	l2076
  3785  0BCD  3000               	movlw	0
  3786  0BCE  00D1               	movwf	?___fttol+3
  3787  0BCF  3000               	movlw	0
  3788  0BD0  00D0               	movwf	?___fttol+2
  3789  0BD1  3000               	movlw	0
  3790  0BD2  00CF               	movwf	?___fttol+1
  3791  0BD3  3000               	movlw	0
  3792  0BD4  00CE               	movwf	?___fttol
  3793  0BD5  0008               	return
  3794  0BD6                     l2076:	
  3795  0BD6  3001               	movlw	1
  3796  0BD7                     u2555:	
  3797  0BD7  1003               	clrc
  3798  0BD8  0CDA               	rrf	___fttol@lval+3,f
  3799  0BD9  0CD9               	rrf	___fttol@lval+2,f
  3800  0BDA  0CD8               	rrf	___fttol@lval+1,f
  3801  0BDB  0CD7               	rrf	___fttol@lval,f
  3802  0BDC  3EFF               	addlw	-1
  3803  0BDD  1D03               	skipz
  3804  0BDE  2BD7               	goto	u2555
  3805  0BDF  3001               	movlw	1
  3806  0BE0  00D2               	movwf	??___fttol
  3807  0BE1  0852               	movf	??___fttol,w
  3808  0BE2  07DB               	addwf	___fttol@exp1,f
  3809  0BE3  1903               	btfsc	3,2
  3810  0BE4  2C01               	goto	l2088
  3811  0BE5  2BD6               	goto	l2076
  3812  0BE6                     l2078:	
  3813  0BE6  3018               	movlw	24
  3814  0BE7  025B               	subwf	___fttol@exp1,w
  3815  0BE8  1C03               	skipc
  3816  0BE9  2BFE               	goto	l2086
  3817  0BEA  3000               	movlw	0
  3818  0BEB  00D1               	movwf	?___fttol+3
  3819  0BEC  3000               	movlw	0
  3820  0BED  00D0               	movwf	?___fttol+2
  3821  0BEE  3000               	movlw	0
  3822  0BEF  00CF               	movwf	?___fttol+1
  3823  0BF0  3000               	movlw	0
  3824  0BF1  00CE               	movwf	?___fttol
  3825  0BF2  0008               	return
  3826  0BF3                     l2084:	
  3827  0BF3  3001               	movlw	1
  3828  0BF4  00D2               	movwf	??___fttol
  3829  0BF5                     u2585:	
  3830  0BF5  1003               	clrc
  3831  0BF6  0DD7               	rlf	___fttol@lval,f
  3832  0BF7  0DD8               	rlf	___fttol@lval+1,f
  3833  0BF8  0DD9               	rlf	___fttol@lval+2,f
  3834  0BF9  0DDA               	rlf	___fttol@lval+3,f
  3835  0BFA  0BD2               	decfsz	??___fttol,f
  3836  0BFB  2BF5               	goto	u2585
  3837  0BFC  3001               	movlw	1
  3838  0BFD  02DB               	subwf	___fttol@exp1,f
  3839  0BFE                     l2086:	
  3840  0BFE  08DB               	movf	___fttol@exp1,f
  3841  0BFF  1D03               	skipz
  3842  0C00  2BF3               	goto	l2084
  3843  0C01                     l2088:	
  3844  0C01  0856               	movf	___fttol@sign1,w
  3845  0C02  1903               	btfsc	3,2
  3846  0C03  2C0F               	goto	l2092
  3847  0C04  09D7               	comf	___fttol@lval,f
  3848  0C05  09D8               	comf	___fttol@lval+1,f
  3849  0C06  09D9               	comf	___fttol@lval+2,f
  3850  0C07  09DA               	comf	___fttol@lval+3,f
  3851  0C08  0AD7               	incf	___fttol@lval,f
  3852  0C09  1903               	skipnz
  3853  0C0A  0AD8               	incf	___fttol@lval+1,f
  3854  0C0B  1903               	skipnz
  3855  0C0C  0AD9               	incf	___fttol@lval+2,f
  3856  0C0D  1903               	skipnz
  3857  0C0E  0ADA               	incf	___fttol@lval+3,f
  3858  0C0F                     l2092:	
  3859  0C0F  085A               	movf	___fttol@lval+3,w
  3860  0C10  00D1               	movwf	?___fttol+3
  3861  0C11  0859               	movf	___fttol@lval+2,w
  3862  0C12  00D0               	movwf	?___fttol+2
  3863  0C13  0858               	movf	___fttol@lval+1,w
  3864  0C14  00CF               	movwf	?___fttol+1
  3865  0C15  0857               	movf	___fttol@lval,w
  3866  0C16  00CE               	movwf	?___fttol
  3867  0C17  0008               	return
  3868  0C18                     __end_of___fttol:	
  3869                           
  3870                           	psect	text13
  3871  07F5                     __ptext13:	
  3872 ;; *************** function ___ftneg *****************
  3873 ;; Defined at:
  3874 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;  f1              3   14[BANK0 ] float 
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;		None
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  3   14[BANK0 ] float 
  3881 ;; Registers used:
  3882 ;;		wreg
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3888 ;;      Params:         0       3       0       0       0
  3889 ;;      Locals:         0       0       0       0       0
  3890 ;;      Temps:          0       0       0       0       0
  3891 ;;      Totals:         0       3       0       0       0
  3892 ;;Total ram usage:        3 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    2
  3895 ;; This function calls:
  3896 ;;		Nothing
  3897 ;; This function is called by:
  3898 ;;		_displayPPM
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           
  3903                           ;psect for function ___ftneg
  3904  07F5                     ___ftneg:	
  3905                           
  3906                           ;incstack = 0
  3907                           ; Regs used in ___ftneg: [wreg]
  3908  07F5  1283               	bcf	3,5	;RP0=0, select bank0
  3909  07F6  1303               	bcf	3,6	;RP1=0, select bank0
  3910  07F7  0830               	movf	___ftneg@f1+2,w
  3911  07F8  042F               	iorwf	___ftneg@f1+1,w
  3912  07F9  042E               	iorwf	___ftneg@f1,w
  3913  07FA  1903               	skipnz
  3914  07FB  0008               	return
  3915  07FC  3080               	movlw	128
  3916  07FD  06B0               	xorwf	___ftneg@f1+2,f
  3917  07FE  0008               	return
  3918  07FF                     __end_of___ftneg:	
  3919                           
  3920                           	psect	text14
  3921  172A                     __ptext14:	
  3922 ;; *************** function _startUpLCD *****************
  3923 ;; Defined at:
  3924 ;;		line 82 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;		None
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;		None
  3929 ;; Return value:  Size  Location     Type
  3930 ;;		None               void
  3931 ;; Registers used:
  3932 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3938 ;;      Params:         0       0       0       0       0
  3939 ;;      Locals:         0       0       0       0       0
  3940 ;;      Temps:          0       0       0       0       0
  3941 ;;      Totals:         0       0       0       0       0
  3942 ;;Total ram usage:        0 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    4
  3945 ;; This function calls:
  3946 ;;		_initLCD
  3947 ;;		_instCTRL
  3948 ;;		_printToLCD
  3949 ;; This function is called by:
  3950 ;;		_main
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           
  3955                           ;psect for function _startUpLCD
  3956  172A                     _startUpLCD:	
  3957                           
  3958                           ;main.c: 84: initLCD();
  3959                           
  3960                           ;incstack = 0
  3961                           ; Regs used in _startUpLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3962  172A  160A  118A  27B8  160A  118A  	fcall	_initLCD
  3963                           
  3964                           ;main.c: 85: instCTRL(0x80);
  3965  172F  3080               	movlw	128
  3966  1730  160A  118A  2704  160A  118A  	fcall	_instCTRL
  3967                           
  3968                           ;main.c: 86: printToLCD("TEST");
  3969  1735  30B8               	movlw	low (STR_6-__stringbase)
  3970  1736  1283               	bcf	3,5	;RP0=0, select bank0
  3971  1737  1303               	bcf	3,6	;RP1=0, select bank0
  3972  1738  00A2               	movwf	printToLCD@str
  3973  1739  3080               	movlw	128
  3974  173A  00A3               	movwf	printToLCD@str+1
  3975  173B  120A  158A  215F   	fcall	_printToLCD
  3976  173E  0008               	return
  3977  173F                     __end_of_startUpLCD:	
  3978                           
  3979                           	psect	text15
  3980  095F                     __ptext15:	
  3981 ;; *************** function _printToLCD *****************
  3982 ;; Defined at:
  3983 ;;		line 47 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  3984 ;; Parameters:    Size  Location     Type
  3985 ;;  str             2    2[BANK0 ] PTR const unsigned char 
  3986 ;;		 -> setMinutes@debugInfo(10), setHours@debugInfo(10), displayTime@timeFormat(10), STR_12(12), 
  3987 ;;		 -> STR_11(10), STR_10(19), STR_9(15), STR_8(15), 
  3988 ;;		 -> STR_7(7), STR_6(5), STR_5(17), STR_4(17), 
  3989 ;;		 -> displayPPM@strBuffer(50), 
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;		None
  3992 ;; Return value:  Size  Location     Type
  3993 ;;		None               void
  3994 ;; Registers used:
  3995 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4001 ;;      Params:         0       2       0       0       0
  4002 ;;      Locals:         0       0       0       0       0
  4003 ;;      Temps:          0       0       0       0       0
  4004 ;;      Totals:         0       2       0       0       0
  4005 ;;Total ram usage:        2 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    3
  4008 ;; This function calls:
  4009 ;;		_dataCTRL
  4010 ;;		_instCTRL
  4011 ;; This function is called by:
  4012 ;;		_displayPPM
  4013 ;;		_startUpLCD
  4014 ;;		_updateState
  4015 ;;		_displayTime
  4016 ;;		_setHours
  4017 ;;		_setMinutes
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           
  4022                           ;psect for function _printToLCD
  4023  095F                     _printToLCD:	
  4024                           
  4025                           ;lcd_functions.h: 49: instCTRL(0x0C);
  4026                           
  4027                           ;incstack = 0
  4028                           ; Regs used in _printToLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4029  095F  300C               	movlw	12
  4030  0960  160A  118A  2704  120A  158A  	fcall	_instCTRL
  4031  0965                     l2508:	
  4032                           ;lcd_functions.h: 50: while (*str)
  4033                           
  4034  0965  1283               	bcf	3,5	;RP0=0, select bank0
  4035  0966  1303               	bcf	3,6	;RP1=0, select bank0
  4036  0967  0823               	movf	printToLCD@str+1,w
  4037  0968  00FF               	movwf	127
  4038  0969  0822               	movf	printToLCD@str,w
  4039  096A  0084               	movwf	4
  4040  096B  120A  158A  2000  120A  158A  	fcall	stringtab
  4041  0970  3800               	iorlw	0
  4042  0971  1903               	btfsc	3,2
  4043  0972  0008               	return
  4044                           
  4045                           ;lcd_functions.h: 51: {
  4046                           ;lcd_functions.h: 52: dataCTRL(*str);
  4047  0973  1283               	bcf	3,5	;RP0=0, select bank0
  4048  0974  1303               	bcf	3,6	;RP1=0, select bank0
  4049  0975  0823               	movf	printToLCD@str+1,w
  4050  0976  00FF               	movwf	127
  4051  0977  0822               	movf	printToLCD@str,w
  4052  0978  0084               	movwf	4
  4053  0979  120A  158A  2000  120A  158A  	fcall	stringtab
  4054  097E  160A  118A  2717  120A  158A  	fcall	_dataCTRL
  4055                           
  4056                           ;lcd_functions.h: 53: str++;
  4057  0983  3001               	movlw	1
  4058  0984  1283               	bcf	3,5	;RP0=0, select bank0
  4059  0985  1303               	bcf	3,6	;RP1=0, select bank0
  4060  0986  07A2               	addwf	printToLCD@str,f
  4061  0987  1803               	skipnc
  4062  0988  0AA3               	incf	printToLCD@str+1,f
  4063  0989  2965               	goto	l2508
  4064  098A                     __end_of_printToLCD:	
  4065                           
  4066                           	psect	text16
  4067  1717                     __ptext16:	
  4068 ;; *************** function _dataCTRL *****************
  4069 ;; Defined at:
  4070 ;;		line 27 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;  DAT             1    wreg     unsigned char 
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;  DAT             1    1[BANK0 ] unsigned char 
  4075 ;; Return value:  Size  Location     Type
  4076 ;;		None               void
  4077 ;; Registers used:
  4078 ;;		wreg
  4079 ;; Tracked objects:
  4080 ;;		On entry : 0/0
  4081 ;;		On exit  : 0/0
  4082 ;;		Unchanged: 0/0
  4083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4084 ;;      Params:         0       0       0       0       0
  4085 ;;      Locals:         0       1       0       0       0
  4086 ;;      Temps:          0       1       0       0       0
  4087 ;;      Totals:         0       2       0       0       0
  4088 ;;Total ram usage:        2 bytes
  4089 ;; Hardware stack levels used:    1
  4090 ;; Hardware stack levels required when called:    2
  4091 ;; This function calls:
  4092 ;;		Nothing
  4093 ;; This function is called by:
  4094 ;;		_printToLCD
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           
  4099                           ;psect for function _dataCTRL
  4100  1717                     _dataCTRL:	
  4101                           
  4102                           ;incstack = 0
  4103                           ; Regs used in _dataCTRL: [wreg]
  4104                           ;dataCTRL@DAT stored from wreg
  4105  1717  1283               	bcf	3,5	;RP0=0, select bank0
  4106  1718  1303               	bcf	3,6	;RP1=0, select bank0
  4107  1719  00A1               	movwf	dataCTRL@DAT
  4108                           
  4109                           ;lcd_functions.h: 29: PORTD = DAT;
  4110  171A  0821               	movf	dataCTRL@DAT,w
  4111  171B  0088               	movwf	8	;volatile
  4112                           
  4113                           ;lcd_functions.h: 30: RC0 = 1;
  4114  171C  1407               	bsf	7,0	;volatile
  4115                           
  4116                           ;lcd_functions.h: 31: RC1 = 0;
  4117  171D  1087               	bcf	7,1	;volatile
  4118                           
  4119                           ;lcd_functions.h: 32: RC2 = 1;
  4120  171E  1507               	bsf	7,2	;volatile
  4121                           
  4122                           ;lcd_functions.h: 33: _delay((unsigned long)((1)*(4000000/4000.0)));
  4123  171F  30F9               	movlw	249
  4124  1720  00A0               	movwf	??_dataCTRL
  4125  1721                     u3577:	
  4126  1721  0000               	nop
  4127  1722  0BA0               	decfsz	??_dataCTRL,f
  4128  1723  2F21               	goto	u3577
  4129  1724  2F25               	nop2	;nop
  4130  1725  0000               	nop
  4131                           
  4132                           ;lcd_functions.h: 34: RC2 = 0;
  4133  1726  1283               	bcf	3,5	;RP0=0, select bank0
  4134  1727  1303               	bcf	3,6	;RP1=0, select bank0
  4135  1728  1107               	bcf	7,2	;volatile
  4136  1729  0008               	return
  4137  172A                     __end_of_dataCTRL:	
  4138                           
  4139                           	psect	text17
  4140  17B8                     __ptext17:	
  4141 ;; *************** function _initLCD *****************
  4142 ;; Defined at:
  4143 ;;		line 37 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;		None
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;		None
  4148 ;; Return value:  Size  Location     Type
  4149 ;;		None               void
  4150 ;; Registers used:
  4151 ;;		wreg, status,2, status,0, pclath, cstack
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4157 ;;      Params:         0       0       0       0       0
  4158 ;;      Locals:         0       0       0       0       0
  4159 ;;      Temps:          0       1       0       0       0
  4160 ;;      Totals:         0       1       0       0       0
  4161 ;;Total ram usage:        1 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:    3
  4164 ;; This function calls:
  4165 ;;		_instCTRL
  4166 ;; This function is called by:
  4167 ;;		_startUpLCD
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           
  4172                           ;psect for function _initLCD
  4173  17B8                     _initLCD:	
  4174                           
  4175                           ;lcd_functions.h: 39: instCTRL(0x38);
  4176                           
  4177                           ;incstack = 0
  4178                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  4179  17B8  3038               	movlw	56
  4180  17B9  160A  118A  2704  160A  118A  	fcall	_instCTRL
  4181                           
  4182                           ;lcd_functions.h: 40: _delay((unsigned long)((50)*(4000000/4000000.0)));
  4183  17BE  3010               	movlw	16
  4184  17BF  1283               	bcf	3,5	;RP0=0, select bank0
  4185  17C0  1303               	bcf	3,6	;RP1=0, select bank0
  4186  17C1  00A2               	movwf	??_initLCD
  4187  17C2                     u3587:	
  4188  17C2  0BA2               	decfsz	??_initLCD,f
  4189  17C3  2FC2               	goto	u3587
  4190  17C4  0000               	nop
  4191                           
  4192                           ;lcd_functions.h: 41: instCTRL(0x0C);
  4193  17C5  300C               	movlw	12
  4194  17C6  160A  118A  2704  160A  118A  	fcall	_instCTRL
  4195                           
  4196                           ;lcd_functions.h: 42: instCTRL(0x01);
  4197  17CB  3001               	movlw	1
  4198  17CC  160A  118A  2704  160A  118A  	fcall	_instCTRL
  4199                           
  4200                           ;lcd_functions.h: 43: instCTRL(0x06);
  4201  17D1  3006               	movlw	6
  4202  17D2  160A  118A  2704  160A  118A  	fcall	_instCTRL
  4203                           
  4204                           ;lcd_functions.h: 44: instCTRL(0x0F);
  4205  17D7  300F               	movlw	15
  4206  17D8  160A  118A  2704   	fcall	_instCTRL
  4207  17DB  0008               	return
  4208  17DC                     __end_of_initLCD:	
  4209                           
  4210                           	psect	text18
  4211  16D2                     __ptext18:	
  4212 ;; *************** function _setPortDirections *****************
  4213 ;; Defined at:
  4214 ;;		line 64 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;		None
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;		None
  4219 ;; Return value:  Size  Location     Type
  4220 ;;		None               void
  4221 ;; Registers used:
  4222 ;;		wreg, status,2
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4228 ;;      Params:         0       0       0       0       0
  4229 ;;      Locals:         0       0       0       0       0
  4230 ;;      Temps:          0       0       0       0       0
  4231 ;;      Totals:         0       0       0       0       0
  4232 ;;Total ram usage:        0 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    2
  4235 ;; This function calls:
  4236 ;;		Nothing
  4237 ;; This function is called by:
  4238 ;;		_main
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           
  4243                           ;psect for function _setPortDirections
  4244  16D2                     _setPortDirections:	
  4245                           
  4246                           ;main.c: 66: TRISA = 0xFF;
  4247                           
  4248                           ;incstack = 0
  4249                           ; Regs used in _setPortDirections: [wreg+status,2]
  4250  16D2  30FF               	movlw	255
  4251  16D3  1683               	bsf	3,5	;RP0=1, select bank1
  4252  16D4  1303               	bcf	3,6	;RP1=0, select bank1
  4253  16D5  0085               	movwf	5	;volatile
  4254                           
  4255                           ;main.c: 67: TRISB = 0xFF;
  4256  16D6  30FF               	movlw	255
  4257  16D7  0086               	movwf	6	;volatile
  4258                           
  4259                           ;main.c: 68: TRISC = 0x00;
  4260  16D8  0187               	clrf	7	;volatile
  4261                           
  4262                           ;main.c: 69: TRISD = 0x00;
  4263  16D9  0188               	clrf	8	;volatile
  4264                           
  4265                           ;main.c: 70: PORTA = 0x00;
  4266  16DA  1283               	bcf	3,5	;RP0=0, select bank0
  4267  16DB  1303               	bcf	3,6	;RP1=0, select bank0
  4268  16DC  0185               	clrf	5	;volatile
  4269                           
  4270                           ;main.c: 71: PORTB = 0x00;
  4271  16DD  0186               	clrf	6	;volatile
  4272                           
  4273                           ;main.c: 72: PORTC = 0x00;
  4274  16DE  0187               	clrf	7	;volatile
  4275                           
  4276                           ;main.c: 73: PORTD = 0x00;
  4277  16DF  0188               	clrf	8	;volatile
  4278  16E0  0008               	return
  4279  16E1                     __end_of_setPortDirections:	
  4280                           
  4281                           	psect	text19
  4282  175A                     __ptext19:	
  4283 ;; *************** function _runClock *****************
  4284 ;; Defined at:
  4285 ;;		line 181 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;		None
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;		None
  4290 ;; Return value:  Size  Location     Type
  4291 ;;		None               void
  4292 ;; Registers used:
  4293 ;;		wreg, status,2, status,0
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4299 ;;      Params:         0       0       0       0       0
  4300 ;;      Locals:         0       0       0       0       0
  4301 ;;      Temps:          0       2       0       0       0
  4302 ;;      Totals:         0       2       0       0       0
  4303 ;;Total ram usage:        2 bytes
  4304 ;; Hardware stack levels used:    1
  4305 ;; Hardware stack levels required when called:    2
  4306 ;; This function calls:
  4307 ;;		Nothing
  4308 ;; This function is called by:
  4309 ;;		_main
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           
  4314                           ;psect for function _runClock
  4315  175A                     _runClock:	
  4316                           
  4317                           ;main.c: 183: minutes++;
  4318                           
  4319                           ;incstack = 0
  4320                           ; Regs used in _runClock: [wreg+status,2+status,0]
  4321  175A  3001               	movlw	1
  4322  175B  1283               	bcf	3,5	;RP0=0, select bank0
  4323  175C  1303               	bcf	3,6	;RP1=0, select bank0
  4324  175D  00A0               	movwf	??_runClock
  4325  175E  0820               	movf	??_runClock,w
  4326  175F  07E7               	addwf	_minutes,f	;volatile
  4327                           
  4328                           ;main.c: 184: if (minutes >= 60)
  4329  1760  303C               	movlw	60
  4330  1761  0267               	subwf	_minutes,w	;volatile
  4331  1762  1C03               	skipc
  4332  1763  2F6D               	goto	l2344
  4333                           
  4334                           ;main.c: 185: {
  4335                           ;main.c: 186: minutes = 0;
  4336  1764  01E7               	clrf	_minutes	;volatile
  4337                           
  4338                           ;main.c: 187: hours++;
  4339  1765  3001               	movlw	1
  4340  1766  00A0               	movwf	??_runClock
  4341  1767  0820               	movf	??_runClock,w
  4342  1768  07EB               	addwf	_hours,f	;volatile
  4343                           
  4344                           ;main.c: 188: if (hours >= 24)
  4345  1769  3018               	movlw	24
  4346  176A  026B               	subwf	_hours,w	;volatile
  4347  176B  1803               	btfsc	3,0
  4348                           
  4349                           ;main.c: 189: {
  4350                           ;main.c: 190: hours = 0;
  4351  176C  01EB               	clrf	_hours	;volatile
  4352  176D                     l2344:	
  4353                           
  4354                           ;main.c: 191: }
  4355                           ;main.c: 192: }
  4356                           ;main.c: 193: _delay((unsigned long)((50)*(4000000/4000.0)));
  4357  176D  3041               	movlw	65
  4358  176E  00A1               	movwf	??_runClock+1
  4359  176F  30EE               	movlw	238
  4360  1770  00A0               	movwf	??_runClock
  4361  1771                     u3597:	
  4362  1771  0BA0               	decfsz	??_runClock,f
  4363  1772  2F71               	goto	u3597
  4364  1773  0BA1               	decfsz	??_runClock+1,f
  4365  1774  2F71               	goto	u3597
  4366  1775  0000               	nop
  4367  1776  0008               	return
  4368  1777                     __end_of_runClock:	
  4369                           
  4370                           	psect	text20
  4371  16BA                     __ptext20:	
  4372 ;; *************** function _initInterrupt *****************
  4373 ;; Defined at:
  4374 ;;		line 89 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;		None
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;		None
  4379 ;; Return value:  Size  Location     Type
  4380 ;;		None               void
  4381 ;; Registers used:
  4382 ;;		None
  4383 ;; Tracked objects:
  4384 ;;		On entry : 0/0
  4385 ;;		On exit  : 0/0
  4386 ;;		Unchanged: 0/0
  4387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4388 ;;      Params:         0       0       0       0       0
  4389 ;;      Locals:         0       0       0       0       0
  4390 ;;      Temps:          0       0       0       0       0
  4391 ;;      Totals:         0       0       0       0       0
  4392 ;;Total ram usage:        0 bytes
  4393 ;; Hardware stack levels used:    1
  4394 ;; Hardware stack levels required when called:    2
  4395 ;; This function calls:
  4396 ;;		Nothing
  4397 ;; This function is called by:
  4398 ;;		_main
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           
  4403                           ;psect for function _initInterrupt
  4404  16BA                     _initInterrupt:	
  4405                           
  4406                           ;main.c: 91: GIE = 1;
  4407                           
  4408                           ;incstack = 0
  4409                           ; Regs used in _initInterrupt: []
  4410  16BA  178B               	bsf	11,7	;volatile
  4411                           
  4412                           ;main.c: 92: INTE = 1;
  4413  16BB  160B               	bsf	11,4	;volatile
  4414                           
  4415                           ;main.c: 93: INTF = 0;
  4416  16BC  108B               	bcf	11,1	;volatile
  4417                           
  4418                           ;main.c: 94: INTEDG = 0;
  4419  16BD  1683               	bsf	3,5	;RP0=1, select bank1
  4420  16BE  1303               	bcf	3,6	;RP1=0, select bank1
  4421  16BF  1301               	bcf	1,6	;volatile
  4422  16C0  0008               	return
  4423  16C1                     __end_of_initInterrupt:	
  4424                           
  4425                           	psect	text21
  4426  16C9                     __ptext21:	
  4427 ;; *************** function _initADC *****************
  4428 ;; Defined at:
  4429 ;;		line 76 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;		None
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;		None
  4434 ;; Return value:  Size  Location     Type
  4435 ;;		None               void
  4436 ;; Registers used:
  4437 ;;		wreg
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4443 ;;      Params:         0       0       0       0       0
  4444 ;;      Locals:         0       0       0       0       0
  4445 ;;      Temps:          0       0       0       0       0
  4446 ;;      Totals:         0       0       0       0       0
  4447 ;;Total ram usage:        0 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    2
  4450 ;; This function calls:
  4451 ;;		Nothing
  4452 ;; This function is called by:
  4453 ;;		_main
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           
  4458                           ;psect for function _initADC
  4459  16C9                     _initADC:	
  4460                           
  4461                           ;main.c: 78: ADCON1 = 0x80;
  4462                           
  4463                           ;incstack = 0
  4464                           ; Regs used in _initADC: [wreg]
  4465  16C9  3080               	movlw	128
  4466  16CA  1683               	bsf	3,5	;RP0=1, select bank1
  4467  16CB  1303               	bcf	3,6	;RP1=0, select bank1
  4468  16CC  009F               	movwf	31	;volatile
  4469                           
  4470                           ;main.c: 79: ADCON0 = 0x01;
  4471  16CD  3001               	movlw	1
  4472  16CE  1283               	bcf	3,5	;RP0=0, select bank0
  4473  16CF  1303               	bcf	3,6	;RP1=0, select bank0
  4474  16D0  009F               	movwf	31	;volatile
  4475  16D1  0008               	return
  4476  16D2                     __end_of_initADC:	
  4477                           
  4478                           	psect	text22
  4479  1795                     __ptext22:	
  4480 ;; *************** function _handlePPM *****************
  4481 ;; Defined at:
  4482 ;;		line 86 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  4483 ;; Parameters:    Size  Location     Type
  4484 ;;		None
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;		None
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  2   12[BANK0 ] int 
  4489 ;; Registers used:
  4490 ;;		wreg, status,2, status,0, pclath, cstack
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4496 ;;      Params:         0       2       0       0       0
  4497 ;;      Locals:         0       0       0       0       0
  4498 ;;      Temps:          0       0       0       0       0
  4499 ;;      Totals:         0       2       0       0       0
  4500 ;;Total ram usage:        2 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    3
  4503 ;; This function calls:
  4504 ;;		___ftge
  4505 ;; This function is called by:
  4506 ;;		_main
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           
  4511                           ;psect for function _handlePPM
  4512  1795                     _handlePPM:	
  4513                           
  4514                           ;mq135_module.h: 88: if(PPM > 9)
  4515                           
  4516                           ;incstack = 0
  4517                           ; Regs used in _handlePPM: [wreg+status,2+status,0+pclath+cstack]
  4518  1795  3000               	movlw	0
  4519  1796  1283               	bcf	3,5	;RP0=0, select bank0
  4520  1797  1303               	bcf	3,6	;RP1=0, select bank0
  4521  1798  00A0               	movwf	___ftge@ff1
  4522  1799  3010               	movlw	16
  4523  179A  00A1               	movwf	___ftge@ff1+1
  4524  179B  3041               	movlw	65
  4525  179C  00A2               	movwf	___ftge@ff1+2
  4526  179D  0864               	movf	_PPM,w	;volatile
  4527  179E  00A3               	movwf	___ftge@ff2
  4528  179F  0865               	movf	_PPM+1,w	;volatile
  4529  17A0  00A4               	movwf	___ftge@ff2+1
  4530  17A1  0866               	movf	_PPM+2,w	;volatile
  4531  17A2  00A5               	movwf	___ftge@ff2+2
  4532  17A3  120A  158A  224F  160A  118A  	fcall	___ftge
  4533  17A8  1803               	btfsc	3,0
  4534  17A9  2FB2               	goto	l109
  4535                           
  4536                           ;mq135_module.h: 89: {
  4537                           ;mq135_module.h: 90: RC3 = 1;
  4538  17AA  1283               	bcf	3,5	;RP0=0, select bank0
  4539  17AB  1303               	bcf	3,6	;RP1=0, select bank0
  4540  17AC  1587               	bsf	7,3	;volatile
  4541                           
  4542                           ;mq135_module.h: 91: return 1;
  4543  17AD  3001               	movlw	1
  4544  17AE  00AC               	movwf	?_handlePPM
  4545  17AF  3000               	movlw	0
  4546  17B0  00AD               	movwf	?_handlePPM+1
  4547                           
  4548                           ;mq135_module.h: 92: }
  4549  17B1  0008               	return
  4550  17B2                     l109:	
  4551                           
  4552                           ;mq135_module.h: 93: else
  4553                           ;mq135_module.h: 94: {
  4554                           ;mq135_module.h: 95: RC3 = 0;
  4555  17B2  1283               	bcf	3,5	;RP0=0, select bank0
  4556  17B3  1303               	bcf	3,6	;RP1=0, select bank0
  4557  17B4  1187               	bcf	7,3	;volatile
  4558                           
  4559                           ;mq135_module.h: 96: return 0;
  4560  17B5  01AC               	clrf	?_handlePPM
  4561  17B6  01AD               	clrf	?_handlePPM+1
  4562  17B7  0008               	return
  4563  17B8                     __end_of_handlePPM:	
  4564                           
  4565                           	psect	text23
  4566  0A4F                     __ptext23:	
  4567 ;; *************** function ___ftge *****************
  4568 ;; Defined at:
  4569 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;  ff1             3    0[BANK0 ] float 
  4572 ;;  ff2             3    3[BANK0 ] float 
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;		None
  4575 ;; Return value:  Size  Location     Type
  4576 ;;		None               void
  4577 ;; Registers used:
  4578 ;;		wreg, status,2, status,0
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4584 ;;      Params:         0       6       0       0       0
  4585 ;;      Locals:         0       0       0       0       0
  4586 ;;      Temps:          0       6       0       0       0
  4587 ;;      Totals:         0      12       0       0       0
  4588 ;;Total ram usage:       12 bytes
  4589 ;; Hardware stack levels used:    1
  4590 ;; Hardware stack levels required when called:    2
  4591 ;; This function calls:
  4592 ;;		Nothing
  4593 ;; This function is called by:
  4594 ;;		_handlePPM
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           
  4599                           ;psect for function ___ftge
  4600  0A4F                     ___ftge:	
  4601                           
  4602                           ;incstack = 0
  4603                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4604  0A4F  1283               	bcf	3,5	;RP0=0, select bank0
  4605  0A50  1303               	bcf	3,6	;RP1=0, select bank0
  4606  0A51  1FA2               	btfss	___ftge@ff1+2,7
  4607  0A52  2A78               	goto	l2266
  4608  0A53  3000               	movlw	0
  4609  0A54  00A6               	movwf	??___ftge
  4610  0A55  3000               	movlw	0
  4611  0A56  00A7               	movwf	??___ftge+1
  4612  0A57  3080               	movlw	128
  4613  0A58  00A8               	movwf	??___ftge+2
  4614  0A59  0920               	comf	___ftge@ff1,w
  4615  0A5A  00A9               	movwf	??___ftge+3
  4616  0A5B  0921               	comf	___ftge@ff1+1,w
  4617  0A5C  00AA               	movwf	??___ftge+4
  4618  0A5D  0922               	comf	___ftge@ff1+2,w
  4619  0A5E  00AB               	movwf	??___ftge+5
  4620  0A5F  0AA9               	incf	??___ftge+3,f
  4621  0A60  1903               	skipnz
  4622  0A61  0AAA               	incf	??___ftge+4,f
  4623  0A62  1903               	skipnz
  4624  0A63  0AAB               	incf	??___ftge+5,f
  4625  0A64  0829               	movf	??___ftge+3,w
  4626  0A65  07A6               	addwf	??___ftge,f
  4627  0A66  082A               	movf	??___ftge+4,w
  4628  0A67  1803               	skipnc
  4629  0A68  0F2A               	incfsz	??___ftge+4,w
  4630  0A69  2A6B               	goto	u2891
  4631  0A6A  2A6C               	goto	u2892
  4632  0A6B                     u2891:	
  4633  0A6B  07A7               	addwf	??___ftge+1,f
  4634  0A6C                     u2892:	
  4635  0A6C  082B               	movf	??___ftge+5,w
  4636  0A6D  1803               	skipnc
  4637  0A6E  0F2B               	incfsz	??___ftge+5,w
  4638  0A6F  2A71               	goto	u2893
  4639  0A70  2A72               	goto	u2894
  4640  0A71                     u2893:	
  4641  0A71  07A8               	addwf	??___ftge+2,f
  4642  0A72                     u2894:	
  4643  0A72  0826               	movf	??___ftge,w
  4644  0A73  00A0               	movwf	___ftge@ff1
  4645  0A74  0827               	movf	??___ftge+1,w
  4646  0A75  00A1               	movwf	___ftge@ff1+1
  4647  0A76  0828               	movf	??___ftge+2,w
  4648  0A77  00A2               	movwf	___ftge@ff1+2
  4649  0A78                     l2266:	
  4650  0A78  1FA5               	btfss	___ftge@ff2+2,7
  4651  0A79  2A9F               	goto	l2270
  4652  0A7A  3000               	movlw	0
  4653  0A7B  00A6               	movwf	??___ftge
  4654  0A7C  3000               	movlw	0
  4655  0A7D  00A7               	movwf	??___ftge+1
  4656  0A7E  3080               	movlw	128
  4657  0A7F  00A8               	movwf	??___ftge+2
  4658  0A80  0923               	comf	___ftge@ff2,w
  4659  0A81  00A9               	movwf	??___ftge+3
  4660  0A82  0924               	comf	___ftge@ff2+1,w
  4661  0A83  00AA               	movwf	??___ftge+4
  4662  0A84  0925               	comf	___ftge@ff2+2,w
  4663  0A85  00AB               	movwf	??___ftge+5
  4664  0A86  0AA9               	incf	??___ftge+3,f
  4665  0A87  1903               	skipnz
  4666  0A88  0AAA               	incf	??___ftge+4,f
  4667  0A89  1903               	skipnz
  4668  0A8A  0AAB               	incf	??___ftge+5,f
  4669  0A8B  0829               	movf	??___ftge+3,w
  4670  0A8C  07A6               	addwf	??___ftge,f
  4671  0A8D  082A               	movf	??___ftge+4,w
  4672  0A8E  1803               	skipnc
  4673  0A8F  0F2A               	incfsz	??___ftge+4,w
  4674  0A90  2A92               	goto	u2911
  4675  0A91  2A93               	goto	u2912
  4676  0A92                     u2911:	
  4677  0A92  07A7               	addwf	??___ftge+1,f
  4678  0A93                     u2912:	
  4679  0A93  082B               	movf	??___ftge+5,w
  4680  0A94  1803               	skipnc
  4681  0A95  0F2B               	incfsz	??___ftge+5,w
  4682  0A96  2A98               	goto	u2913
  4683  0A97  2A99               	goto	u2914
  4684  0A98                     u2913:	
  4685  0A98  07A8               	addwf	??___ftge+2,f
  4686  0A99                     u2914:	
  4687  0A99  0826               	movf	??___ftge,w
  4688  0A9A  00A3               	movwf	___ftge@ff2
  4689  0A9B  0827               	movf	??___ftge+1,w
  4690  0A9C  00A4               	movwf	___ftge@ff2+1
  4691  0A9D  0828               	movf	??___ftge+2,w
  4692  0A9E  00A5               	movwf	___ftge@ff2+2
  4693  0A9F                     l2270:	
  4694  0A9F  3080               	movlw	128
  4695  0AA0  06A2               	xorwf	___ftge@ff1+2,f
  4696  0AA1  3080               	movlw	128
  4697  0AA2  06A5               	xorwf	___ftge@ff2+2,f
  4698  0AA3  0825               	movf	___ftge@ff2+2,w
  4699  0AA4  0222               	subwf	___ftge@ff1+2,w
  4700  0AA5  1D03               	skipz
  4701  0AA6  0008               	return
  4702  0AA7  0824               	movf	___ftge@ff2+1,w
  4703  0AA8  0221               	subwf	___ftge@ff1+1,w
  4704  0AA9  1D03               	skipz
  4705  0AAA  0008               	return
  4706  0AAB  0823               	movf	___ftge@ff2,w
  4707  0AAC  0220               	subwf	___ftge@ff1,w
  4708  0AAD  0008               	return
  4709  0AAE                     __end_of___ftge:	
  4710                           
  4711                           	psect	text24
  4712  0937                     __ptext24:	
  4713 ;; *************** function _checkSelect *****************
  4714 ;; Defined at:
  4715 ;;		line 168 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  4716 ;; Parameters:    Size  Location     Type
  4717 ;;		None
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;  currentRB1St    2    4[BANK0 ] int 
  4720 ;; Return value:  Size  Location     Type
  4721 ;;		None               void
  4722 ;; Registers used:
  4723 ;;		wreg, status,2, status,0, pclath, cstack
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4729 ;;      Params:         0       0       0       0       0
  4730 ;;      Locals:         0       2       0       0       0
  4731 ;;      Temps:          0       2       0       0       0
  4732 ;;      Totals:         0       4       0       0       0
  4733 ;;Total ram usage:        4 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; Hardware stack levels required when called:    3
  4736 ;; This function calls:
  4737 ;;		_instCTRL
  4738 ;; This function is called by:
  4739 ;;		_main
  4740 ;; This function uses a non-reentrant model
  4741 ;;
  4742                           
  4743                           
  4744                           ;psect for function _checkSelect
  4745  0937                     _checkSelect:	
  4746                           
  4747                           ;main.c: 170: static int lastRB1State = 0;
  4748                           ;main.c: 171: int currentRB1State = RB1;
  4749                           
  4750                           ;incstack = 0
  4751                           ; Regs used in _checkSelect: [wreg+status,2+status,0+pclath+cstack]
  4752  0937  1003               	clrc
  4753  0938  1283               	bcf	3,5	;RP0=0, select bank0
  4754  0939  1303               	bcf	3,6	;RP1=0, select bank0
  4755  093A  1886               	btfsc	6,1	;volatile
  4756  093B  1403               	setc
  4757  093C  3000               	movlw	0
  4758  093D  1803               	skipnc
  4759  093E  3001               	movlw	1
  4760  093F  00A2               	movwf	??_checkSelect
  4761  0940  01A3               	clrf	??_checkSelect+1
  4762  0941  0822               	movf	??_checkSelect,w
  4763  0942  00A4               	movwf	checkSelect@currentRB1State
  4764  0943  0823               	movf	??_checkSelect+1,w
  4765  0944  00A5               	movwf	checkSelect@currentRB1State+1
  4766                           
  4767                           ;main.c: 172: if (currentRB1State == 1 && lastRB1State == 0)
  4768  0945  3001               	movlw	1
  4769  0946  0624               	xorwf	checkSelect@currentRB1State,w
  4770  0947  0425               	iorwf	checkSelect@currentRB1State+1,w
  4771  0948  1D03               	skipz
  4772  0949  2956               	goto	l2356
  4773  094A  0878               	movf	checkSelect@lastRB1State+1,w
  4774  094B  0477               	iorwf	checkSelect@lastRB1State,w
  4775  094C  1D03               	skipz
  4776  094D  2956               	goto	l2356
  4777                           
  4778                           ;main.c: 173: {
  4779                           ;main.c: 174: select ^= 1;
  4780  094E  3001               	movlw	1
  4781  094F  00A2               	movwf	??_checkSelect
  4782  0950  0822               	movf	??_checkSelect,w
  4783  0951  06EA               	xorwf	_select,f	;volatile
  4784                           
  4785                           ;main.c: 176: instCTRL(0x01);
  4786  0952  3001               	movlw	1
  4787  0953  160A  118A  2704   	fcall	_instCTRL
  4788  0956                     l2356:	
  4789                           
  4790                           ;main.c: 177: }
  4791                           ;main.c: 178: lastRB1State = currentRB1State;
  4792  0956  1283               	bcf	3,5	;RP0=0, select bank0
  4793  0957  1303               	bcf	3,6	;RP1=0, select bank0
  4794  0958  0825               	movf	checkSelect@currentRB1State+1,w
  4795  0959  01F8               	clrf	checkSelect@lastRB1State+1
  4796  095A  07F8               	addwf	checkSelect@lastRB1State+1,f
  4797  095B  0824               	movf	checkSelect@currentRB1State,w
  4798  095C  01F7               	clrf	checkSelect@lastRB1State
  4799  095D  07F7               	addwf	checkSelect@lastRB1State,f
  4800  095E  0008               	return
  4801  095F                     __end_of_checkSelect:	
  4802                           
  4803                           	psect	text25
  4804  08CF                     __ptext25:	
  4805 ;; *************** function _checkMode *****************
  4806 ;; Defined at:
  4807 ;;		line 157 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  4808 ;; Parameters:    Size  Location     Type
  4809 ;;		None
  4810 ;; Auto vars:     Size  Location     Type
  4811 ;;		None
  4812 ;; Return value:  Size  Location     Type
  4813 ;;		None               void
  4814 ;; Registers used:
  4815 ;;		wreg, status,2, status,0, pclath, cstack
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4821 ;;      Params:         0       0       0       0       0
  4822 ;;      Locals:         0       0       0       0       0
  4823 ;;      Temps:          0       2       0       0       0
  4824 ;;      Totals:         0       2       0       0       0
  4825 ;;Total ram usage:        2 bytes
  4826 ;; Hardware stack levels used:    1
  4827 ;; Hardware stack levels required when called:    3
  4828 ;; This function calls:
  4829 ;;		_instCTRL
  4830 ;; This function is called by:
  4831 ;;		_main
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           
  4836                           ;psect for function _checkMode
  4837  08CF                     _checkMode:	
  4838                           
  4839                           ;main.c: 159: if (lastMode != mode)
  4840                           
  4841                           ;incstack = 0
  4842                           ; Regs used in _checkMode: [wreg+status,2+status,0+pclath+cstack]
  4843  08CF  0879               	movf	_lastMode,w
  4844  08D0  1283               	bcf	3,5	;RP0=0, select bank0
  4845  08D1  1303               	bcf	3,6	;RP1=0, select bank0
  4846  08D2  0668               	xorwf	_mode,w
  4847  08D3  1903               	skipnz
  4848  08D4  0008               	return
  4849                           
  4850                           ;main.c: 160: {
  4851                           ;main.c: 162: instCTRL(0x01);
  4852  08D5  3001               	movlw	1
  4853  08D6  160A  118A  2704  120A  158A  	fcall	_instCTRL
  4854                           
  4855                           ;main.c: 163: _delay((unsigned long)((50)*(4000000/4000.0)));
  4856  08DB  3041               	movlw	65
  4857  08DC  1283               	bcf	3,5	;RP0=0, select bank0
  4858  08DD  1303               	bcf	3,6	;RP1=0, select bank0
  4859  08DE  00A3               	movwf	??_checkMode+1
  4860  08DF  30EE               	movlw	238
  4861  08E0  00A2               	movwf	??_checkMode
  4862  08E1                     u3607:	
  4863  08E1  0BA2               	decfsz	??_checkMode,f
  4864  08E2  28E1               	goto	u3607
  4865  08E3  0BA3               	decfsz	??_checkMode+1,f
  4866  08E4  28E1               	goto	u3607
  4867  08E5  0000               	nop
  4868                           
  4869                           ;main.c: 164: lastMode = mode;
  4870  08E6  1283               	bcf	3,5	;RP0=0, select bank0
  4871  08E7  1303               	bcf	3,6	;RP1=0, select bank0
  4872  08E8  0868               	movf	_mode,w
  4873  08E9  00A2               	movwf	??_checkMode
  4874  08EA  0822               	movf	??_checkMode,w
  4875  08EB  00F9               	movwf	_lastMode
  4876  08EC  0008               	return
  4877  08ED                     __end_of_checkMode:	
  4878                           
  4879                           	psect	text26
  4880  1704                     __ptext26:	
  4881 ;; *************** function _instCTRL *****************
  4882 ;; Defined at:
  4883 ;;		line 17 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;  CMD             1    wreg     unsigned char 
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;  CMD             1    1[BANK0 ] unsigned char 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;		None               void
  4890 ;; Registers used:
  4891 ;;		wreg
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4897 ;;      Params:         0       0       0       0       0
  4898 ;;      Locals:         0       1       0       0       0
  4899 ;;      Temps:          0       1       0       0       0
  4900 ;;      Totals:         0       2       0       0       0
  4901 ;;Total ram usage:        2 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    2
  4904 ;; This function calls:
  4905 ;;		Nothing
  4906 ;; This function is called by:
  4907 ;;		_initLCD
  4908 ;;		_printToLCD
  4909 ;;		_displayPPM
  4910 ;;		_startUpLCD
  4911 ;;		_updateState
  4912 ;;		_checkMode
  4913 ;;		_checkSelect
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           
  4918                           ;psect for function _instCTRL
  4919  1704                     _instCTRL:	
  4920                           
  4921                           ;incstack = 0
  4922                           ; Regs used in _instCTRL: [wreg]
  4923                           ;instCTRL@CMD stored from wreg
  4924  1704  1283               	bcf	3,5	;RP0=0, select bank0
  4925  1705  1303               	bcf	3,6	;RP1=0, select bank0
  4926  1706  00A1               	movwf	instCTRL@CMD
  4927                           
  4928                           ;lcd_functions.h: 19: PORTD = CMD;
  4929  1707  0821               	movf	instCTRL@CMD,w
  4930  1708  0088               	movwf	8	;volatile
  4931                           
  4932                           ;lcd_functions.h: 20: RC0 = 0;
  4933  1709  1007               	bcf	7,0	;volatile
  4934                           
  4935                           ;lcd_functions.h: 21: RC1 = 0;
  4936  170A  1087               	bcf	7,1	;volatile
  4937                           
  4938                           ;lcd_functions.h: 22: RC2 = 1;
  4939  170B  1507               	bsf	7,2	;volatile
  4940                           
  4941                           ;lcd_functions.h: 23: _delay((unsigned long)((1)*(4000000/4000.0)));
  4942  170C  30F9               	movlw	249
  4943  170D  00A0               	movwf	??_instCTRL
  4944  170E                     u3617:	
  4945  170E  0000               	nop
  4946  170F  0BA0               	decfsz	??_instCTRL,f
  4947  1710  2F0E               	goto	u3617
  4948  1711  2F12               	nop2	;nop
  4949  1712  0000               	nop
  4950                           
  4951                           ;lcd_functions.h: 24: RC2 = 0;
  4952  1713  1283               	bcf	3,5	;RP0=0, select bank0
  4953  1714  1303               	bcf	3,6	;RP1=0, select bank0
  4954  1715  1107               	bcf	7,2	;volatile
  4955  1716  0008               	return
  4956  1717                     __end_of_instCTRL:	
  4957                           
  4958                           	psect	text27
  4959  173F                     __ptext27:	
  4960 ;; *************** function _Read_ADC_MQ135 *****************
  4961 ;; Defined at:
  4962 ;;		line 28 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  4963 ;; Parameters:    Size  Location     Type
  4964 ;;		None
  4965 ;; Auto vars:     Size  Location     Type
  4966 ;;		None
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  2    0[BANK0 ] int 
  4969 ;; Registers used:
  4970 ;;		wreg, status,2, status,0
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4976 ;;      Params:         0       2       0       0       0
  4977 ;;      Locals:         0       0       0       0       0
  4978 ;;      Temps:          0       2       0       0       0
  4979 ;;      Totals:         0       4       0       0       0
  4980 ;;Total ram usage:        4 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; Hardware stack levels required when called:    2
  4983 ;; This function calls:
  4984 ;;		Nothing
  4985 ;; This function is called by:
  4986 ;;		_main
  4987 ;; This function uses a non-reentrant model
  4988 ;;
  4989                           
  4990                           
  4991                           ;psect for function _Read_ADC_MQ135
  4992  173F                     _Read_ADC_MQ135:	
  4993                           
  4994                           ;mq135_module.h: 30: _delay((unsigned long)((100)*(4000000/4000.0)));
  4995                           
  4996                           ;incstack = 0
  4997                           ; Regs used in _Read_ADC_MQ135: [wreg+status,2+status,0]
  4998  173F  3082               	movlw	130
  4999  1740  1283               	bcf	3,5	;RP0=0, select bank0
  5000  1741  1303               	bcf	3,6	;RP1=0, select bank0
  5001  1742  00A3               	movwf	??_Read_ADC_MQ135+1
  5002  1743  30DD               	movlw	221
  5003  1744  00A2               	movwf	??_Read_ADC_MQ135
  5004  1745                     u3627:	
  5005  1745  0BA2               	decfsz	??_Read_ADC_MQ135,f
  5006  1746  2F45               	goto	u3627
  5007  1747  0BA3               	decfsz	??_Read_ADC_MQ135+1,f
  5008  1748  2F45               	goto	u3627
  5009  1749  2F4A               	nop2
  5010                           
  5011                           ;mq135_module.h: 31: GO_DONE = 1;
  5012  174A  1283               	bcf	3,5	;RP0=0, select bank0
  5013  174B  1303               	bcf	3,6	;RP1=0, select bank0
  5014  174C  151F               	bsf	31,2	;volatile
  5015  174D                     l92:	
  5016                           ;mq135_module.h: 33: ;
  5017                           
  5018                           ;mq135_module.h: 32: while (GO_DONE)
  5019                           
  5020  174D  191F               	btfsc	31,2	;volatile
  5021  174E  2F4D               	goto	l92
  5022                           
  5023                           ;mq135_module.h: 34: return ((ADRESH << 8) + ADRESL);
  5024  174F  081E               	movf	30,w	;volatile
  5025  1750  01A1               	clrf	?_Read_ADC_MQ135+1
  5026  1751  07A1               	addwf	?_Read_ADC_MQ135+1,f
  5027  1752  1683               	bsf	3,5	;RP0=1, select bank1
  5028  1753  1303               	bcf	3,6	;RP1=0, select bank1
  5029  1754  081E               	movf	30,w	;volatile
  5030  1755  1283               	bcf	3,5	;RP0=0, select bank0
  5031  1756  1303               	bcf	3,6	;RP1=0, select bank0
  5032  1757  01A0               	clrf	?_Read_ADC_MQ135
  5033  1758  07A0               	addwf	?_Read_ADC_MQ135,f
  5034  1759  0008               	return
  5035  175A                     __end_of_Read_ADC_MQ135:	
  5036                           
  5037                           	psect	text28
  5038  0053                     __ptext28:	
  5039 ;; *************** function _CalcMQ135 *****************
  5040 ;; Defined at:
  5041 ;;		line 37 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;  RAW_ADC         2   62[BANK0 ] int 
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;  ratio           3   36[BANK1 ] float 
  5046 ;;  co2             3   33[BANK1 ] float 
  5047 ;;  ratio5          3   30[BANK1 ] float 
  5048 ;;  ratio4          3   27[BANK1 ] float 
  5049 ;;  ratio3          3   24[BANK1 ] float 
  5050 ;;  ratio2          3   21[BANK1 ] float 
  5051 ;;  ratio6          3    3[BANK1 ] float 
  5052 ;;  voltage         3    0[BANK1 ] float 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  3   62[BANK0 ] float 
  5055 ;; Registers used:
  5056 ;;		wreg, status,2, status,0, pclath, cstack
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5062 ;;      Params:         0       3       0       0       0
  5063 ;;      Locals:         0       0      39       0       0
  5064 ;;      Temps:          0       0       0       0       0
  5065 ;;      Totals:         0       3      39       0       0
  5066 ;;Total ram usage:       42 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    4
  5069 ;; This function calls:
  5070 ;;		___awtoft
  5071 ;;		___ftadd
  5072 ;;		___ftdiv
  5073 ;;		___ftmul
  5074 ;; This function is called by:
  5075 ;;		_main
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           
  5080                           ;psect for function _CalcMQ135
  5081  0053                     _CalcMQ135:	
  5082                           
  5083                           ;mq135_module.h: 39: float voltage = (RAW_ADC * 5.0) / 1023.0;
  5084                           
  5085                           ;incstack = 0
  5086                           ; Regs used in _CalcMQ135: [wreg+status,2+status,0+pclath+cstack]
  5087  0053  30C0               	movlw	192
  5088  0054  1283               	bcf	3,5	;RP0=0, select bank0
  5089  0055  1303               	bcf	3,6	;RP1=0, select bank0
  5090  0056  00CE               	movwf	___ftdiv@f2
  5091  0057  307F               	movlw	127
  5092  0058  00CF               	movwf	___ftdiv@f2+1
  5093  0059  3044               	movlw	68
  5094  005A  00D0               	movwf	___ftdiv@f2+2
  5095  005B  3000               	movlw	0
  5096  005C  00BE               	movwf	___ftmul@f1
  5097  005D  30A0               	movlw	160
  5098  005E  00BF               	movwf	___ftmul@f1+1
  5099  005F  3040               	movlw	64
  5100  0060  00C0               	movwf	___ftmul@f1+2
  5101  0061  085F               	movf	CalcMQ135@RAW_ADC+1,w
  5102  0062  01A9               	clrf	___awtoft@c+1
  5103  0063  07A9               	addwf	___awtoft@c+1,f
  5104  0064  085E               	movf	CalcMQ135@RAW_ADC,w
  5105  0065  01A8               	clrf	___awtoft@c
  5106  0066  07A8               	addwf	___awtoft@c,f
  5107  0067  120A  158A  20ED  120A  118A  	fcall	___awtoft
  5108  006C  1283               	bcf	3,5	;RP0=0, select bank0
  5109  006D  1303               	bcf	3,6	;RP1=0, select bank0
  5110  006E  0828               	movf	?___awtoft,w
  5111  006F  00C1               	movwf	___ftmul@f2
  5112  0070  0829               	movf	?___awtoft+1,w
  5113  0071  00C2               	movwf	___ftmul@f2+1
  5114  0072  082A               	movf	?___awtoft+2,w
  5115  0073  00C3               	movwf	___ftmul@f2+2
  5116  0074  120A  118A  2722  120A  118A  	fcall	___ftmul
  5117  0079  1283               	bcf	3,5	;RP0=0, select bank0
  5118  007A  1303               	bcf	3,6	;RP1=0, select bank0
  5119  007B  083E               	movf	?___ftmul,w
  5120  007C  00D1               	movwf	___ftdiv@f1
  5121  007D  083F               	movf	?___ftmul+1,w
  5122  007E  00D2               	movwf	___ftdiv@f1+1
  5123  007F  0840               	movf	?___ftmul+2,w
  5124  0080  00D3               	movwf	___ftdiv@f1+2
  5125  0081  120A  158A  2572  120A  118A  	fcall	___ftdiv
  5126  0086  1283               	bcf	3,5	;RP0=0, select bank0
  5127  0087  1303               	bcf	3,6	;RP1=0, select bank0
  5128  0088  084E               	movf	?___ftdiv,w
  5129  0089  1683               	bsf	3,5	;RP0=1, select bank1
  5130  008A  1303               	bcf	3,6	;RP1=0, select bank1
  5131  008B  00A0               	movwf	CalcMQ135@voltage^(0+128)
  5132  008C  1283               	bcf	3,5	;RP0=0, select bank0
  5133  008D  1303               	bcf	3,6	;RP1=0, select bank0
  5134  008E  084F               	movf	?___ftdiv+1,w
  5135  008F  1683               	bsf	3,5	;RP0=1, select bank1
  5136  0090  1303               	bcf	3,6	;RP1=0, select bank1
  5137  0091  00A1               	movwf	(CalcMQ135@voltage+1)^(0+128)
  5138  0092  1283               	bcf	3,5	;RP0=0, select bank0
  5139  0093  1303               	bcf	3,6	;RP1=0, select bank0
  5140  0094  0850               	movf	?___ftdiv+2,w
  5141  0095  1683               	bsf	3,5	;RP0=1, select bank1
  5142  0096  1303               	bcf	3,6	;RP1=0, select bank1
  5143  0097  00A2               	movwf	(CalcMQ135@voltage+2)^(0+128)
  5144                           
  5145                           ;mq135_module.h: 40: float ratio = voltage / 5.0;
  5146  0098  3000               	movlw	0
  5147  0099  1283               	bcf	3,5	;RP0=0, select bank0
  5148  009A  1303               	bcf	3,6	;RP1=0, select bank0
  5149  009B  00CE               	movwf	___ftdiv@f2
  5150  009C  30A0               	movlw	160
  5151  009D  00CF               	movwf	___ftdiv@f2+1
  5152  009E  3040               	movlw	64
  5153  009F  00D0               	movwf	___ftdiv@f2+2
  5154  00A0  1683               	bsf	3,5	;RP0=1, select bank1
  5155  00A1  1303               	bcf	3,6	;RP1=0, select bank1
  5156  00A2  0820               	movf	CalcMQ135@voltage^(0+128),w
  5157  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  5158  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  5159  00A5  00D1               	movwf	___ftdiv@f1
  5160  00A6  1683               	bsf	3,5	;RP0=1, select bank1
  5161  00A7  1303               	bcf	3,6	;RP1=0, select bank1
  5162  00A8  0821               	movf	(CalcMQ135@voltage+1)^(0+128),w
  5163  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  5164  00AA  1303               	bcf	3,6	;RP1=0, select bank0
  5165  00AB  00D2               	movwf	___ftdiv@f1+1
  5166  00AC  1683               	bsf	3,5	;RP0=1, select bank1
  5167  00AD  1303               	bcf	3,6	;RP1=0, select bank1
  5168  00AE  0822               	movf	(CalcMQ135@voltage+2)^(0+128),w
  5169  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  5170  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  5171  00B1  00D3               	movwf	___ftdiv@f1+2
  5172  00B2  120A  158A  2572  120A  118A  	fcall	___ftdiv
  5173  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  5174  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  5175  00B9  084E               	movf	?___ftdiv,w
  5176  00BA  1683               	bsf	3,5	;RP0=1, select bank1
  5177  00BB  1303               	bcf	3,6	;RP1=0, select bank1
  5178  00BC  00C4               	movwf	CalcMQ135@ratio^(0+128)
  5179  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  5180  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  5181  00BF  084F               	movf	?___ftdiv+1,w
  5182  00C0  1683               	bsf	3,5	;RP0=1, select bank1
  5183  00C1  1303               	bcf	3,6	;RP1=0, select bank1
  5184  00C2  00C5               	movwf	(CalcMQ135@ratio+1)^(0+128)
  5185  00C3  1283               	bcf	3,5	;RP0=0, select bank0
  5186  00C4  1303               	bcf	3,6	;RP1=0, select bank0
  5187  00C5  0850               	movf	?___ftdiv+2,w
  5188  00C6  1683               	bsf	3,5	;RP0=1, select bank1
  5189  00C7  1303               	bcf	3,6	;RP1=0, select bank1
  5190  00C8  00C6               	movwf	(CalcMQ135@ratio+2)^(0+128)
  5191                           
  5192                           ;mq135_module.h: 43: float ratio2 = ratio * ratio;
  5193  00C9  0844               	movf	CalcMQ135@ratio^(0+128),w
  5194  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  5195  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  5196  00CC  00BE               	movwf	___ftmul@f1
  5197  00CD  1683               	bsf	3,5	;RP0=1, select bank1
  5198  00CE  1303               	bcf	3,6	;RP1=0, select bank1
  5199  00CF  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5200  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  5201  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  5202  00D2  00BF               	movwf	___ftmul@f1+1
  5203  00D3  1683               	bsf	3,5	;RP0=1, select bank1
  5204  00D4  1303               	bcf	3,6	;RP1=0, select bank1
  5205  00D5  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5206  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  5207  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  5208  00D8  00C0               	movwf	___ftmul@f1+2
  5209  00D9  1683               	bsf	3,5	;RP0=1, select bank1
  5210  00DA  1303               	bcf	3,6	;RP1=0, select bank1
  5211  00DB  0844               	movf	CalcMQ135@ratio^(0+128),w
  5212  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  5213  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  5214  00DE  00C1               	movwf	___ftmul@f2
  5215  00DF  1683               	bsf	3,5	;RP0=1, select bank1
  5216  00E0  1303               	bcf	3,6	;RP1=0, select bank1
  5217  00E1  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5218  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  5219  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  5220  00E4  00C2               	movwf	___ftmul@f2+1
  5221  00E5  1683               	bsf	3,5	;RP0=1, select bank1
  5222  00E6  1303               	bcf	3,6	;RP1=0, select bank1
  5223  00E7  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5224  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  5225  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  5226  00EA  00C3               	movwf	___ftmul@f2+2
  5227  00EB  120A  118A  2722  120A  118A  	fcall	___ftmul
  5228  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  5229  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  5230  00F2  083E               	movf	?___ftmul,w
  5231  00F3  1683               	bsf	3,5	;RP0=1, select bank1
  5232  00F4  1303               	bcf	3,6	;RP1=0, select bank1
  5233  00F5  00B5               	movwf	CalcMQ135@ratio2^(0+128)
  5234  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  5235  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  5236  00F8  083F               	movf	?___ftmul+1,w
  5237  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  5238  00FA  1303               	bcf	3,6	;RP1=0, select bank1
  5239  00FB  00B6               	movwf	(CalcMQ135@ratio2+1)^(0+128)
  5240  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  5241  00FD  1303               	bcf	3,6	;RP1=0, select bank0
  5242  00FE  0840               	movf	?___ftmul+2,w
  5243  00FF  1683               	bsf	3,5	;RP0=1, select bank1
  5244  0100  1303               	bcf	3,6	;RP1=0, select bank1
  5245  0101  00B7               	movwf	(CalcMQ135@ratio2+2)^(0+128)
  5246                           
  5247                           ;mq135_module.h: 44: float ratio3 = ratio2 * ratio;
  5248  0102  0844               	movf	CalcMQ135@ratio^(0+128),w
  5249  0103  1283               	bcf	3,5	;RP0=0, select bank0
  5250  0104  1303               	bcf	3,6	;RP1=0, select bank0
  5251  0105  00BE               	movwf	___ftmul@f1
  5252  0106  1683               	bsf	3,5	;RP0=1, select bank1
  5253  0107  1303               	bcf	3,6	;RP1=0, select bank1
  5254  0108  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5255  0109  1283               	bcf	3,5	;RP0=0, select bank0
  5256  010A  1303               	bcf	3,6	;RP1=0, select bank0
  5257  010B  00BF               	movwf	___ftmul@f1+1
  5258  010C  1683               	bsf	3,5	;RP0=1, select bank1
  5259  010D  1303               	bcf	3,6	;RP1=0, select bank1
  5260  010E  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5261  010F  1283               	bcf	3,5	;RP0=0, select bank0
  5262  0110  1303               	bcf	3,6	;RP1=0, select bank0
  5263  0111  00C0               	movwf	___ftmul@f1+2
  5264  0112  1683               	bsf	3,5	;RP0=1, select bank1
  5265  0113  1303               	bcf	3,6	;RP1=0, select bank1
  5266  0114  0835               	movf	CalcMQ135@ratio2^(0+128),w
  5267  0115  1283               	bcf	3,5	;RP0=0, select bank0
  5268  0116  1303               	bcf	3,6	;RP1=0, select bank0
  5269  0117  00C1               	movwf	___ftmul@f2
  5270  0118  1683               	bsf	3,5	;RP0=1, select bank1
  5271  0119  1303               	bcf	3,6	;RP1=0, select bank1
  5272  011A  0836               	movf	(CalcMQ135@ratio2+1)^(0+128),w
  5273  011B  1283               	bcf	3,5	;RP0=0, select bank0
  5274  011C  1303               	bcf	3,6	;RP1=0, select bank0
  5275  011D  00C2               	movwf	___ftmul@f2+1
  5276  011E  1683               	bsf	3,5	;RP0=1, select bank1
  5277  011F  1303               	bcf	3,6	;RP1=0, select bank1
  5278  0120  0837               	movf	(CalcMQ135@ratio2+2)^(0+128),w
  5279  0121  1283               	bcf	3,5	;RP0=0, select bank0
  5280  0122  1303               	bcf	3,6	;RP1=0, select bank0
  5281  0123  00C3               	movwf	___ftmul@f2+2
  5282  0124  120A  118A  2722  120A  118A  	fcall	___ftmul
  5283  0129  1283               	bcf	3,5	;RP0=0, select bank0
  5284  012A  1303               	bcf	3,6	;RP1=0, select bank0
  5285  012B  083E               	movf	?___ftmul,w
  5286  012C  1683               	bsf	3,5	;RP0=1, select bank1
  5287  012D  1303               	bcf	3,6	;RP1=0, select bank1
  5288  012E  00B8               	movwf	CalcMQ135@ratio3^(0+128)
  5289  012F  1283               	bcf	3,5	;RP0=0, select bank0
  5290  0130  1303               	bcf	3,6	;RP1=0, select bank0
  5291  0131  083F               	movf	?___ftmul+1,w
  5292  0132  1683               	bsf	3,5	;RP0=1, select bank1
  5293  0133  1303               	bcf	3,6	;RP1=0, select bank1
  5294  0134  00B9               	movwf	(CalcMQ135@ratio3+1)^(0+128)
  5295  0135  1283               	bcf	3,5	;RP0=0, select bank0
  5296  0136  1303               	bcf	3,6	;RP1=0, select bank0
  5297  0137  0840               	movf	?___ftmul+2,w
  5298  0138  1683               	bsf	3,5	;RP0=1, select bank1
  5299  0139  1303               	bcf	3,6	;RP1=0, select bank1
  5300  013A  00BA               	movwf	(CalcMQ135@ratio3+2)^(0+128)
  5301                           
  5302                           ;mq135_module.h: 45: float ratio4 = ratio3 * ratio;
  5303  013B  0844               	movf	CalcMQ135@ratio^(0+128),w
  5304  013C  1283               	bcf	3,5	;RP0=0, select bank0
  5305  013D  1303               	bcf	3,6	;RP1=0, select bank0
  5306  013E  00BE               	movwf	___ftmul@f1
  5307  013F  1683               	bsf	3,5	;RP0=1, select bank1
  5308  0140  1303               	bcf	3,6	;RP1=0, select bank1
  5309  0141  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5310  0142  1283               	bcf	3,5	;RP0=0, select bank0
  5311  0143  1303               	bcf	3,6	;RP1=0, select bank0
  5312  0144  00BF               	movwf	___ftmul@f1+1
  5313  0145  1683               	bsf	3,5	;RP0=1, select bank1
  5314  0146  1303               	bcf	3,6	;RP1=0, select bank1
  5315  0147  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5316  0148  1283               	bcf	3,5	;RP0=0, select bank0
  5317  0149  1303               	bcf	3,6	;RP1=0, select bank0
  5318  014A  00C0               	movwf	___ftmul@f1+2
  5319  014B  1683               	bsf	3,5	;RP0=1, select bank1
  5320  014C  1303               	bcf	3,6	;RP1=0, select bank1
  5321  014D  0838               	movf	CalcMQ135@ratio3^(0+128),w
  5322  014E  1283               	bcf	3,5	;RP0=0, select bank0
  5323  014F  1303               	bcf	3,6	;RP1=0, select bank0
  5324  0150  00C1               	movwf	___ftmul@f2
  5325  0151  1683               	bsf	3,5	;RP0=1, select bank1
  5326  0152  1303               	bcf	3,6	;RP1=0, select bank1
  5327  0153  0839               	movf	(CalcMQ135@ratio3+1)^(0+128),w
  5328  0154  1283               	bcf	3,5	;RP0=0, select bank0
  5329  0155  1303               	bcf	3,6	;RP1=0, select bank0
  5330  0156  00C2               	movwf	___ftmul@f2+1
  5331  0157  1683               	bsf	3,5	;RP0=1, select bank1
  5332  0158  1303               	bcf	3,6	;RP1=0, select bank1
  5333  0159  083A               	movf	(CalcMQ135@ratio3+2)^(0+128),w
  5334  015A  1283               	bcf	3,5	;RP0=0, select bank0
  5335  015B  1303               	bcf	3,6	;RP1=0, select bank0
  5336  015C  00C3               	movwf	___ftmul@f2+2
  5337  015D  120A  118A  2722  120A  118A  	fcall	___ftmul
  5338  0162  1283               	bcf	3,5	;RP0=0, select bank0
  5339  0163  1303               	bcf	3,6	;RP1=0, select bank0
  5340  0164  083E               	movf	?___ftmul,w
  5341  0165  1683               	bsf	3,5	;RP0=1, select bank1
  5342  0166  1303               	bcf	3,6	;RP1=0, select bank1
  5343  0167  00BB               	movwf	CalcMQ135@ratio4^(0+128)
  5344  0168  1283               	bcf	3,5	;RP0=0, select bank0
  5345  0169  1303               	bcf	3,6	;RP1=0, select bank0
  5346  016A  083F               	movf	?___ftmul+1,w
  5347  016B  1683               	bsf	3,5	;RP0=1, select bank1
  5348  016C  1303               	bcf	3,6	;RP1=0, select bank1
  5349  016D  00BC               	movwf	(CalcMQ135@ratio4+1)^(0+128)
  5350  016E  1283               	bcf	3,5	;RP0=0, select bank0
  5351  016F  1303               	bcf	3,6	;RP1=0, select bank0
  5352  0170  0840               	movf	?___ftmul+2,w
  5353  0171  1683               	bsf	3,5	;RP0=1, select bank1
  5354  0172  1303               	bcf	3,6	;RP1=0, select bank1
  5355  0173  00BD               	movwf	(CalcMQ135@ratio4+2)^(0+128)
  5356                           
  5357                           ;mq135_module.h: 46: float ratio5 = ratio4 * ratio;
  5358  0174  0844               	movf	CalcMQ135@ratio^(0+128),w
  5359  0175  1283               	bcf	3,5	;RP0=0, select bank0
  5360  0176  1303               	bcf	3,6	;RP1=0, select bank0
  5361  0177  00BE               	movwf	___ftmul@f1
  5362  0178  1683               	bsf	3,5	;RP0=1, select bank1
  5363  0179  1303               	bcf	3,6	;RP1=0, select bank1
  5364  017A  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5365  017B  1283               	bcf	3,5	;RP0=0, select bank0
  5366  017C  1303               	bcf	3,6	;RP1=0, select bank0
  5367  017D  00BF               	movwf	___ftmul@f1+1
  5368  017E  1683               	bsf	3,5	;RP0=1, select bank1
  5369  017F  1303               	bcf	3,6	;RP1=0, select bank1
  5370  0180  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5371  0181  1283               	bcf	3,5	;RP0=0, select bank0
  5372  0182  1303               	bcf	3,6	;RP1=0, select bank0
  5373  0183  00C0               	movwf	___ftmul@f1+2
  5374  0184  1683               	bsf	3,5	;RP0=1, select bank1
  5375  0185  1303               	bcf	3,6	;RP1=0, select bank1
  5376  0186  083B               	movf	CalcMQ135@ratio4^(0+128),w
  5377  0187  1283               	bcf	3,5	;RP0=0, select bank0
  5378  0188  1303               	bcf	3,6	;RP1=0, select bank0
  5379  0189  00C1               	movwf	___ftmul@f2
  5380  018A  1683               	bsf	3,5	;RP0=1, select bank1
  5381  018B  1303               	bcf	3,6	;RP1=0, select bank1
  5382  018C  083C               	movf	(CalcMQ135@ratio4+1)^(0+128),w
  5383  018D  1283               	bcf	3,5	;RP0=0, select bank0
  5384  018E  1303               	bcf	3,6	;RP1=0, select bank0
  5385  018F  00C2               	movwf	___ftmul@f2+1
  5386  0190  1683               	bsf	3,5	;RP0=1, select bank1
  5387  0191  1303               	bcf	3,6	;RP1=0, select bank1
  5388  0192  083D               	movf	(CalcMQ135@ratio4+2)^(0+128),w
  5389  0193  1283               	bcf	3,5	;RP0=0, select bank0
  5390  0194  1303               	bcf	3,6	;RP1=0, select bank0
  5391  0195  00C3               	movwf	___ftmul@f2+2
  5392  0196  120A  118A  2722  120A  118A  	fcall	___ftmul
  5393  019B  1283               	bcf	3,5	;RP0=0, select bank0
  5394  019C  1303               	bcf	3,6	;RP1=0, select bank0
  5395  019D  083E               	movf	?___ftmul,w
  5396  019E  1683               	bsf	3,5	;RP0=1, select bank1
  5397  019F  1303               	bcf	3,6	;RP1=0, select bank1
  5398  01A0  00BE               	movwf	CalcMQ135@ratio5^(0+128)
  5399  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  5400  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  5401  01A3  083F               	movf	?___ftmul+1,w
  5402  01A4  1683               	bsf	3,5	;RP0=1, select bank1
  5403  01A5  1303               	bcf	3,6	;RP1=0, select bank1
  5404  01A6  00BF               	movwf	(CalcMQ135@ratio5+1)^(0+128)
  5405  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  5406  01A8  1303               	bcf	3,6	;RP1=0, select bank0
  5407  01A9  0840               	movf	?___ftmul+2,w
  5408  01AA  1683               	bsf	3,5	;RP0=1, select bank1
  5409  01AB  1303               	bcf	3,6	;RP1=0, select bank1
  5410  01AC  00C0               	movwf	(CalcMQ135@ratio5+2)^(0+128)
  5411                           
  5412                           ;mq135_module.h: 47: float ratio6 = ratio5 * ratio;
  5413  01AD  0844               	movf	CalcMQ135@ratio^(0+128),w
  5414  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  5415  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  5416  01B0  00BE               	movwf	___ftmul@f1
  5417  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  5418  01B2  1303               	bcf	3,6	;RP1=0, select bank1
  5419  01B3  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5420  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  5421  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  5422  01B6  00BF               	movwf	___ftmul@f1+1
  5423  01B7  1683               	bsf	3,5	;RP0=1, select bank1
  5424  01B8  1303               	bcf	3,6	;RP1=0, select bank1
  5425  01B9  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5426  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  5427  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  5428  01BC  00C0               	movwf	___ftmul@f1+2
  5429  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  5430  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  5431  01BF  083E               	movf	CalcMQ135@ratio5^(0+128),w
  5432  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  5433  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  5434  01C2  00C1               	movwf	___ftmul@f2
  5435  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  5436  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  5437  01C5  083F               	movf	(CalcMQ135@ratio5+1)^(0+128),w
  5438  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  5439  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  5440  01C8  00C2               	movwf	___ftmul@f2+1
  5441  01C9  1683               	bsf	3,5	;RP0=1, select bank1
  5442  01CA  1303               	bcf	3,6	;RP1=0, select bank1
  5443  01CB  0840               	movf	(CalcMQ135@ratio5+2)^(0+128),w
  5444  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  5445  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  5446  01CE  00C3               	movwf	___ftmul@f2+2
  5447  01CF  120A  118A  2722  120A  118A  	fcall	___ftmul
  5448  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  5449  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  5450  01D6  083E               	movf	?___ftmul,w
  5451  01D7  1683               	bsf	3,5	;RP0=1, select bank1
  5452  01D8  1303               	bcf	3,6	;RP1=0, select bank1
  5453  01D9  00A3               	movwf	CalcMQ135@ratio6^(0+128)
  5454  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  5455  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  5456  01DC  083F               	movf	?___ftmul+1,w
  5457  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  5458  01DE  1303               	bcf	3,6	;RP1=0, select bank1
  5459  01DF  00A4               	movwf	(CalcMQ135@ratio6+1)^(0+128)
  5460  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  5461  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  5462  01E2  0840               	movf	?___ftmul+2,w
  5463  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  5464  01E4  1303               	bcf	3,6	;RP1=0, select bank1
  5465  01E5  00A5               	movwf	(CalcMQ135@ratio6+2)^(0+128)
  5466                           
  5467                           ;mq135_module.h: 50: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.0
      +                          018 * ratio3) +
  5468                           ;mq135_module.h: 51: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 * 
      +                          ratio6);
  5469  01E6  309C               	movlw	156
  5470  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  5471  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  5472  01E9  00BE               	movwf	___ftmul@f1
  5473  01EA  30B2               	movlw	178
  5474  01EB  00BF               	movwf	___ftmul@f1+1
  5475  01EC  303F               	movlw	63
  5476  01ED  00C0               	movwf	___ftmul@f1+2
  5477  01EE  1683               	bsf	3,5	;RP0=1, select bank1
  5478  01EF  1303               	bcf	3,6	;RP1=0, select bank1
  5479  01F0  0835               	movf	CalcMQ135@ratio2^(0+128),w
  5480  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  5481  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  5482  01F3  00C1               	movwf	___ftmul@f2
  5483  01F4  1683               	bsf	3,5	;RP0=1, select bank1
  5484  01F5  1303               	bcf	3,6	;RP1=0, select bank1
  5485  01F6  0836               	movf	(CalcMQ135@ratio2+1)^(0+128),w
  5486  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  5487  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  5488  01F9  00C2               	movwf	___ftmul@f2+1
  5489  01FA  1683               	bsf	3,5	;RP0=1, select bank1
  5490  01FB  1303               	bcf	3,6	;RP1=0, select bank1
  5491  01FC  0837               	movf	(CalcMQ135@ratio2+2)^(0+128),w
  5492  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  5493  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  5494  01FF  00C3               	movwf	___ftmul@f2+2
  5495  0200  120A  118A  2722  120A  118A  	fcall	___ftmul
  5496  0205  1283               	bcf	3,5	;RP0=0, select bank0
  5497  0206  1303               	bcf	3,6	;RP1=0, select bank0
  5498  0207  083E               	movf	?___ftmul,w
  5499  0208  00B1               	movwf	___ftadd@f1
  5500  0209  083F               	movf	?___ftmul+1,w
  5501  020A  00B2               	movwf	___ftadd@f1+1
  5502  020B  0840               	movf	?___ftmul+2,w
  5503  020C  00B3               	movwf	___ftadd@f1+2
  5504  020D  30A9               	movlw	169
  5505  020E  00BE               	movwf	___ftmul@f1
  5506  020F  30DE               	movlw	222
  5507  0210  00BF               	movwf	___ftmul@f1+1
  5508  0211  303C               	movlw	60
  5509  0212  00C0               	movwf	___ftmul@f1+2
  5510  0213  1683               	bsf	3,5	;RP0=1, select bank1
  5511  0214  1303               	bcf	3,6	;RP1=0, select bank1
  5512  0215  0844               	movf	CalcMQ135@ratio^(0+128),w
  5513  0216  1283               	bcf	3,5	;RP0=0, select bank0
  5514  0217  1303               	bcf	3,6	;RP1=0, select bank0
  5515  0218  00C1               	movwf	___ftmul@f2
  5516  0219  1683               	bsf	3,5	;RP0=1, select bank1
  5517  021A  1303               	bcf	3,6	;RP1=0, select bank1
  5518  021B  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5519  021C  1283               	bcf	3,5	;RP0=0, select bank0
  5520  021D  1303               	bcf	3,6	;RP1=0, select bank0
  5521  021E  00C2               	movwf	___ftmul@f2+1
  5522  021F  1683               	bsf	3,5	;RP0=1, select bank1
  5523  0220  1303               	bcf	3,6	;RP1=0, select bank1
  5524  0221  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5525  0222  1283               	bcf	3,5	;RP0=0, select bank0
  5526  0223  1303               	bcf	3,6	;RP1=0, select bank0
  5527  0224  00C3               	movwf	___ftmul@f2+2
  5528  0225  120A  118A  2722  120A  118A  	fcall	___ftmul
  5529  022A  1283               	bcf	3,5	;RP0=0, select bank0
  5530  022B  1303               	bcf	3,6	;RP1=0, select bank0
  5531  022C  083E               	movf	?___ftmul,w
  5532  022D  00B4               	movwf	___ftadd@f2
  5533  022E  083F               	movf	?___ftmul+1,w
  5534  022F  00B5               	movwf	___ftadd@f2+1
  5535  0230  0840               	movf	?___ftmul+2,w
  5536  0231  00B6               	movwf	___ftadd@f2+2
  5537  0232  120A  158A  26F7  120A  118A  	fcall	___ftadd
  5538  0237  1283               	bcf	3,5	;RP0=0, select bank0
  5539  0238  1303               	bcf	3,6	;RP1=0, select bank0
  5540  0239  0831               	movf	?___ftadd,w
  5541  023A  1683               	bsf	3,5	;RP0=1, select bank1
  5542  023B  1303               	bcf	3,6	;RP1=0, select bank1
  5543  023C  00A6               	movwf	_CalcMQ135$628^(0+128)
  5544  023D  1283               	bcf	3,5	;RP0=0, select bank0
  5545  023E  1303               	bcf	3,6	;RP1=0, select bank0
  5546  023F  0832               	movf	?___ftadd+1,w
  5547  0240  1683               	bsf	3,5	;RP0=1, select bank1
  5548  0241  1303               	bcf	3,6	;RP1=0, select bank1
  5549  0242  00A7               	movwf	(_CalcMQ135$628+1)^(0+128)
  5550  0243  1283               	bcf	3,5	;RP0=0, select bank0
  5551  0244  1303               	bcf	3,6	;RP1=0, select bank0
  5552  0245  0833               	movf	?___ftadd+2,w
  5553  0246  1683               	bsf	3,5	;RP0=1, select bank1
  5554  0247  1303               	bcf	3,6	;RP1=0, select bank1
  5555  0248  00A8               	movwf	(_CalcMQ135$628+2)^(0+128)
  5556                           
  5557                           ;mq135_module.h: 50: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.0
      +                          018 * ratio3) +
  5558                           ;mq135_module.h: 51: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 * 
      +                          ratio6);
  5559  0249  30EE               	movlw	238
  5560  024A  1283               	bcf	3,5	;RP0=0, select bank0
  5561  024B  1303               	bcf	3,6	;RP1=0, select bank0
  5562  024C  00BE               	movwf	___ftmul@f1
  5563  024D  30EB               	movlw	235
  5564  024E  00BF               	movwf	___ftmul@f1+1
  5565  024F  303A               	movlw	58
  5566  0250  00C0               	movwf	___ftmul@f1+2
  5567  0251  1683               	bsf	3,5	;RP0=1, select bank1
  5568  0252  1303               	bcf	3,6	;RP1=0, select bank1
  5569  0253  0838               	movf	CalcMQ135@ratio3^(0+128),w
  5570  0254  1283               	bcf	3,5	;RP0=0, select bank0
  5571  0255  1303               	bcf	3,6	;RP1=0, select bank0
  5572  0256  00C1               	movwf	___ftmul@f2
  5573  0257  1683               	bsf	3,5	;RP0=1, select bank1
  5574  0258  1303               	bcf	3,6	;RP1=0, select bank1
  5575  0259  0839               	movf	(CalcMQ135@ratio3+1)^(0+128),w
  5576  025A  1283               	bcf	3,5	;RP0=0, select bank0
  5577  025B  1303               	bcf	3,6	;RP1=0, select bank0
  5578  025C  00C2               	movwf	___ftmul@f2+1
  5579  025D  1683               	bsf	3,5	;RP0=1, select bank1
  5580  025E  1303               	bcf	3,6	;RP1=0, select bank1
  5581  025F  083A               	movf	(CalcMQ135@ratio3+2)^(0+128),w
  5582  0260  1283               	bcf	3,5	;RP0=0, select bank0
  5583  0261  1303               	bcf	3,6	;RP1=0, select bank0
  5584  0262  00C3               	movwf	___ftmul@f2+2
  5585  0263  120A  118A  2722  120A  118A  	fcall	___ftmul
  5586  0268  1283               	bcf	3,5	;RP0=0, select bank0
  5587  0269  1303               	bcf	3,6	;RP1=0, select bank0
  5588  026A  083E               	movf	?___ftmul,w
  5589  026B  00B1               	movwf	___ftadd@f1
  5590  026C  083F               	movf	?___ftmul+1,w
  5591  026D  00B2               	movwf	___ftadd@f1+1
  5592  026E  0840               	movf	?___ftmul+2,w
  5593  026F  00B3               	movwf	___ftadd@f1+2
  5594  0270  1683               	bsf	3,5	;RP0=1, select bank1
  5595  0271  1303               	bcf	3,6	;RP1=0, select bank1
  5596  0272  0826               	movf	_CalcMQ135$628^(0+128),w
  5597  0273  1283               	bcf	3,5	;RP0=0, select bank0
  5598  0274  1303               	bcf	3,6	;RP1=0, select bank0
  5599  0275  00B4               	movwf	___ftadd@f2
  5600  0276  1683               	bsf	3,5	;RP0=1, select bank1
  5601  0277  1303               	bcf	3,6	;RP1=0, select bank1
  5602  0278  0827               	movf	(_CalcMQ135$628+1)^(0+128),w
  5603  0279  1283               	bcf	3,5	;RP0=0, select bank0
  5604  027A  1303               	bcf	3,6	;RP1=0, select bank0
  5605  027B  00B5               	movwf	___ftadd@f2+1
  5606  027C  1683               	bsf	3,5	;RP0=1, select bank1
  5607  027D  1303               	bcf	3,6	;RP1=0, select bank1
  5608  027E  0828               	movf	(_CalcMQ135$628+2)^(0+128),w
  5609  027F  1283               	bcf	3,5	;RP0=0, select bank0
  5610  0280  1303               	bcf	3,6	;RP1=0, select bank0
  5611  0281  00B6               	movwf	___ftadd@f2+2
  5612  0282  120A  158A  26F7  120A  118A  	fcall	___ftadd
  5613  0287  1283               	bcf	3,5	;RP0=0, select bank0
  5614  0288  1303               	bcf	3,6	;RP1=0, select bank0
  5615  0289  0831               	movf	?___ftadd,w
  5616  028A  1683               	bsf	3,5	;RP0=1, select bank1
  5617  028B  1303               	bcf	3,6	;RP1=0, select bank1
  5618  028C  00A9               	movwf	_CalcMQ135$629^(0+128)
  5619  028D  1283               	bcf	3,5	;RP0=0, select bank0
  5620  028E  1303               	bcf	3,6	;RP1=0, select bank0
  5621  028F  0832               	movf	?___ftadd+1,w
  5622  0290  1683               	bsf	3,5	;RP0=1, select bank1
  5623  0291  1303               	bcf	3,6	;RP1=0, select bank1
  5624  0292  00AA               	movwf	(_CalcMQ135$629+1)^(0+128)
  5625  0293  1283               	bcf	3,5	;RP0=0, select bank0
  5626  0294  1303               	bcf	3,6	;RP1=0, select bank0
  5627  0295  0833               	movf	?___ftadd+2,w
  5628  0296  1683               	bsf	3,5	;RP0=1, select bank1
  5629  0297  1303               	bcf	3,6	;RP1=0, select bank1
  5630  0298  00AB               	movwf	(_CalcMQ135$629+2)^(0+128)
  5631                           
  5632                           ;mq135_module.h: 50: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.0
      +                          018 * ratio3) +
  5633                           ;mq135_module.h: 51: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 * 
      +                          ratio6);
  5634  0299  3074               	movlw	116
  5635  029A  1283               	bcf	3,5	;RP0=0, select bank0
  5636  029B  1303               	bcf	3,6	;RP1=0, select bank0
  5637  029C  00BE               	movwf	___ftmul@f1
  5638  029D  305A               	movlw	90
  5639  029E  00BF               	movwf	___ftmul@f1+1
  5640  029F  30BB               	movlw	187
  5641  02A0  00C0               	movwf	___ftmul@f1+2
  5642  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  5643  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  5644  02A3  083B               	movf	CalcMQ135@ratio4^(0+128),w
  5645  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  5646  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  5647  02A6  00C1               	movwf	___ftmul@f2
  5648  02A7  1683               	bsf	3,5	;RP0=1, select bank1
  5649  02A8  1303               	bcf	3,6	;RP1=0, select bank1
  5650  02A9  083C               	movf	(CalcMQ135@ratio4+1)^(0+128),w
  5651  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  5652  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  5653  02AC  00C2               	movwf	___ftmul@f2+1
  5654  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  5655  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  5656  02AF  083D               	movf	(CalcMQ135@ratio4+2)^(0+128),w
  5657  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  5658  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  5659  02B2  00C3               	movwf	___ftmul@f2+2
  5660  02B3  120A  118A  2722  120A  118A  	fcall	___ftmul
  5661  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  5662  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  5663  02BA  083E               	movf	?___ftmul,w
  5664  02BB  00B1               	movwf	___ftadd@f1
  5665  02BC  083F               	movf	?___ftmul+1,w
  5666  02BD  00B2               	movwf	___ftadd@f1+1
  5667  02BE  0840               	movf	?___ftmul+2,w
  5668  02BF  00B3               	movwf	___ftadd@f1+2
  5669  02C0  1683               	bsf	3,5	;RP0=1, select bank1
  5670  02C1  1303               	bcf	3,6	;RP1=0, select bank1
  5671  02C2  0829               	movf	_CalcMQ135$629^(0+128),w
  5672  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  5673  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  5674  02C5  00B4               	movwf	___ftadd@f2
  5675  02C6  1683               	bsf	3,5	;RP0=1, select bank1
  5676  02C7  1303               	bcf	3,6	;RP1=0, select bank1
  5677  02C8  082A               	movf	(_CalcMQ135$629+1)^(0+128),w
  5678  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  5679  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  5680  02CB  00B5               	movwf	___ftadd@f2+1
  5681  02CC  1683               	bsf	3,5	;RP0=1, select bank1
  5682  02CD  1303               	bcf	3,6	;RP1=0, select bank1
  5683  02CE  082B               	movf	(_CalcMQ135$629+2)^(0+128),w
  5684  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  5685  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  5686  02D1  00B6               	movwf	___ftadd@f2+2
  5687  02D2  120A  158A  26F7  120A  118A  	fcall	___ftadd
  5688  02D7  1283               	bcf	3,5	;RP0=0, select bank0
  5689  02D8  1303               	bcf	3,6	;RP1=0, select bank0
  5690  02D9  0831               	movf	?___ftadd,w
  5691  02DA  1683               	bsf	3,5	;RP0=1, select bank1
  5692  02DB  1303               	bcf	3,6	;RP1=0, select bank1
  5693  02DC  00AC               	movwf	_CalcMQ135$630^(0+128)
  5694  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  5695  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  5696  02DF  0832               	movf	?___ftadd+1,w
  5697  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  5698  02E1  1303               	bcf	3,6	;RP1=0, select bank1
  5699  02E2  00AD               	movwf	(_CalcMQ135$630+1)^(0+128)
  5700  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  5701  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  5702  02E5  0833               	movf	?___ftadd+2,w
  5703  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  5704  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  5705  02E8  00AE               	movwf	(_CalcMQ135$630+2)^(0+128)
  5706                           
  5707                           ;mq135_module.h: 50: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.0
      +                          018 * ratio3) +
  5708                           ;mq135_module.h: 51: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 * 
      +                          ratio6);
  5709  02E9  3010               	movlw	16
  5710  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  5711  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  5712  02EC  00BE               	movwf	___ftmul@f1
  5713  02ED  30FC               	movlw	252
  5714  02EE  00BF               	movwf	___ftmul@f1+1
  5715  02EF  30BA               	movlw	186
  5716  02F0  00C0               	movwf	___ftmul@f1+2
  5717  02F1  1683               	bsf	3,5	;RP0=1, select bank1
  5718  02F2  1303               	bcf	3,6	;RP1=0, select bank1
  5719  02F3  083E               	movf	CalcMQ135@ratio5^(0+128),w
  5720  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  5721  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  5722  02F6  00C1               	movwf	___ftmul@f2
  5723  02F7  1683               	bsf	3,5	;RP0=1, select bank1
  5724  02F8  1303               	bcf	3,6	;RP1=0, select bank1
  5725  02F9  083F               	movf	(CalcMQ135@ratio5+1)^(0+128),w
  5726  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  5727  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  5728  02FC  00C2               	movwf	___ftmul@f2+1
  5729  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  5730  02FE  1303               	bcf	3,6	;RP1=0, select bank1
  5731  02FF  0840               	movf	(CalcMQ135@ratio5+2)^(0+128),w
  5732  0300  1283               	bcf	3,5	;RP0=0, select bank0
  5733  0301  1303               	bcf	3,6	;RP1=0, select bank0
  5734  0302  00C3               	movwf	___ftmul@f2+2
  5735  0303  120A  118A  2722  120A  118A  	fcall	___ftmul
  5736  0308  1283               	bcf	3,5	;RP0=0, select bank0
  5737  0309  1303               	bcf	3,6	;RP1=0, select bank0
  5738  030A  083E               	movf	?___ftmul,w
  5739  030B  00B1               	movwf	___ftadd@f1
  5740  030C  083F               	movf	?___ftmul+1,w
  5741  030D  00B2               	movwf	___ftadd@f1+1
  5742  030E  0840               	movf	?___ftmul+2,w
  5743  030F  00B3               	movwf	___ftadd@f1+2
  5744  0310  1683               	bsf	3,5	;RP0=1, select bank1
  5745  0311  1303               	bcf	3,6	;RP1=0, select bank1
  5746  0312  082C               	movf	_CalcMQ135$630^(0+128),w
  5747  0313  1283               	bcf	3,5	;RP0=0, select bank0
  5748  0314  1303               	bcf	3,6	;RP1=0, select bank0
  5749  0315  00B4               	movwf	___ftadd@f2
  5750  0316  1683               	bsf	3,5	;RP0=1, select bank1
  5751  0317  1303               	bcf	3,6	;RP1=0, select bank1
  5752  0318  082D               	movf	(_CalcMQ135$630+1)^(0+128),w
  5753  0319  1283               	bcf	3,5	;RP0=0, select bank0
  5754  031A  1303               	bcf	3,6	;RP1=0, select bank0
  5755  031B  00B5               	movwf	___ftadd@f2+1
  5756  031C  1683               	bsf	3,5	;RP0=1, select bank1
  5757  031D  1303               	bcf	3,6	;RP1=0, select bank1
  5758  031E  082E               	movf	(_CalcMQ135$630+2)^(0+128),w
  5759  031F  1283               	bcf	3,5	;RP0=0, select bank0
  5760  0320  1303               	bcf	3,6	;RP1=0, select bank0
  5761  0321  00B6               	movwf	___ftadd@f2+2
  5762  0322  120A  158A  26F7  120A  118A  	fcall	___ftadd
  5763  0327  1283               	bcf	3,5	;RP0=0, select bank0
  5764  0328  1303               	bcf	3,6	;RP1=0, select bank0
  5765  0329  0831               	movf	?___ftadd,w
  5766  032A  1683               	bsf	3,5	;RP0=1, select bank1
  5767  032B  1303               	bcf	3,6	;RP1=0, select bank1
  5768  032C  00AF               	movwf	_CalcMQ135$631^(0+128)
  5769  032D  1283               	bcf	3,5	;RP0=0, select bank0
  5770  032E  1303               	bcf	3,6	;RP1=0, select bank0
  5771  032F  0832               	movf	?___ftadd+1,w
  5772  0330  1683               	bsf	3,5	;RP0=1, select bank1
  5773  0331  1303               	bcf	3,6	;RP1=0, select bank1
  5774  0332  00B0               	movwf	(_CalcMQ135$631+1)^(0+128)
  5775  0333  1283               	bcf	3,5	;RP0=0, select bank0
  5776  0334  1303               	bcf	3,6	;RP1=0, select bank0
  5777  0335  0833               	movf	?___ftadd+2,w
  5778  0336  1683               	bsf	3,5	;RP0=1, select bank1
  5779  0337  1303               	bcf	3,6	;RP1=0, select bank1
  5780  0338  00B1               	movwf	(_CalcMQ135$631+2)^(0+128)
  5781                           
  5782                           ;mq135_module.h: 50: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.0
      +                          018 * ratio3) +
  5783                           ;mq135_module.h: 51: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 * 
      +                          ratio6);
  5784  0339  30A8               	movlw	168
  5785  033A  1283               	bcf	3,5	;RP0=0, select bank0
  5786  033B  1303               	bcf	3,6	;RP1=0, select bank0
  5787  033C  00BE               	movwf	___ftmul@f1
  5788  033D  3090               	movlw	144
  5789  033E  00BF               	movwf	___ftmul@f1+1
  5790  033F  303F               	movlw	63
  5791  0340  00C0               	movwf	___ftmul@f1+2
  5792  0341  1683               	bsf	3,5	;RP0=1, select bank1
  5793  0342  1303               	bcf	3,6	;RP1=0, select bank1
  5794  0343  0823               	movf	CalcMQ135@ratio6^(0+128),w
  5795  0344  1283               	bcf	3,5	;RP0=0, select bank0
  5796  0345  1303               	bcf	3,6	;RP1=0, select bank0
  5797  0346  00C1               	movwf	___ftmul@f2
  5798  0347  1683               	bsf	3,5	;RP0=1, select bank1
  5799  0348  1303               	bcf	3,6	;RP1=0, select bank1
  5800  0349  0824               	movf	(CalcMQ135@ratio6+1)^(0+128),w
  5801  034A  1283               	bcf	3,5	;RP0=0, select bank0
  5802  034B  1303               	bcf	3,6	;RP1=0, select bank0
  5803  034C  00C2               	movwf	___ftmul@f2+1
  5804  034D  1683               	bsf	3,5	;RP0=1, select bank1
  5805  034E  1303               	bcf	3,6	;RP1=0, select bank1
  5806  034F  0825               	movf	(CalcMQ135@ratio6+2)^(0+128),w
  5807  0350  1283               	bcf	3,5	;RP0=0, select bank0
  5808  0351  1303               	bcf	3,6	;RP1=0, select bank0
  5809  0352  00C3               	movwf	___ftmul@f2+2
  5810  0353  120A  118A  2722  120A  118A  	fcall	___ftmul
  5811  0358  1283               	bcf	3,5	;RP0=0, select bank0
  5812  0359  1303               	bcf	3,6	;RP1=0, select bank0
  5813  035A  083E               	movf	?___ftmul,w
  5814  035B  00B1               	movwf	___ftadd@f1
  5815  035C  083F               	movf	?___ftmul+1,w
  5816  035D  00B2               	movwf	___ftadd@f1+1
  5817  035E  0840               	movf	?___ftmul+2,w
  5818  035F  00B3               	movwf	___ftadd@f1+2
  5819  0360  1683               	bsf	3,5	;RP0=1, select bank1
  5820  0361  1303               	bcf	3,6	;RP1=0, select bank1
  5821  0362  082F               	movf	_CalcMQ135$631^(0+128),w
  5822  0363  1283               	bcf	3,5	;RP0=0, select bank0
  5823  0364  1303               	bcf	3,6	;RP1=0, select bank0
  5824  0365  00B4               	movwf	___ftadd@f2
  5825  0366  1683               	bsf	3,5	;RP0=1, select bank1
  5826  0367  1303               	bcf	3,6	;RP1=0, select bank1
  5827  0368  0830               	movf	(_CalcMQ135$631+1)^(0+128),w
  5828  0369  1283               	bcf	3,5	;RP0=0, select bank0
  5829  036A  1303               	bcf	3,6	;RP1=0, select bank0
  5830  036B  00B5               	movwf	___ftadd@f2+1
  5831  036C  1683               	bsf	3,5	;RP0=1, select bank1
  5832  036D  1303               	bcf	3,6	;RP1=0, select bank1
  5833  036E  0831               	movf	(_CalcMQ135$631+2)^(0+128),w
  5834  036F  1283               	bcf	3,5	;RP0=0, select bank0
  5835  0370  1303               	bcf	3,6	;RP1=0, select bank0
  5836  0371  00B6               	movwf	___ftadd@f2+2
  5837  0372  120A  158A  26F7  120A  118A  	fcall	___ftadd
  5838  0377  1283               	bcf	3,5	;RP0=0, select bank0
  5839  0378  1303               	bcf	3,6	;RP1=0, select bank0
  5840  0379  0831               	movf	?___ftadd,w
  5841  037A  1683               	bsf	3,5	;RP0=1, select bank1
  5842  037B  1303               	bcf	3,6	;RP1=0, select bank1
  5843  037C  00B2               	movwf	_CalcMQ135$632^(0+128)
  5844  037D  1283               	bcf	3,5	;RP0=0, select bank0
  5845  037E  1303               	bcf	3,6	;RP1=0, select bank0
  5846  037F  0832               	movf	?___ftadd+1,w
  5847  0380  1683               	bsf	3,5	;RP0=1, select bank1
  5848  0381  1303               	bcf	3,6	;RP1=0, select bank1
  5849  0382  00B3               	movwf	(_CalcMQ135$632+1)^(0+128)
  5850  0383  1283               	bcf	3,5	;RP0=0, select bank0
  5851  0384  1303               	bcf	3,6	;RP1=0, select bank0
  5852  0385  0833               	movf	?___ftadd+2,w
  5853  0386  1683               	bsf	3,5	;RP0=1, select bank1
  5854  0387  1303               	bcf	3,6	;RP1=0, select bank1
  5855  0388  00B4               	movwf	(_CalcMQ135$632+2)^(0+128)
  5856                           
  5857                           ;mq135_module.h: 50: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.0
      +                          018 * ratio3) +
  5858                           ;mq135_module.h: 51: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 * 
      +                          ratio6);
  5859  0389  3080               	movlw	128
  5860  038A  1283               	bcf	3,5	;RP0=0, select bank0
  5861  038B  1303               	bcf	3,6	;RP1=0, select bank0
  5862  038C  00B1               	movwf	___ftadd@f1
  5863  038D  30B7               	movlw	183
  5864  038E  00B2               	movwf	___ftadd@f1+1
  5865  038F  3039               	movlw	57
  5866  0390  00B3               	movwf	___ftadd@f1+2
  5867  0391  1683               	bsf	3,5	;RP0=1, select bank1
  5868  0392  1303               	bcf	3,6	;RP1=0, select bank1
  5869  0393  0832               	movf	_CalcMQ135$632^(0+128),w
  5870  0394  1283               	bcf	3,5	;RP0=0, select bank0
  5871  0395  1303               	bcf	3,6	;RP1=0, select bank0
  5872  0396  00B4               	movwf	___ftadd@f2
  5873  0397  1683               	bsf	3,5	;RP0=1, select bank1
  5874  0398  1303               	bcf	3,6	;RP1=0, select bank1
  5875  0399  0833               	movf	(_CalcMQ135$632+1)^(0+128),w
  5876  039A  1283               	bcf	3,5	;RP0=0, select bank0
  5877  039B  1303               	bcf	3,6	;RP1=0, select bank0
  5878  039C  00B5               	movwf	___ftadd@f2+1
  5879  039D  1683               	bsf	3,5	;RP0=1, select bank1
  5880  039E  1303               	bcf	3,6	;RP1=0, select bank1
  5881  039F  0834               	movf	(_CalcMQ135$632+2)^(0+128),w
  5882  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  5883  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  5884  03A2  00B6               	movwf	___ftadd@f2+2
  5885  03A3  120A  158A  26F7  120A  118A  	fcall	___ftadd
  5886  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  5887  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  5888  03AA  0831               	movf	?___ftadd,w
  5889  03AB  1683               	bsf	3,5	;RP0=1, select bank1
  5890  03AC  1303               	bcf	3,6	;RP1=0, select bank1
  5891  03AD  00C1               	movwf	CalcMQ135@co2^(0+128)
  5892  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  5893  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  5894  03B0  0832               	movf	?___ftadd+1,w
  5895  03B1  1683               	bsf	3,5	;RP0=1, select bank1
  5896  03B2  1303               	bcf	3,6	;RP1=0, select bank1
  5897  03B3  00C2               	movwf	(CalcMQ135@co2+1)^(0+128)
  5898  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  5899  03B5  1303               	bcf	3,6	;RP1=0, select bank0
  5900  03B6  0833               	movf	?___ftadd+2,w
  5901  03B7  1683               	bsf	3,5	;RP0=1, select bank1
  5902  03B8  1303               	bcf	3,6	;RP1=0, select bank1
  5903  03B9  00C3               	movwf	(CalcMQ135@co2+2)^(0+128)
  5904                           
  5905                           ;mq135_module.h: 53: co2 *= 415.58;
  5906  03BA  30CA               	movlw	202
  5907  03BB  1283               	bcf	3,5	;RP0=0, select bank0
  5908  03BC  1303               	bcf	3,6	;RP1=0, select bank0
  5909  03BD  00BE               	movwf	___ftmul@f1
  5910  03BE  30CF               	movlw	207
  5911  03BF  00BF               	movwf	___ftmul@f1+1
  5912  03C0  3043               	movlw	67
  5913  03C1  00C0               	movwf	___ftmul@f1+2
  5914  03C2  1683               	bsf	3,5	;RP0=1, select bank1
  5915  03C3  1303               	bcf	3,6	;RP1=0, select bank1
  5916  03C4  0841               	movf	CalcMQ135@co2^(0+128),w
  5917  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  5918  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  5919  03C7  00C1               	movwf	___ftmul@f2
  5920  03C8  1683               	bsf	3,5	;RP0=1, select bank1
  5921  03C9  1303               	bcf	3,6	;RP1=0, select bank1
  5922  03CA  0842               	movf	(CalcMQ135@co2+1)^(0+128),w
  5923  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  5924  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  5925  03CD  00C2               	movwf	___ftmul@f2+1
  5926  03CE  1683               	bsf	3,5	;RP0=1, select bank1
  5927  03CF  1303               	bcf	3,6	;RP1=0, select bank1
  5928  03D0  0843               	movf	(CalcMQ135@co2+2)^(0+128),w
  5929  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  5930  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  5931  03D3  00C3               	movwf	___ftmul@f2+2
  5932  03D4  120A  118A  2722   	fcall	___ftmul
  5933  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  5934  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  5935  03D9  083E               	movf	?___ftmul,w
  5936  03DA  1683               	bsf	3,5	;RP0=1, select bank1
  5937  03DB  1303               	bcf	3,6	;RP1=0, select bank1
  5938  03DC  00C1               	movwf	CalcMQ135@co2^(0+128)
  5939  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  5940  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  5941  03DF  083F               	movf	?___ftmul+1,w
  5942  03E0  1683               	bsf	3,5	;RP0=1, select bank1
  5943  03E1  1303               	bcf	3,6	;RP1=0, select bank1
  5944  03E2  00C2               	movwf	(CalcMQ135@co2+1)^(0+128)
  5945  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  5946  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  5947  03E5  0840               	movf	?___ftmul+2,w
  5948  03E6  1683               	bsf	3,5	;RP0=1, select bank1
  5949  03E7  1303               	bcf	3,6	;RP1=0, select bank1
  5950  03E8  00C3               	movwf	(CalcMQ135@co2+2)^(0+128)
  5951                           
  5952                           ;mq135_module.h: 54: return co2;
  5953  03E9  0841               	movf	CalcMQ135@co2^(0+128),w
  5954  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  5955  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  5956  03EC  00DE               	movwf	?_CalcMQ135
  5957  03ED  1683               	bsf	3,5	;RP0=1, select bank1
  5958  03EE  1303               	bcf	3,6	;RP1=0, select bank1
  5959  03EF  0842               	movf	(CalcMQ135@co2+1)^(0+128),w
  5960  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  5961  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  5962  03F2  00DF               	movwf	?_CalcMQ135+1
  5963  03F3  1683               	bsf	3,5	;RP0=1, select bank1
  5964  03F4  1303               	bcf	3,6	;RP1=0, select bank1
  5965  03F5  0843               	movf	(CalcMQ135@co2+2)^(0+128),w
  5966  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  5967  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  5968  03F8  00E0               	movwf	?_CalcMQ135+2
  5969  03F9  0008               	return
  5970  03FA                     __end_of_CalcMQ135:	
  5971                           
  5972                           	psect	text29
  5973  0722                     __ptext29:	
  5974 ;; *************** function ___ftmul *****************
  5975 ;; Defined at:
  5976 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;  f1              3   30[BANK0 ] float 
  5979 ;;  f2              3   33[BANK0 ] float 
  5980 ;; Auto vars:     Size  Location     Type
  5981 ;;  f3_as_produc    3   41[BANK0 ] unsigned um
  5982 ;;  sign            1   45[BANK0 ] unsigned char 
  5983 ;;  cntr            1   44[BANK0 ] unsigned char 
  5984 ;;  exp             1   40[BANK0 ] unsigned char 
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  3   30[BANK0 ] float 
  5987 ;; Registers used:
  5988 ;;		wreg, status,2, status,0, pclath, cstack
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5994 ;;      Params:         0       6       0       0       0
  5995 ;;      Locals:         0       6       0       0       0
  5996 ;;      Temps:          0       4       0       0       0
  5997 ;;      Totals:         0      16       0       0       0
  5998 ;;Total ram usage:       16 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    3
  6001 ;; This function calls:
  6002 ;;		___ftpack
  6003 ;; This function is called by:
  6004 ;;		_CalcMQ135
  6005 ;;		_displayPPM
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           
  6010                           ;psect for function ___ftmul
  6011  0722                     ___ftmul:	
  6012                           
  6013                           ;incstack = 0
  6014                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6015  0722  1283               	bcf	3,5	;RP0=0, select bank0
  6016  0723  1303               	bcf	3,6	;RP1=0, select bank0
  6017  0724  083E               	movf	___ftmul@f1,w
  6018  0725  00C4               	movwf	??___ftmul
  6019  0726  083F               	movf	___ftmul@f1+1,w
  6020  0727  00C5               	movwf	??___ftmul+1
  6021  0728  0840               	movf	___ftmul@f1+2,w
  6022  0729  00C6               	movwf	??___ftmul+2
  6023  072A  1003               	clrc
  6024  072B  0D45               	rlf	??___ftmul+1,w
  6025  072C  0D46               	rlf	??___ftmul+2,w
  6026  072D  00C7               	movwf	??___ftmul+3
  6027  072E  0847               	movf	??___ftmul+3,w
  6028  072F  00C8               	movwf	___ftmul@exp
  6029  0730  08C8               	movf	___ftmul@exp,f
  6030  0731  1D03               	skipz
  6031  0732  2F3A               	goto	l2000
  6032  0733  3000               	movlw	0
  6033  0734  00BE               	movwf	?___ftmul
  6034  0735  3000               	movlw	0
  6035  0736  00BF               	movwf	?___ftmul+1
  6036  0737  3000               	movlw	0
  6037  0738  00C0               	movwf	?___ftmul+2
  6038  0739  0008               	return
  6039  073A                     l2000:	
  6040  073A  0841               	movf	___ftmul@f2,w
  6041  073B  00C4               	movwf	??___ftmul
  6042  073C  0842               	movf	___ftmul@f2+1,w
  6043  073D  00C5               	movwf	??___ftmul+1
  6044  073E  0843               	movf	___ftmul@f2+2,w
  6045  073F  00C6               	movwf	??___ftmul+2
  6046  0740  1003               	clrc
  6047  0741  0D45               	rlf	??___ftmul+1,w
  6048  0742  0D46               	rlf	??___ftmul+2,w
  6049  0743  00C7               	movwf	??___ftmul+3
  6050  0744  0847               	movf	??___ftmul+3,w
  6051  0745  00CD               	movwf	___ftmul@sign
  6052  0746  08CD               	movf	___ftmul@sign,f
  6053  0747  1D03               	skipz
  6054  0748  2F50               	goto	l2006
  6055  0749  3000               	movlw	0
  6056  074A  00BE               	movwf	?___ftmul
  6057  074B  3000               	movlw	0
  6058  074C  00BF               	movwf	?___ftmul+1
  6059  074D  3000               	movlw	0
  6060  074E  00C0               	movwf	?___ftmul+2
  6061  074F  0008               	return
  6062  0750                     l2006:	
  6063  0750  084D               	movf	___ftmul@sign,w
  6064  0751  3E7B               	addlw	123
  6065  0752  00C4               	movwf	??___ftmul
  6066  0753  0844               	movf	??___ftmul,w
  6067  0754  07C8               	addwf	___ftmul@exp,f
  6068  0755  083E               	movf	___ftmul@f1,w
  6069  0756  00C4               	movwf	??___ftmul
  6070  0757  083F               	movf	___ftmul@f1+1,w
  6071  0758  00C5               	movwf	??___ftmul+1
  6072  0759  0840               	movf	___ftmul@f1+2,w
  6073  075A  00C6               	movwf	??___ftmul+2
  6074  075B  3010               	movlw	16
  6075  075C                     u2385:	
  6076  075C  1003               	clrc
  6077  075D  0CC6               	rrf	??___ftmul+2,f
  6078  075E  0CC5               	rrf	??___ftmul+1,f
  6079  075F  0CC4               	rrf	??___ftmul,f
  6080  0760  3EFF               	addlw	-1
  6081  0761  1D03               	skipz
  6082  0762  2F5C               	goto	u2385
  6083  0763  0844               	movf	??___ftmul,w
  6084  0764  00C7               	movwf	??___ftmul+3
  6085  0765  0847               	movf	??___ftmul+3,w
  6086  0766  00CD               	movwf	___ftmul@sign
  6087  0767  0841               	movf	___ftmul@f2,w
  6088  0768  00C4               	movwf	??___ftmul
  6089  0769  0842               	movf	___ftmul@f2+1,w
  6090  076A  00C5               	movwf	??___ftmul+1
  6091  076B  0843               	movf	___ftmul@f2+2,w
  6092  076C  00C6               	movwf	??___ftmul+2
  6093  076D  3010               	movlw	16
  6094  076E                     u2395:	
  6095  076E  1003               	clrc
  6096  076F  0CC6               	rrf	??___ftmul+2,f
  6097  0770  0CC5               	rrf	??___ftmul+1,f
  6098  0771  0CC4               	rrf	??___ftmul,f
  6099  0772  3EFF               	addlw	-1
  6100  0773  1D03               	skipz
  6101  0774  2F6E               	goto	u2395
  6102  0775  0844               	movf	??___ftmul,w
  6103  0776  00C7               	movwf	??___ftmul+3
  6104  0777  0847               	movf	??___ftmul+3,w
  6105  0778  06CD               	xorwf	___ftmul@sign,f
  6106  0779  3080               	movlw	128
  6107  077A  00C4               	movwf	??___ftmul
  6108  077B  0844               	movf	??___ftmul,w
  6109  077C  05CD               	andwf	___ftmul@sign,f
  6110  077D  17BF               	bsf	___ftmul@f1+1,7
  6111  077E  17C2               	bsf	___ftmul@f2+1,7
  6112  077F  30FF               	movlw	255
  6113  0780  05C1               	andwf	___ftmul@f2,f
  6114  0781  30FF               	movlw	255
  6115  0782  05C2               	andwf	___ftmul@f2+1,f
  6116  0783  3000               	movlw	0
  6117  0784  05C3               	andwf	___ftmul@f2+2,f
  6118  0785  3000               	movlw	0
  6119  0786  00C9               	movwf	___ftmul@f3_as_product
  6120  0787  3000               	movlw	0
  6121  0788  00CA               	movwf	___ftmul@f3_as_product+1
  6122  0789  3000               	movlw	0
  6123  078A  00CB               	movwf	___ftmul@f3_as_product+2
  6124  078B  3007               	movlw	7
  6125  078C  00C4               	movwf	??___ftmul
  6126  078D  0844               	movf	??___ftmul,w
  6127  078E  00CC               	movwf	___ftmul@cntr
  6128  078F                     l2018:	
  6129  078F  1C3E               	btfss	___ftmul@f1,0
  6130  0790  2F9F               	goto	l2022
  6131  0791  0841               	movf	___ftmul@f2,w
  6132  0792  07C9               	addwf	___ftmul@f3_as_product,f
  6133  0793  0842               	movf	___ftmul@f2+1,w
  6134  0794  1103               	clrz
  6135  0795  1803               	skipnc
  6136  0796  0A42               	incf	___ftmul@f2+1,w
  6137  0797  1D03               	btfss	3,2
  6138  0798  07CA               	addwf	___ftmul@f3_as_product+1,f
  6139  0799  0843               	movf	___ftmul@f2+2,w
  6140  079A  1103               	clrz
  6141  079B  1803               	skipnc
  6142  079C  0A43               	incf	___ftmul@f2+2,w
  6143  079D  1D03               	btfss	3,2
  6144  079E  07CB               	addwf	___ftmul@f3_as_product+2,f
  6145  079F                     l2022:	
  6146  079F  3001               	movlw	1
  6147  07A0                     u2425:	
  6148  07A0  1003               	clrc
  6149  07A1  0CC0               	rrf	___ftmul@f1+2,f
  6150  07A2  0CBF               	rrf	___ftmul@f1+1,f
  6151  07A3  0CBE               	rrf	___ftmul@f1,f
  6152  07A4  3EFF               	addlw	-1
  6153  07A5  1D03               	skipz
  6154  07A6  2FA0               	goto	u2425
  6155  07A7  3001               	movlw	1
  6156  07A8                     u2435:	
  6157  07A8  1003               	clrc
  6158  07A9  0DC1               	rlf	___ftmul@f2,f
  6159  07AA  0DC2               	rlf	___ftmul@f2+1,f
  6160  07AB  0DC3               	rlf	___ftmul@f2+2,f
  6161  07AC  3EFF               	addlw	-1
  6162  07AD  1D03               	skipz
  6163  07AE  2FA8               	goto	u2435
  6164  07AF  3001               	movlw	1
  6165  07B0  02CC               	subwf	___ftmul@cntr,f
  6166  07B1  1D03               	btfss	3,2
  6167  07B2  2F8F               	goto	l2018
  6168  07B3  3009               	movlw	9
  6169  07B4  00C4               	movwf	??___ftmul
  6170  07B5  0844               	movf	??___ftmul,w
  6171  07B6  00CC               	movwf	___ftmul@cntr
  6172  07B7                     l2030:	
  6173  07B7  1C3E               	btfss	___ftmul@f1,0
  6174  07B8  2FC7               	goto	l2034
  6175  07B9  0841               	movf	___ftmul@f2,w
  6176  07BA  07C9               	addwf	___ftmul@f3_as_product,f
  6177  07BB  0842               	movf	___ftmul@f2+1,w
  6178  07BC  1103               	clrz
  6179  07BD  1803               	skipnc
  6180  07BE  0A42               	incf	___ftmul@f2+1,w
  6181  07BF  1D03               	btfss	3,2
  6182  07C0  07CA               	addwf	___ftmul@f3_as_product+1,f
  6183  07C1  0843               	movf	___ftmul@f2+2,w
  6184  07C2  1103               	clrz
  6185  07C3  1803               	skipnc
  6186  07C4  0A43               	incf	___ftmul@f2+2,w
  6187  07C5  1D03               	btfss	3,2
  6188  07C6  07CB               	addwf	___ftmul@f3_as_product+2,f
  6189  07C7                     l2034:	
  6190  07C7  3001               	movlw	1
  6191  07C8                     u2475:	
  6192  07C8  1003               	clrc
  6193  07C9  0CC0               	rrf	___ftmul@f1+2,f
  6194  07CA  0CBF               	rrf	___ftmul@f1+1,f
  6195  07CB  0CBE               	rrf	___ftmul@f1,f
  6196  07CC  3EFF               	addlw	-1
  6197  07CD  1D03               	skipz
  6198  07CE  2FC8               	goto	u2475
  6199  07CF  3001               	movlw	1
  6200  07D0                     u2485:	
  6201  07D0  1003               	clrc
  6202  07D1  0CCB               	rrf	___ftmul@f3_as_product+2,f
  6203  07D2  0CCA               	rrf	___ftmul@f3_as_product+1,f
  6204  07D3  0CC9               	rrf	___ftmul@f3_as_product,f
  6205  07D4  3EFF               	addlw	-1
  6206  07D5  1D03               	skipz
  6207  07D6  2FD0               	goto	u2485
  6208  07D7  3001               	movlw	1
  6209  07D8  02CC               	subwf	___ftmul@cntr,f
  6210  07D9  1D03               	btfss	3,2
  6211  07DA  2FB7               	goto	l2030
  6212  07DB  0849               	movf	___ftmul@f3_as_product,w
  6213  07DC  00A0               	movwf	___ftpack@arg
  6214  07DD  084A               	movf	___ftmul@f3_as_product+1,w
  6215  07DE  00A1               	movwf	___ftpack@arg+1
  6216  07DF  084B               	movf	___ftmul@f3_as_product+2,w
  6217  07E0  00A2               	movwf	___ftpack@arg+2
  6218  07E1  0848               	movf	___ftmul@exp,w
  6219  07E2  00C4               	movwf	??___ftmul
  6220  07E3  0844               	movf	??___ftmul,w
  6221  07E4  00A3               	movwf	___ftpack@exp
  6222  07E5  084D               	movf	___ftmul@sign,w
  6223  07E6  00C5               	movwf	??___ftmul+1
  6224  07E7  0845               	movf	??___ftmul+1,w
  6225  07E8  00A4               	movwf	___ftpack@sign
  6226  07E9  120A  158A  22AE   	fcall	___ftpack
  6227  07EC  1283               	bcf	3,5	;RP0=0, select bank0
  6228  07ED  1303               	bcf	3,6	;RP1=0, select bank0
  6229  07EE  0820               	movf	?___ftpack,w
  6230  07EF  00BE               	movwf	?___ftmul
  6231  07F0  0821               	movf	?___ftpack+1,w
  6232  07F1  00BF               	movwf	?___ftmul+1
  6233  07F2  0822               	movf	?___ftpack+2,w
  6234  07F3  00C0               	movwf	?___ftmul+2
  6235  07F4  0008               	return
  6236  07F5                     __end_of___ftmul:	
  6237                           
  6238                           	psect	text30
  6239  0D72                     __ptext30:	
  6240 ;; *************** function ___ftdiv *****************
  6241 ;; Defined at:
  6242 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  f2              3   46[BANK0 ] float 
  6245 ;;  f1              3   49[BANK0 ] float 
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;  f3              3   57[BANK0 ] float 
  6248 ;;  sign            1   61[BANK0 ] unsigned char 
  6249 ;;  exp             1   60[BANK0 ] unsigned char 
  6250 ;;  cntr            1   56[BANK0 ] unsigned char 
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  3   46[BANK0 ] float 
  6253 ;; Registers used:
  6254 ;;		wreg, status,2, status,0, pclath, cstack
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6260 ;;      Params:         0       6       0       0       0
  6261 ;;      Locals:         0       6       0       0       0
  6262 ;;      Temps:          0       4       0       0       0
  6263 ;;      Totals:         0      16       0       0       0
  6264 ;;Total ram usage:       16 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    3
  6267 ;; This function calls:
  6268 ;;		___ftpack
  6269 ;; This function is called by:
  6270 ;;		_CalcMQ135
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           
  6275                           ;psect for function ___ftdiv
  6276  0D72                     ___ftdiv:	
  6277                           
  6278                           ;incstack = 0
  6279                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6280  0D72  1283               	bcf	3,5	;RP0=0, select bank0
  6281  0D73  1303               	bcf	3,6	;RP1=0, select bank0
  6282  0D74  0851               	movf	___ftdiv@f1,w
  6283  0D75  00D4               	movwf	??___ftdiv
  6284  0D76  0852               	movf	___ftdiv@f1+1,w
  6285  0D77  00D5               	movwf	??___ftdiv+1
  6286  0D78  0853               	movf	___ftdiv@f1+2,w
  6287  0D79  00D6               	movwf	??___ftdiv+2
  6288  0D7A  1003               	clrc
  6289  0D7B  0D55               	rlf	??___ftdiv+1,w
  6290  0D7C  0D56               	rlf	??___ftdiv+2,w
  6291  0D7D  00D7               	movwf	??___ftdiv+3
  6292  0D7E  0857               	movf	??___ftdiv+3,w
  6293  0D7F  00DC               	movwf	___ftdiv@exp
  6294  0D80  08DC               	movf	___ftdiv@exp,f
  6295  0D81  1D03               	skipz
  6296  0D82  2D8A               	goto	l2226
  6297  0D83  3000               	movlw	0
  6298  0D84  00CE               	movwf	?___ftdiv
  6299  0D85  3000               	movlw	0
  6300  0D86  00CF               	movwf	?___ftdiv+1
  6301  0D87  3000               	movlw	0
  6302  0D88  00D0               	movwf	?___ftdiv+2
  6303  0D89  0008               	return
  6304  0D8A                     l2226:	
  6305  0D8A  084E               	movf	___ftdiv@f2,w
  6306  0D8B  00D4               	movwf	??___ftdiv
  6307  0D8C  084F               	movf	___ftdiv@f2+1,w
  6308  0D8D  00D5               	movwf	??___ftdiv+1
  6309  0D8E  0850               	movf	___ftdiv@f2+2,w
  6310  0D8F  00D6               	movwf	??___ftdiv+2
  6311  0D90  1003               	clrc
  6312  0D91  0D55               	rlf	??___ftdiv+1,w
  6313  0D92  0D56               	rlf	??___ftdiv+2,w
  6314  0D93  00D7               	movwf	??___ftdiv+3
  6315  0D94  0857               	movf	??___ftdiv+3,w
  6316  0D95  00DD               	movwf	___ftdiv@sign
  6317  0D96  08DD               	movf	___ftdiv@sign,f
  6318  0D97  1D03               	skipz
  6319  0D98  2DA0               	goto	l2232
  6320  0D99  3000               	movlw	0
  6321  0D9A  00CE               	movwf	?___ftdiv
  6322  0D9B  3000               	movlw	0
  6323  0D9C  00CF               	movwf	?___ftdiv+1
  6324  0D9D  3000               	movlw	0
  6325  0D9E  00D0               	movwf	?___ftdiv+2
  6326  0D9F  0008               	return
  6327  0DA0                     l2232:	
  6328  0DA0  3000               	movlw	0
  6329  0DA1  00D9               	movwf	___ftdiv@f3
  6330  0DA2  3000               	movlw	0
  6331  0DA3  00DA               	movwf	___ftdiv@f3+1
  6332  0DA4  3000               	movlw	0
  6333  0DA5  00DB               	movwf	___ftdiv@f3+2
  6334  0DA6  3089               	movlw	137
  6335  0DA7  075D               	addwf	___ftdiv@sign,w
  6336  0DA8  00D4               	movwf	??___ftdiv
  6337  0DA9  0854               	movf	??___ftdiv,w
  6338  0DAA  02DC               	subwf	___ftdiv@exp,f
  6339  0DAB  0851               	movf	___ftdiv@f1,w
  6340  0DAC  00D4               	movwf	??___ftdiv
  6341  0DAD  0852               	movf	___ftdiv@f1+1,w
  6342  0DAE  00D5               	movwf	??___ftdiv+1
  6343  0DAF  0853               	movf	___ftdiv@f1+2,w
  6344  0DB0  00D6               	movwf	??___ftdiv+2
  6345  0DB1  3010               	movlw	16
  6346  0DB2                     u2825:	
  6347  0DB2  1003               	clrc
  6348  0DB3  0CD6               	rrf	??___ftdiv+2,f
  6349  0DB4  0CD5               	rrf	??___ftdiv+1,f
  6350  0DB5  0CD4               	rrf	??___ftdiv,f
  6351  0DB6  3EFF               	addlw	-1
  6352  0DB7  1D03               	skipz
  6353  0DB8  2DB2               	goto	u2825
  6354  0DB9  0854               	movf	??___ftdiv,w
  6355  0DBA  00D7               	movwf	??___ftdiv+3
  6356  0DBB  0857               	movf	??___ftdiv+3,w
  6357  0DBC  00DD               	movwf	___ftdiv@sign
  6358  0DBD  084E               	movf	___ftdiv@f2,w
  6359  0DBE  00D4               	movwf	??___ftdiv
  6360  0DBF  084F               	movf	___ftdiv@f2+1,w
  6361  0DC0  00D5               	movwf	??___ftdiv+1
  6362  0DC1  0850               	movf	___ftdiv@f2+2,w
  6363  0DC2  00D6               	movwf	??___ftdiv+2
  6364  0DC3  3010               	movlw	16
  6365  0DC4                     u2835:	
  6366  0DC4  1003               	clrc
  6367  0DC5  0CD6               	rrf	??___ftdiv+2,f
  6368  0DC6  0CD5               	rrf	??___ftdiv+1,f
  6369  0DC7  0CD4               	rrf	??___ftdiv,f
  6370  0DC8  3EFF               	addlw	-1
  6371  0DC9  1D03               	skipz
  6372  0DCA  2DC4               	goto	u2835
  6373  0DCB  0854               	movf	??___ftdiv,w
  6374  0DCC  00D7               	movwf	??___ftdiv+3
  6375  0DCD  0857               	movf	??___ftdiv+3,w
  6376  0DCE  06DD               	xorwf	___ftdiv@sign,f
  6377  0DCF  3080               	movlw	128
  6378  0DD0  00D4               	movwf	??___ftdiv
  6379  0DD1  0854               	movf	??___ftdiv,w
  6380  0DD2  05DD               	andwf	___ftdiv@sign,f
  6381  0DD3  17D2               	bsf	___ftdiv@f1+1,7
  6382  0DD4  30FF               	movlw	255
  6383  0DD5  05D1               	andwf	___ftdiv@f1,f
  6384  0DD6  30FF               	movlw	255
  6385  0DD7  05D2               	andwf	___ftdiv@f1+1,f
  6386  0DD8  3000               	movlw	0
  6387  0DD9  05D3               	andwf	___ftdiv@f1+2,f
  6388  0DDA  17CF               	bsf	___ftdiv@f2+1,7
  6389  0DDB  30FF               	movlw	255
  6390  0DDC  05CE               	andwf	___ftdiv@f2,f
  6391  0DDD  30FF               	movlw	255
  6392  0DDE  05CF               	andwf	___ftdiv@f2+1,f
  6393  0DDF  3000               	movlw	0
  6394  0DE0  05D0               	andwf	___ftdiv@f2+2,f
  6395  0DE1  3018               	movlw	24
  6396  0DE2  00D4               	movwf	??___ftdiv
  6397  0DE3  0854               	movf	??___ftdiv,w
  6398  0DE4  00D8               	movwf	___ftdiv@cntr
  6399  0DE5                     l2246:	
  6400  0DE5  3001               	movlw	1
  6401  0DE6                     u2845:	
  6402  0DE6  1003               	clrc
  6403  0DE7  0DD9               	rlf	___ftdiv@f3,f
  6404  0DE8  0DDA               	rlf	___ftdiv@f3+1,f
  6405  0DE9  0DDB               	rlf	___ftdiv@f3+2,f
  6406  0DEA  3EFF               	addlw	-1
  6407  0DEB  1D03               	skipz
  6408  0DEC  2DE6               	goto	u2845
  6409  0DED  0850               	movf	___ftdiv@f2+2,w
  6410  0DEE  0253               	subwf	___ftdiv@f1+2,w
  6411  0DEF  1D03               	skipz
  6412  0DF0  2DF7               	goto	u2855
  6413  0DF1  084F               	movf	___ftdiv@f2+1,w
  6414  0DF2  0252               	subwf	___ftdiv@f1+1,w
  6415  0DF3  1D03               	skipz
  6416  0DF4  2DF7               	goto	u2855
  6417  0DF5  084E               	movf	___ftdiv@f2,w
  6418  0DF6  0251               	subwf	___ftdiv@f1,w
  6419  0DF7                     u2855:	
  6420  0DF7  1C03               	skipc
  6421  0DF8  2E04               	goto	l2254
  6422  0DF9  084E               	movf	___ftdiv@f2,w
  6423  0DFA  02D1               	subwf	___ftdiv@f1,f
  6424  0DFB  084F               	movf	___ftdiv@f2+1,w
  6425  0DFC  1C03               	skipc
  6426  0DFD  0F4F               	incfsz	___ftdiv@f2+1,w
  6427  0DFE  02D2               	subwf	___ftdiv@f1+1,f
  6428  0DFF  0850               	movf	___ftdiv@f2+2,w
  6429  0E00  1C03               	skipc
  6430  0E01  0A50               	incf	___ftdiv@f2+2,w
  6431  0E02  02D3               	subwf	___ftdiv@f1+2,f
  6432  0E03  1459               	bsf	___ftdiv@f3,0
  6433  0E04                     l2254:	
  6434  0E04  3001               	movlw	1
  6435  0E05                     u2865:	
  6436  0E05  1003               	clrc
  6437  0E06  0DD1               	rlf	___ftdiv@f1,f
  6438  0E07  0DD2               	rlf	___ftdiv@f1+1,f
  6439  0E08  0DD3               	rlf	___ftdiv@f1+2,f
  6440  0E09  3EFF               	addlw	-1
  6441  0E0A  1D03               	skipz
  6442  0E0B  2E05               	goto	u2865
  6443  0E0C  3001               	movlw	1
  6444  0E0D  02D8               	subwf	___ftdiv@cntr,f
  6445  0E0E  1D03               	btfss	3,2
  6446  0E0F  2DE5               	goto	l2246
  6447  0E10  0859               	movf	___ftdiv@f3,w
  6448  0E11  00A0               	movwf	___ftpack@arg
  6449  0E12  085A               	movf	___ftdiv@f3+1,w
  6450  0E13  00A1               	movwf	___ftpack@arg+1
  6451  0E14  085B               	movf	___ftdiv@f3+2,w
  6452  0E15  00A2               	movwf	___ftpack@arg+2
  6453  0E16  085C               	movf	___ftdiv@exp,w
  6454  0E17  00D4               	movwf	??___ftdiv
  6455  0E18  0854               	movf	??___ftdiv,w
  6456  0E19  00A3               	movwf	___ftpack@exp
  6457  0E1A  085D               	movf	___ftdiv@sign,w
  6458  0E1B  00D5               	movwf	??___ftdiv+1
  6459  0E1C  0855               	movf	??___ftdiv+1,w
  6460  0E1D  00A4               	movwf	___ftpack@sign
  6461  0E1E  120A  158A  22AE   	fcall	___ftpack
  6462  0E21  1283               	bcf	3,5	;RP0=0, select bank0
  6463  0E22  1303               	bcf	3,6	;RP1=0, select bank0
  6464  0E23  0820               	movf	?___ftpack,w
  6465  0E24  00CE               	movwf	?___ftdiv
  6466  0E25  0821               	movf	?___ftpack+1,w
  6467  0E26  00CF               	movwf	?___ftdiv+1
  6468  0E27  0822               	movf	?___ftpack+2,w
  6469  0E28  00D0               	movwf	?___ftdiv+2
  6470  0E29  0008               	return
  6471  0E2A                     __end_of___ftdiv:	
  6472                           
  6473                           	psect	text31
  6474  0EF7                     __ptext31:	
  6475 ;; *************** function ___ftadd *****************
  6476 ;; Defined at:
  6477 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;  f1              3   17[BANK0 ] float 
  6480 ;;  f2              3   20[BANK0 ] float 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;  exp1            1   29[BANK0 ] unsigned char 
  6483 ;;  exp2            1   28[BANK0 ] unsigned char 
  6484 ;;  sign            1   27[BANK0 ] unsigned char 
  6485 ;; Return value:  Size  Location     Type
  6486 ;;                  3   17[BANK0 ] float 
  6487 ;; Registers used:
  6488 ;;		wreg, status,2, status,0, pclath, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6494 ;;      Params:         0       6       0       0       0
  6495 ;;      Locals:         0       3       0       0       0
  6496 ;;      Temps:          0       4       0       0       0
  6497 ;;      Totals:         0      13       0       0       0
  6498 ;;Total ram usage:       13 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    3
  6501 ;; This function calls:
  6502 ;;		___ftpack
  6503 ;; This function is called by:
  6504 ;;		_CalcMQ135
  6505 ;;		_displayPPM
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           
  6510                           ;psect for function ___ftadd
  6511  0EF7                     ___ftadd:	
  6512                           
  6513                           ;incstack = 0
  6514                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6515  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  6516  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  6517  0EF9  0831               	movf	___ftadd@f1,w
  6518  0EFA  00B7               	movwf	??___ftadd
  6519  0EFB  0832               	movf	___ftadd@f1+1,w
  6520  0EFC  00B8               	movwf	??___ftadd+1
  6521  0EFD  0833               	movf	___ftadd@f1+2,w
  6522  0EFE  00B9               	movwf	??___ftadd+2
  6523  0EFF  1003               	clrc
  6524  0F00  0D38               	rlf	??___ftadd+1,w
  6525  0F01  0D39               	rlf	??___ftadd+2,w
  6526  0F02  00BA               	movwf	??___ftadd+3
  6527  0F03  083A               	movf	??___ftadd+3,w
  6528  0F04  00BD               	movwf	___ftadd@exp1
  6529  0F05  0834               	movf	___ftadd@f2,w
  6530  0F06  00B7               	movwf	??___ftadd
  6531  0F07  0835               	movf	___ftadd@f2+1,w
  6532  0F08  00B8               	movwf	??___ftadd+1
  6533  0F09  0836               	movf	___ftadd@f2+2,w
  6534  0F0A  00B9               	movwf	??___ftadd+2
  6535  0F0B  1003               	clrc
  6536  0F0C  0D38               	rlf	??___ftadd+1,w
  6537  0F0D  0D39               	rlf	??___ftadd+2,w
  6538  0F0E  00BA               	movwf	??___ftadd+3
  6539  0F0F  083A               	movf	??___ftadd+3,w
  6540  0F10  00BC               	movwf	___ftadd@exp2
  6541  0F11  083D               	movf	___ftadd@exp1,w
  6542  0F12  1903               	btfsc	3,2
  6543  0F13  2F20               	goto	l1930
  6544  0F14  083C               	movf	___ftadd@exp2,w
  6545  0F15  023D               	subwf	___ftadd@exp1,w
  6546  0F16  1803               	skipnc
  6547  0F17  2F27               	goto	l1934
  6548  0F18  033D               	decf	___ftadd@exp1,w
  6549  0F19  3AFF               	xorlw	255
  6550  0F1A  073C               	addwf	___ftadd@exp2,w
  6551  0F1B  00B7               	movwf	??___ftadd
  6552  0F1C  3019               	movlw	25
  6553  0F1D  0237               	subwf	??___ftadd,w
  6554  0F1E  1C03               	skipc
  6555  0F1F  2F27               	goto	l1934
  6556  0F20                     l1930:	
  6557  0F20  0834               	movf	___ftadd@f2,w
  6558  0F21  00B1               	movwf	?___ftadd
  6559  0F22  0835               	movf	___ftadd@f2+1,w
  6560  0F23  00B2               	movwf	?___ftadd+1
  6561  0F24  0836               	movf	___ftadd@f2+2,w
  6562  0F25  00B3               	movwf	?___ftadd+2
  6563  0F26  0008               	return
  6564  0F27                     l1934:	
  6565  0F27  083C               	movf	___ftadd@exp2,w
  6566  0F28  1903               	btfsc	3,2
  6567  0F29  0008               	return
  6568  0F2A  083D               	movf	___ftadd@exp1,w
  6569  0F2B  023C               	subwf	___ftadd@exp2,w
  6570  0F2C  1803               	skipnc
  6571  0F2D  2F36               	goto	l1940
  6572  0F2E  033C               	decf	___ftadd@exp2,w
  6573  0F2F  3AFF               	xorlw	255
  6574  0F30  073D               	addwf	___ftadd@exp1,w
  6575  0F31  00B7               	movwf	??___ftadd
  6576  0F32  3019               	movlw	25
  6577  0F33  0237               	subwf	??___ftadd,w
  6578  0F34  1803               	btfsc	3,0
  6579  0F35  0008               	return
  6580  0F36                     l1940:	
  6581  0F36  3006               	movlw	6
  6582  0F37  00B7               	movwf	??___ftadd
  6583  0F38  0837               	movf	??___ftadd,w
  6584  0F39  00BB               	movwf	___ftadd@sign
  6585  0F3A  1BB3               	btfsc	___ftadd@f1+2,7
  6586  0F3B  17BB               	bsf	___ftadd@sign,7
  6587  0F3C  1BB6               	btfsc	___ftadd@f2+2,7
  6588  0F3D  173B               	bsf	___ftadd@sign,6
  6589  0F3E  17B2               	bsf	___ftadd@f1+1,7
  6590  0F3F  30FF               	movlw	255
  6591  0F40  05B1               	andwf	___ftadd@f1,f
  6592  0F41  30FF               	movlw	255
  6593  0F42  05B2               	andwf	___ftadd@f1+1,f
  6594  0F43  3000               	movlw	0
  6595  0F44  05B3               	andwf	___ftadd@f1+2,f
  6596  0F45  17B5               	bsf	___ftadd@f2+1,7
  6597  0F46  30FF               	movlw	255
  6598  0F47  05B4               	andwf	___ftadd@f2,f
  6599  0F48  30FF               	movlw	255
  6600  0F49  05B5               	andwf	___ftadd@f2+1,f
  6601  0F4A  3000               	movlw	0
  6602  0F4B  05B6               	andwf	___ftadd@f2+2,f
  6603  0F4C  083C               	movf	___ftadd@exp2,w
  6604  0F4D  023D               	subwf	___ftadd@exp1,w
  6605  0F4E  1803               	skipnc
  6606  0F4F  2F76               	goto	l1962
  6607  0F50                     l1952:	
  6608  0F50  3001               	movlw	1
  6609  0F51                     u2215:	
  6610  0F51  1003               	clrc
  6611  0F52  0DB4               	rlf	___ftadd@f2,f
  6612  0F53  0DB5               	rlf	___ftadd@f2+1,f
  6613  0F54  0DB6               	rlf	___ftadd@f2+2,f
  6614  0F55  3EFF               	addlw	-1
  6615  0F56  1D03               	skipz
  6616  0F57  2F51               	goto	u2215
  6617  0F58  3001               	movlw	1
  6618  0F59  02BC               	subwf	___ftadd@exp2,f
  6619  0F5A  083C               	movf	___ftadd@exp2,w
  6620  0F5B  063D               	xorwf	___ftadd@exp1,w
  6621  0F5C  1903               	skipnz
  6622  0F5D  2F71               	goto	l1960
  6623  0F5E  3001               	movlw	1
  6624  0F5F  02BB               	subwf	___ftadd@sign,f
  6625  0F60  083B               	movf	___ftadd@sign,w
  6626  0F61  3907               	andlw	7
  6627  0F62  1903               	btfsc	3,2
  6628  0F63  2F71               	goto	l1960
  6629  0F64  2F50               	goto	l1952
  6630  0F65                     l1958:	
  6631  0F65  3001               	movlw	1
  6632  0F66                     u2245:	
  6633  0F66  1003               	clrc
  6634  0F67  0CB3               	rrf	___ftadd@f1+2,f
  6635  0F68  0CB2               	rrf	___ftadd@f1+1,f
  6636  0F69  0CB1               	rrf	___ftadd@f1,f
  6637  0F6A  3EFF               	addlw	-1
  6638  0F6B  1D03               	skipz
  6639  0F6C  2F66               	goto	u2245
  6640  0F6D  3001               	movlw	1
  6641  0F6E  00B7               	movwf	??___ftadd
  6642  0F6F  0837               	movf	??___ftadd,w
  6643  0F70  07BD               	addwf	___ftadd@exp1,f
  6644  0F71                     l1960:	
  6645  0F71  083D               	movf	___ftadd@exp1,w
  6646  0F72  063C               	xorwf	___ftadd@exp2,w
  6647  0F73  1903               	btfsc	3,2
  6648  0F74  2F9F               	goto	l550
  6649  0F75  2F65               	goto	l1958
  6650  0F76                     l1962:	
  6651  0F76  083D               	movf	___ftadd@exp1,w
  6652  0F77  023C               	subwf	___ftadd@exp2,w
  6653  0F78  1803               	skipnc
  6654  0F79  2F9F               	goto	l550
  6655  0F7A                     l1964:	
  6656  0F7A  3001               	movlw	1
  6657  0F7B                     u2275:	
  6658  0F7B  1003               	clrc
  6659  0F7C  0DB1               	rlf	___ftadd@f1,f
  6660  0F7D  0DB2               	rlf	___ftadd@f1+1,f
  6661  0F7E  0DB3               	rlf	___ftadd@f1+2,f
  6662  0F7F  3EFF               	addlw	-1
  6663  0F80  1D03               	skipz
  6664  0F81  2F7B               	goto	u2275
  6665  0F82  3001               	movlw	1
  6666  0F83  02BD               	subwf	___ftadd@exp1,f
  6667  0F84  083C               	movf	___ftadd@exp2,w
  6668  0F85  063D               	xorwf	___ftadd@exp1,w
  6669  0F86  1903               	skipnz
  6670  0F87  2F9B               	goto	l1972
  6671  0F88  3001               	movlw	1
  6672  0F89  02BB               	subwf	___ftadd@sign,f
  6673  0F8A  083B               	movf	___ftadd@sign,w
  6674  0F8B  3907               	andlw	7
  6675  0F8C  1903               	btfsc	3,2
  6676  0F8D  2F9B               	goto	l1972
  6677  0F8E  2F7A               	goto	l1964
  6678  0F8F                     l1970:	
  6679  0F8F  3001               	movlw	1
  6680  0F90                     u2305:	
  6681  0F90  1003               	clrc
  6682  0F91  0CB6               	rrf	___ftadd@f2+2,f
  6683  0F92  0CB5               	rrf	___ftadd@f2+1,f
  6684  0F93  0CB4               	rrf	___ftadd@f2,f
  6685  0F94  3EFF               	addlw	-1
  6686  0F95  1D03               	skipz
  6687  0F96  2F90               	goto	u2305
  6688  0F97  3001               	movlw	1
  6689  0F98  00B7               	movwf	??___ftadd
  6690  0F99  0837               	movf	??___ftadd,w
  6691  0F9A  07BC               	addwf	___ftadd@exp2,f
  6692  0F9B                     l1972:	
  6693  0F9B  083D               	movf	___ftadd@exp1,w
  6694  0F9C  063C               	xorwf	___ftadd@exp2,w
  6695  0F9D  1D03               	skipz
  6696  0F9E  2F8F               	goto	l1970
  6697  0F9F                     l550:	
  6698  0F9F  1FBB               	btfss	___ftadd@sign,7
  6699  0FA0  2FB1               	goto	l1976
  6700  0FA1  30FF               	movlw	255
  6701  0FA2  06B1               	xorwf	___ftadd@f1,f
  6702  0FA3  30FF               	movlw	255
  6703  0FA4  06B2               	xorwf	___ftadd@f1+1,f
  6704  0FA5  30FF               	movlw	255
  6705  0FA6  06B3               	xorwf	___ftadd@f1+2,f
  6706  0FA7  3001               	movlw	1
  6707  0FA8  07B1               	addwf	___ftadd@f1,f
  6708  0FA9  3000               	movlw	0
  6709  0FAA  1803               	skipnc
  6710  0FAB  3001               	movlw	1
  6711  0FAC  07B2               	addwf	___ftadd@f1+1,f
  6712  0FAD  3000               	movlw	0
  6713  0FAE  1803               	skipnc
  6714  0FAF  3001               	movlw	1
  6715  0FB0  07B3               	addwf	___ftadd@f1+2,f
  6716  0FB1                     l1976:	
  6717  0FB1  1F3B               	btfss	___ftadd@sign,6
  6718  0FB2  2FC3               	goto	l1980
  6719  0FB3  30FF               	movlw	255
  6720  0FB4  06B4               	xorwf	___ftadd@f2,f
  6721  0FB5  30FF               	movlw	255
  6722  0FB6  06B5               	xorwf	___ftadd@f2+1,f
  6723  0FB7  30FF               	movlw	255
  6724  0FB8  06B6               	xorwf	___ftadd@f2+2,f
  6725  0FB9  3001               	movlw	1
  6726  0FBA  07B4               	addwf	___ftadd@f2,f
  6727  0FBB  3000               	movlw	0
  6728  0FBC  1803               	skipnc
  6729  0FBD  3001               	movlw	1
  6730  0FBE  07B5               	addwf	___ftadd@f2+1,f
  6731  0FBF  3000               	movlw	0
  6732  0FC0  1803               	skipnc
  6733  0FC1  3001               	movlw	1
  6734  0FC2  07B6               	addwf	___ftadd@f2+2,f
  6735  0FC3                     l1980:	
  6736  0FC3  01BB               	clrf	___ftadd@sign
  6737  0FC4  0831               	movf	___ftadd@f1,w
  6738  0FC5  07B4               	addwf	___ftadd@f2,f
  6739  0FC6  0832               	movf	___ftadd@f1+1,w
  6740  0FC7  1103               	clrz
  6741  0FC8  1803               	skipnc
  6742  0FC9  0A32               	incf	___ftadd@f1+1,w
  6743  0FCA  1D03               	btfss	3,2
  6744  0FCB  07B5               	addwf	___ftadd@f2+1,f
  6745  0FCC  0833               	movf	___ftadd@f1+2,w
  6746  0FCD  1103               	clrz
  6747  0FCE  1803               	skipnc
  6748  0FCF  0A33               	incf	___ftadd@f1+2,w
  6749  0FD0  1D03               	btfss	3,2
  6750  0FD1  07B6               	addwf	___ftadd@f2+2,f
  6751  0FD2  1FB6               	btfss	___ftadd@f2+2,7
  6752  0FD3  2FE6               	goto	l1990
  6753  0FD4  30FF               	movlw	255
  6754  0FD5  06B4               	xorwf	___ftadd@f2,f
  6755  0FD6  30FF               	movlw	255
  6756  0FD7  06B5               	xorwf	___ftadd@f2+1,f
  6757  0FD8  30FF               	movlw	255
  6758  0FD9  06B6               	xorwf	___ftadd@f2+2,f
  6759  0FDA  3001               	movlw	1
  6760  0FDB  07B4               	addwf	___ftadd@f2,f
  6761  0FDC  3000               	movlw	0
  6762  0FDD  1803               	skipnc
  6763  0FDE  3001               	movlw	1
  6764  0FDF  07B5               	addwf	___ftadd@f2+1,f
  6765  0FE0  3000               	movlw	0
  6766  0FE1  1803               	skipnc
  6767  0FE2  3001               	movlw	1
  6768  0FE3  07B6               	addwf	___ftadd@f2+2,f
  6769  0FE4  01BB               	clrf	___ftadd@sign
  6770  0FE5  0ABB               	incf	___ftadd@sign,f
  6771  0FE6                     l1990:	
  6772  0FE6  0834               	movf	___ftadd@f2,w
  6773  0FE7  00A0               	movwf	___ftpack@arg
  6774  0FE8  0835               	movf	___ftadd@f2+1,w
  6775  0FE9  00A1               	movwf	___ftpack@arg+1
  6776  0FEA  0836               	movf	___ftadd@f2+2,w
  6777  0FEB  00A2               	movwf	___ftpack@arg+2
  6778  0FEC  083D               	movf	___ftadd@exp1,w
  6779  0FED  00B7               	movwf	??___ftadd
  6780  0FEE  0837               	movf	??___ftadd,w
  6781  0FEF  00A3               	movwf	___ftpack@exp
  6782  0FF0  083B               	movf	___ftadd@sign,w
  6783  0FF1  00B8               	movwf	??___ftadd+1
  6784  0FF2  0838               	movf	??___ftadd+1,w
  6785  0FF3  00A4               	movwf	___ftpack@sign
  6786  0FF4  120A  158A  22AE   	fcall	___ftpack
  6787  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  6788  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  6789  0FF9  0820               	movf	?___ftpack,w
  6790  0FFA  00B1               	movwf	?___ftadd
  6791  0FFB  0821               	movf	?___ftpack+1,w
  6792  0FFC  00B2               	movwf	?___ftadd+1
  6793  0FFD  0822               	movf	?___ftpack+2,w
  6794  0FFE  00B3               	movwf	?___ftadd+2
  6795  0FFF  0008               	return
  6796  1000                     __end_of___ftadd:	
  6797                           
  6798                           	psect	text32
  6799  08ED                     __ptext32:	
  6800 ;; *************** function ___awtoft *****************
  6801 ;; Defined at:
  6802 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  6803 ;; Parameters:    Size  Location     Type
  6804 ;;  c               2    8[BANK0 ] int 
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;  sign            1   13[BANK0 ] unsigned char 
  6807 ;; Return value:  Size  Location     Type
  6808 ;;                  3    8[BANK0 ] float 
  6809 ;; Registers used:
  6810 ;;		wreg, status,2, status,0, pclath, cstack
  6811 ;; Tracked objects:
  6812 ;;		On entry : 0/0
  6813 ;;		On exit  : 0/0
  6814 ;;		Unchanged: 0/0
  6815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6816 ;;      Params:         0       3       0       0       0
  6817 ;;      Locals:         0       1       0       0       0
  6818 ;;      Temps:          0       2       0       0       0
  6819 ;;      Totals:         0       6       0       0       0
  6820 ;;Total ram usage:        6 bytes
  6821 ;; Hardware stack levels used:    1
  6822 ;; Hardware stack levels required when called:    3
  6823 ;; This function calls:
  6824 ;;		___ftpack
  6825 ;; This function is called by:
  6826 ;;		_CalcMQ135
  6827 ;;		_displayPPM
  6828 ;; This function uses a non-reentrant model
  6829 ;;
  6830                           
  6831                           
  6832                           ;psect for function ___awtoft
  6833  08ED                     ___awtoft:	
  6834                           
  6835                           ;incstack = 0
  6836                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  6837  08ED  1283               	bcf	3,5	;RP0=0, select bank0
  6838  08EE  1303               	bcf	3,6	;RP1=0, select bank0
  6839  08EF  01AD               	clrf	___awtoft@sign
  6840  08F0  1FA9               	btfss	___awtoft@c+1,7
  6841  08F1  28F9               	goto	l1918
  6842  08F2  09A8               	comf	___awtoft@c,f
  6843  08F3  09A9               	comf	___awtoft@c+1,f
  6844  08F4  0AA8               	incf	___awtoft@c,f
  6845  08F5  1903               	skipnz
  6846  08F6  0AA9               	incf	___awtoft@c+1,f
  6847  08F7  01AD               	clrf	___awtoft@sign
  6848  08F8  0AAD               	incf	___awtoft@sign,f
  6849  08F9                     l1918:	
  6850  08F9  0828               	movf	___awtoft@c,w
  6851  08FA  00A0               	movwf	___ftpack@arg
  6852  08FB  0829               	movf	___awtoft@c+1,w
  6853  08FC  00A1               	movwf	___ftpack@arg+1
  6854  08FD  01A2               	clrf	___ftpack@arg+2
  6855  08FE  308E               	movlw	142
  6856  08FF  00AB               	movwf	??___awtoft
  6857  0900  082B               	movf	??___awtoft,w
  6858  0901  00A3               	movwf	___ftpack@exp
  6859  0902  082D               	movf	___awtoft@sign,w
  6860  0903  00AC               	movwf	??___awtoft+1
  6861  0904  082C               	movf	??___awtoft+1,w
  6862  0905  00A4               	movwf	___ftpack@sign
  6863  0906  120A  158A  22AE   	fcall	___ftpack
  6864  0909  1283               	bcf	3,5	;RP0=0, select bank0
  6865  090A  1303               	bcf	3,6	;RP1=0, select bank0
  6866  090B  0820               	movf	?___ftpack,w
  6867  090C  00A8               	movwf	?___awtoft
  6868  090D  0821               	movf	?___ftpack+1,w
  6869  090E  00A9               	movwf	?___awtoft+1
  6870  090F  0822               	movf	?___ftpack+2,w
  6871  0910  00AA               	movwf	?___awtoft+2
  6872  0911  0008               	return
  6873  0912                     __end_of___awtoft:	
  6874                           
  6875                           	psect	text33
  6876  0AAE                     __ptext33:	
  6877 ;; *************** function ___ftpack *****************
  6878 ;; Defined at:
  6879 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  6880 ;; Parameters:    Size  Location     Type
  6881 ;;  arg             3    0[BANK0 ] unsigned um
  6882 ;;  exp             1    3[BANK0 ] unsigned char 
  6883 ;;  sign            1    4[BANK0 ] unsigned char 
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;		None
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  3    0[BANK0 ] float 
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6895 ;;      Params:         0       5       0       0       0
  6896 ;;      Locals:         0       0       0       0       0
  6897 ;;      Temps:          0       3       0       0       0
  6898 ;;      Totals:         0       8       0       0       0
  6899 ;;Total ram usage:        8 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    2
  6902 ;; This function calls:
  6903 ;;		Nothing
  6904 ;; This function is called by:
  6905 ;;		___awtoft
  6906 ;;		___ftadd
  6907 ;;		___ftdiv
  6908 ;;		___ftmul
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           
  6913                           ;psect for function ___ftpack
  6914  0AAE                     ___ftpack:	
  6915                           
  6916                           ;incstack = 0
  6917                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6918  0AAE  1283               	bcf	3,5	;RP0=0, select bank0
  6919  0AAF  1303               	bcf	3,6	;RP1=0, select bank0
  6920  0AB0  0823               	movf	___ftpack@exp,w
  6921  0AB1  1903               	btfsc	3,2
  6922  0AB2  2AB8               	goto	l1664
  6923  0AB3  0822               	movf	___ftpack@arg+2,w
  6924  0AB4  0421               	iorwf	___ftpack@arg+1,w
  6925  0AB5  0420               	iorwf	___ftpack@arg,w
  6926  0AB6  1D03               	skipz
  6927  0AB7  2ACB               	goto	l1670
  6928  0AB8                     l1664:	
  6929  0AB8  3000               	movlw	0
  6930  0AB9  00A0               	movwf	?___ftpack
  6931  0ABA  3000               	movlw	0
  6932  0ABB  00A1               	movwf	?___ftpack+1
  6933  0ABC  3000               	movlw	0
  6934  0ABD  00A2               	movwf	?___ftpack+2
  6935  0ABE  0008               	return
  6936  0ABF                     l1668:	
  6937  0ABF  3001               	movlw	1
  6938  0AC0  00A5               	movwf	??___ftpack
  6939  0AC1  0825               	movf	??___ftpack,w
  6940  0AC2  07A3               	addwf	___ftpack@exp,f
  6941  0AC3  3001               	movlw	1
  6942  0AC4                     u1605:	
  6943  0AC4  1003               	clrc
  6944  0AC5  0CA2               	rrf	___ftpack@arg+2,f
  6945  0AC6  0CA1               	rrf	___ftpack@arg+1,f
  6946  0AC7  0CA0               	rrf	___ftpack@arg,f
  6947  0AC8  3EFF               	addlw	-1
  6948  0AC9  1D03               	skipz
  6949  0ACA  2AC4               	goto	u1605
  6950  0ACB                     l1670:	
  6951  0ACB  30FE               	movlw	254
  6952  0ACC  0522               	andwf	___ftpack@arg+2,w
  6953  0ACD  1903               	btfsc	3,2
  6954  0ACE  2AE6               	goto	l521
  6955  0ACF  2ABF               	goto	l1668
  6956  0AD0                     l1672:	
  6957  0AD0  3001               	movlw	1
  6958  0AD1  00A5               	movwf	??___ftpack
  6959  0AD2  0825               	movf	??___ftpack,w
  6960  0AD3  07A3               	addwf	___ftpack@exp,f
  6961  0AD4  3001               	movlw	1
  6962  0AD5  07A0               	addwf	___ftpack@arg,f
  6963  0AD6  3000               	movlw	0
  6964  0AD7  1803               	skipnc
  6965  0AD8  3001               	movlw	1
  6966  0AD9  07A1               	addwf	___ftpack@arg+1,f
  6967  0ADA  3000               	movlw	0
  6968  0ADB  1803               	skipnc
  6969  0ADC  3001               	movlw	1
  6970  0ADD  07A2               	addwf	___ftpack@arg+2,f
  6971  0ADE  3001               	movlw	1
  6972  0ADF                     u1625:	
  6973  0ADF  1003               	clrc
  6974  0AE0  0CA2               	rrf	___ftpack@arg+2,f
  6975  0AE1  0CA1               	rrf	___ftpack@arg+1,f
  6976  0AE2  0CA0               	rrf	___ftpack@arg,f
  6977  0AE3  3EFF               	addlw	-1
  6978  0AE4  1D03               	skipz
  6979  0AE5  2ADF               	goto	u1625
  6980  0AE6                     l521:	
  6981  0AE6  30FF               	movlw	255
  6982  0AE7  0522               	andwf	___ftpack@arg+2,w
  6983  0AE8  1903               	btfsc	3,2
  6984  0AE9  2AF5               	goto	l1680
  6985  0AEA  2AD0               	goto	l1672
  6986  0AEB                     l1678:	
  6987  0AEB  3001               	movlw	1
  6988  0AEC  02A3               	subwf	___ftpack@exp,f
  6989  0AED  3001               	movlw	1
  6990  0AEE                     u1645:	
  6991  0AEE  1003               	clrc
  6992  0AEF  0DA0               	rlf	___ftpack@arg,f
  6993  0AF0  0DA1               	rlf	___ftpack@arg+1,f
  6994  0AF1  0DA2               	rlf	___ftpack@arg+2,f
  6995  0AF2  3EFF               	addlw	-1
  6996  0AF3  1D03               	skipz
  6997  0AF4  2AEE               	goto	u1645
  6998  0AF5                     l1680:	
  6999  0AF5  1FA1               	btfss	___ftpack@arg+1,7
  7000  0AF6  2AEB               	goto	l1678
  7001  0AF7  1823               	btfsc	___ftpack@exp,0
  7002  0AF8  2AFF               	goto	l527
  7003  0AF9  30FF               	movlw	255
  7004  0AFA  05A0               	andwf	___ftpack@arg,f
  7005  0AFB  307F               	movlw	127
  7006  0AFC  05A1               	andwf	___ftpack@arg+1,f
  7007  0AFD  30FF               	movlw	255
  7008  0AFE  05A2               	andwf	___ftpack@arg+2,f
  7009  0AFF                     l527:	
  7010  0AFF  1003               	clrc
  7011  0B00  0CA3               	rrf	___ftpack@exp,f
  7012  0B01  0823               	movf	___ftpack@exp,w
  7013  0B02  00A5               	movwf	??___ftpack
  7014  0B03  01A6               	clrf	??___ftpack+1
  7015  0B04  01A7               	clrf	??___ftpack+2
  7016  0B05  3010               	movlw	16
  7017  0B06                     u1675:	
  7018  0B06  1003               	clrc
  7019  0B07  0DA5               	rlf	??___ftpack,f
  7020  0B08  0DA6               	rlf	??___ftpack+1,f
  7021  0B09  0DA7               	rlf	??___ftpack+2,f
  7022  0B0A  3EFF               	addlw	-1
  7023  0B0B  1D03               	skipz
  7024  0B0C  2B06               	goto	u1675
  7025  0B0D  0825               	movf	??___ftpack,w
  7026  0B0E  04A0               	iorwf	___ftpack@arg,f
  7027  0B0F  0826               	movf	??___ftpack+1,w
  7028  0B10  04A1               	iorwf	___ftpack@arg+1,f
  7029  0B11  0827               	movf	??___ftpack+2,w
  7030  0B12  04A2               	iorwf	___ftpack@arg+2,f
  7031  0B13  0824               	movf	___ftpack@sign,w
  7032  0B14  1903               	btfsc	3,2
  7033  0B15  0008               	return
  7034  0B16  17A2               	bsf	___ftpack@arg+2,7
  7035  0B17  0008               	return
  7036  0B18                     __end_of___ftpack:	
  7037                           
  7038                           	psect	text34
  7039  1777                     __ptext34:	
  7040 ;; *************** function _ISR *****************
  7041 ;; Defined at:
  7042 ;;		line 97 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  7043 ;; Parameters:    Size  Location     Type
  7044 ;;		None
  7045 ;; Auto vars:     Size  Location     Type
  7046 ;;		None
  7047 ;; Return value:  Size  Location     Type
  7048 ;;		None               void
  7049 ;; Registers used:
  7050 ;;		wreg, status,2, status,0, pclath, cstack
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7056 ;;      Params:         0       0       0       0       0
  7057 ;;      Locals:         0       0       0       0       0
  7058 ;;      Temps:          5       0       0       0       0
  7059 ;;      Totals:         5       0       0       0       0
  7060 ;;Total ram usage:        5 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:    1
  7063 ;; This function calls:
  7064 ;;		i1_instCTRL
  7065 ;; This function is called by:
  7066 ;;		Interrupt level 1
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           
  7071                           ;psect for function _ISR
  7072  1777                     _ISR:	
  7073                           
  7074                           ;main.c: 99: GIE = 0;
  7075  1777  138B               	bcf	11,7	;volatile
  7076                           
  7077                           ;main.c: 100: if (INTF == 1)
  7078  1778  1C8B               	btfss	11,1	;volatile
  7079  1779  2F81               	goto	i1l2454
  7080                           
  7081                           ;main.c: 101: {
  7082                           ;main.c: 102: INTF = 0;
  7083  177A  108B               	bcf	11,1	;volatile
  7084                           
  7085                           ;main.c: 103: mode = (mode + 1) % 2;
  7086  177B  0868               	movf	_mode,w
  7087  177C  3E01               	addlw	1
  7088  177D  3901               	andlw	1
  7089  177E  00F2               	movwf	??_ISR
  7090  177F  0872               	movf	??_ISR,w
  7091  1780  00E8               	movwf	_mode
  7092  1781                     i1l2454:	
  7093                           
  7094                           ;main.c: 104: }
  7095                           ;main.c: 105: instCTRL(0x01);
  7096  1781  3001               	movlw	1
  7097  1782  160A  118A  26F1  160A  118A  	fcall	i1_instCTRL
  7098                           
  7099                           ;main.c: 106: GIE = 1;
  7100  1787  178B               	bsf	11,7	;volatile
  7101  1788  0876               	movf	??_ISR+4,w
  7102  1789  1283               	bcf	3,5	;RP0=0, select bank0
  7103  178A  1303               	bcf	3,6	;RP1=0, select bank0
  7104  178B  00FF               	movwf	127
  7105  178C  0875               	movf	??_ISR+3,w
  7106  178D  008A               	movwf	10
  7107  178E  0874               	movf	??_ISR+2,w
  7108  178F  0084               	movwf	4
  7109  1790  0E73               	swapf	(??_ISR+1)^(0+-128),w
  7110  1791  0083               	movwf	3
  7111  1792  0EFE               	swapf	126,f
  7112  1793  0E7E               	swapf	126,w
  7113  1794  0009               	retfie
  7114  1795                     __end_of_ISR:	
  7115                           
  7116                           	psect	intentry
  7117  0004                     __pintentry:	
  7118                           ;incstack = 0
  7119                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  7120                           
  7121  0004                     interrupt_function:	
  7122  007E                     saved_w	set	btemp
  7123  0004  00FE               	movwf	btemp
  7124  0005  0E03               	swapf	3,w
  7125  0006  00F3               	movwf	??_ISR+1
  7126  0007  0804               	movf	4,w
  7127  0008  00F4               	movwf	??_ISR+2
  7128  0009  080A               	movf	10,w
  7129  000A  00F5               	movwf	??_ISR+3
  7130  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7131  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7132  000D  087F               	movf	btemp+1,w
  7133  000E  00F6               	movwf	??_ISR+4
  7134  000F  160A  118A  2F77   	ljmp	_ISR
  7135                           
  7136                           	psect	text35
  7137  16F1                     __ptext35:	
  7138 ;; *************** function i1_instCTRL *****************
  7139 ;; Defined at:
  7140 ;;		line 17 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  7141 ;; Parameters:    Size  Location     Type
  7142 ;;  CMD             1    wreg     unsigned char 
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;  CMD             1    1[COMMON] unsigned char 
  7145 ;; Return value:  Size  Location     Type
  7146 ;;		None               void
  7147 ;; Registers used:
  7148 ;;		wreg
  7149 ;; Tracked objects:
  7150 ;;		On entry : 0/0
  7151 ;;		On exit  : 0/0
  7152 ;;		Unchanged: 0/0
  7153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7154 ;;      Params:         0       0       0       0       0
  7155 ;;      Locals:         1       0       0       0       0
  7156 ;;      Temps:          1       0       0       0       0
  7157 ;;      Totals:         2       0       0       0       0
  7158 ;;Total ram usage:        2 bytes
  7159 ;; Hardware stack levels used:    1
  7160 ;; This function calls:
  7161 ;;		Nothing
  7162 ;; This function is called by:
  7163 ;;		_ISR
  7164 ;; This function uses a non-reentrant model
  7165 ;;
  7166                           
  7167                           
  7168                           ;psect for function i1_instCTRL
  7169  16F1                     i1_instCTRL:	
  7170                           
  7171                           ;incstack = 0
  7172                           ; Regs used in i1_instCTRL: [wreg]
  7173                           ;i1instCTRL@CMD stored from wreg
  7174  16F1  00F1               	movwf	i1instCTRL@CMD
  7175                           
  7176                           ;lcd_functions.h: 19: PORTD = CMD;
  7177  16F2  0871               	movf	i1instCTRL@CMD,w
  7178  16F3  1283               	bcf	3,5	;RP0=0, select bank0
  7179  16F4  1303               	bcf	3,6	;RP1=0, select bank0
  7180  16F5  0088               	movwf	8	;volatile
  7181                           
  7182                           ;lcd_functions.h: 20: RC0 = 0;
  7183  16F6  1007               	bcf	7,0	;volatile
  7184                           
  7185                           ;lcd_functions.h: 21: RC1 = 0;
  7186  16F7  1087               	bcf	7,1	;volatile
  7187                           
  7188                           ;lcd_functions.h: 22: RC2 = 1;
  7189  16F8  1507               	bsf	7,2	;volatile
  7190                           
  7191                           ;lcd_functions.h: 23: _delay((unsigned long)((1)*(4000000/4000.0)));
  7192  16F9  30F9               	movlw	249
  7193  16FA  00F0               	movwf	??i1_instCTRL
  7194  16FB                     u363_27:	
  7195  16FB  0000               	nop
  7196  16FC  0BF0               	decfsz	??i1_instCTRL,f
  7197  16FD  2EFB               	goto	u363_27
  7198  16FE  2EFF               	nop2	;nop
  7199  16FF  0000               	nop
  7200                           
  7201                           ;lcd_functions.h: 24: RC2 = 0;
  7202  1700  1283               	bcf	3,5	;RP0=0, select bank0
  7203  1701  1303               	bcf	3,6	;RP1=0, select bank0
  7204  1702  1107               	bcf	7,2	;volatile
  7205  1703  0008               	return
  7206  1704                     __end_ofi1_instCTRL:	
  7207  007E                     btemp	set	126	;btemp
  7208  007E                     wtemp	set	126
  7209  007E                     wtemp0	set	126
  7210  0080                     wtemp1	set	128
  7211  0082                     wtemp2	set	130
  7212  0084                     wtemp3	set	132
  7213  0086                     wtemp4	set	134
  7214  0088                     wtemp5	set	136
  7215  007F                     wtemp6	set	127
  7216  007E                     ttemp	set	126
  7217  007E                     ttemp0	set	126
  7218  0081                     ttemp1	set	129
  7219  0084                     ttemp2	set	132
  7220  0087                     ttemp3	set	135
  7221  007F                     ttemp4	set	127
  7222  007E                     ltemp	set	126
  7223  007E                     ltemp0	set	126
  7224  0082                     ltemp1	set	130
  7225  0086                     ltemp2	set	134
  7226  0080                     ltemp3	set	128


Data Sizes:
    Strings     181
    Constant    10
    Data        7
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     68      80
    BANK1            80     55      77
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_19(CODE[10]), STR_18(CODE[10]), STR_17(CODE[10]), STR_16(CODE[10]), 
		 -> STR_15(CODE[10]), STR_14(CODE[10]), STR_13(CODE[16]), STR_3(CODE[9]), 
		 -> STR_2(CODE[3]), STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 50
		 -> setMinutes@debugInfo(BANK1[10]), setHours@debugInfo(BANK1[10]), displayTime@timeFormat(BANK0[10]), displayPPM@strBuffer(BANK1[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S215$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    displayPPM@bufPtr	PTR unsigned char  size(1) Largest target is 50
		 -> displayPPM@strBuffer(BANK1[50]), 

    printToLCD@str	PTR const unsigned char  size(2) Largest target is 50
		 -> setMinutes@debugInfo(BANK1[10]), setHours@debugInfo(BANK1[10]), displayTime@timeFormat(BANK0[10]), STR_12(CODE[12]), 
		 -> STR_11(CODE[10]), STR_10(CODE[19]), STR_9(CODE[15]), STR_8(CODE[15]), 
		 -> STR_7(CODE[7]), STR_6(CODE[5]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> displayPPM@strBuffer(BANK1[50]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_instCTRL

Critical Paths under _main in BANK0

    _main->_CalcMQ135
    _updateState->_displayPPM
    _setMinutes->_sprintf
    _setHours->_sprintf
    _displayTime->_sprintf
    _displayPPM->___fttol
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___fttol->___ftmul
    ___ftneg->___awtoft
    _startUpLCD->_printToLCD
    _printToLCD->_dataCTRL
    _printToLCD->_instCTRL
    _initLCD->_instCTRL
    _handlePPM->___ftge
    _checkSelect->_instCTRL
    _checkMode->_instCTRL
    _CalcMQ135->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    ___awtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _updateState->_displayPPM

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   42548
                                             65 BANK0      3     3      0
                          _CalcMQ135
                     _Read_ADC_MQ135
                          _checkMode
                        _checkSelect
                          _handlePPM
                            _initADC
                      _initInterrupt
                           _runClock
                  _setPortDirections
                         _startUpLCD
                        _updateState
 ---------------------------------------------------------------------------------
 (1) _updateState                                         10    10      0   29436
                         _displayPPM
                        _displayTime
                           _instCTRL
                         _printToLCD
                           _setHours
                         _setMinutes
 ---------------------------------------------------------------------------------
 (2) _setMinutes                                           5     5      0    5121
                                             35 BANK0      5     5      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setHours                                             5     5      0    5121
                                             35 BANK0      5     5      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     720
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _displayTime                                         15    15      0    4288
                                             35 BANK0     15    15      0
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _displayPPM                                          59    57      2   13930
                                             60 BANK0      4     2      2
                                              0 BANK1     55    55      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
                           _instCTRL
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             21    16      5    3224
                                             14 BANK0     21    16      5
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     265
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     268
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     358
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     130
                                             14 BANK0      3     0      3
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _startUpLCD                                           0     0      0     998
                            _initLCD
                           _instCTRL
                         _printToLCD
 ---------------------------------------------------------------------------------
 (3) _printToLCD                                           2     0      2     954
                                              2 BANK0      2     0      2
                           _dataCTRL
                           _instCTRL
 ---------------------------------------------------------------------------------
 (4) _dataCTRL                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0      22
                                              2 BANK0      1     1      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (1) _setPortDirections                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _runClock                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handlePPM                                            2     0      2     242
                                             12 BANK0      2     0      2
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     242
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (1) _checkSelect                                          4     4      0      67
                                              2 BANK0      4     4      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (1) _checkMode                                            2     2      0      22
                                              2 BANK0      2     2      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (4) _instCTRL                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Read_ADC_MQ135                                       4     2      2       0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _CalcMQ135                                           42    39      3   11783
                                             62 BANK0      3     0      3
                                              0 BANK1     39    39      0
                     _Read_ADC_MQ135 (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3495
                                             30 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2177
                                             46 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3347
                                             17 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    1882
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1685
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  5     5      0      22
                                              2 COMMON     5     5      0
                         i1_instCTRL
 ---------------------------------------------------------------------------------
 (6) i1_instCTRL                                           2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CalcMQ135
     _Read_ADC_MQ135 (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
   _Read_ADC_MQ135
   _checkMode
     _instCTRL
   _checkSelect
     _instCTRL
   _handlePPM
     ___ftge
   _initADC
   _initInterrupt
   _runClock
   _setPortDirections
   _startUpLCD
     _initLCD
       _instCTRL
     _instCTRL
     _printToLCD
       _dataCTRL
       _instCTRL
   _updateState
     _displayPPM
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
       _instCTRL
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _displayTime
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _instCTRL
     _printToLCD
       _dataCTRL
       _instCTRL
     _setHours
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _setMinutes
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 _ISR (ROOT)
   i1_instCTRL

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     37      4D       7       96.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     44      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      A8      12        0.0%
ABS                  0      0      A8       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri May 10 23:23:50 2024

                         pc 0002                ?_displayTime 0070                 __CFG_CP$OFF 0000  
                        l92 174D                          fsr 0004         ___wmul@multiplicand 0022  
              ___ftadd@exp1 003D                ___ftadd@exp2 003C                ___ftadd@sign 003B  
                       l106 0721                         l109 17B2                         l135 0B88  
                       l216 0C97                         l241 042F                         l171 0D71  
                       l360 091E                         l521 0AE6                         l259 04F4  
                       l550 0F9F                         l527 0AFF                         _GIE 005F  
                       _RB1 0031                         _RC0 0038                         _RC1 0039  
                       _RC2 003A                         _RC3 003B                         _RC4 003C  
              __CFG_CPD$OFF 0000                         _ISR 1777                         _PPM 0064  
                       fsr0 0004                         indf 0000                ___awmod@sign 0026  
              __CFG_FOSC$HS 0000               printToLCD@str 0022              _Read_ADC_MQ135 173F  
              __CFG_LVP$OFF 0000                        ?_ISR 0070                ___ftdiv@cntr 0058  
              ___ftdiv@sign 005D                        l2000 073A                        l2030 07B7  
                      l2022 079F                        l2006 0750                        l2034 07C7  
                      l2018 078F                        l2232 0DA0                        l2226 0D8A  
                      l2058 0BA4                        l2092 0C0F                        l2084 0BF3  
                      l2076 0BD6                        l1700 09CA                        l2254 0E04  
                      l2246 0DE5                        l2270 0A9F                        l2086 0BFE  
                      l2078 0BE6                        l1702 09D8                        l2344 176D  
                      l2088 0C01                        l1712 09F9                        l2600 054E  
                      l2266 0A78                        l1730 09AE                        l2530 043F  
                      l2522 042B                        l2356 0956                        l2508 0965  
                      l1708 09EE                        l1724 0992                        l1670 0ACB  
                      l1726 09A0                        l1734 09B9                        l2630 05D0  
                      l2534 0451                        l1902 0A40                        l2710 0ED0  
                      l1680 0AF5                        l1672 0AD0                        l1664 0AB8  
                      l2608 0569                        l2616 057E                        l2560 04C5  
                      l2544 048F                        l2528 0434                        l2704 0EB2  
                      l2800 0CBF                        l1930 0F20                        l2626 0582  
                      l2546 04A6                        l1906 0A48                        l2810 0CF4  
                      l1668 0ABF                        l1940 0F36                        l2492 0916  
                      l2556 04BF                        l2628 0403                        l2716 0EE1  
                      l2820 0D14                        l2804 0CD1                        l1678 0AEB  
                      l1918 08F9                        l1934 0F27                        l2486 16EF  
                      l2670 0702                        l2662 06CA                        l2718 0EEF  
                      l2750 0CA8                        l2742 0C80                        l2830 0D41  
                      l1960 0F71                        l1952 0F50                        l2576 0513  
                      l2568 04E6                        l1880 0A0C                        l2736 0C62  
                      l2752 0CB6                        l2824 0D26                        l1970 0F8F  
                      l1962 0F76                        l2578 0517                        l2666 06F2  
                      l2818 0D09                        l2842 0D67                        l1980 0FC3  
                      l1972 0F9B                        l1964 0F7A                        l2588 052E  
                      l2676 0712                        l1892 0A19                        l1884 0A13  
                      l2852 0B41                        l1990 0FE6                        l1958 0F65  
                      l2598 054A                        l1894 0A27                        l2838 0D5C  
                      l1976 0FB1                        l2890 0719                        l1898 0A35  
                      l2698 0E84                        l2866 0B3C                        STR_1 08C1  
                      STR_2 08CC                        STR_3 08B1                        STR_4 083E  
                      STR_5 082D                        STR_6 08C7                        STR_7 08BA  
                      STR_8 085F                        STR_9 086E                  i1_instCTRL 16F1  
                      u2215 0F51                        u2055 0A1C                        u2305 0F90  
                      u2075 0A2D                        u1605 0AC4                        u2245 0F66  
                      u2085 0A36                        u1625 0ADF                        u2425 07A0  
                      u1705 09CD                        u3065 091F                        u3305 06B5  
                      u2275 0F7B                        u2435 07A8                        u3075 0926  
                      u3155 04DC                        u3315 0E2F                        u1645 0AEE  
                      u2525 0BAB                        u1725 09D9                        u1805 09AF  
                      u3325 0E3C                        u3405 0C1D                        u1735 09E5  
                      u3415 0C2A                        u2385 075C                        u1745 09EF  
                      u1675 0B06                        u2475 07C8                        u2395 076E  
                      u2555 0BD7                        u3195 0503                        u2485 07D0  
                      u3607 08E1                        u2911 0A92                        u1775 0995  
                      u3527 0B34                        u2912 0A93                        u2825 0DB2  
                      u3617 170E                        u2913 0A98                        u2585 0BF5  
                      u3537 0C38                        u2914 0A99                        u2835 0DC4  
                      u3627 1745                        u1795 09A6                        u3547 0CB0  
                      u2845 0DE6                        u3557 0E4A                        _INTE 005C  
                      _INTF 0059                        u2855 0DF7                        u3567 0EE9  
                      u2865 0E05                        u3577 1721                        u2891 0A6B  
                      u3587 17C2                        u2892 0A6C                        u2893 0A71  
                      u3597 1771                        u2894 0A72                __CFG_WRT$OFF 0000  
                      _main 0B18                ___ftpack@arg 0020                        _mode 0068  
              ___ftpack@exp 0023                        btemp 007E               __CFG_BOREN$ON 0000  
                      ltemp 007E                        start 0012                        ttemp 007E  
                      wtemp 007E       displayPPM@ppmFraction 00D4                ___ftmul@cntr 004C  
              ___ftmul@sign 004D                       ??_ISR 0072                ___fttol@exp1 005B  
              ___fttol@lval 0057           setHours@debugInfo 00D9                       ?_main 0070  
           __end_of___ftadd 1000                       STR_10 081A                       STR_11 0889  
                     STR_12 087D                       STR_13 084F                       STR_14 089D  
                     STR_15 0893                       STR_16 08A7                       STR_17 089D  
             __CFG_WDTE$OFF 0000                       STR_18 0893                       STR_19 08A7  
           __end_of___awmod 0A4F             __end_of___ftdiv 0E2A             __end_of___ftneg 07FF  
           __end_of___ftmul 07F5             __end_of___fttol 0C18             __end_of___lwdiv 0A00  
           __end_of___lwmod 09C0      __end_of_Read_ADC_MQ135 175A                       _PORTA 0005  
                     _PORTB 0006                       _PORTC 0007                       _PORTD 0008  
                     _TRISA 0085                       _TRISB 0086                       _TRISC 0087  
                     _TRISD 0088        __size_of_checkSelect 0028                CalcMQ135@co2 00C1  
           __end_of_initADC 16D2             __end_of_initLCD 17DC               ___awtoft@sign 002D  
           __end_of_dpowers 081A             __end_of_isdigit 16F1                       _hours 006B  
             ___ftpack@sign 0024                       pclath 000A                       ltemp0 007E  
                     ltemp1 0082                       ltemp2 0086                       ltemp3 0080  
        __size_of_CalcMQ135 03A7                       ttemp0 007E                       ttemp1 0081  
                     ttemp2 0084                       ttemp3 0087                       ttemp4 007F  
                     status 0003                       wtemp0 007E                       wtemp1 0080  
                     wtemp2 0082                       wtemp3 0084                       wtemp4 0086  
                     wtemp5 0088                       wtemp6 007F             __end_of_sprintf 05DD  
           __initialization 0015          displayPPM@ppmWhole 00D2      __size_of_initInterrupt 0007  
              __end_of_main 0B8A  checkSelect@currentRB1State 0024          setMinutes@keyValid 0046  
                    ??_main 0061               ___fttol@sign1 0056             ?_Read_ADC_MQ135 0020  
                    _ADCON0 001F                      _ADCON1 009F                      _ADRESH 001E  
                    _ADRESL 009E            __end_of___awtoft 0912            __end_of___ftpack 0B18  
               ?i1_instCTRL 0070                      i1l2454 1781                      _INTEDG 040E  
                    u363_27 16FB            __end_of_dataCTRL 172A                 instCTRL@CMD 0021  
            __CFG_PWRTE$OFF 0000                      ___ftge 0A4F           _setPortDirections 16D2  
                    ___wmul 0912                   ??___ftadd 0037                   ??___awmod 0024  
                 ??___ftdiv 0054                   ??___ftneg 0031                   ??___ftmul 0044  
                 ??___fttol 0052                   ??___lwdiv 0024                   ??___lwmod 002C  
          __end_of_instCTRL 1717       displayTime@timeFormat 0048          ?_setPortDirections 0070  
           ___awmod@divisor 0020                      _select 006A             ___awmod@counter 0025  
         __end_of_CalcMQ135 03FA        __size_of_displayTime 0024                   ??_initADC 0020  
          __end_of_setHours 0EF7       ___ftmul@f3_as_product 0049                   ??_initLCD 0022  
              __pdataCOMMON 0079                   ??_isdigit 0020         ??_setPortDirections 0020  
                    saved_w 007E            __end_of_runClock 1777               _initInterrupt 16BA  
                 ??_sprintf 0033     __end_of__initialization 004F                  ___ftadd@f1 0031  
                ___ftadd@f2 0034                  ___ftge@ff1 0020                  ___ftge@ff2 0023  
                ___ftdiv@f1 0051                  ___ftdiv@f2 004E                  ___ftdiv@f3 0059  
                ___ftneg@f1 002E                  ___awtoft@c 0028         setMinutes@debugInfo 00E3  
 __end_of_setPortDirections 16E1                  ___ftmul@f1 003E                  ___ftmul@f2 0041  
              ?_updateState 0070                  ___fttol@f1 004E              __pcstackCOMMON 0070  
              __pidataBANK0 16B5          __size_of_checkMode 001E         __size_ofi1_instCTRL 0013  
        __size_of_handlePPM 0023         displayPPM@strBuffer 00A0     checkSelect@lastRB1State 0077  
            ?_initInterrupt 0070                sprintf@width 003F                  __pbssBANK0 0064  
                __pbssBANK1 00D7                  __pmaintext 0B18                     ?___ftge 0020  
                   ?___wmul 0020                  __pintentry 0004                   ?___awtoft 0028  
                 ?___ftpack 0020                   ?_dataCTRL 0070                 setHours@key 0047  
                   _GO_DONE 00FA                  _displayPPM 05DD           __end_of_checkMode 08ED  
                __stringtab 0800                   ?_instCTRL 0070           __end_of_handlePPM 17B8  
                 ?_setHours 0070  __size_of_setPortDirections 000F              CalcMQ135@ratio 00C4  
           _savedHoursStart 006D                   ?_runClock 0070             __size_of___ftge 005F  
                   ___ftadd 0EF7                     ___awmod 0A00                     ___ftdiv 0D72  
                   ___ftneg 07F5             __size_of___wmul 0025                     ___ftmul 0722  
                   ___fttol 0B8A                     ___lwdiv 09C0                     ___lwmod 098A  
          ??_Read_ADC_MQ135 0022             _savedMinutesEnd 007A                  ??___awtoft 002B  
                ??___ftpack 0025               ??_checkSelect 0022                     __ptext1 0CBE  
                   __ptext2 0C18                     __ptext3 0E2A                     __ptext4 0A00  
                   __ptext5 17DC                     __ptext6 05DD                     __ptext7 03FA  
                   __ptext8 16E1                     __ptext9 0912                     _initADC 16C9  
                ??_dataCTRL 0020                     _initLCD 17B8                __size_of_ISR 001E  
           ??_initInterrupt 0020                     _dpowers 0810                     _isdigit 16E1  
    setMinutes@lastKeyState 006F            ___awmod@dividend 0022                     _minutes 0067  
                   _sprintf 03FA                     clrloop0 16C2                ??i1_instCTRL 0070  
      end_of_initialization 004F                  _ppmHandler 00D7                  _setMinutes 0C18  
                ??_instCTRL 0020                  ??_setHours 0043                  ??_runClock 0020  
             setMinutes@key 0047        __size_of_updateState 00B4                  _printToLCD 095F  
        __end_ofi1_instCTRL 1704                   _CalcMQ135 0053         __end_of_checkSelect 095F  
               ?_displayPPM 005C                  _startUpLCD 172A                 ___ftdiv@exp 005C  
          displayPPM@bufPtr 00D6        displayPPM@ppmHandler 005C            CalcMQ135@RAW_ADC 005E  
               ___ftmul@exp 0048               ??_displayTime 0043              __end_of___ftge 0AAE  
            __end_of___wmul 0937               __pidataCOMMON 16B3            setHours@keyValid 0046  
       start_initialization 0015                  ?_CalcMQ135 005E                 __end_of_ISR 1795  
               ?_setMinutes 0070               _savedHoursEnd 006C            CalcMQ135@voltage 00A0  
                  ??___ftge 0026                    ??___wmul 0024         __size_of_displayPPM 0145  
               __pdataBANK0 006B                 ?_printToLCD 0022                 _checkSelect 0937  
         __size_of___awtoft 0025           __size_of___ftpack 006A         __end_of_displayTime 1800  
               __pbssCOMMON 0077                   ___latbits 0002               __pcstackBANK0 0020  
             __pcstackBANK1 00A0           __size_of_dataCTRL 0013         __end_of__stringdata 08CF  
               ?_startUpLCD 0070                 sprintf@ccnt 0038                 sprintf@_val 003A  
         _savedMinutesStart 0069                 sprintf@flag 003E                 sprintf@prec 0037  
                 _checkMode 08CF           __size_of_instCTRL 0013            ___lwdiv@dividend 0022  
                 _handlePPM 1795           __size_of_setHours 00CD                    ?___ftadd 0031  
                  ?___awmod 0020                    ?___ftdiv 004E                    ?___ftneg 002E  
                  ?___ftmul 003E                    ?___fttol 004E                    ?___lwdiv 0020  
                  ?___lwmod 0028           __size_of_runClock 001D                   __pstrings 0800  
       __size_of_setMinutes 00A6                    ?_initADC 0070                    ?_initLCD 0070  
                  ?_isdigit 0070                 ??_CalcMQ135 0061            ___lwdiv@quotient 0025  
                  ?_sprintf 002E           interrupt_function 0004              ___wmul@product 0024  
                ?_checkMode 0070         __size_of_printToLCD 002B                   clear_ram0 16C1  
             i1instCTRL@CMD 0071                 dataCTRL@DAT 0021                  ?_handlePPM 002C  
               _displayTime 17DC         __size_of_startUpLCD 0015                 __stringbase 080F  
               __stringdata 081A           ___wmul@multiplier 0020       __end_of_initInterrupt 16C1  
              ??_displayPPM 005E             CalcMQ135@ratio2 00B5             CalcMQ135@ratio3 00B8  
           CalcMQ135@ratio4 00BB             CalcMQ135@ratio5 00BE             CalcMQ135@ratio6 00A3  
             ??_updateState 0060          __end_of_displayPPM 0722            __size_of___ftadd 0109  
          __size_of___awmod 004F            __size_of___ftdiv 00B8            __size_of___ftneg 000A  
          __size_of___ftmul 00D3            __size_of___fttol 008E            __size_of___lwdiv 0040  
          __size_of___lwmod 0036                    ___awtoft 08ED                    ___ftpack 0AAE  
        __end_of__stringtab 0810                 _isdigit$411 0020                    _dataCTRL 1717  
          __size_of_initADC 0009            __size_of_initLCD 0024            __size_of_isdigit 0010  
           ___lwdiv@divisor 0020     __size_of_Read_ADC_MQ135 001B             ___lwdiv@counter 0027  
                  __ptext10 098A                    __ptext11 09C0                    __ptext20 16BA  
                  __ptext12 0B8A                    __ptext21 16C9                    __ptext13 07F5  
                  __ptext30 0D72                    __ptext22 1795                    __ptext14 172A  
                  __ptext31 0EF7                    __ptext23 0A4F                    __ptext15 095F  
                  __ptext32 08ED                    __ptext24 0937                    __ptext16 1717  
                  __ptext33 0AAE                    __ptext25 08CF                    __ptext17 17B8  
                  __ptext34 1777                    __ptext26 1704                    __ptext18 16D2  
                  __ptext35 16F1                    __ptext27 173F                    __ptext19 175A  
                  __ptext28 0053                    __ptext29 0722            __size_of_sprintf 01E3  
                  _lastMode 0079                ??_setMinutes 0043                    _instCTRL 1704  
             __size_of_main 0072                 ??_checkMode 0022                    _setHours 0E2A  
               ??_handlePPM 002E                    _runClock 175A         __end_of_updateState 0D72  
              ??_printToLCD 0024                ?_checkSelect 0070          __end_of_setMinutes 0CBE  
                  isdigit@c 0021                ??_startUpLCD 0024                    intlevel1 0000  
                 sprintf@ap 0036                   sprintf@sp 0042            ___lwmod@dividend 002A  
        __end_of_printToLCD 098A                   stringcode 080A          __end_of_startUpLCD 173F  
             _CalcMQ135$630 00AC               _CalcMQ135$631 00AF               _CalcMQ135$632 00B2  
             _CalcMQ135$628 00A6               _CalcMQ135$629 00A9                    sprintf@c 0041  
                  sprintf@f 002E             ___lwmod@divisor 0028             ___lwmod@counter 002D  
                  stringdir 080A                    stringtab 0800        setHours@lastKeyState 006E  
               _updateState 0CBE  
