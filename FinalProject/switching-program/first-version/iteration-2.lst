

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon May 13 14:53:48 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	intentry,global,class=CODE,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	dabs	1,0x7E,2
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001D                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  0086                     	;# 
   103  0087                     	;# 
   104  0088                     	;# 
   105  0089                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125                           
   126                           	psect	idataCOMMON
   127  0800                     __pidataCOMMON:	
   128                           
   129                           ;initializer for _hours
   130  0800  3404               	retlw	4
   131                           
   132                           ;initializer for _lastKeyState
   133  0801  34FF               	retlw	255
   134                           
   135                           ;initializer for _lastMode
   136  0802  34FF               	retlw	255
   137                           
   138                           	psect	idataBANK0
   139  0003                     __pidataBANK0:	
   140                           
   141                           ;initializer for _savedHoursEnd
   142  0003  340A               	retlw	10
   143                           
   144                           	psect	idataBANK1
   145  13CF                     __pidataBANK1:	
   146                           
   147                           ;initializer for _savedHoursStart
   148  13CF  3409               	retlw	9
   149                           
   150                           ;initializer for _savedMinutesEnd
   151  13D0  341E               	retlw	30
   152                           
   153                           ;initializer for _savedMinutesStart
   154  13D1  341E               	retlw	30
   155                           
   156                           	psect	stringtext
   157  1000                     __pstringtext:	
   158  1000                     stringtab:	
   159  1000                     __stringtab:	
   160                           
   161                           ;	String table - string pointers are 2 bytes each
   162  1000  1BFF               	btfsc	btemp+1,7
   163  1001  280A               	ljmp	stringcode
   164  1002  1383               	bcf	3,7
   165  1003  187F               	btfsc	btemp+1,0
   166  1004  1783               	bsf	3,7
   167  1005  0800               	movf	0,w
   168  1006  0A84               	incf	4,f
   169  1007  1903               	skipnz
   170  1008  0AFF               	incf	btemp+1,f
   171  1009  0008               	return
   172  100A                     stringcode:	
   173  100A  087F               	movf	btemp+1,w
   174  100B  397F               	andlw	127
   175  100C  008A               	movwf	10
   176  100D  0804               	movf	4,w
   177  100E  0A84               	incf	4,f
   178  100F  1903               	skipnz
   179  1010  0AFF               	incf	btemp+1,f
   180  1011  0082               	movwf	2
   181  1012                     __stringbase:	
   182  1012                     __end_of__stringtab:	
   183  1012                     _dpowers:	
   184  1012  3401               	retlw	1
   185  1013  3400               	retlw	0
   186  1014  340A               	retlw	10
   187  1015  3400               	retlw	0
   188  1016  3464               	retlw	100
   189  1017  3400               	retlw	0
   190  1018  34E8               	retlw	232
   191  1019  3403               	retlw	3
   192  101A  3410               	retlw	16
   193  101B  3427               	retlw	39
   194  101C                     __end_of_dpowers:	
   195  001F                     _ADCON0	set	31
   196  001E                     _ADRESH	set	30
   197  0005                     _PORTA	set	5
   198  0006                     _PORTB	set	6
   199  0007                     _PORTC	set	7
   200  0008                     _PORTD	set	8
   201  005F                     _GIE	set	95
   202  00FA                     _GO_DONE	set	250
   203  005C                     _INTE	set	92
   204  0059                     _INTF	set	89
   205  0031                     _RB1	set	49
   206  0038                     _RC0	set	56
   207  0039                     _RC1	set	57
   208  003A                     _RC2	set	58
   209  003B                     _RC3	set	59
   210  003C                     _RC4	set	60
   211  003D                     _RC5	set	61
   212  009F                     _ADCON1	set	159
   213  009E                     _ADRESL	set	158
   214  0085                     _TRISA	set	133
   215  0086                     _TRISB	set	134
   216  0087                     _TRISC	set	135
   217  0088                     _TRISD	set	136
   218  040E                     _INTEDG	set	1038
   219  101C                     __stringdata:	
   220  101C                     STR_28:	
   221  101C  3453               	retlw	83	;'S'
   222  101D  3445               	retlw	69	;'E'
   223  101E  3454               	retlw	84	;'T'
   224  101F  3420               	retlw	32	;' '
   225  1020  3448               	retlw	72	;'H'
   226  1021  3452               	retlw	82	;'R'
   227  1022  3453               	retlw	83	;'S'
   228  1023  3420               	retlw	32	;' '
   229  1024  342D               	retlw	45	;'-'
   230  1025  3420               	retlw	32	;' '
   231  1026  3453               	retlw	83	;'S'
   232  1027  3454               	retlw	84	;'T'
   233  1028  3441               	retlw	65	;'A'
   234  1029  3452               	retlw	82	;'R'
   235  102A  3454               	retlw	84	;'T'
   236  102B  3400               	retlw	0
   237  102C                     STR_6:	
   238  102C  3454               	retlw	84	;'T'
   239  102D  3469               	retlw	105	;'i'
   240  102E  346D               	retlw	109	;'m'
   241  102F  3465               	retlw	101	;'e'
   242  1030  343A               	retlw	58	;':'
   243  1031  3420               	retlw	32	;' '
   244  1032  3425               	retlw	37	;'%'
   245  1033  3430               	retlw	48	;'0'
   246  1034  3432               	retlw	50	;'2'
   247  1035  3464               	retlw	100	;'d'
   248  1036  343A               	retlw	58	;':'
   249  1037  3425               	retlw	37	;'%'
   250  1038  3430               	retlw	48	;'0'
   251  1039  3432               	retlw	50	;'2'
   252  103A  3464               	retlw	100	;'d'
   253  103B  3400               	retlw	0
   254  103C                     STR_24:	
   255  103C  3444               	retlw	68	;'D'
   256  103D  3449               	retlw	73	;'I'
   257  103E  3453               	retlw	83	;'S'
   258  103F  3450               	retlw	80	;'P'
   259  1040  3420               	retlw	32	;' '
   260  1041  3443               	retlw	67	;'C'
   261  1042  344D               	retlw	77	;'M'
   262  1043  344D               	retlw	77	;'M'
   263  1044  344F               	retlw	79	;'O'
   264  1045  344E               	retlw	78	;'N'
   265  1046  3420               	retlw	32	;' '
   266  1047  3450               	retlw	80	;'P'
   267  1048  3447               	retlw	71	;'G'
   268  1049  3431               	retlw	49	;'1'
   269  104A  3400               	retlw	0
   270  104B                     STR_27:	
   271  104B  3444               	retlw	68	;'D'
   272  104C  3449               	retlw	73	;'I'
   273  104D  3453               	retlw	83	;'S'
   274  104E  3450               	retlw	80	;'P'
   275  104F  3420               	retlw	32	;' '
   276  1050  3443               	retlw	67	;'C'
   277  1051  344D               	retlw	77	;'M'
   278  1052  344D               	retlw	77	;'M'
   279  1053  344F               	retlw	79	;'O'
   280  1054  344E               	retlw	78	;'N'
   281  1055  3420               	retlw	32	;' '
   282  1056  3450               	retlw	80	;'P'
   283  1057  3447               	retlw	71	;'G'
   284  1058  3432               	retlw	50	;'2'
   285  1059  3400               	retlw	0
   286  105A                     STR_31:	
   287  105A  3453               	retlw	83	;'S'
   288  105B  3445               	retlw	69	;'E'
   289  105C  3454               	retlw	84	;'T'
   290  105D  3420               	retlw	32	;' '
   291  105E  3448               	retlw	72	;'H'
   292  105F  3452               	retlw	82	;'R'
   293  1060  3453               	retlw	83	;'S'
   294  1061  3420               	retlw	32	;' '
   295  1062  342D               	retlw	45	;'-'
   296  1063  3420               	retlw	32	;' '
   297  1064  3445               	retlw	69	;'E'
   298  1065  344E               	retlw	78	;'N'
   299  1066  3444               	retlw	68	;'D'
   300  1067  3400               	retlw	0
   301  1068                     STR_25:	
   302  1068  3453               	retlw	83	;'S'
   303  1069  3454               	retlw	84	;'T'
   304  106A  3452               	retlw	82	;'R'
   305  106B  3454               	retlw	84	;'T'
   306  106C  343A               	retlw	58	;':'
   307  106D  3420               	retlw	32	;' '
   308  106E  3425               	retlw	37	;'%'
   309  106F  3432               	retlw	50	;'2'
   310  1070  3464               	retlw	100	;'d'
   311  1071  343A               	retlw	58	;':'
   312  1072  3425               	retlw	37	;'%'
   313  1073  3432               	retlw	50	;'2'
   314  1074  3464               	retlw	100	;'d'
   315  1075  3400               	retlw	0
   316  1076                     STR_26:	
   317  1076  3445               	retlw	69	;'E'
   318  1077  344E               	retlw	78	;'N'
   319  1078  3444               	retlw	68	;'D'
   320  1079  343A               	retlw	58	;':'
   321  107A  3420               	retlw	32	;' '
   322  107B  3425               	retlw	37	;'%'
   323  107C  3432               	retlw	50	;'2'
   324  107D  3464               	retlw	100	;'d'
   325  107E  343A               	retlw	58	;':'
   326  107F  3425               	retlw	37	;'%'
   327  1080  3432               	retlw	50	;'2'
   328  1081  3464               	retlw	100	;'d'
   329  1082  3400               	retlw	0
   330  1083                     STR_30:	
   331  1083  3453               	retlw	83	;'S'
   332  1084  3445               	retlw	69	;'E'
   333  1085  3454               	retlw	84	;'T'
   334  1086  3420               	retlw	32	;' '
   335  1087  344D               	retlw	77	;'M'
   336  1088  3449               	retlw	73	;'I'
   337  1089  344E               	retlw	78	;'N'
   338  108A  3455               	retlw	85	;'U'
   339  108B  3454               	retlw	84	;'T'
   340  108C  3445               	retlw	69	;'E'
   341  108D  3453               	retlw	83	;'S'
   342  108E  3400               	retlw	0
   343  108F                     STR_34:	
   344  108F  3449               	retlw	73	;'I'
   345  1090  344F               	retlw	79	;'O'
   346  1091  3420               	retlw	32	;' '
   347  1092  3453               	retlw	83	;'S'
   348  1093  3454               	retlw	84	;'T'
   349  1094  3441               	retlw	65	;'A'
   350  1095  3454               	retlw	84	;'T'
   351  1096  3455               	retlw	85	;'U'
   352  1097  3453               	retlw	83	;'S'
   353  1098  343A               	retlw	58	;':'
   354  1099  3400               	retlw	0
   355  109A                     STR_19:	
   356  109A  3454               	retlw	84	;'T'
   357  109B  3465               	retlw	101	;'e'
   358  109C  346D               	retlw	109	;'m'
   359  109D  3470               	retlw	112	;'p'
   360  109E  343A               	retlw	58	;':'
   361  109F  3420               	retlw	32	;' '
   362  10A0  3425               	retlw	37	;'%'
   363  10A1  3464               	retlw	100	;'d'
   364  10A2  3420               	retlw	32	;' '
   365  10A3  3443               	retlw	67	;'C'
   366  10A4  3400               	retlw	0
   367  10A5                     STR_29:	
   368  10A5  3453               	retlw	83	;'S'
   369  10A6  3445               	retlw	69	;'E'
   370  10A7  3454               	retlw	84	;'T'
   371  10A8  3420               	retlw	32	;' '
   372  10A9  3448               	retlw	72	;'H'
   373  10AA  344F               	retlw	79	;'O'
   374  10AB  3455               	retlw	85	;'U'
   375  10AC  3452               	retlw	82	;'R'
   376  10AD  3453               	retlw	83	;'S'
   377  10AE  3400               	retlw	0
   378  10AF                     STR_8:	
   379  10AF  3444               	retlw	68	;'D'
   380  10B0  3445               	retlw	69	;'E'
   381  10B1  3443               	retlw	67	;'C'
   382  10B2  343A               	retlw	58	;':'
   383  10B3  3420               	retlw	32	;' '
   384  10B4  3425               	retlw	37	;'%'
   385  10B5  3430               	retlw	48	;'0'
   386  10B6  3432               	retlw	50	;'2'
   387  10B7  3464               	retlw	100	;'d'
   388  10B8  3400               	retlw	0
   389  10B9                     STR_7:	
   390  10B9  3449               	retlw	73	;'I'
   391  10BA  344E               	retlw	78	;'N'
   392  10BB  3443               	retlw	67	;'C'
   393  10BC  343A               	retlw	58	;':'
   394  10BD  3420               	retlw	32	;' '
   395  10BE  3425               	retlw	37	;'%'
   396  10BF  3430               	retlw	48	;'0'
   397  10C0  3432               	retlw	50	;'2'
   398  10C1  3464               	retlw	100	;'d'
   399  10C2  3400               	retlw	0
   400  10C3                     STR_9:	
   401  10C3  3453               	retlw	83	;'S'
   402  10C4  3445               	retlw	69	;'E'
   403  10C5  3454               	retlw	84	;'T'
   404  10C6  343A               	retlw	58	;':'
   405  10C7  3420               	retlw	32	;' '
   406  10C8  3425               	retlw	37	;'%'
   407  10C9  3430               	retlw	48	;'0'
   408  10CA  3432               	retlw	50	;'2'
   409  10CB  3464               	retlw	100	;'d'
   410  10CC  3400               	retlw	0
   411  10CD                     STR_3:	
   412  10CD  3425               	retlw	37	;'%'
   413  10CE  3464               	retlw	100	;'d'
   414  10CF  3420               	retlw	32	;' '
   415  10D0  3470               	retlw	112	;'p'
   416  10D1  3470               	retlw	112	;'p'
   417  10D2  346D               	retlw	109	;'m'
   418  10D3  3420               	retlw	32	;' '
   419  10D4  3420               	retlw	32	;' '
   420  10D5  3400               	retlw	0
   421  10D6                     STR_20:	
   422  10D6  3456               	retlw	86	;'V'
   423  10D7  3445               	retlw	69	;'E'
   424  10D8  344E               	retlw	78	;'N'
   425  10D9  3454               	retlw	84	;'T'
   426  10DA  3420               	retlw	32	;' '
   427  10DB  344F               	retlw	79	;'O'
   428  10DC  344E               	retlw	78	;'N'
   429  10DD  3420               	retlw	32	;' '
   430  10DE  3400               	retlw	0
   431  10DF                     STR_21:	
   432  10DF  3446               	retlw	70	;'F'
   433  10E0  3441               	retlw	65	;'A'
   434  10E1  344E               	retlw	78	;'N'
   435  10E2  3420               	retlw	32	;' '
   436  10E3  344F               	retlw	79	;'O'
   437  10E4  3446               	retlw	70	;'F'
   438  10E5  3446               	retlw	70	;'F'
   439  10E6  3400               	retlw	0
   440  10E7                     STR_4:	
   441  10E7  3450               	retlw	80	;'P'
   442  10E8  3455               	retlw	85	;'U'
   443  10E9  3452               	retlw	82	;'R'
   444  10EA  3446               	retlw	70	;'F'
   445  10EB  3420               	retlw	32	;' '
   446  10EC  3448               	retlw	72	;'H'
   447  10ED  3449               	retlw	73	;'I'
   448  10EE  3400               	retlw	0
   449  10EF                     STR_5:	
   450  10EF  3450               	retlw	80	;'P'
   451  10F0  3455               	retlw	85	;'U'
   452  10F1  3452               	retlw	82	;'R'
   453  10F2  3446               	retlw	70	;'F'
   454  10F3  3420               	retlw	32	;' '
   455  10F4  344C               	retlw	76	;'L'
   456  10F5  344F               	retlw	79	;'O'
   457  10F6  3400               	retlw	0
   458  10F7                     STR_23:	
   459  10F7  344D               	retlw	77	;'M'
   460  10F8  344F               	retlw	79	;'O'
   461  10F9  3444               	retlw	68	;'D'
   462  10FA  3445               	retlw	69	;'E'
   463  10FB  343A               	retlw	58	;':'
   464  10FC  3420               	retlw	32	;' '
   465  10FD  3400               	retlw	0
   466  10FE                     STR_22:	
   467  10FE  3450               	retlw	80	;'P'
   468  10FF  3457               	retlw	87	;'W'
   469  1100  3452               	retlw	82	;'R'
   470  1101  3420               	retlw	32	;' '
   471  1102  344F               	retlw	79	;'O'
   472  1103  344E               	retlw	78	;'N'
   473  1104  3400               	retlw	0
   474  1105                     STR_1:	
   475  1105  3443               	retlw	67	;'C'
   476  1106  344F               	retlw	79	;'O'
   477  1107  3432               	retlw	50	;'2'
   478  1108  343A               	retlw	58	;':'
   479  1109  3420               	retlw	32	;' '
   480  110A  3400               	retlw	0
   481  110B                     STR_2:	
   482  110B  3425               	retlw	37	;'%'
   483  110C  3464               	retlw	100	;'d'
   484  110D  3400               	retlw	0
   485  110E                     __end_of__stringdata:	
   486                           
   487                           ; #config settings
   488  0000                     
   489                           	psect	cinit
   490  0015                     start_initialization:	
   491  0015                     __initialization:	
   492                           
   493                           ; Clear objects allocated to COMMON
   494  0015  01F7               	clrf	__pbssCOMMON& (0+127)
   495  0016  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   496  0017  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   497                           
   498                           ; Clear objects allocated to BANK1
   499  0018  1383               	bcf	3,7	;select IRP bank0
   500  0019  30D7               	movlw	low __pbssBANK1
   501  001A  0084               	movwf	4
   502  001B  30EC               	movlw	low (__pbssBANK1+21)
   503  001C  160A  118A  23D2  120A  118A  	fcall	clear_ram0
   504                           
   505                           ; Initialize objects allocated to BANK1
   506  0021  1683               	bsf	3,5	;RP0=1, select bank1
   507  0022  1303               	bcf	3,6	;RP1=0, select bank1
   508  0023  160A  118A  23CF  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   509  0028  00EC               	movwf	__pdataBANK1& (0+127)
   510  0029  160A  118A  23D0  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   511  002E  00ED               	movwf	(__pdataBANK1+1)& (0+127)
   512  002F  160A  118A  23D1  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   513  0034  00EE               	movwf	(__pdataBANK1+2)& (0+127)
   514                           
   515                           ; Initialize objects allocated to BANK0
   516  0035  1283               	bcf	3,5	;RP0=0, select bank0
   517  0036  1303               	bcf	3,6	;RP1=0, select bank0
   518  0037  120A  118A  2003  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   519  003C  00EF               	movwf	__pdataBANK0& (0+127)
   520                           
   521                           ; Initialize objects allocated to COMMON
   522  003D  120A  158A  2000  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   523  0042  00FA               	movwf	__pdataCOMMON& (0+127)
   524  0043  120A  158A  2001  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   525  0048  00FB               	movwf	(__pdataCOMMON+1)& (0+127)
   526  0049  120A  158A  2002   	fcall	__pidataCOMMON+2	;fetch initializer
   527  004C  00FC               	movwf	(__pdataCOMMON+2)& (0+127)
   528  004D                     end_of_initialization:	
   529                           ;End of C runtime variable initialization code
   530                           
   531  004D                     __end_of__initialization:	
   532  004D  0183               	clrf	3
   533  004E  160A  118A  2FA1   	ljmp	_main	;jump to C main() function
   534                           
   535                           	psect	bssCOMMON
   536  0077                     __pbssCOMMON:	
   537  0077                     _key:	
   538  0077                     	ds	1
   539  0078                     _keyValid:	
   540  0078                     	ds	1
   541  0079                     _minutes:	
   542  0079                     	ds	1
   543                           
   544                           	psect	dataCOMMON
   545  007A                     __pdataCOMMON:	
   546  007A                     _hours:	
   547  007A                     	ds	1
   548  007B                     _lastKeyState:	
   549  007B                     	ds	1
   550  007C                     _lastMode:	
   551  007C                     	ds	1
   552                           
   553                           	psect	dataBANK0
   554  006F                     __pdataBANK0:	
   555  006F                     _savedHoursEnd:	
   556  006F                     	ds	1
   557                           
   558                           	psect	bssBANK1
   559  00D7                     __pbssBANK1:	
   560  00D7                     _PPM:	
   561  00D7                     	ds	3
   562  00DA                     _tempBuffer:	
   563  00DA                     	ds	2
   564  00DC                     checkSelect@lastRB1State:	
   565  00DC                     	ds	2
   566  00DE                     _mode:	
   567  00DE                     	ds	1
   568  00DF                     _ppmFlag:	
   569  00DF                     	ds	1
   570  00E0                     _select:	
   571  00E0                     	ds	1
   572  00E1                     _tempFlag:	
   573  00E1                     	ds	1
   574  00E2                     _debugInfo:	
   575  00E2                     	ds	10
   576                           
   577                           	psect	dataBANK1
   578  00EC                     __pdataBANK1:	
   579  00EC                     _savedHoursStart:	
   580  00EC                     	ds	1
   581  00ED                     _savedMinutesEnd:	
   582  00ED                     	ds	1
   583  00EE                     _savedMinutesStart:	
   584  00EE                     	ds	1
   585                           
   586                           	psect	clrtext
   587  13D2                     clear_ram0:	
   588                           ;	Called with FSR containing the base address, and
   589                           ;	W with the last address+1
   590                           
   591  13D2  0064               	clrwdt	;clear the watchdog before getting into this loop
   592  13D3                     clrloop0:	
   593  13D3  0180               	clrf	0	;clear RAM location pointed to by FSR
   594  13D4  0A84               	incf	4,f	;increment pointer
   595  13D5  0604               	xorwf	4,w	;XOR with final address
   596  13D6  1903               	btfsc	3,2	;have we reached the end yet?
   597  13D7  3400               	retlw	0	;all done for this memory range, return
   598  13D8  0604               	xorwf	4,w	;XOR again to restore value
   599  13D9  2BD3               	goto	clrloop0	;do the next byte
   600                           
   601                           	psect	cstackBANK1
   602  00A0                     __pcstackBANK1:	
   603  00A0                     CalcMQ135@voltage:	
   604  00A0                     displayPPM@strBuffer:	
   605                           ; 3 bytes @ 0x0
   606                           
   607                           
   608                           ; 50 bytes @ 0x0
   609  00A0                     	ds	3
   610  00A3                     CalcMQ135@ratio6:	
   611                           
   612                           ; 3 bytes @ 0x3
   613  00A3                     	ds	3
   614  00A6                     _CalcMQ135$682:	
   615                           
   616                           ; 3 bytes @ 0x6
   617  00A6                     	ds	3
   618  00A9                     _CalcMQ135$683:	
   619                           
   620                           ; 3 bytes @ 0x9
   621  00A9                     	ds	3
   622  00AC                     _CalcMQ135$684:	
   623                           
   624                           ; 3 bytes @ 0xC
   625  00AC                     	ds	3
   626  00AF                     _CalcMQ135$685:	
   627                           
   628                           ; 3 bytes @ 0xF
   629  00AF                     	ds	3
   630  00B2                     _CalcMQ135$686:	
   631                           
   632                           ; 3 bytes @ 0x12
   633  00B2                     	ds	3
   634  00B5                     CalcMQ135@ratio2:	
   635                           
   636                           ; 3 bytes @ 0x15
   637  00B5                     	ds	3
   638  00B8                     CalcMQ135@ratio3:	
   639                           
   640                           ; 3 bytes @ 0x18
   641  00B8                     	ds	3
   642  00BB                     CalcMQ135@ratio4:	
   643                           
   644                           ; 3 bytes @ 0x1B
   645  00BB                     	ds	3
   646  00BE                     CalcMQ135@ratio5:	
   647                           
   648                           ; 3 bytes @ 0x1E
   649  00BE                     	ds	3
   650  00C1                     CalcMQ135@co2:	
   651                           
   652                           ; 3 bytes @ 0x21
   653  00C1                     	ds	3
   654  00C4                     CalcMQ135@ratio:	
   655                           
   656                           ; 3 bytes @ 0x24
   657  00C4                     	ds	14
   658  00D2                     displayPPM@ppmWhole:	
   659                           
   660                           ; 2 bytes @ 0x32
   661  00D2                     	ds	2
   662  00D4                     displayPPM@ppmFraction:	
   663                           
   664                           ; 2 bytes @ 0x34
   665  00D4                     	ds	2
   666  00D6                     displayPPM@bufPtr:	
   667                           
   668                           ; 1 bytes @ 0x36
   669  00D6                     	ds	1
   670                           
   671                           	psect	cstackCOMMON
   672  0070                     __pcstackCOMMON:	
   673  0070                     ?_setPortDirections:	
   674  0070                     ?_initADC:	
   675                           ; 0 bytes @ 0x0
   676                           
   677  0070                     ?_initInterrupt:	
   678                           ; 0 bytes @ 0x0
   679                           
   680  0070                     ?_startUpLCD:	
   681                           ; 0 bytes @ 0x0
   682                           
   683  0070                     ?_checkSelect:	
   684                           ; 0 bytes @ 0x0
   685                           
   686  0070                     ?_checkMode:	
   687                           ; 0 bytes @ 0x0
   688                           
   689  0070                     ?_updateState:	
   690                           ; 0 bytes @ 0x0
   691                           
   692  0070                     ?_isdigit:	
   693                           ; 0 bytes @ 0x0
   694                           
   695  0070                     ?_instCTRL:	
   696                           ; 1 bit 
   697                           
   698  0070                     ?_dataCTRL:	
   699                           ; 0 bytes @ 0x0
   700                           
   701  0070                     ?_initLCD:	
   702                           ; 0 bytes @ 0x0
   703                           
   704  0070                     ?_runMQ135:	
   705                           ; 0 bytes @ 0x0
   706                           
   707  0070                     ?_displayPPM:	
   708                           ; 0 bytes @ 0x0
   709                           
   710  0070                     ?_printStatusPPM:	
   711                           ; 0 bytes @ 0x0
   712                           
   713  0070                     ?_runClock:	
   714                           ; 0 bytes @ 0x0
   715                           
   716  0070                     ?_displayTime:	
   717                           ; 0 bytes @ 0x0
   718                           
   719  0070                     ?_setHoursStart:	
   720                           ; 0 bytes @ 0x0
   721                           
   722  0070                     ?_setHoursEnd:	
   723                           ; 0 bytes @ 0x0
   724                           
   725  0070                     ?_setMinutesStart:	
   726                           ; 0 bytes @ 0x0
   727                           
   728  0070                     ?_setMinutesEnd:	
   729                           ; 0 bytes @ 0x0
   730                           
   731  0070                     ?_checkTime:	
   732                           ; 0 bytes @ 0x0
   733                           
   734  0070                     ?_displayTemp:	
   735                           ; 0 bytes @ 0x0
   736                           
   737  0070                     ?_printStatusTMP:	
   738                           ; 0 bytes @ 0x0
   739                           
   740  0070                     ?_main:	
   741                           ; 0 bytes @ 0x0
   742                           
   743  0070                     ?_ISR:	
   744                           ; 0 bytes @ 0x0
   745                           
   746  0070                     ?i1_instCTRL:	
   747                           ; 0 bytes @ 0x0
   748                           
   749  0070                     ??i1_instCTRL:	
   750                           ; 0 bytes @ 0x0
   751                           
   752  0070                     ?_handlePPM:	
   753                           ; 0 bytes @ 0x0
   754                           
   755  0070                     ?_handleTemp:	
   756                           ; 1 bytes @ 0x0
   757                           
   758                           
   759                           ; 1 bytes @ 0x0
   760  0070                     	ds	1
   761  0071                     i1instCTRL@CMD:	
   762                           
   763                           ; 1 bytes @ 0x1
   764  0071                     	ds	1
   765  0072                     ??_ISR:	
   766                           
   767                           ; 0 bytes @ 0x2
   768  0072                     	ds	5
   769                           
   770                           	psect	cstackBANK0
   771  0020                     __pcstackBANK0:	
   772  0020                     ??_setPortDirections:	
   773  0020                     ??_initADC:	
   774                           ; 0 bytes @ 0x0
   775                           
   776  0020                     ??_initInterrupt:	
   777                           ; 0 bytes @ 0x0
   778                           
   779  0020                     ??_isdigit:	
   780                           ; 0 bytes @ 0x0
   781                           
   782  0020                     ??_instCTRL:	
   783                           ; 0 bytes @ 0x0
   784                           
   785  0020                     ??_dataCTRL:	
   786                           ; 0 bytes @ 0x0
   787                           
   788  0020                     ??_runClock:	
   789                           ; 0 bytes @ 0x0
   790                           
   791  0020                     ??_checkTime:	
   792                           ; 0 bytes @ 0x0
   793                           
   794  0020                     ??_handleTemp:	
   795                           ; 0 bytes @ 0x0
   796                           
   797  0020                     ?___ftge:	
   798                           ; 0 bytes @ 0x0
   799                           
   800  0020                     ?_readADC:	
   801                           ; 1 bit 
   802                           
   803  0020                     ?___wmul:	
   804                           ; 2 bytes @ 0x0
   805                           
   806  0020                     ?___awmod:	
   807                           ; 2 bytes @ 0x0
   808                           
   809  0020                     ?___ftpack:	
   810                           ; 2 bytes @ 0x0
   811                           
   812  0020                     _isdigit$441:	
   813                           ; 3 bytes @ 0x0
   814                           
   815  0020                     ___wmul@multiplier:	
   816                           ; 1 bytes @ 0x0
   817                           
   818  0020                     ___awmod@divisor:	
   819                           ; 2 bytes @ 0x0
   820                           
   821  0020                     ___ftpack@arg:	
   822                           ; 2 bytes @ 0x0
   823                           
   824  0020                     ___ftge@ff1:	
   825                           ; 3 bytes @ 0x0
   826                           
   827                           
   828                           ; 3 bytes @ 0x0
   829  0020                     	ds	1
   830  0021                     instCTRL@CMD:	
   831  0021                     dataCTRL@DAT:	
   832                           ; 1 bytes @ 0x1
   833                           
   834  0021                     isdigit@c:	
   835                           ; 1 bytes @ 0x1
   836                           
   837                           
   838                           ; 1 bytes @ 0x1
   839  0021                     	ds	1
   840  0022                     ??_checkSelect:	
   841  0022                     ??_checkMode:	
   842                           ; 0 bytes @ 0x2
   843                           
   844  0022                     ??_readADC:	
   845                           ; 0 bytes @ 0x2
   846                           
   847  0022                     ??_initLCD:	
   848                           ; 0 bytes @ 0x2
   849                           
   850  0022                     ?_printToLCD:	
   851                           ; 0 bytes @ 0x2
   852                           
   853  0022                     printToLCD@str:	
   854                           ; 0 bytes @ 0x2
   855                           
   856  0022                     ___wmul@multiplicand:	
   857                           ; 2 bytes @ 0x2
   858                           
   859  0022                     ___awmod@dividend:	
   860                           ; 2 bytes @ 0x2
   861                           
   862                           
   863                           ; 2 bytes @ 0x2
   864  0022                     	ds	1
   865  0023                     ___ftpack@exp:	
   866  0023                     ___ftge@ff2:	
   867                           ; 1 bytes @ 0x3
   868                           
   869                           
   870                           ; 3 bytes @ 0x3
   871  0023                     	ds	1
   872  0024                     ??_startUpLCD:	
   873  0024                     ??_printToLCD:	
   874                           ; 0 bytes @ 0x4
   875                           
   876  0024                     ??_printStatusPPM:	
   877                           ; 0 bytes @ 0x4
   878                           
   879  0024                     ??_printStatusTMP:	
   880                           ; 0 bytes @ 0x4
   881                           
   882  0024                     ??___wmul:	
   883                           ; 0 bytes @ 0x4
   884                           
   885  0024                     ??___awmod:	
   886                           ; 0 bytes @ 0x4
   887                           
   888  0024                     readADC@channel:	
   889                           ; 0 bytes @ 0x4
   890                           
   891  0024                     printStatusPPM@handler:	
   892                           ; 1 bytes @ 0x4
   893                           
   894  0024                     printStatusTMP@handler:	
   895                           ; 1 bytes @ 0x4
   896                           
   897  0024                     ___ftpack@sign:	
   898                           ; 1 bytes @ 0x4
   899                           
   900  0024                     checkSelect@currentRB1State:	
   901                           ; 1 bytes @ 0x4
   902                           
   903  0024                     ___wmul@product:	
   904                           ; 2 bytes @ 0x4
   905                           
   906                           
   907                           ; 2 bytes @ 0x4
   908  0024                     	ds	1
   909  0025                     ??___ftpack:	
   910  0025                     ___awmod@counter:	
   911                           ; 0 bytes @ 0x5
   912                           
   913                           
   914                           ; 1 bytes @ 0x5
   915  0025                     	ds	1
   916  0026                     ??___ftge:	
   917  0026                     ?___lwdiv:	
   918                           ; 0 bytes @ 0x6
   919                           
   920  0026                     ___awmod@sign:	
   921                           ; 2 bytes @ 0x6
   922                           
   923  0026                     ___lwdiv@divisor:	
   924                           ; 1 bytes @ 0x6
   925                           
   926                           
   927                           ; 2 bytes @ 0x6
   928  0026                     	ds	2
   929  0028                     ?___awtoft:	
   930  0028                     ___awtoft@c:	
   931                           ; 3 bytes @ 0x8
   932                           
   933  0028                     ___lwdiv@dividend:	
   934                           ; 2 bytes @ 0x8
   935                           
   936                           
   937                           ; 2 bytes @ 0x8
   938  0028                     	ds	2
   939  002A                     ??___lwdiv:	
   940                           
   941                           ; 0 bytes @ 0xA
   942  002A                     	ds	1
   943  002B                     ??___awtoft:	
   944  002B                     ___lwdiv@quotient:	
   945                           ; 0 bytes @ 0xB
   946                           
   947                           
   948                           ; 2 bytes @ 0xB
   949  002B                     	ds	1
   950  002C                     ??_handlePPM:	
   951                           
   952                           ; 0 bytes @ 0xC
   953  002C                     	ds	1
   954  002D                     ___awtoft@sign:	
   955  002D                     ___lwdiv@counter:	
   956                           ; 1 bytes @ 0xD
   957                           
   958                           
   959                           ; 1 bytes @ 0xD
   960  002D                     	ds	1
   961  002E                     ?_calculateTemp:	
   962  002E                     ?___lwmod:	
   963                           ; 0 bytes @ 0xE
   964                           
   965  002E                     ?___ftneg:	
   966                           ; 2 bytes @ 0xE
   967                           
   968  002E                     calculateTemp@adcValue:	
   969                           ; 3 bytes @ 0xE
   970                           
   971  002E                     ___lwmod@divisor:	
   972                           ; 2 bytes @ 0xE
   973                           
   974  002E                     ___ftneg@f1:	
   975                           ; 2 bytes @ 0xE
   976                           
   977                           
   978                           ; 3 bytes @ 0xE
   979  002E                     	ds	2
   980  0030                     ??_calculateTemp:	
   981  0030                     ___lwmod@dividend:	
   982                           ; 0 bytes @ 0x10
   983                           
   984                           
   985                           ; 2 bytes @ 0x10
   986  0030                     	ds	1
   987  0031                     ??___ftneg:	
   988  0031                     ?___ftadd:	
   989                           ; 0 bytes @ 0x11
   990                           
   991  0031                     ___ftadd@f1:	
   992                           ; 3 bytes @ 0x11
   993                           
   994                           
   995                           ; 3 bytes @ 0x11
   996  0031                     	ds	1
   997  0032                     ??___lwmod:	
   998                           
   999                           ; 0 bytes @ 0x12
  1000  0032                     	ds	1
  1001  0033                     ___lwmod@counter:	
  1002                           
  1003                           ; 1 bytes @ 0x13
  1004  0033                     	ds	1
  1005  0034                     ?_sprintf:	
  1006  0034                     sprintf@f:	
  1007                           ; 2 bytes @ 0x14
  1008                           
  1009  0034                     ___ftadd@f2:	
  1010                           ; 2 bytes @ 0x14
  1011                           
  1012                           
  1013                           ; 3 bytes @ 0x14
  1014  0034                     	ds	3
  1015  0037                     ??___ftadd:	
  1016                           
  1017                           ; 0 bytes @ 0x17
  1018  0037                     	ds	3
  1019  003A                     ??_sprintf:	
  1020                           
  1021                           ; 0 bytes @ 0x1A
  1022  003A                     	ds	1
  1023  003B                     ___ftadd@sign:	
  1024                           
  1025                           ; 1 bytes @ 0x1B
  1026  003B                     	ds	1
  1027  003C                     ___ftadd@exp2:	
  1028                           
  1029                           ; 1 bytes @ 0x1C
  1030  003C                     	ds	1
  1031  003D                     sprintf@ap:	
  1032  003D                     ___ftadd@exp1:	
  1033                           ; 1 bytes @ 0x1D
  1034                           
  1035                           
  1036                           ; 1 bytes @ 0x1D
  1037  003D                     	ds	1
  1038  003E                     ?___ftmul:	
  1039  003E                     sprintf@prec:	
  1040                           ; 3 bytes @ 0x1E
  1041                           
  1042  003E                     ___ftmul@f1:	
  1043                           ; 1 bytes @ 0x1E
  1044                           
  1045                           
  1046                           ; 3 bytes @ 0x1E
  1047  003E                     	ds	1
  1048  003F                     sprintf@ccnt:	
  1049                           
  1050                           ; 2 bytes @ 0x1F
  1051  003F                     	ds	2
  1052  0041                     ___ftmul@f2:	
  1053  0041                     sprintf@_val:	
  1054                           ; 3 bytes @ 0x21
  1055                           
  1056                           
  1057                           ; 4 bytes @ 0x21
  1058  0041                     	ds	3
  1059  0044                     ??___ftmul:	
  1060                           
  1061                           ; 0 bytes @ 0x24
  1062  0044                     	ds	1
  1063  0045                     sprintf@flag:	
  1064                           
  1065                           ; 1 bytes @ 0x25
  1066  0045                     	ds	1
  1067  0046                     sprintf@width:	
  1068                           
  1069                           ; 2 bytes @ 0x26
  1070  0046                     	ds	2
  1071  0048                     sprintf@c:	
  1072  0048                     ___ftmul@exp:	
  1073                           ; 1 bytes @ 0x28
  1074                           
  1075                           
  1076                           ; 1 bytes @ 0x28
  1077  0048                     	ds	1
  1078  0049                     sprintf@sp:	
  1079  0049                     ___ftmul@f3_as_product:	
  1080                           ; 1 bytes @ 0x29
  1081                           
  1082                           
  1083                           ; 3 bytes @ 0x29
  1084  0049                     	ds	1
  1085  004A                     ??_displayTime:	
  1086  004A                     ??_setHoursStart:	
  1087                           ; 0 bytes @ 0x2A
  1088                           
  1089  004A                     ??_setHoursEnd:	
  1090                           ; 0 bytes @ 0x2A
  1091                           
  1092  004A                     ??_setMinutesStart:	
  1093                           ; 0 bytes @ 0x2A
  1094                           
  1095  004A                     ??_setMinutesEnd:	
  1096                           ; 0 bytes @ 0x2A
  1097                           
  1098  004A                     ??_displayTemp:	
  1099                           ; 0 bytes @ 0x2A
  1100                           
  1101  004A                     displayTemp@buffer:	
  1102                           ; 0 bytes @ 0x2A
  1103                           
  1104                           
  1105                           ; 20 bytes @ 0x2A
  1106  004A                     	ds	2
  1107  004C                     ___ftmul@cntr:	
  1108                           
  1109                           ; 1 bytes @ 0x2C
  1110  004C                     	ds	1
  1111  004D                     ___ftmul@sign:	
  1112                           
  1113                           ; 1 bytes @ 0x2D
  1114  004D                     	ds	1
  1115  004E                     ?___ftdiv:	
  1116  004E                     ?___fttol:	
  1117                           ; 3 bytes @ 0x2E
  1118                           
  1119  004E                     ___ftdiv@f2:	
  1120                           ; 4 bytes @ 0x2E
  1121                           
  1122  004E                     ___fttol@f1:	
  1123                           ; 3 bytes @ 0x2E
  1124                           
  1125  004E                     displayTime@timeFormat:	
  1126                           ; 3 bytes @ 0x2E
  1127                           
  1128                           
  1129                           ; 10 bytes @ 0x2E
  1130  004E                     	ds	3
  1131  0051                     ___ftdiv@f1:	
  1132                           
  1133                           ; 3 bytes @ 0x31
  1134  0051                     	ds	1
  1135  0052                     ??___fttol:	
  1136                           
  1137                           ; 0 bytes @ 0x32
  1138  0052                     	ds	2
  1139  0054                     ??___ftdiv:	
  1140                           
  1141                           ; 0 bytes @ 0x34
  1142  0054                     	ds	2
  1143  0056                     ___fttol@sign1:	
  1144                           
  1145                           ; 1 bytes @ 0x36
  1146  0056                     	ds	1
  1147  0057                     ___fttol@lval:	
  1148                           
  1149                           ; 4 bytes @ 0x37
  1150  0057                     	ds	1
  1151  0058                     ___ftdiv@cntr:	
  1152                           
  1153                           ; 1 bytes @ 0x38
  1154  0058                     	ds	1
  1155  0059                     ___ftdiv@f3:	
  1156                           
  1157                           ; 3 bytes @ 0x39
  1158  0059                     	ds	2
  1159  005B                     ___fttol@exp1:	
  1160                           
  1161                           ; 1 bytes @ 0x3B
  1162  005B                     	ds	1
  1163  005C                     ??_displayPPM:	
  1164  005C                     ___ftdiv@exp:	
  1165                           ; 0 bytes @ 0x3C
  1166                           
  1167                           
  1168                           ; 1 bytes @ 0x3C
  1169  005C                     	ds	1
  1170  005D                     ___ftdiv@sign:	
  1171                           
  1172                           ; 1 bytes @ 0x3D
  1173  005D                     	ds	1
  1174  005E                     ??_updateState:	
  1175  005E                     ?_CalcMQ135:	
  1176                           ; 0 bytes @ 0x3E
  1177                           
  1178  005E                     CalcMQ135@RAW_ADC:	
  1179                           ; 3 bytes @ 0x3E
  1180                           
  1181                           
  1182                           ; 2 bytes @ 0x3E
  1183  005E                     	ds	3
  1184  0061                     ??_CalcMQ135:	
  1185  0061                     ??_runMQ135:	
  1186                           ; 0 bytes @ 0x41
  1187                           
  1188                           
  1189                           ; 0 bytes @ 0x41
  1190  0061                     	ds	1
  1191  0062                     updateState@buffer:	
  1192                           
  1193                           ; 10 bytes @ 0x42
  1194  0062                     	ds	10
  1195  006C                     ??_main:	
  1196                           
  1197                           ; 0 bytes @ 0x4C
  1198  006C                     	ds	3
  1199                           
  1200                           	psect	maintext
  1201  17A1                     __pmaintext:	
  1202 ;;
  1203 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1204 ;;
  1205 ;; *************** function _main *****************
  1206 ;; Defined at:
  1207 ;;		line 29 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;		None
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;		None
  1212 ;; Return value:  Size  Location     Type
  1213 ;;		None               void
  1214 ;; Registers used:
  1215 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1216 ;; Tracked objects:
  1217 ;;		On entry : 17F/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1221 ;;      Params:         0       0       0       0       0
  1222 ;;      Locals:         0       0       0       0       0
  1223 ;;      Temps:          0       3       0       0       0
  1224 ;;      Totals:         0       3       0       0       0
  1225 ;;Total ram usage:        3 bytes
  1226 ;; Hardware stack levels required when called:    6
  1227 ;; This function calls:
  1228 ;;		_calculateTemp
  1229 ;;		_checkMode
  1230 ;;		_checkSelect
  1231 ;;		_checkTime
  1232 ;;		_handlePPM
  1233 ;;		_handleTemp
  1234 ;;		_initADC
  1235 ;;		_initInterrupt
  1236 ;;		_readADC
  1237 ;;		_runClock
  1238 ;;		_runMQ135
  1239 ;;		_setPortDirections
  1240 ;;		_startUpLCD
  1241 ;;		_updateState
  1242 ;; This function is called by:
  1243 ;;		Startup code after reset
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           
  1248                           ;psect for function _main
  1249  17A1                     _main:	
  1250                           
  1251                           ;main.c: 31: setPortDirections();
  1252                           
  1253                           ;incstack = 0
  1254                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1255  17A1  160A  118A  23ED  160A  118A  	fcall	_setPortDirections
  1256                           
  1257                           ;main.c: 32: initADC();
  1258  17A6  160A  118A  23DA  160A  118A  	fcall	_initADC
  1259                           
  1260                           ;main.c: 33: initInterrupt();
  1261  17AB  120A  118A  27F9  160A  118A  	fcall	_initInterrupt
  1262                           
  1263                           ;main.c: 34: startUpLCD();
  1264  17B0  160A  118A  2445  160A  118A  	fcall	_startUpLCD
  1265                           
  1266                           ;main.c: 35: _delay((unsigned long)((250)*(4000000/4000.0)));
  1267  17B5  3002               	movlw	2
  1268  17B6  1283               	bcf	3,5	;RP0=0, select bank0
  1269  17B7  1303               	bcf	3,6	;RP1=0, select bank0
  1270  17B8  00EE               	movwf	??_main+2
  1271  17B9  3045               	movlw	69
  1272  17BA  00ED               	movwf	??_main+1
  1273  17BB  30A9               	movlw	169
  1274  17BC  00EC               	movwf	??_main
  1275  17BD                     u4717:	
  1276  17BD  0BEC               	decfsz	??_main,f
  1277  17BE  2FBD               	goto	u4717
  1278  17BF  0BED               	decfsz	??_main+1,f
  1279  17C0  2FBD               	goto	u4717
  1280  17C1  0BEE               	decfsz	??_main+2,f
  1281  17C2  2FBD               	goto	u4717
  1282  17C3  2FC4               	nop2
  1283  17C4                     l3339:	
  1284                           ;main.c: 36: while (1)
  1285                           
  1286                           
  1287                           ;main.c: 37: {
  1288                           ;main.c: 38: runClock();
  1289  17C4  160A  118A  24AE  160A  118A  	fcall	_runClock
  1290                           
  1291                           ;main.c: 39: checkTime();
  1292  17C9  120A  158A  2052  160A  118A  	fcall	_checkTime
  1293                           
  1294                           ;main.c: 40: runMQ135();
  1295  17CE  160A  118A  250B  160A  118A  	fcall	_runMQ135
  1296                           
  1297                           ;main.c: 41: handlePPM();
  1298  17D3  160A  118A  2668  160A  118A  	fcall	_handlePPM
  1299                           
  1300                           ;main.c: 42: calculateTemp(readADC(1));
  1301  17D8  3001               	movlw	1
  1302  17D9  160A  118A  25E5  160A  118A  	fcall	_readADC
  1303  17DE  1283               	bcf	3,5	;RP0=0, select bank0
  1304  17DF  1303               	bcf	3,6	;RP1=0, select bank0
  1305  17E0  0821               	movf	?_readADC+1,w
  1306  17E1  01AF               	clrf	calculateTemp@adcValue+1
  1307  17E2  07AF               	addwf	calculateTemp@adcValue+1,f
  1308  17E3  0820               	movf	?_readADC,w
  1309  17E4  01AE               	clrf	calculateTemp@adcValue
  1310  17E5  07AE               	addwf	calculateTemp@adcValue,f
  1311  17E6  160A  118A  2639  160A  118A  	fcall	_calculateTemp
  1312                           
  1313                           ;main.c: 43: handleTemp();
  1314  17EB  160A  118A  245A  160A  118A  	fcall	_handleTemp
  1315                           
  1316                           ;main.c: 44: checkSelect();
  1317  17F0  160A  118A  2698  160A  118A  	fcall	_checkSelect
  1318                           
  1319                           ;main.c: 45: checkMode();
  1320  17F5  160A  118A  24EB  160A  118A  	fcall	_checkMode
  1321                           
  1322                           ;main.c: 46: updateState();
  1323  17FA  120A  118A  25F7  160A  118A  	fcall	_updateState
  1324  17FF  2FC4               	goto	l3339
  1325  1800                     __end_of_main:	
  1326                           
  1327                           	psect	text1
  1328  05F7                     __ptext1:	
  1329 ;; *************** function _updateState *****************
  1330 ;; Defined at:
  1331 ;;		line 97 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;		None
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;  buffer         10   66[BANK0 ] unsigned char [10]
  1336 ;; Return value:  Size  Location     Type
  1337 ;;		None               void
  1338 ;; Registers used:
  1339 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1345 ;;      Params:         0       0       0       0       0
  1346 ;;      Locals:         0      10       0       0       0
  1347 ;;      Temps:          0       4       0       0       0
  1348 ;;      Totals:         0      14       0       0       0
  1349 ;;Total ram usage:       14 bytes
  1350 ;; Hardware stack levels used:    1
  1351 ;; Hardware stack levels required when called:    5
  1352 ;; This function calls:
  1353 ;;		_displayPPM
  1354 ;;		_displayTemp
  1355 ;;		_displayTime
  1356 ;;		_instCTRL
  1357 ;;		_printStatusPPM
  1358 ;;		_printStatusTMP
  1359 ;;		_printToLCD
  1360 ;;		_setHoursEnd
  1361 ;;		_setHoursStart
  1362 ;;		_setMinutesEnd
  1363 ;;		_setMinutesStart
  1364 ;;		_sprintf
  1365 ;; This function is called by:
  1366 ;;		_main
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           
  1371                           ;psect for function _updateState
  1372  05F7                     _updateState:	
  1373                           
  1374                           ;main.c: 99: char buffer[10];
  1375                           ;main.c: 100: switch (mode)
  1376                           
  1377                           ;incstack = 0
  1378                           ; Regs used in _updateState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1379  05F7  2F7E               	goto	l3329
  1380  05F8                     l3247:	
  1381                           ;main.c: 101: {
  1382                           ;main.c: 102: case DISP_CMN:
  1383                           
  1384                           
  1385                           ;main.c: 103: instCTRL(0x80);
  1386  05F8  3080               	movlw	128
  1387  05F9  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1388                           
  1389                           ;main.c: 104: printToLCD("MODE: ");
  1390  05FE  30F7               	movlw	low (STR_23| (0+32768))
  1391  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  1392  0600  1303               	bcf	3,6	;RP1=0, select bank0
  1393  0601  00A2               	movwf	printToLCD@str
  1394  0602  3090               	movlw	high (STR_23| (0+32768))
  1395  0603  00A3               	movwf	printToLCD@str+1
  1396  0604  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1397                           
  1398                           ;main.c: 105: switch (select)
  1399  0609  2EA1               	goto	l3275
  1400  060A                     l3251:	
  1401                           ;main.c: 106: {
  1402                           ;main.c: 107: case 0:
  1403                           
  1404                           
  1405                           ;main.c: 108: printToLCD("DISP CMMON PG1");
  1406  060A  303C               	movlw	low (STR_24| (0+32768))
  1407  060B  1283               	bcf	3,5	;RP0=0, select bank0
  1408  060C  1303               	bcf	3,6	;RP1=0, select bank0
  1409  060D  00A2               	movwf	printToLCD@str
  1410  060E  3090               	movlw	high (STR_24| (0+32768))
  1411  060F  00A3               	movwf	printToLCD@str+1
  1412  0610  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1413                           
  1414                           ;main.c: 109: instCTRL(0xC0);
  1415  0615  30C0               	movlw	192
  1416  0616  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1417                           
  1418                           ;main.c: 110: displayTime();
  1419  061B  160A  118A  2577  120A  118A  	fcall	_displayTime
  1420                           
  1421                           ;main.c: 111: instCTRL(0x94);
  1422  0620  3094               	movlw	148
  1423  0621  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1424                           
  1425                           ;main.c: 112: sprintf(buffer, "STRT: %2d:%2d", savedHoursStart, savedMinutesStart);
  1426  0626  3068               	movlw	low (STR_25| (0+32768))
  1427  0627  1283               	bcf	3,5	;RP0=0, select bank0
  1428  0628  1303               	bcf	3,6	;RP1=0, select bank0
  1429  0629  00B4               	movwf	sprintf@f
  1430  062A  3090               	movlw	high (STR_25| (0+32768))
  1431  062B  00B5               	movwf	sprintf@f+1
  1432  062C  1683               	bsf	3,5	;RP0=1, select bank1
  1433  062D  1303               	bcf	3,6	;RP1=0, select bank1
  1434  062E  086C               	movf	_savedHoursStart^(0+128),w	;volatile
  1435  062F  1283               	bcf	3,5	;RP0=0, select bank0
  1436  0630  1303               	bcf	3,6	;RP1=0, select bank0
  1437  0631  00DE               	movwf	??_updateState
  1438  0632  01DF               	clrf	??_updateState+1
  1439  0633  085E               	movf	??_updateState,w
  1440  0634  00B6               	movwf	?_sprintf+2
  1441  0635  085F               	movf	??_updateState+1,w
  1442  0636  00B7               	movwf	?_sprintf+3
  1443  0637  1683               	bsf	3,5	;RP0=1, select bank1
  1444  0638  1303               	bcf	3,6	;RP1=0, select bank1
  1445  0639  086E               	movf	_savedMinutesStart^(0+128),w	;volatile
  1446  063A  1283               	bcf	3,5	;RP0=0, select bank0
  1447  063B  1303               	bcf	3,6	;RP1=0, select bank0
  1448  063C  00E0               	movwf	??_updateState+2
  1449  063D  01E1               	clrf	??_updateState+3
  1450  063E  0860               	movf	??_updateState+2,w
  1451  063F  00B8               	movwf	?_sprintf+4
  1452  0640  0861               	movf	??_updateState+3,w
  1453  0641  00B9               	movwf	?_sprintf+5
  1454  0642  3062               	movlw	updateState@buffer& (0+255)
  1455  0643  120A  118A  23F8  120A  118A  	fcall	_sprintf
  1456                           
  1457                           ;main.c: 113: printToLCD(buffer);
  1458  0648  3062               	movlw	updateState@buffer& (0+255)
  1459  0649  1283               	bcf	3,5	;RP0=0, select bank0
  1460  064A  1303               	bcf	3,6	;RP1=0, select bank0
  1461  064B  00A2               	movwf	printToLCD@str
  1462  064C  3000               	movlw	0
  1463  064D  00A3               	movwf	printToLCD@str+1
  1464  064E  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1465                           
  1466                           ;main.c: 114: instCTRL(0xD4);
  1467  0653  30D4               	movlw	212
  1468  0654  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1469                           
  1470                           ;main.c: 115: sprintf(buffer, "END: %2d:%2d", savedHoursEnd, savedMinutesEnd);
  1471  0659  3076               	movlw	low (STR_26| (0+32768))
  1472  065A  1283               	bcf	3,5	;RP0=0, select bank0
  1473  065B  1303               	bcf	3,6	;RP1=0, select bank0
  1474  065C  00B4               	movwf	sprintf@f
  1475  065D  3090               	movlw	high (STR_26| (0+32768))
  1476  065E  00B5               	movwf	sprintf@f+1
  1477  065F  086F               	movf	_savedHoursEnd,w	;volatile
  1478  0660  00DE               	movwf	??_updateState
  1479  0661  01DF               	clrf	??_updateState+1
  1480  0662  085E               	movf	??_updateState,w
  1481  0663  00B6               	movwf	?_sprintf+2
  1482  0664  085F               	movf	??_updateState+1,w
  1483  0665  00B7               	movwf	?_sprintf+3
  1484  0666  1683               	bsf	3,5	;RP0=1, select bank1
  1485  0667  1303               	bcf	3,6	;RP1=0, select bank1
  1486  0668  086D               	movf	_savedMinutesEnd^(0+128),w	;volatile
  1487  0669  1283               	bcf	3,5	;RP0=0, select bank0
  1488  066A  1303               	bcf	3,6	;RP1=0, select bank0
  1489  066B  00E0               	movwf	??_updateState+2
  1490  066C  01E1               	clrf	??_updateState+3
  1491  066D  0860               	movf	??_updateState+2,w
  1492  066E  00B8               	movwf	?_sprintf+4
  1493  066F  0861               	movf	??_updateState+3,w
  1494  0670  00B9               	movwf	?_sprintf+5
  1495  0671  3062               	movlw	updateState@buffer& (0+255)
  1496  0672  120A  118A  23F8  120A  118A  	fcall	_sprintf
  1497                           
  1498                           ;main.c: 116: printToLCD(buffer);
  1499  0677  3062               	movlw	updateState@buffer& (0+255)
  1500  0678  1283               	bcf	3,5	;RP0=0, select bank0
  1501  0679  1303               	bcf	3,6	;RP1=0, select bank0
  1502  067A  00A2               	movwf	printToLCD@str
  1503  067B  3000               	movlw	0
  1504  067C  00A3               	movwf	printToLCD@str+1
  1505  067D  160A  118A  260E   	fcall	_printToLCD
  1506                           
  1507                           ;main.c: 117: break;
  1508  0680  0008               	return
  1509  0681                     l3265:	
  1510                           ;main.c: 118: case 1:
  1511                           
  1512                           
  1513                           ;main.c: 119: printToLCD("DISP CMMON PG2");
  1514  0681  304B               	movlw	low (STR_27| (0+32768))
  1515  0682  1283               	bcf	3,5	;RP0=0, select bank0
  1516  0683  1303               	bcf	3,6	;RP1=0, select bank0
  1517  0684  00A2               	movwf	printToLCD@str
  1518  0685  3090               	movlw	high (STR_27| (0+32768))
  1519  0686  00A3               	movwf	printToLCD@str+1
  1520  0687  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1521                           
  1522                           ;main.c: 120: instCTRL(0xC0);
  1523  068C  30C0               	movlw	192
  1524  068D  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1525                           
  1526                           ;main.c: 121: displayPPM();
  1527  0692  120A  158A  26D7  120A  118A  	fcall	_displayPPM
  1528                           
  1529                           ;main.c: 122: instCTRL(0x94);
  1530  0697  3094               	movlw	148
  1531  0698  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1532                           
  1533                           ;main.c: 123: displayTemp();
  1534  069D  160A  118A  2553   	fcall	_displayTemp
  1535                           
  1536                           ;main.c: 126: }
  1537                           
  1538                           ;main.c: 125: break;
  1539  06A0  0008               	return
  1540  06A1                     l3275:	
  1541  06A1  1683               	bsf	3,5	;RP0=1, select bank1
  1542  06A2  1303               	bcf	3,6	;RP1=0, select bank1
  1543  06A3  0860               	movf	_select^(0+128),w	;volatile
  1544                           
  1545                           ; Switch size 1, requested type "space"
  1546                           ; Number of cases is 2, Range of values is 0 to 1
  1547                           ; switch strategies available:
  1548                           ; Name         Instructions Cycles
  1549                           ; simple_byte            7     4 (average)
  1550                           ; direct_byte           14     8 (fixed)
  1551                           ; jumptable            260     6 (fixed)
  1552                           ;	Chosen strategy is simple_byte
  1553  06A4  3A00               	xorlw	0	; case 0
  1554  06A5  1903               	skipnz
  1555  06A6  2E0A               	goto	l3251
  1556  06A7  3A01               	xorlw	1	; case 1
  1557  06A8  1903               	skipnz
  1558  06A9  2E81               	goto	l3265
  1559  06AA  2F8E               	goto	l294
  1560                           
  1561                           ;main.c: 127: break;
  1562  06AB  0008               	return
  1563  06AC                     l3277:	
  1564                           ;main.c: 128: case SET_ACTV_START:
  1565                           
  1566                           
  1567                           ;main.c: 129: instCTRL(0x80);
  1568  06AC  3080               	movlw	128
  1569  06AD  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1570                           
  1571                           ;main.c: 130: printToLCD("SET HRS - START");
  1572  06B2  301C               	movlw	low (STR_28| (0+32768))
  1573  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  1574  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  1575  06B5  00A2               	movwf	printToLCD@str
  1576  06B6  3090               	movlw	high (STR_28| (0+32768))
  1577  06B7  00A3               	movwf	printToLCD@str+1
  1578  06B8  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1579                           
  1580                           ;main.c: 131: switch (select)
  1581  06BD  2EF4               	goto	l3295
  1582  06BE                     l3281:	
  1583                           ;main.c: 132: {
  1584                           ;main.c: 133: case 0:
  1585                           
  1586                           
  1587                           ;main.c: 134: instCTRL(0xC0);
  1588  06BE  30C0               	movlw	192
  1589  06BF  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1590                           
  1591                           ;main.c: 135: printToLCD("SET HOURS");
  1592  06C4  30A5               	movlw	low (STR_29| (0+32768))
  1593  06C5  1283               	bcf	3,5	;RP0=0, select bank0
  1594  06C6  1303               	bcf	3,6	;RP1=0, select bank0
  1595  06C7  00A2               	movwf	printToLCD@str
  1596  06C8  3090               	movlw	high (STR_29| (0+32768))
  1597  06C9  00A3               	movwf	printToLCD@str+1
  1598  06CA  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1599                           
  1600                           ;main.c: 136: instCTRL(0x94);
  1601  06CF  3094               	movlw	148
  1602  06D0  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1603                           
  1604                           ;main.c: 137: setHoursStart();
  1605  06D5  120A  158A  22BB   	fcall	_setHoursStart
  1606                           
  1607                           ;main.c: 138: break;
  1608  06D8  0008               	return
  1609  06D9                     l3287:	
  1610                           ;main.c: 139: case 1:
  1611                           
  1612                           
  1613                           ;main.c: 140: instCTRL(0xC0);
  1614  06D9  30C0               	movlw	192
  1615  06DA  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1616                           
  1617                           ;main.c: 141: printToLCD("SET MINUTES");
  1618  06DF  3083               	movlw	low (STR_30| (0+32768))
  1619  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  1620  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  1621  06E2  00A2               	movwf	printToLCD@str
  1622  06E3  3090               	movlw	high (STR_30| (0+32768))
  1623  06E4  00A3               	movwf	printToLCD@str+1
  1624  06E5  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1625                           
  1626                           ;main.c: 142: instCTRL(0x94);
  1627  06EA  3094               	movlw	148
  1628  06EB  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1629                           
  1630                           ;main.c: 143: setMinutesStart();
  1631  06F0  120A  158A  243B   	fcall	_setMinutesStart
  1632                           
  1633                           ;main.c: 145: }
  1634                           
  1635                           ;main.c: 144: break;
  1636  06F3  0008               	return
  1637  06F4                     l3295:	
  1638  06F4  1683               	bsf	3,5	;RP0=1, select bank1
  1639  06F5  1303               	bcf	3,6	;RP1=0, select bank1
  1640  06F6  0860               	movf	_select^(0+128),w	;volatile
  1641                           
  1642                           ; Switch size 1, requested type "space"
  1643                           ; Number of cases is 2, Range of values is 0 to 1
  1644                           ; switch strategies available:
  1645                           ; Name         Instructions Cycles
  1646                           ; simple_byte            7     4 (average)
  1647                           ; direct_byte           14     8 (fixed)
  1648                           ; jumptable            260     6 (fixed)
  1649                           ;	Chosen strategy is simple_byte
  1650  06F7  3A00               	xorlw	0	; case 0
  1651  06F8  1903               	skipnz
  1652  06F9  2EBE               	goto	l3281
  1653  06FA  3A01               	xorlw	1	; case 1
  1654  06FB  1903               	skipnz
  1655  06FC  2ED9               	goto	l3287
  1656  06FD  2F8E               	goto	l294
  1657                           
  1658                           ;main.c: 146: break;
  1659  06FE  0008               	return
  1660  06FF                     l3297:	
  1661                           ;main.c: 147: case SET_ACTV_END:
  1662                           
  1663                           
  1664                           ;main.c: 148: instCTRL(0x80);
  1665  06FF  3080               	movlw	128
  1666  0700  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1667                           
  1668                           ;main.c: 149: printToLCD("SET HRS - END");
  1669  0705  305A               	movlw	low (STR_31| (0+32768))
  1670  0706  1283               	bcf	3,5	;RP0=0, select bank0
  1671  0707  1303               	bcf	3,6	;RP1=0, select bank0
  1672  0708  00A2               	movwf	printToLCD@str
  1673  0709  3090               	movlw	high (STR_31| (0+32768))
  1674  070A  00A3               	movwf	printToLCD@str+1
  1675  070B  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1676                           
  1677                           ;main.c: 150: switch (select)
  1678  0710  2F47               	goto	l3315
  1679  0711                     l3301:	
  1680                           ;main.c: 151: {
  1681                           ;main.c: 152: case 0:
  1682                           
  1683                           
  1684                           ;main.c: 153: instCTRL(0xC0);
  1685  0711  30C0               	movlw	192
  1686  0712  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1687                           
  1688                           ;main.c: 154: printToLCD("SET HOURS");
  1689  0717  30A5               	movlw	low (STR_29| (0+32768))
  1690  0718  1283               	bcf	3,5	;RP0=0, select bank0
  1691  0719  1303               	bcf	3,6	;RP1=0, select bank0
  1692  071A  00A2               	movwf	printToLCD@str
  1693  071B  3090               	movlw	high (STR_29| (0+32768))
  1694  071C  00A3               	movwf	printToLCD@str+1
  1695  071D  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1696                           
  1697                           ;main.c: 155: instCTRL(0x94);
  1698  0722  3094               	movlw	148
  1699  0723  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1700                           
  1701                           ;main.c: 156: setHoursEnd();
  1702  0728  120A  158A  2157   	fcall	_setHoursEnd
  1703                           
  1704                           ;main.c: 157: break;
  1705  072B  0008               	return
  1706  072C                     l3307:	
  1707                           ;main.c: 158: case 1:
  1708                           
  1709                           
  1710                           ;main.c: 159: instCTRL(0xC0);
  1711  072C  30C0               	movlw	192
  1712  072D  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1713                           
  1714                           ;main.c: 160: printToLCD("SET MINUTES");
  1715  0732  3083               	movlw	low (STR_30| (0+32768))
  1716  0733  1283               	bcf	3,5	;RP0=0, select bank0
  1717  0734  1303               	bcf	3,6	;RP1=0, select bank0
  1718  0735  00A2               	movwf	printToLCD@str
  1719  0736  3090               	movlw	high (STR_30| (0+32768))
  1720  0737  00A3               	movwf	printToLCD@str+1
  1721  0738  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1722                           
  1723                           ;main.c: 161: instCTRL(0x94);
  1724  073D  3094               	movlw	148
  1725  073E  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1726                           
  1727                           ;main.c: 162: setMinutesEnd();
  1728  0743  120A  158A  237B   	fcall	_setMinutesEnd
  1729                           
  1730                           ;main.c: 164: }
  1731                           
  1732                           ;main.c: 163: break;
  1733  0746  0008               	return
  1734  0747                     l3315:	
  1735  0747  1683               	bsf	3,5	;RP0=1, select bank1
  1736  0748  1303               	bcf	3,6	;RP1=0, select bank1
  1737  0749  0860               	movf	_select^(0+128),w	;volatile
  1738                           
  1739                           ; Switch size 1, requested type "space"
  1740                           ; Number of cases is 2, Range of values is 0 to 1
  1741                           ; switch strategies available:
  1742                           ; Name         Instructions Cycles
  1743                           ; simple_byte            7     4 (average)
  1744                           ; direct_byte           14     8 (fixed)
  1745                           ; jumptable            260     6 (fixed)
  1746                           ;	Chosen strategy is simple_byte
  1747  074A  3A00               	xorlw	0	; case 0
  1748  074B  1903               	skipnz
  1749  074C  2F11               	goto	l3301
  1750  074D  3A01               	xorlw	1	; case 1
  1751  074E  1903               	skipnz
  1752  074F  2F2C               	goto	l3307
  1753  0750  2F8E               	goto	l294
  1754                           
  1755                           ;main.c: 165: break;
  1756  0751  0008               	return
  1757  0752                     l3317:	
  1758                           ;main.c: 166: case CHCK_IO:
  1759                           
  1760                           
  1761                           ;main.c: 167: instCTRL(0x80);
  1762  0752  3080               	movlw	128
  1763  0753  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1764                           
  1765                           ;main.c: 168: printToLCD("IO STATUS:");
  1766  0758  308F               	movlw	low (STR_34| (0+32768))
  1767  0759  1283               	bcf	3,5	;RP0=0, select bank0
  1768  075A  1303               	bcf	3,6	;RP1=0, select bank0
  1769  075B  00A2               	movwf	printToLCD@str
  1770  075C  3090               	movlw	high (STR_34| (0+32768))
  1771  075D  00A3               	movwf	printToLCD@str+1
  1772  075E  160A  118A  260E  120A  118A  	fcall	_printToLCD
  1773                           
  1774                           ;main.c: 169: instCTRL(0xC0);
  1775  0763  30C0               	movlw	192
  1776  0764  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1777                           
  1778                           ;main.c: 170: printStatusTMP(tempFlag);
  1779  0769  1683               	bsf	3,5	;RP0=1, select bank1
  1780  076A  1303               	bcf	3,6	;RP1=0, select bank1
  1781  076B  0861               	movf	_tempFlag^(0+128),w
  1782  076C  160A  118A  2492  120A  118A  	fcall	_printStatusTMP
  1783                           
  1784                           ;main.c: 171: instCTRL(0x94);
  1785  0771  3094               	movlw	148
  1786  0772  160A  118A  241F  120A  118A  	fcall	_instCTRL
  1787                           
  1788                           ;main.c: 172: printStatusPPM(ppmFlag);
  1789  0777  1683               	bsf	3,5	;RP0=1, select bank1
  1790  0778  1303               	bcf	3,6	;RP1=0, select bank1
  1791  0779  085F               	movf	_ppmFlag^(0+128),w
  1792  077A  160A  118A  2476   	fcall	_printStatusPPM
  1793                           
  1794                           ;main.c: 176: }
  1795                           
  1796                           ;main.c: 175: break;
  1797                           
  1798                           ;main.c: 174: default:
  1799                           
  1800                           ;main.c: 173: break;
  1801  077D  0008               	return
  1802  077E                     l3329:	
  1803  077E  1683               	bsf	3,5	;RP0=1, select bank1
  1804  077F  1303               	bcf	3,6	;RP1=0, select bank1
  1805  0780  085E               	movf	_mode^(0+128),w
  1806                           
  1807                           ; Switch size 1, requested type "space"
  1808                           ; Number of cases is 4, Range of values is 0 to 3
  1809                           ; switch strategies available:
  1810                           ; Name         Instructions Cycles
  1811                           ; simple_byte           13     7 (average)
  1812                           ; direct_byte           20     8 (fixed)
  1813                           ; jumptable            260     6 (fixed)
  1814                           ;	Chosen strategy is simple_byte
  1815  0781  3A00               	xorlw	0	; case 0
  1816  0782  1903               	skipnz
  1817  0783  2DF8               	goto	l3247
  1818  0784  3A01               	xorlw	1	; case 1
  1819  0785  1903               	skipnz
  1820  0786  2EAC               	goto	l3277
  1821  0787  3A03               	xorlw	3	; case 2
  1822  0788  1903               	skipnz
  1823  0789  2EFF               	goto	l3297
  1824  078A  3A01               	xorlw	1	; case 3
  1825  078B  1903               	skipnz
  1826  078C  2F52               	goto	l3317
  1827  078D  2F8E               	goto	l294
  1828  078E                     l294:	
  1829  078E  0008               	return
  1830  078F                     __end_of_updateState:	
  1831                           
  1832                           	psect	text2
  1833  0C3B                     __ptext2:	
  1834 ;; *************** function _setMinutesStart *****************
  1835 ;; Defined at:
  1836 ;;		line 132 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedu
      +ler.h"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;		None
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;		None
  1841 ;; Return value:  Size  Location     Type
  1842 ;;		None               void
  1843 ;; Registers used:
  1844 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1850 ;;      Params:         0       0       0       0       0
  1851 ;;      Locals:         0       0       0       0       0
  1852 ;;      Temps:          0       2       0       0       0
  1853 ;;      Totals:         0       2       0       0       0
  1854 ;;Total ram usage:        2 bytes
  1855 ;; Hardware stack levels used:    1
  1856 ;; Hardware stack levels required when called:    4
  1857 ;; This function calls:
  1858 ;;		___awmod
  1859 ;;		_printToLCD
  1860 ;;		_sprintf
  1861 ;; This function is called by:
  1862 ;;		_updateState
  1863 ;; This function uses a non-reentrant model
  1864 ;;
  1865                           
  1866                           
  1867                           ;psect for function _setMinutesStart
  1868  0C3B                     _setMinutesStart:	
  1869                           
  1870                           ;time_scheduler.h: 134: keyValid = (PORTB & 0x08) >> 3;
  1871                           
  1872                           ;incstack = 0
  1873                           ; Regs used in _setMinutesStart: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1874  0C3B  1283               	bcf	3,5	;RP0=0, select bank0
  1875  0C3C  1303               	bcf	3,6	;RP1=0, select bank0
  1876  0C3D  0806               	movf	6,w	;volatile
  1877  0C3E  00CA               	movwf	??_setMinutesStart
  1878  0C3F  3003               	movlw	3
  1879  0C40                     u4315:	
  1880  0C40  1003               	clrc
  1881  0C41  0CCA               	rrf	??_setMinutesStart,f
  1882  0C42  3EFF               	addlw	-1
  1883  0C43  1D03               	skipz
  1884  0C44  2C40               	goto	u4315
  1885  0C45  084A               	movf	??_setMinutesStart,w
  1886  0C46  3901               	andlw	1
  1887  0C47  00CB               	movwf	??_setMinutesStart+1
  1888  0C48  084B               	movf	??_setMinutesStart+1,w
  1889  0C49  00F8               	movwf	_keyValid
  1890                           
  1891                           ;time_scheduler.h: 135: key = (PORTB & 0xF0) >> 4;
  1892  0C4A  0806               	movf	6,w	;volatile
  1893  0C4B  00CA               	movwf	??_setMinutesStart
  1894  0C4C  3004               	movlw	4
  1895  0C4D                     u4325:	
  1896  0C4D  1003               	clrc
  1897  0C4E  0CCA               	rrf	??_setMinutesStart,f
  1898  0C4F  3EFF               	addlw	-1
  1899  0C50  1D03               	skipz
  1900  0C51  2C4D               	goto	u4325
  1901  0C52  084A               	movf	??_setMinutesStart,w
  1902  0C53  390F               	andlw	15
  1903  0C54  00CB               	movwf	??_setMinutesStart+1
  1904  0C55  084B               	movf	??_setMinutesStart+1,w
  1905  0C56  00F7               	movwf	_key
  1906                           
  1907                           ;time_scheduler.h: 137: _delay((unsigned long)((50)*(4000000/4000.0)));
  1908  0C57  3041               	movlw	65
  1909  0C58  00CB               	movwf	??_setMinutesStart+1
  1910  0C59  30EE               	movlw	238
  1911  0C5A  00CA               	movwf	??_setMinutesStart
  1912  0C5B                     u4727:	
  1913  0C5B  0BCA               	decfsz	??_setMinutesStart,f
  1914  0C5C  2C5B               	goto	u4727
  1915  0C5D  0BCB               	decfsz	??_setMinutesStart+1,f
  1916  0C5E  2C5B               	goto	u4727
  1917  0C5F  0000               	nop
  1918                           
  1919                           ;time_scheduler.h: 139: if (keyValid && key != lastKeyState)
  1920  0C60  0878               	movf	_keyValid,w
  1921  0C61  1903               	btfsc	3,2
  1922  0C62  2CF1               	goto	l3111
  1923  0C63  0877               	movf	_key,w
  1924  0C64  067B               	xorwf	_lastKeyState,w
  1925  0C65  1903               	skipnz
  1926  0C66  2CF1               	goto	l3111
  1927                           
  1928                           ;time_scheduler.h: 140: {
  1929                           ;time_scheduler.h: 141: if (key == 0b00001100)
  1930  0C67  0877               	movf	_key,w
  1931  0C68  3A0C               	xorlw	12
  1932  0C69  1D03               	skipz
  1933  0C6A  2C8F               	goto	l3095
  1934                           
  1935                           ;time_scheduler.h: 142: {
  1936                           ;time_scheduler.h: 143: savedMinutesStart = (savedMinutesStart + 5) % 60;
  1937  0C6B  303C               	movlw	60
  1938  0C6C  1283               	bcf	3,5	;RP0=0, select bank0
  1939  0C6D  1303               	bcf	3,6	;RP1=0, select bank0
  1940  0C6E  00A0               	movwf	___awmod@divisor
  1941  0C6F  3000               	movlw	0
  1942  0C70  00A1               	movwf	___awmod@divisor+1
  1943  0C71  1683               	bsf	3,5	;RP0=1, select bank1
  1944  0C72  1303               	bcf	3,6	;RP1=0, select bank1
  1945  0C73  086E               	movf	_savedMinutesStart^(0+128),w	;volatile
  1946  0C74  3E05               	addlw	5
  1947  0C75  1283               	bcf	3,5	;RP0=0, select bank0
  1948  0C76  1303               	bcf	3,6	;RP1=0, select bank0
  1949  0C77  00A2               	movwf	___awmod@dividend
  1950  0C78  3000               	movlw	0
  1951  0C79  1803               	skipnc
  1952  0C7A  3001               	movlw	1
  1953  0C7B  00A3               	movwf	___awmod@dividend+1
  1954  0C7C  120A  158A  2003  120A  158A  	fcall	___awmod
  1955  0C81  1283               	bcf	3,5	;RP0=0, select bank0
  1956  0C82  1303               	bcf	3,6	;RP1=0, select bank0
  1957  0C83  0820               	movf	?___awmod,w
  1958  0C84  00CA               	movwf	??_setMinutesStart
  1959  0C85  084A               	movf	??_setMinutesStart,w
  1960  0C86  1683               	bsf	3,5	;RP0=1, select bank1
  1961  0C87  1303               	bcf	3,6	;RP1=0, select bank1
  1962  0C88  00EE               	movwf	_savedMinutesStart^(0+128)	;volatile
  1963                           
  1964                           ;time_scheduler.h: 144: sprintf(debugInfo, "INC: %02d", savedMinutesStart);
  1965  0C89  30B9               	movlw	low (STR_7| (0+32768))
  1966  0C8A  1283               	bcf	3,5	;RP0=0, select bank0
  1967  0C8B  1303               	bcf	3,6	;RP1=0, select bank0
  1968  0C8C  00B4               	movwf	sprintf@f
  1969  0C8D  3090               	movlw	high (STR_7| (0+32768))
  1970  0C8E  2CC0               	goto	L1
  1971  0C8F                     l3095:	
  1972                           ;time_scheduler.h: 145: }
  1973                           
  1974                           
  1975                           ;time_scheduler.h: 146: else if (key == 0b00001110)
  1976  0C8F  0877               	movf	_key,w
  1977  0C90  3A0E               	xorlw	14
  1978  0C91  1D03               	skipz
  1979  0C92  2CB7               	goto	l3101
  1980                           
  1981                           ;time_scheduler.h: 147: {
  1982                           ;time_scheduler.h: 148: savedMinutesStart = (savedMinutesStart - 5 + 60) % 60;
  1983  0C93  303C               	movlw	60
  1984  0C94  1283               	bcf	3,5	;RP0=0, select bank0
  1985  0C95  1303               	bcf	3,6	;RP1=0, select bank0
  1986  0C96  00A0               	movwf	___awmod@divisor
  1987  0C97  3000               	movlw	0
  1988  0C98  00A1               	movwf	___awmod@divisor+1
  1989  0C99  1683               	bsf	3,5	;RP0=1, select bank1
  1990  0C9A  1303               	bcf	3,6	;RP1=0, select bank1
  1991  0C9B  086E               	movf	_savedMinutesStart^(0+128),w	;volatile
  1992  0C9C  3E37               	addlw	55
  1993  0C9D  1283               	bcf	3,5	;RP0=0, select bank0
  1994  0C9E  1303               	bcf	3,6	;RP1=0, select bank0
  1995  0C9F  00A2               	movwf	___awmod@dividend
  1996  0CA0  3000               	movlw	0
  1997  0CA1  1803               	skipnc
  1998  0CA2  3001               	movlw	1
  1999  0CA3  00A3               	movwf	___awmod@dividend+1
  2000  0CA4  120A  158A  2003  120A  158A  	fcall	___awmod
  2001  0CA9  1283               	bcf	3,5	;RP0=0, select bank0
  2002  0CAA  1303               	bcf	3,6	;RP1=0, select bank0
  2003  0CAB  0820               	movf	?___awmod,w
  2004  0CAC  00CA               	movwf	??_setMinutesStart
  2005  0CAD  084A               	movf	??_setMinutesStart,w
  2006  0CAE  1683               	bsf	3,5	;RP0=1, select bank1
  2007  0CAF  1303               	bcf	3,6	;RP1=0, select bank1
  2008  0CB0  00EE               	movwf	_savedMinutesStart^(0+128)	;volatile
  2009                           
  2010                           ;time_scheduler.h: 149: sprintf(debugInfo, "DEC: %02d", savedMinutesStart);
  2011  0CB1  30AF               	movlw	low (STR_8| (0+32768))
  2012  0CB2  1283               	bcf	3,5	;RP0=0, select bank0
  2013  0CB3  1303               	bcf	3,6	;RP1=0, select bank0
  2014  0CB4  00B4               	movwf	sprintf@f
  2015  0CB5  3090               	movlw	high (STR_8| (0+32768))
  2016  0CB6  2CC0               	goto	L1
  2017  0CB7                     l3101:	
  2018                           ;time_scheduler.h: 150: }
  2019                           
  2020                           
  2021                           ;time_scheduler.h: 151: else if (key == 0b00001101)
  2022  0CB7  0877               	movf	_key,w
  2023  0CB8  3A0D               	xorlw	13
  2024  0CB9  1D03               	skipz
  2025  0CBA  2CD2               	goto	l175
  2026                           
  2027                           ;time_scheduler.h: 152: {
  2028                           ;time_scheduler.h: 153: sprintf(debugInfo, "SET: %02d", savedMinutesStart);
  2029  0CBB  30C3               	movlw	low (STR_9| (0+32768))
  2030  0CBC  1283               	bcf	3,5	;RP0=0, select bank0
  2031  0CBD  1303               	bcf	3,6	;RP1=0, select bank0
  2032  0CBE  00B4               	movwf	sprintf@f
  2033  0CBF  3090               	movlw	high (STR_9| (0+32768))
  2034  0CC0                     L1:	
  2035  0CC0  00B5               	movwf	sprintf@f+1
  2036  0CC1  1683               	bsf	3,5	;RP0=1, select bank1
  2037  0CC2  1303               	bcf	3,6	;RP1=0, select bank1
  2038  0CC3  086E               	movf	_savedMinutesStart^(0+128),w	;volatile
  2039  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  2040  0CC5  1303               	bcf	3,6	;RP1=0, select bank0
  2041  0CC6  00CA               	movwf	??_setMinutesStart
  2042  0CC7  01CB               	clrf	??_setMinutesStart+1
  2043  0CC8  084A               	movf	??_setMinutesStart,w
  2044  0CC9  00B6               	movwf	?_sprintf+2
  2045  0CCA  084B               	movf	??_setMinutesStart+1,w
  2046  0CCB  00B7               	movwf	?_sprintf+3
  2047  0CCC  30E2               	movlw	_debugInfo& (0+255)
  2048  0CCD  120A  118A  23F8  120A  158A  	fcall	_sprintf
  2049  0CD2                     l175:	
  2050                           
  2051                           ;time_scheduler.h: 154: }
  2052                           ;time_scheduler.h: 156: printToLCD(debugInfo);
  2053  0CD2  30E2               	movlw	_debugInfo& (0+255)
  2054  0CD3  1283               	bcf	3,5	;RP0=0, select bank0
  2055  0CD4  1303               	bcf	3,6	;RP1=0, select bank0
  2056  0CD5  00A2               	movwf	printToLCD@str
  2057  0CD6  3000               	movlw	0
  2058  0CD7  00A3               	movwf	printToLCD@str+1
  2059  0CD8  160A  118A  260E  120A  158A  	fcall	_printToLCD
  2060                           
  2061                           ;time_scheduler.h: 157: lastKeyState = key;
  2062  0CDD  0877               	movf	_key,w
  2063  0CDE  1283               	bcf	3,5	;RP0=0, select bank0
  2064  0CDF  1303               	bcf	3,6	;RP1=0, select bank0
  2065  0CE0  00CA               	movwf	??_setMinutesStart
  2066  0CE1  084A               	movf	??_setMinutesStart,w
  2067  0CE2  00FB               	movwf	_lastKeyState
  2068  0CE3                     l3109:	
  2069                           ;time_scheduler.h: 159: while ((PORTB & 0x08) != 0)
  2070                           
  2071  0CE3  1283               	bcf	3,5	;RP0=0, select bank0
  2072  0CE4  1303               	bcf	3,6	;RP1=0, select bank0
  2073  0CE5  1D86               	btfss	6,3	;volatile
  2074  0CE6  0008               	return
  2075                           
  2076                           ;time_scheduler.h: 160: {
  2077                           ;time_scheduler.h: 161: _delay((unsigned long)((10)*(4000000/4000.0)));
  2078  0CE7  300D               	movlw	13
  2079  0CE8  00CB               	movwf	??_setMinutesStart+1
  2080  0CE9  30FB               	movlw	251
  2081  0CEA  00CA               	movwf	??_setMinutesStart
  2082  0CEB                     u4737:	
  2083  0CEB  0BCA               	decfsz	??_setMinutesStart,f
  2084  0CEC  2CEB               	goto	u4737
  2085  0CED  0BCB               	decfsz	??_setMinutesStart+1,f
  2086  0CEE  2CEB               	goto	u4737
  2087  0CEF  2CF0               	nop2
  2088  0CF0  2CE3               	goto	l3109
  2089  0CF1                     l3111:	
  2090                           ;time_scheduler.h: 162: }
  2091                           ;time_scheduler.h: 163: }
  2092                           
  2093                           
  2094                           ;time_scheduler.h: 164: else if (!keyValid)
  2095  0CF1  08F8               	movf	_keyValid,f
  2096  0CF2  1D03               	skipz
  2097  0CF3  0008               	return
  2098                           
  2099                           ;time_scheduler.h: 165: {
  2100                           ;time_scheduler.h: 166: lastKeyState = 0xFF;
  2101  0CF4  30FF               	movlw	255
  2102  0CF5  1283               	bcf	3,5	;RP0=0, select bank0
  2103  0CF6  1303               	bcf	3,6	;RP1=0, select bank0
  2104  0CF7  00CA               	movwf	??_setMinutesStart
  2105  0CF8  084A               	movf	??_setMinutesStart,w
  2106  0CF9  00FB               	movwf	_lastKeyState
  2107  0CFA  0008               	return
  2108  0CFB                     __end_of_setMinutesStart:	
  2109                           
  2110                           	psect	text3
  2111  0B7B                     __ptext3:	
  2112 ;; *************** function _setMinutesEnd *****************
  2113 ;; Defined at:
  2114 ;;		line 170 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedu
      +ler.h"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;		None
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;		None
  2119 ;; Return value:  Size  Location     Type
  2120 ;;		None               void
  2121 ;; Registers used:
  2122 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2128 ;;      Params:         0       0       0       0       0
  2129 ;;      Locals:         0       0       0       0       0
  2130 ;;      Temps:          0       2       0       0       0
  2131 ;;      Totals:         0       2       0       0       0
  2132 ;;Total ram usage:        2 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; Hardware stack levels required when called:    4
  2135 ;; This function calls:
  2136 ;;		___awmod
  2137 ;;		_printToLCD
  2138 ;;		_sprintf
  2139 ;; This function is called by:
  2140 ;;		_updateState
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           
  2145                           ;psect for function _setMinutesEnd
  2146  0B7B                     _setMinutesEnd:	
  2147                           
  2148                           ;time_scheduler.h: 172: keyValid = (PORTB & 0x08) >> 3;
  2149                           
  2150                           ;incstack = 0
  2151                           ; Regs used in _setMinutesEnd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2152  0B7B  1283               	bcf	3,5	;RP0=0, select bank0
  2153  0B7C  1303               	bcf	3,6	;RP1=0, select bank0
  2154  0B7D  0806               	movf	6,w	;volatile
  2155  0B7E  00CA               	movwf	??_setMinutesEnd
  2156  0B7F  3003               	movlw	3
  2157  0B80                     u4405:	
  2158  0B80  1003               	clrc
  2159  0B81  0CCA               	rrf	??_setMinutesEnd,f
  2160  0B82  3EFF               	addlw	-1
  2161  0B83  1D03               	skipz
  2162  0B84  2B80               	goto	u4405
  2163  0B85  084A               	movf	??_setMinutesEnd,w
  2164  0B86  3901               	andlw	1
  2165  0B87  00CB               	movwf	??_setMinutesEnd+1
  2166  0B88  084B               	movf	??_setMinutesEnd+1,w
  2167  0B89  00F8               	movwf	_keyValid
  2168                           
  2169                           ;time_scheduler.h: 173: key = (PORTB & 0xF0) >> 4;
  2170  0B8A  0806               	movf	6,w	;volatile
  2171  0B8B  00CA               	movwf	??_setMinutesEnd
  2172  0B8C  3004               	movlw	4
  2173  0B8D                     u4415:	
  2174  0B8D  1003               	clrc
  2175  0B8E  0CCA               	rrf	??_setMinutesEnd,f
  2176  0B8F  3EFF               	addlw	-1
  2177  0B90  1D03               	skipz
  2178  0B91  2B8D               	goto	u4415
  2179  0B92  084A               	movf	??_setMinutesEnd,w
  2180  0B93  390F               	andlw	15
  2181  0B94  00CB               	movwf	??_setMinutesEnd+1
  2182  0B95  084B               	movf	??_setMinutesEnd+1,w
  2183  0B96  00F7               	movwf	_key
  2184                           
  2185                           ;time_scheduler.h: 175: _delay((unsigned long)((50)*(4000000/4000.0)));
  2186  0B97  3041               	movlw	65
  2187  0B98  00CB               	movwf	??_setMinutesEnd+1
  2188  0B99  30EE               	movlw	238
  2189  0B9A  00CA               	movwf	??_setMinutesEnd
  2190  0B9B                     u4747:	
  2191  0B9B  0BCA               	decfsz	??_setMinutesEnd,f
  2192  0B9C  2B9B               	goto	u4747
  2193  0B9D  0BCB               	decfsz	??_setMinutesEnd+1,f
  2194  0B9E  2B9B               	goto	u4747
  2195  0B9F  0000               	nop
  2196                           
  2197                           ;time_scheduler.h: 177: if (keyValid && key != lastKeyState)
  2198  0BA0  0878               	movf	_keyValid,w
  2199  0BA1  1903               	btfsc	3,2
  2200  0BA2  2C31               	goto	l3145
  2201  0BA3  0877               	movf	_key,w
  2202  0BA4  067B               	xorwf	_lastKeyState,w
  2203  0BA5  1903               	skipnz
  2204  0BA6  2C31               	goto	l3145
  2205                           
  2206                           ;time_scheduler.h: 178: {
  2207                           ;time_scheduler.h: 179: if (key == 0b00001100)
  2208  0BA7  0877               	movf	_key,w
  2209  0BA8  3A0C               	xorlw	12
  2210  0BA9  1D03               	skipz
  2211  0BAA  2BCF               	goto	l3129
  2212                           
  2213                           ;time_scheduler.h: 180: {
  2214                           ;time_scheduler.h: 181: savedMinutesEnd = (savedMinutesEnd + 5) % 60;
  2215  0BAB  303C               	movlw	60
  2216  0BAC  1283               	bcf	3,5	;RP0=0, select bank0
  2217  0BAD  1303               	bcf	3,6	;RP1=0, select bank0
  2218  0BAE  00A0               	movwf	___awmod@divisor
  2219  0BAF  3000               	movlw	0
  2220  0BB0  00A1               	movwf	___awmod@divisor+1
  2221  0BB1  1683               	bsf	3,5	;RP0=1, select bank1
  2222  0BB2  1303               	bcf	3,6	;RP1=0, select bank1
  2223  0BB3  086D               	movf	_savedMinutesEnd^(0+128),w	;volatile
  2224  0BB4  3E05               	addlw	5
  2225  0BB5  1283               	bcf	3,5	;RP0=0, select bank0
  2226  0BB6  1303               	bcf	3,6	;RP1=0, select bank0
  2227  0BB7  00A2               	movwf	___awmod@dividend
  2228  0BB8  3000               	movlw	0
  2229  0BB9  1803               	skipnc
  2230  0BBA  3001               	movlw	1
  2231  0BBB  00A3               	movwf	___awmod@dividend+1
  2232  0BBC  120A  158A  2003  120A  158A  	fcall	___awmod
  2233  0BC1  1283               	bcf	3,5	;RP0=0, select bank0
  2234  0BC2  1303               	bcf	3,6	;RP1=0, select bank0
  2235  0BC3  0820               	movf	?___awmod,w
  2236  0BC4  00CA               	movwf	??_setMinutesEnd
  2237  0BC5  084A               	movf	??_setMinutesEnd,w
  2238  0BC6  1683               	bsf	3,5	;RP0=1, select bank1
  2239  0BC7  1303               	bcf	3,6	;RP1=0, select bank1
  2240  0BC8  00ED               	movwf	_savedMinutesEnd^(0+128)	;volatile
  2241                           
  2242                           ;time_scheduler.h: 182: sprintf(debugInfo, "INC: %02d", savedMinutesEnd);
  2243  0BC9  30B9               	movlw	low (STR_7| (0+32768))
  2244  0BCA  1283               	bcf	3,5	;RP0=0, select bank0
  2245  0BCB  1303               	bcf	3,6	;RP1=0, select bank0
  2246  0BCC  00B4               	movwf	sprintf@f
  2247  0BCD  3090               	movlw	high (STR_7| (0+32768))
  2248  0BCE  2C00               	goto	L2
  2249  0BCF                     l3129:	
  2250                           ;time_scheduler.h: 183: }
  2251                           
  2252                           
  2253                           ;time_scheduler.h: 184: else if (key == 0b00001110)
  2254  0BCF  0877               	movf	_key,w
  2255  0BD0  3A0E               	xorlw	14
  2256  0BD1  1D03               	skipz
  2257  0BD2  2BF7               	goto	l3135
  2258                           
  2259                           ;time_scheduler.h: 185: {
  2260                           ;time_scheduler.h: 186: savedMinutesEnd = (savedMinutesEnd - 5 + 60) % 60;
  2261  0BD3  303C               	movlw	60
  2262  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  2263  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
  2264  0BD6  00A0               	movwf	___awmod@divisor
  2265  0BD7  3000               	movlw	0
  2266  0BD8  00A1               	movwf	___awmod@divisor+1
  2267  0BD9  1683               	bsf	3,5	;RP0=1, select bank1
  2268  0BDA  1303               	bcf	3,6	;RP1=0, select bank1
  2269  0BDB  086D               	movf	_savedMinutesEnd^(0+128),w	;volatile
  2270  0BDC  3E37               	addlw	55
  2271  0BDD  1283               	bcf	3,5	;RP0=0, select bank0
  2272  0BDE  1303               	bcf	3,6	;RP1=0, select bank0
  2273  0BDF  00A2               	movwf	___awmod@dividend
  2274  0BE0  3000               	movlw	0
  2275  0BE1  1803               	skipnc
  2276  0BE2  3001               	movlw	1
  2277  0BE3  00A3               	movwf	___awmod@dividend+1
  2278  0BE4  120A  158A  2003  120A  158A  	fcall	___awmod
  2279  0BE9  1283               	bcf	3,5	;RP0=0, select bank0
  2280  0BEA  1303               	bcf	3,6	;RP1=0, select bank0
  2281  0BEB  0820               	movf	?___awmod,w
  2282  0BEC  00CA               	movwf	??_setMinutesEnd
  2283  0BED  084A               	movf	??_setMinutesEnd,w
  2284  0BEE  1683               	bsf	3,5	;RP0=1, select bank1
  2285  0BEF  1303               	bcf	3,6	;RP1=0, select bank1
  2286  0BF0  00ED               	movwf	_savedMinutesEnd^(0+128)	;volatile
  2287                           
  2288                           ;time_scheduler.h: 187: sprintf(debugInfo, "DEC: %02d", savedMinutesEnd);
  2289  0BF1  30AF               	movlw	low (STR_8| (0+32768))
  2290  0BF2  1283               	bcf	3,5	;RP0=0, select bank0
  2291  0BF3  1303               	bcf	3,6	;RP1=0, select bank0
  2292  0BF4  00B4               	movwf	sprintf@f
  2293  0BF5  3090               	movlw	high (STR_8| (0+32768))
  2294  0BF6  2C00               	goto	L2
  2295  0BF7                     l3135:	
  2296                           ;time_scheduler.h: 188: }
  2297                           
  2298                           
  2299                           ;time_scheduler.h: 189: else if (key == 0b00001101)
  2300  0BF7  0877               	movf	_key,w
  2301  0BF8  3A0D               	xorlw	13
  2302  0BF9  1D03               	skipz
  2303  0BFA  2C12               	goto	l189
  2304                           
  2305                           ;time_scheduler.h: 190: {
  2306                           ;time_scheduler.h: 191: sprintf(debugInfo, "SET: %02d", savedMinutesEnd);
  2307  0BFB  30C3               	movlw	low (STR_9| (0+32768))
  2308  0BFC  1283               	bcf	3,5	;RP0=0, select bank0
  2309  0BFD  1303               	bcf	3,6	;RP1=0, select bank0
  2310  0BFE  00B4               	movwf	sprintf@f
  2311  0BFF  3090               	movlw	high (STR_9| (0+32768))
  2312  0C00                     L2:	
  2313  0C00  00B5               	movwf	sprintf@f+1
  2314  0C01  1683               	bsf	3,5	;RP0=1, select bank1
  2315  0C02  1303               	bcf	3,6	;RP1=0, select bank1
  2316  0C03  086D               	movf	_savedMinutesEnd^(0+128),w	;volatile
  2317  0C04  1283               	bcf	3,5	;RP0=0, select bank0
  2318  0C05  1303               	bcf	3,6	;RP1=0, select bank0
  2319  0C06  00CA               	movwf	??_setMinutesEnd
  2320  0C07  01CB               	clrf	??_setMinutesEnd+1
  2321  0C08  084A               	movf	??_setMinutesEnd,w
  2322  0C09  00B6               	movwf	?_sprintf+2
  2323  0C0A  084B               	movf	??_setMinutesEnd+1,w
  2324  0C0B  00B7               	movwf	?_sprintf+3
  2325  0C0C  30E2               	movlw	_debugInfo& (0+255)
  2326  0C0D  120A  118A  23F8  120A  158A  	fcall	_sprintf
  2327  0C12                     l189:	
  2328                           
  2329                           ;time_scheduler.h: 192: }
  2330                           ;time_scheduler.h: 194: printToLCD(debugInfo);
  2331  0C12  30E2               	movlw	_debugInfo& (0+255)
  2332  0C13  1283               	bcf	3,5	;RP0=0, select bank0
  2333  0C14  1303               	bcf	3,6	;RP1=0, select bank0
  2334  0C15  00A2               	movwf	printToLCD@str
  2335  0C16  3000               	movlw	0
  2336  0C17  00A3               	movwf	printToLCD@str+1
  2337  0C18  160A  118A  260E  120A  158A  	fcall	_printToLCD
  2338                           
  2339                           ;time_scheduler.h: 195: lastKeyState = key;
  2340  0C1D  0877               	movf	_key,w
  2341  0C1E  1283               	bcf	3,5	;RP0=0, select bank0
  2342  0C1F  1303               	bcf	3,6	;RP1=0, select bank0
  2343  0C20  00CA               	movwf	??_setMinutesEnd
  2344  0C21  084A               	movf	??_setMinutesEnd,w
  2345  0C22  00FB               	movwf	_lastKeyState
  2346  0C23                     l3143:	
  2347                           ;time_scheduler.h: 197: while ((PORTB & 0x08) != 0)
  2348                           
  2349  0C23  1283               	bcf	3,5	;RP0=0, select bank0
  2350  0C24  1303               	bcf	3,6	;RP1=0, select bank0
  2351  0C25  1D86               	btfss	6,3	;volatile
  2352  0C26  0008               	return
  2353                           
  2354                           ;time_scheduler.h: 198: {
  2355                           ;time_scheduler.h: 199: _delay((unsigned long)((10)*(4000000/4000.0)));
  2356  0C27  300D               	movlw	13
  2357  0C28  00CB               	movwf	??_setMinutesEnd+1
  2358  0C29  30FB               	movlw	251
  2359  0C2A  00CA               	movwf	??_setMinutesEnd
  2360  0C2B                     u4757:	
  2361  0C2B  0BCA               	decfsz	??_setMinutesEnd,f
  2362  0C2C  2C2B               	goto	u4757
  2363  0C2D  0BCB               	decfsz	??_setMinutesEnd+1,f
  2364  0C2E  2C2B               	goto	u4757
  2365  0C2F  2C30               	nop2
  2366  0C30  2C23               	goto	l3143
  2367  0C31                     l3145:	
  2368                           ;time_scheduler.h: 200: }
  2369                           ;time_scheduler.h: 201: }
  2370                           
  2371                           
  2372                           ;time_scheduler.h: 202: else if (!keyValid)
  2373  0C31  08F8               	movf	_keyValid,f
  2374  0C32  1D03               	skipz
  2375  0C33  0008               	return
  2376                           
  2377                           ;time_scheduler.h: 203: {
  2378                           ;time_scheduler.h: 204: lastKeyState = 0xFF;
  2379  0C34  30FF               	movlw	255
  2380  0C35  1283               	bcf	3,5	;RP0=0, select bank0
  2381  0C36  1303               	bcf	3,6	;RP1=0, select bank0
  2382  0C37  00CA               	movwf	??_setMinutesEnd
  2383  0C38  084A               	movf	??_setMinutesEnd,w
  2384  0C39  00FB               	movwf	_lastKeyState
  2385  0C3A  0008               	return
  2386  0C3B                     __end_of_setMinutesEnd:	
  2387                           
  2388                           	psect	text4
  2389  0ABB                     __ptext4:	
  2390 ;; *************** function _setHoursStart *****************
  2391 ;; Defined at:
  2392 ;;		line 55 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedul
      +er.h"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;		None
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;		None
  2397 ;; Return value:  Size  Location     Type
  2398 ;;		None               void
  2399 ;; Registers used:
  2400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2406 ;;      Params:         0       0       0       0       0
  2407 ;;      Locals:         0       0       0       0       0
  2408 ;;      Temps:          0       2       0       0       0
  2409 ;;      Totals:         0       2       0       0       0
  2410 ;;Total ram usage:        2 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    4
  2413 ;; This function calls:
  2414 ;;		___awmod
  2415 ;;		_printToLCD
  2416 ;;		_sprintf
  2417 ;; This function is called by:
  2418 ;;		_updateState
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           
  2423                           ;psect for function _setHoursStart
  2424  0ABB                     _setHoursStart:	
  2425                           
  2426                           ;time_scheduler.h: 57: keyValid = (PORTB & 0x08) >> 3;
  2427                           
  2428                           ;incstack = 0
  2429                           ; Regs used in _setHoursStart: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2430  0ABB  1283               	bcf	3,5	;RP0=0, select bank0
  2431  0ABC  1303               	bcf	3,6	;RP1=0, select bank0
  2432  0ABD  0806               	movf	6,w	;volatile
  2433  0ABE  00CA               	movwf	??_setHoursStart
  2434  0ABF  3003               	movlw	3
  2435  0AC0                     u4135:	
  2436  0AC0  1003               	clrc
  2437  0AC1  0CCA               	rrf	??_setHoursStart,f
  2438  0AC2  3EFF               	addlw	-1
  2439  0AC3  1D03               	skipz
  2440  0AC4  2AC0               	goto	u4135
  2441  0AC5  084A               	movf	??_setHoursStart,w
  2442  0AC6  3901               	andlw	1
  2443  0AC7  00CB               	movwf	??_setHoursStart+1
  2444  0AC8  084B               	movf	??_setHoursStart+1,w
  2445  0AC9  00F8               	movwf	_keyValid
  2446                           
  2447                           ;time_scheduler.h: 58: key = (PORTB & 0xF0) >> 4;
  2448  0ACA  0806               	movf	6,w	;volatile
  2449  0ACB  00CA               	movwf	??_setHoursStart
  2450  0ACC  3004               	movlw	4
  2451  0ACD                     u4145:	
  2452  0ACD  1003               	clrc
  2453  0ACE  0CCA               	rrf	??_setHoursStart,f
  2454  0ACF  3EFF               	addlw	-1
  2455  0AD0  1D03               	skipz
  2456  0AD1  2ACD               	goto	u4145
  2457  0AD2  084A               	movf	??_setHoursStart,w
  2458  0AD3  390F               	andlw	15
  2459  0AD4  00CB               	movwf	??_setHoursStart+1
  2460  0AD5  084B               	movf	??_setHoursStart+1,w
  2461  0AD6  00F7               	movwf	_key
  2462                           
  2463                           ;time_scheduler.h: 60: _delay((unsigned long)((50)*(4000000/4000.0)));
  2464  0AD7  3041               	movlw	65
  2465  0AD8  00CB               	movwf	??_setHoursStart+1
  2466  0AD9  30EE               	movlw	238
  2467  0ADA  00CA               	movwf	??_setHoursStart
  2468  0ADB                     u4767:	
  2469  0ADB  0BCA               	decfsz	??_setHoursStart,f
  2470  0ADC  2ADB               	goto	u4767
  2471  0ADD  0BCB               	decfsz	??_setHoursStart+1,f
  2472  0ADE  2ADB               	goto	u4767
  2473  0ADF  0000               	nop
  2474                           
  2475                           ;time_scheduler.h: 62: if (keyValid && key != lastKeyState)
  2476  0AE0  0878               	movf	_keyValid,w
  2477  0AE1  1903               	btfsc	3,2
  2478  0AE2  2B71               	goto	l3043
  2479  0AE3  0877               	movf	_key,w
  2480  0AE4  067B               	xorwf	_lastKeyState,w
  2481  0AE5  1903               	skipnz
  2482  0AE6  2B71               	goto	l3043
  2483                           
  2484                           ;time_scheduler.h: 63: {
  2485                           ;time_scheduler.h: 64: if (key == 0b00001100)
  2486  0AE7  0877               	movf	_key,w
  2487  0AE8  3A0C               	xorlw	12
  2488  0AE9  1D03               	skipz
  2489  0AEA  2B0F               	goto	l3027
  2490                           
  2491                           ;time_scheduler.h: 65: {
  2492                           ;time_scheduler.h: 66: savedHoursStart = (savedHoursStart + 1) % 24;
  2493  0AEB  3018               	movlw	24
  2494  0AEC  1283               	bcf	3,5	;RP0=0, select bank0
  2495  0AED  1303               	bcf	3,6	;RP1=0, select bank0
  2496  0AEE  00A0               	movwf	___awmod@divisor
  2497  0AEF  3000               	movlw	0
  2498  0AF0  00A1               	movwf	___awmod@divisor+1
  2499  0AF1  1683               	bsf	3,5	;RP0=1, select bank1
  2500  0AF2  1303               	bcf	3,6	;RP1=0, select bank1
  2501  0AF3  086C               	movf	_savedHoursStart^(0+128),w	;volatile
  2502  0AF4  3E01               	addlw	1
  2503  0AF5  1283               	bcf	3,5	;RP0=0, select bank0
  2504  0AF6  1303               	bcf	3,6	;RP1=0, select bank0
  2505  0AF7  00A2               	movwf	___awmod@dividend
  2506  0AF8  3000               	movlw	0
  2507  0AF9  1803               	skipnc
  2508  0AFA  3001               	movlw	1
  2509  0AFB  00A3               	movwf	___awmod@dividend+1
  2510  0AFC  120A  158A  2003  120A  158A  	fcall	___awmod
  2511  0B01  1283               	bcf	3,5	;RP0=0, select bank0
  2512  0B02  1303               	bcf	3,6	;RP1=0, select bank0
  2513  0B03  0820               	movf	?___awmod,w
  2514  0B04  00CA               	movwf	??_setHoursStart
  2515  0B05  084A               	movf	??_setHoursStart,w
  2516  0B06  1683               	bsf	3,5	;RP0=1, select bank1
  2517  0B07  1303               	bcf	3,6	;RP1=0, select bank1
  2518  0B08  00EC               	movwf	_savedHoursStart^(0+128)	;volatile
  2519                           
  2520                           ;time_scheduler.h: 67: sprintf(debugInfo, "INC: %02d", savedHoursStart);
  2521  0B09  30B9               	movlw	low (STR_7| (0+32768))
  2522  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  2523  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  2524  0B0C  00B4               	movwf	sprintf@f
  2525  0B0D  3090               	movlw	high (STR_7| (0+32768))
  2526  0B0E  2B40               	goto	L3
  2527  0B0F                     l3027:	
  2528                           ;time_scheduler.h: 68: }
  2529                           
  2530                           
  2531                           ;time_scheduler.h: 69: else if (key == 0b00001110)
  2532  0B0F  0877               	movf	_key,w
  2533  0B10  3A0E               	xorlw	14
  2534  0B11  1D03               	skipz
  2535  0B12  2B37               	goto	l3033
  2536                           
  2537                           ;time_scheduler.h: 70: {
  2538                           ;time_scheduler.h: 71: savedHoursStart = (savedHoursStart - 1 + 24) % 24;
  2539  0B13  3018               	movlw	24
  2540  0B14  1283               	bcf	3,5	;RP0=0, select bank0
  2541  0B15  1303               	bcf	3,6	;RP1=0, select bank0
  2542  0B16  00A0               	movwf	___awmod@divisor
  2543  0B17  3000               	movlw	0
  2544  0B18  00A1               	movwf	___awmod@divisor+1
  2545  0B19  1683               	bsf	3,5	;RP0=1, select bank1
  2546  0B1A  1303               	bcf	3,6	;RP1=0, select bank1
  2547  0B1B  086C               	movf	_savedHoursStart^(0+128),w	;volatile
  2548  0B1C  3E17               	addlw	23
  2549  0B1D  1283               	bcf	3,5	;RP0=0, select bank0
  2550  0B1E  1303               	bcf	3,6	;RP1=0, select bank0
  2551  0B1F  00A2               	movwf	___awmod@dividend
  2552  0B20  3000               	movlw	0
  2553  0B21  1803               	skipnc
  2554  0B22  3001               	movlw	1
  2555  0B23  00A3               	movwf	___awmod@dividend+1
  2556  0B24  120A  158A  2003  120A  158A  	fcall	___awmod
  2557  0B29  1283               	bcf	3,5	;RP0=0, select bank0
  2558  0B2A  1303               	bcf	3,6	;RP1=0, select bank0
  2559  0B2B  0820               	movf	?___awmod,w
  2560  0B2C  00CA               	movwf	??_setHoursStart
  2561  0B2D  084A               	movf	??_setHoursStart,w
  2562  0B2E  1683               	bsf	3,5	;RP0=1, select bank1
  2563  0B2F  1303               	bcf	3,6	;RP1=0, select bank1
  2564  0B30  00EC               	movwf	_savedHoursStart^(0+128)	;volatile
  2565                           
  2566                           ;time_scheduler.h: 72: sprintf(debugInfo, "DEC: %02d", savedHoursStart);
  2567  0B31  30AF               	movlw	low (STR_8| (0+32768))
  2568  0B32  1283               	bcf	3,5	;RP0=0, select bank0
  2569  0B33  1303               	bcf	3,6	;RP1=0, select bank0
  2570  0B34  00B4               	movwf	sprintf@f
  2571  0B35  3090               	movlw	high (STR_8| (0+32768))
  2572  0B36  2B40               	goto	L3
  2573  0B37                     l3033:	
  2574                           ;time_scheduler.h: 73: }
  2575                           
  2576                           
  2577                           ;time_scheduler.h: 74: else if (key == 0b00001101)
  2578  0B37  0877               	movf	_key,w
  2579  0B38  3A0D               	xorlw	13
  2580  0B39  1D03               	skipz
  2581  0B3A  2B52               	goto	l147
  2582                           
  2583                           ;time_scheduler.h: 75: {
  2584                           ;time_scheduler.h: 76: sprintf(debugInfo, "SET: %02d", savedHoursStart);
  2585  0B3B  30C3               	movlw	low (STR_9| (0+32768))
  2586  0B3C  1283               	bcf	3,5	;RP0=0, select bank0
  2587  0B3D  1303               	bcf	3,6	;RP1=0, select bank0
  2588  0B3E  00B4               	movwf	sprintf@f
  2589  0B3F  3090               	movlw	high (STR_9| (0+32768))
  2590  0B40                     L3:	
  2591  0B40  00B5               	movwf	sprintf@f+1
  2592  0B41  1683               	bsf	3,5	;RP0=1, select bank1
  2593  0B42  1303               	bcf	3,6	;RP1=0, select bank1
  2594  0B43  086C               	movf	_savedHoursStart^(0+128),w	;volatile
  2595  0B44  1283               	bcf	3,5	;RP0=0, select bank0
  2596  0B45  1303               	bcf	3,6	;RP1=0, select bank0
  2597  0B46  00CA               	movwf	??_setHoursStart
  2598  0B47  01CB               	clrf	??_setHoursStart+1
  2599  0B48  084A               	movf	??_setHoursStart,w
  2600  0B49  00B6               	movwf	?_sprintf+2
  2601  0B4A  084B               	movf	??_setHoursStart+1,w
  2602  0B4B  00B7               	movwf	?_sprintf+3
  2603  0B4C  30E2               	movlw	_debugInfo& (0+255)
  2604  0B4D  120A  118A  23F8  120A  158A  	fcall	_sprintf
  2605  0B52                     l147:	
  2606                           
  2607                           ;time_scheduler.h: 78: }
  2608                           ;time_scheduler.h: 80: printToLCD(debugInfo);
  2609  0B52  30E2               	movlw	_debugInfo& (0+255)
  2610  0B53  1283               	bcf	3,5	;RP0=0, select bank0
  2611  0B54  1303               	bcf	3,6	;RP1=0, select bank0
  2612  0B55  00A2               	movwf	printToLCD@str
  2613  0B56  3000               	movlw	0
  2614  0B57  00A3               	movwf	printToLCD@str+1
  2615  0B58  160A  118A  260E  120A  158A  	fcall	_printToLCD
  2616                           
  2617                           ;time_scheduler.h: 81: lastKeyState = key;
  2618  0B5D  0877               	movf	_key,w
  2619  0B5E  1283               	bcf	3,5	;RP0=0, select bank0
  2620  0B5F  1303               	bcf	3,6	;RP1=0, select bank0
  2621  0B60  00CA               	movwf	??_setHoursStart
  2622  0B61  084A               	movf	??_setHoursStart,w
  2623  0B62  00FB               	movwf	_lastKeyState
  2624  0B63                     l3041:	
  2625                           ;time_scheduler.h: 83: while ((PORTB & 0x08) != 0)
  2626                           
  2627  0B63  1283               	bcf	3,5	;RP0=0, select bank0
  2628  0B64  1303               	bcf	3,6	;RP1=0, select bank0
  2629  0B65  1D86               	btfss	6,3	;volatile
  2630  0B66  0008               	return
  2631                           
  2632                           ;time_scheduler.h: 84: {
  2633                           ;time_scheduler.h: 85: _delay((unsigned long)((10)*(4000000/4000.0)));
  2634  0B67  300D               	movlw	13
  2635  0B68  00CB               	movwf	??_setHoursStart+1
  2636  0B69  30FB               	movlw	251
  2637  0B6A  00CA               	movwf	??_setHoursStart
  2638  0B6B                     u4777:	
  2639  0B6B  0BCA               	decfsz	??_setHoursStart,f
  2640  0B6C  2B6B               	goto	u4777
  2641  0B6D  0BCB               	decfsz	??_setHoursStart+1,f
  2642  0B6E  2B6B               	goto	u4777
  2643  0B6F  2B70               	nop2
  2644  0B70  2B63               	goto	l3041
  2645  0B71                     l3043:	
  2646                           ;time_scheduler.h: 86: }
  2647                           ;time_scheduler.h: 87: }
  2648                           
  2649                           
  2650                           ;time_scheduler.h: 88: else if (!keyValid)
  2651  0B71  08F8               	movf	_keyValid,f
  2652  0B72  1D03               	skipz
  2653  0B73  0008               	return
  2654                           
  2655                           ;time_scheduler.h: 89: {
  2656                           ;time_scheduler.h: 90: lastKeyState = 0xFF;
  2657  0B74  30FF               	movlw	255
  2658  0B75  1283               	bcf	3,5	;RP0=0, select bank0
  2659  0B76  1303               	bcf	3,6	;RP1=0, select bank0
  2660  0B77  00CA               	movwf	??_setHoursStart
  2661  0B78  084A               	movf	??_setHoursStart,w
  2662  0B79  00FB               	movwf	_lastKeyState
  2663  0B7A  0008               	return
  2664  0B7B                     __end_of_setHoursStart:	
  2665                           
  2666                           	psect	text5
  2667  0957                     __ptext5:	
  2668 ;; *************** function _setHoursEnd *****************
  2669 ;; Defined at:
  2670 ;;		line 94 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedul
      +er.h"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;		None
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;		None
  2675 ;; Return value:  Size  Location     Type
  2676 ;;		None               void
  2677 ;; Registers used:
  2678 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2679 ;; Tracked objects:
  2680 ;;		On entry : 0/0
  2681 ;;		On exit  : 0/0
  2682 ;;		Unchanged: 0/0
  2683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2684 ;;      Params:         0       0       0       0       0
  2685 ;;      Locals:         0       0       0       0       0
  2686 ;;      Temps:          0       2       0       0       0
  2687 ;;      Totals:         0       2       0       0       0
  2688 ;;Total ram usage:        2 bytes
  2689 ;; Hardware stack levels used:    1
  2690 ;; Hardware stack levels required when called:    4
  2691 ;; This function calls:
  2692 ;;		___awmod
  2693 ;;		_printToLCD
  2694 ;;		_sprintf
  2695 ;; This function is called by:
  2696 ;;		_updateState
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           
  2701                           ;psect for function _setHoursEnd
  2702  0957                     _setHoursEnd:	
  2703                           
  2704                           ;time_scheduler.h: 96: keyValid = (PORTB & 0x08) >> 3;
  2705                           
  2706                           ;incstack = 0
  2707                           ; Regs used in _setHoursEnd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2708  0957  1283               	bcf	3,5	;RP0=0, select bank0
  2709  0958  1303               	bcf	3,6	;RP1=0, select bank0
  2710  0959  0806               	movf	6,w	;volatile
  2711  095A  00CA               	movwf	??_setHoursEnd
  2712  095B  3003               	movlw	3
  2713  095C                     u4225:	
  2714  095C  1003               	clrc
  2715  095D  0CCA               	rrf	??_setHoursEnd,f
  2716  095E  3EFF               	addlw	-1
  2717  095F  1D03               	skipz
  2718  0960  295C               	goto	u4225
  2719  0961  084A               	movf	??_setHoursEnd,w
  2720  0962  3901               	andlw	1
  2721  0963  00CB               	movwf	??_setHoursEnd+1
  2722  0964  084B               	movf	??_setHoursEnd+1,w
  2723  0965  00F8               	movwf	_keyValid
  2724                           
  2725                           ;time_scheduler.h: 97: key = (PORTB & 0xF0) >> 4;
  2726  0966  0806               	movf	6,w	;volatile
  2727  0967  00CA               	movwf	??_setHoursEnd
  2728  0968  3004               	movlw	4
  2729  0969                     u4235:	
  2730  0969  1003               	clrc
  2731  096A  0CCA               	rrf	??_setHoursEnd,f
  2732  096B  3EFF               	addlw	-1
  2733  096C  1D03               	skipz
  2734  096D  2969               	goto	u4235
  2735  096E  084A               	movf	??_setHoursEnd,w
  2736  096F  390F               	andlw	15
  2737  0970  00CB               	movwf	??_setHoursEnd+1
  2738  0971  084B               	movf	??_setHoursEnd+1,w
  2739  0972  00F7               	movwf	_key
  2740                           
  2741                           ;time_scheduler.h: 99: _delay((unsigned long)((50)*(4000000/4000.0)));
  2742  0973  3041               	movlw	65
  2743  0974  00CB               	movwf	??_setHoursEnd+1
  2744  0975  30EE               	movlw	238
  2745  0976  00CA               	movwf	??_setHoursEnd
  2746  0977                     u4787:	
  2747  0977  0BCA               	decfsz	??_setHoursEnd,f
  2748  0978  2977               	goto	u4787
  2749  0979  0BCB               	decfsz	??_setHoursEnd+1,f
  2750  097A  2977               	goto	u4787
  2751  097B  0000               	nop
  2752                           
  2753                           ;time_scheduler.h: 101: if (keyValid && key != lastKeyState)
  2754  097C  0878               	movf	_keyValid,w
  2755  097D  1903               	btfsc	3,2
  2756  097E  29F9               	goto	l3077
  2757  097F  0877               	movf	_key,w
  2758  0980  067B               	xorwf	_lastKeyState,w
  2759  0981  1903               	skipnz
  2760  0982  29F9               	goto	l3077
  2761                           
  2762                           ;time_scheduler.h: 102: {
  2763                           ;time_scheduler.h: 103: if (key == 0b00001100)
  2764  0983  0877               	movf	_key,w
  2765  0984  3A0C               	xorlw	12
  2766  0985  1D03               	skipz
  2767  0986  29A3               	goto	l3061
  2768                           
  2769                           ;time_scheduler.h: 104: {
  2770                           ;time_scheduler.h: 105: savedHoursEnd = (savedHoursEnd + 1) % 24;
  2771  0987  3018               	movlw	24
  2772  0988  1283               	bcf	3,5	;RP0=0, select bank0
  2773  0989  1303               	bcf	3,6	;RP1=0, select bank0
  2774  098A  00A0               	movwf	___awmod@divisor
  2775  098B  3000               	movlw	0
  2776  098C  00A1               	movwf	___awmod@divisor+1
  2777  098D  086F               	movf	_savedHoursEnd,w	;volatile
  2778  098E  3E01               	addlw	1
  2779  098F  00A2               	movwf	___awmod@dividend
  2780  0990  3000               	movlw	0
  2781  0991  1803               	skipnc
  2782  0992  3001               	movlw	1
  2783  0993  00A3               	movwf	___awmod@dividend+1
  2784  0994  120A  158A  2003  120A  158A  	fcall	___awmod
  2785  0999  1283               	bcf	3,5	;RP0=0, select bank0
  2786  099A  1303               	bcf	3,6	;RP1=0, select bank0
  2787  099B  0820               	movf	?___awmod,w
  2788  099C  00CA               	movwf	??_setHoursEnd
  2789  099D  084A               	movf	??_setHoursEnd,w
  2790  099E  00EF               	movwf	_savedHoursEnd	;volatile
  2791                           
  2792                           ;time_scheduler.h: 106: sprintf(debugInfo, "INC: %02d", savedHoursEnd);
  2793  099F  30B9               	movlw	low (STR_7| (0+32768))
  2794  09A0  00B4               	movwf	sprintf@f
  2795  09A1  3090               	movlw	high (STR_7| (0+32768))
  2796  09A2  29CC               	goto	L4
  2797  09A3                     l3061:	
  2798                           ;time_scheduler.h: 107: }
  2799                           
  2800                           
  2801                           ;time_scheduler.h: 108: else if (key == 0b00001110)
  2802  09A3  0877               	movf	_key,w
  2803  09A4  3A0E               	xorlw	14
  2804  09A5  1D03               	skipz
  2805  09A6  29C3               	goto	l3067
  2806                           
  2807                           ;time_scheduler.h: 109: {
  2808                           ;time_scheduler.h: 110: savedHoursEnd = (savedHoursEnd - 1 + 24) % 24;
  2809  09A7  3018               	movlw	24
  2810  09A8  1283               	bcf	3,5	;RP0=0, select bank0
  2811  09A9  1303               	bcf	3,6	;RP1=0, select bank0
  2812  09AA  00A0               	movwf	___awmod@divisor
  2813  09AB  3000               	movlw	0
  2814  09AC  00A1               	movwf	___awmod@divisor+1
  2815  09AD  086F               	movf	_savedHoursEnd,w	;volatile
  2816  09AE  3E17               	addlw	23
  2817  09AF  00A2               	movwf	___awmod@dividend
  2818  09B0  3000               	movlw	0
  2819  09B1  1803               	skipnc
  2820  09B2  3001               	movlw	1
  2821  09B3  00A3               	movwf	___awmod@dividend+1
  2822  09B4  120A  158A  2003  120A  158A  	fcall	___awmod
  2823  09B9  1283               	bcf	3,5	;RP0=0, select bank0
  2824  09BA  1303               	bcf	3,6	;RP1=0, select bank0
  2825  09BB  0820               	movf	?___awmod,w
  2826  09BC  00CA               	movwf	??_setHoursEnd
  2827  09BD  084A               	movf	??_setHoursEnd,w
  2828  09BE  00EF               	movwf	_savedHoursEnd	;volatile
  2829                           
  2830                           ;time_scheduler.h: 111: sprintf(debugInfo, "DEC: %02d", savedHoursEnd);
  2831  09BF  30AF               	movlw	low (STR_8| (0+32768))
  2832  09C0  00B4               	movwf	sprintf@f
  2833  09C1  3090               	movlw	high (STR_8| (0+32768))
  2834  09C2  29CC               	goto	L4
  2835  09C3                     l3067:	
  2836                           ;time_scheduler.h: 112: }
  2837                           
  2838                           
  2839                           ;time_scheduler.h: 113: else if (key == 0b00001101)
  2840  09C3  0877               	movf	_key,w
  2841  09C4  3A0D               	xorlw	13
  2842  09C5  1D03               	skipz
  2843  09C6  29DA               	goto	l161
  2844                           
  2845                           ;time_scheduler.h: 114: {
  2846                           ;time_scheduler.h: 115: sprintf(debugInfo, "SET: %02d", savedHoursEnd);
  2847  09C7  30C3               	movlw	low (STR_9| (0+32768))
  2848  09C8  1283               	bcf	3,5	;RP0=0, select bank0
  2849  09C9  1303               	bcf	3,6	;RP1=0, select bank0
  2850  09CA  00B4               	movwf	sprintf@f
  2851  09CB  3090               	movlw	high (STR_9| (0+32768))
  2852  09CC                     L4:	
  2853  09CC  00B5               	movwf	sprintf@f+1
  2854  09CD  086F               	movf	_savedHoursEnd,w	;volatile
  2855  09CE  00CA               	movwf	??_setHoursEnd
  2856  09CF  01CB               	clrf	??_setHoursEnd+1
  2857  09D0  084A               	movf	??_setHoursEnd,w
  2858  09D1  00B6               	movwf	?_sprintf+2
  2859  09D2  084B               	movf	??_setHoursEnd+1,w
  2860  09D3  00B7               	movwf	?_sprintf+3
  2861  09D4  30E2               	movlw	_debugInfo& (0+255)
  2862  09D5  120A  118A  23F8  120A  158A  	fcall	_sprintf
  2863  09DA                     l161:	
  2864                           
  2865                           ;time_scheduler.h: 116: }
  2866                           ;time_scheduler.h: 118: printToLCD(debugInfo);
  2867  09DA  30E2               	movlw	_debugInfo& (0+255)
  2868  09DB  1283               	bcf	3,5	;RP0=0, select bank0
  2869  09DC  1303               	bcf	3,6	;RP1=0, select bank0
  2870  09DD  00A2               	movwf	printToLCD@str
  2871  09DE  3000               	movlw	0
  2872  09DF  00A3               	movwf	printToLCD@str+1
  2873  09E0  160A  118A  260E  120A  158A  	fcall	_printToLCD
  2874                           
  2875                           ;time_scheduler.h: 119: lastKeyState = key;
  2876  09E5  0877               	movf	_key,w
  2877  09E6  1283               	bcf	3,5	;RP0=0, select bank0
  2878  09E7  1303               	bcf	3,6	;RP1=0, select bank0
  2879  09E8  00CA               	movwf	??_setHoursEnd
  2880  09E9  084A               	movf	??_setHoursEnd,w
  2881  09EA  00FB               	movwf	_lastKeyState
  2882  09EB                     l3075:	
  2883                           ;time_scheduler.h: 121: while ((PORTB & 0x08) != 0)
  2884                           
  2885  09EB  1283               	bcf	3,5	;RP0=0, select bank0
  2886  09EC  1303               	bcf	3,6	;RP1=0, select bank0
  2887  09ED  1D86               	btfss	6,3	;volatile
  2888  09EE  0008               	return
  2889                           
  2890                           ;time_scheduler.h: 122: {
  2891                           ;time_scheduler.h: 123: _delay((unsigned long)((10)*(4000000/4000.0)));
  2892  09EF  300D               	movlw	13
  2893  09F0  00CB               	movwf	??_setHoursEnd+1
  2894  09F1  30FB               	movlw	251
  2895  09F2  00CA               	movwf	??_setHoursEnd
  2896  09F3                     u4797:	
  2897  09F3  0BCA               	decfsz	??_setHoursEnd,f
  2898  09F4  29F3               	goto	u4797
  2899  09F5  0BCB               	decfsz	??_setHoursEnd+1,f
  2900  09F6  29F3               	goto	u4797
  2901  09F7  29F8               	nop2
  2902  09F8  29EB               	goto	l3075
  2903  09F9                     l3077:	
  2904                           ;time_scheduler.h: 124: }
  2905                           ;time_scheduler.h: 125: }
  2906                           
  2907                           
  2908                           ;time_scheduler.h: 126: else if (!keyValid)
  2909  09F9  08F8               	movf	_keyValid,f
  2910  09FA  1D03               	skipz
  2911  09FB  0008               	return
  2912                           
  2913                           ;time_scheduler.h: 127: {
  2914                           ;time_scheduler.h: 128: lastKeyState = 0xFF;
  2915  09FC  30FF               	movlw	255
  2916  09FD  1283               	bcf	3,5	;RP0=0, select bank0
  2917  09FE  1303               	bcf	3,6	;RP1=0, select bank0
  2918  09FF  00CA               	movwf	??_setHoursEnd
  2919  0A00  084A               	movf	??_setHoursEnd,w
  2920  0A01  00FB               	movwf	_lastKeyState
  2921  0A02  0008               	return
  2922  0A03                     __end_of_setHoursEnd:	
  2923                           
  2924                           	psect	text6
  2925  0803                     __ptext6:	
  2926 ;; *************** function ___awmod *****************
  2927 ;; Defined at:
  2928 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;  divisor         2    0[BANK0 ] int 
  2931 ;;  dividend        2    2[BANK0 ] int 
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;  sign            1    6[BANK0 ] unsigned char 
  2934 ;;  counter         1    5[BANK0 ] unsigned char 
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  2    0[BANK0 ] int 
  2937 ;; Registers used:
  2938 ;;		wreg, status,2, status,0
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2944 ;;      Params:         0       4       0       0       0
  2945 ;;      Locals:         0       2       0       0       0
  2946 ;;      Temps:          0       1       0       0       0
  2947 ;;      Totals:         0       7       0       0       0
  2948 ;;Total ram usage:        7 bytes
  2949 ;; Hardware stack levels used:    1
  2950 ;; Hardware stack levels required when called:    2
  2951 ;; This function calls:
  2952 ;;		Nothing
  2953 ;; This function is called by:
  2954 ;;		_setHoursStart
  2955 ;;		_setHoursEnd
  2956 ;;		_setMinutesStart
  2957 ;;		_setMinutesEnd
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           
  2962                           ;psect for function ___awmod
  2963  0803                     ___awmod:	
  2964                           
  2965                           ;incstack = 0
  2966                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2967  0803  1283               	bcf	3,5	;RP0=0, select bank0
  2968  0804  1303               	bcf	3,6	;RP1=0, select bank0
  2969  0805  01A6               	clrf	___awmod@sign
  2970  0806  1FA3               	btfss	___awmod@dividend+1,7
  2971  0807  280F               	goto	l2093
  2972  0808  09A2               	comf	___awmod@dividend,f
  2973  0809  09A3               	comf	___awmod@dividend+1,f
  2974  080A  0AA2               	incf	___awmod@dividend,f
  2975  080B  1903               	skipnz
  2976  080C  0AA3               	incf	___awmod@dividend+1,f
  2977  080D  01A6               	clrf	___awmod@sign
  2978  080E  0AA6               	incf	___awmod@sign,f
  2979  080F                     l2093:	
  2980  080F  1FA1               	btfss	___awmod@divisor+1,7
  2981  0810  2816               	goto	l2097
  2982  0811  09A0               	comf	___awmod@divisor,f
  2983  0812  09A1               	comf	___awmod@divisor+1,f
  2984  0813  0AA0               	incf	___awmod@divisor,f
  2985  0814  1903               	skipnz
  2986  0815  0AA1               	incf	___awmod@divisor+1,f
  2987  0816                     l2097:	
  2988  0816  0821               	movf	___awmod@divisor+1,w
  2989  0817  0420               	iorwf	___awmod@divisor,w
  2990  0818  1903               	skipnz
  2991  0819  2843               	goto	l2115
  2992  081A  01A5               	clrf	___awmod@counter
  2993  081B  0AA5               	incf	___awmod@counter,f
  2994  081C                     l2105:	
  2995  081C  1BA1               	btfsc	___awmod@divisor+1,7
  2996  081D  282A               	goto	l2107
  2997  081E  3001               	movlw	1
  2998  081F                     u2455:	
  2999  081F  1003               	clrc
  3000  0820  0DA0               	rlf	___awmod@divisor,f
  3001  0821  0DA1               	rlf	___awmod@divisor+1,f
  3002  0822  3EFF               	addlw	-1
  3003  0823  1D03               	skipz
  3004  0824  281F               	goto	u2455
  3005  0825  3001               	movlw	1
  3006  0826  00A4               	movwf	??___awmod
  3007  0827  0824               	movf	??___awmod,w
  3008  0828  07A5               	addwf	___awmod@counter,f
  3009  0829  281C               	goto	l2105
  3010  082A                     l2107:	
  3011  082A  0821               	movf	___awmod@divisor+1,w
  3012  082B  0223               	subwf	___awmod@dividend+1,w
  3013  082C  1D03               	skipz
  3014  082D  2830               	goto	u2475
  3015  082E  0820               	movf	___awmod@divisor,w
  3016  082F  0222               	subwf	___awmod@dividend,w
  3017  0830                     u2475:	
  3018  0830  1C03               	skipc
  3019  0831  2838               	goto	l2111
  3020  0832  0820               	movf	___awmod@divisor,w
  3021  0833  02A2               	subwf	___awmod@dividend,f
  3022  0834  0821               	movf	___awmod@divisor+1,w
  3023  0835  1C03               	skipc
  3024  0836  03A3               	decf	___awmod@dividend+1,f
  3025  0837  02A3               	subwf	___awmod@dividend+1,f
  3026  0838                     l2111:	
  3027  0838  3001               	movlw	1
  3028  0839                     u2485:	
  3029  0839  1003               	clrc
  3030  083A  0CA1               	rrf	___awmod@divisor+1,f
  3031  083B  0CA0               	rrf	___awmod@divisor,f
  3032  083C  3EFF               	addlw	-1
  3033  083D  1D03               	skipz
  3034  083E  2839               	goto	u2485
  3035  083F  3001               	movlw	1
  3036  0840  02A5               	subwf	___awmod@counter,f
  3037  0841  1D03               	btfss	3,2
  3038  0842  282A               	goto	l2107
  3039  0843                     l2115:	
  3040  0843  0826               	movf	___awmod@sign,w
  3041  0844  1903               	btfsc	3,2
  3042  0845  284B               	goto	l2119
  3043  0846  09A2               	comf	___awmod@dividend,f
  3044  0847  09A3               	comf	___awmod@dividend+1,f
  3045  0848  0AA2               	incf	___awmod@dividend,f
  3046  0849  1903               	skipnz
  3047  084A  0AA3               	incf	___awmod@dividend+1,f
  3048  084B                     l2119:	
  3049  084B  0823               	movf	___awmod@dividend+1,w
  3050  084C  01A1               	clrf	?___awmod+1
  3051  084D  07A1               	addwf	?___awmod+1,f
  3052  084E  0822               	movf	___awmod@dividend,w
  3053  084F  01A0               	clrf	?___awmod
  3054  0850  07A0               	addwf	?___awmod,f
  3055  0851  0008               	return
  3056  0852                     __end_of___awmod:	
  3057                           
  3058                           	psect	text7
  3059  1492                     __ptext7:	
  3060 ;; *************** function _printStatusTMP *****************
  3061 ;; Defined at:
  3062 ;;		line 47 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\temp_module.
      +h"
  3063 ;; Parameters:    Size  Location     Type
  3064 ;;  handler         1    wreg     unsigned char 
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;  handler         1    4[BANK0 ] unsigned char 
  3067 ;; Return value:  Size  Location     Type
  3068 ;;		None               void
  3069 ;; Registers used:
  3070 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3076 ;;      Params:         0       0       0       0       0
  3077 ;;      Locals:         0       1       0       0       0
  3078 ;;      Temps:          0       0       0       0       0
  3079 ;;      Totals:         0       1       0       0       0
  3080 ;;Total ram usage:        1 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    4
  3083 ;; This function calls:
  3084 ;;		_printToLCD
  3085 ;; This function is called by:
  3086 ;;		_updateState
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           
  3091                           ;psect for function _printStatusTMP
  3092  1492                     _printStatusTMP:	
  3093                           
  3094                           ;incstack = 0
  3095                           ; Regs used in _printStatusTMP: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3096                           ;printStatusTMP@handler stored from wreg
  3097  1492  1283               	bcf	3,5	;RP0=0, select bank0
  3098  1493  1303               	bcf	3,6	;RP1=0, select bank0
  3099  1494  00A4               	movwf	printStatusTMP@handler
  3100                           
  3101                           ;temp_module.h: 49: if (handler == 1)
  3102  1495  0824               	movf	printStatusTMP@handler,w
  3103  1496  3A01               	xorlw	1
  3104  1497  1D03               	skipz
  3105  1498  2CA1               	goto	l3155
  3106                           
  3107                           ;temp_module.h: 50: {
  3108                           ;temp_module.h: 51: printToLCD("VENT ON ");
  3109  1499  30D6               	movlw	low (STR_20| (0+32768))
  3110  149A  00A2               	movwf	printToLCD@str
  3111  149B  3090               	movlw	high (STR_20| (0+32768))
  3112  149C  00A3               	movwf	printToLCD@str+1
  3113  149D  160A  118A  260E   	fcall	_printToLCD
  3114                           
  3115                           ;temp_module.h: 52: }
  3116  14A0  0008               	return
  3117  14A1                     l3155:	
  3118                           
  3119                           ;temp_module.h: 53: else if (handler == 0)
  3120  14A1  1283               	bcf	3,5	;RP0=0, select bank0
  3121  14A2  1303               	bcf	3,6	;RP1=0, select bank0
  3122  14A3  08A4               	movf	printStatusTMP@handler,f
  3123  14A4  1D03               	skipz
  3124  14A5  0008               	return
  3125                           
  3126                           ;temp_module.h: 54: {
  3127                           ;temp_module.h: 55: printToLCD("FAN OFF");
  3128  14A6  30DF               	movlw	low (STR_21| (0+32768))
  3129  14A7  00A2               	movwf	printToLCD@str
  3130  14A8  3090               	movlw	high (STR_21| (0+32768))
  3131  14A9  00A3               	movwf	printToLCD@str+1
  3132  14AA  160A  118A  260E   	fcall	_printToLCD
  3133  14AD  0008               	return
  3134  14AE                     __end_of_printStatusTMP:	
  3135                           
  3136                           	psect	text8
  3137  1476                     __ptext8:	
  3138 ;; *************** function _printStatusPPM *****************
  3139 ;; Defined at:
  3140 ;;		line 70 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  handler         1    wreg     unsigned char 
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;  handler         1    4[BANK0 ] unsigned char 
  3145 ;; Return value:  Size  Location     Type
  3146 ;;		None               void
  3147 ;; Registers used:
  3148 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3154 ;;      Params:         0       0       0       0       0
  3155 ;;      Locals:         0       1       0       0       0
  3156 ;;      Temps:          0       0       0       0       0
  3157 ;;      Totals:         0       1       0       0       0
  3158 ;;Total ram usage:        1 bytes
  3159 ;; Hardware stack levels used:    1
  3160 ;; Hardware stack levels required when called:    4
  3161 ;; This function calls:
  3162 ;;		_printToLCD
  3163 ;; This function is called by:
  3164 ;;		_updateState
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           
  3169                           ;psect for function _printStatusPPM
  3170  1476                     _printStatusPPM:	
  3171                           
  3172                           ;incstack = 0
  3173                           ; Regs used in _printStatusPPM: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3174                           ;printStatusPPM@handler stored from wreg
  3175  1476  1283               	bcf	3,5	;RP0=0, select bank0
  3176  1477  1303               	bcf	3,6	;RP1=0, select bank0
  3177  1478  00A4               	movwf	printStatusPPM@handler
  3178                           
  3179                           ;mq135_module.h: 72: if (handler == 1)
  3180  1479  0824               	movf	printStatusPPM@handler,w
  3181  147A  3A01               	xorlw	1
  3182  147B  1D03               	skipz
  3183  147C  2C85               	goto	l3007
  3184                           
  3185                           ;mq135_module.h: 73: {
  3186                           ;mq135_module.h: 74: printToLCD("PURF HI");
  3187  147D  30E7               	movlw	low (STR_4| (0+32768))
  3188  147E  00A2               	movwf	printToLCD@str
  3189  147F  3090               	movlw	high (STR_4| (0+32768))
  3190  1480  00A3               	movwf	printToLCD@str+1
  3191  1481  160A  118A  260E   	fcall	_printToLCD
  3192                           
  3193                           ;mq135_module.h: 75: }
  3194  1484  0008               	return
  3195  1485                     l3007:	
  3196                           
  3197                           ;mq135_module.h: 76: else if (handler == 0)
  3198  1485  1283               	bcf	3,5	;RP0=0, select bank0
  3199  1486  1303               	bcf	3,6	;RP1=0, select bank0
  3200  1487  08A4               	movf	printStatusPPM@handler,f
  3201  1488  1D03               	skipz
  3202  1489  0008               	return
  3203                           
  3204                           ;mq135_module.h: 77: {
  3205                           ;mq135_module.h: 78: printToLCD("PURF LO");
  3206  148A  30EF               	movlw	low (STR_5| (0+32768))
  3207  148B  00A2               	movwf	printToLCD@str
  3208  148C  3090               	movlw	high (STR_5| (0+32768))
  3209  148D  00A3               	movwf	printToLCD@str+1
  3210  148E  160A  118A  260E   	fcall	_printToLCD
  3211  1491  0008               	return
  3212  1492                     __end_of_printStatusPPM:	
  3213                           
  3214                           	psect	text9
  3215  1577                     __ptext9:	
  3216 ;; *************** function _displayTime *****************
  3217 ;; Defined at:
  3218 ;;		line 48 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedul
      +er.h"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;		None
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;  timeFormat     10   46[BANK0 ] unsigned char [10]
  3223 ;; Return value:  Size  Location     Type
  3224 ;;		None               void
  3225 ;; Registers used:
  3226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3232 ;;      Params:         0       0       0       0       0
  3233 ;;      Locals:         0      10       0       0       0
  3234 ;;      Temps:          0       4       0       0       0
  3235 ;;      Totals:         0      14       0       0       0
  3236 ;;Total ram usage:       14 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    4
  3239 ;; This function calls:
  3240 ;;		_printToLCD
  3241 ;;		_sprintf
  3242 ;; This function is called by:
  3243 ;;		_updateState
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           
  3248                           ;psect for function _displayTime
  3249  1577                     _displayTime:	
  3250                           
  3251                           ;time_scheduler.h: 50: char timeFormat[10];
  3252                           ;time_scheduler.h: 51: sprintf(timeFormat, "Time: %02d:%02d", hours, minutes);
  3253                           
  3254                           ;incstack = 0
  3255                           ; Regs used in _displayTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3256  1577  302C               	movlw	low (STR_6| (0+32768))
  3257  1578  1283               	bcf	3,5	;RP0=0, select bank0
  3258  1579  1303               	bcf	3,6	;RP1=0, select bank0
  3259  157A  00B4               	movwf	sprintf@f
  3260  157B  3090               	movlw	high (STR_6| (0+32768))
  3261  157C  00B5               	movwf	sprintf@f+1
  3262  157D  087A               	movf	_hours,w	;volatile
  3263  157E  00CA               	movwf	??_displayTime
  3264  157F  01CB               	clrf	??_displayTime+1
  3265  1580  084A               	movf	??_displayTime,w
  3266  1581  00B6               	movwf	?_sprintf+2
  3267  1582  084B               	movf	??_displayTime+1,w
  3268  1583  00B7               	movwf	?_sprintf+3
  3269  1584  0879               	movf	_minutes,w	;volatile
  3270  1585  00CC               	movwf	??_displayTime+2
  3271  1586  01CD               	clrf	??_displayTime+3
  3272  1587  084C               	movf	??_displayTime+2,w
  3273  1588  00B8               	movwf	?_sprintf+4
  3274  1589  084D               	movf	??_displayTime+3,w
  3275  158A  00B9               	movwf	?_sprintf+5
  3276  158B  304E               	movlw	displayTime@timeFormat& (0+255)
  3277  158C  120A  118A  23F8  160A  118A  	fcall	_sprintf
  3278                           
  3279                           ;time_scheduler.h: 52: printToLCD(timeFormat);
  3280  1591  304E               	movlw	displayTime@timeFormat& (0+255)
  3281  1592  1283               	bcf	3,5	;RP0=0, select bank0
  3282  1593  1303               	bcf	3,6	;RP1=0, select bank0
  3283  1594  00A2               	movwf	printToLCD@str
  3284  1595  3000               	movlw	0
  3285  1596  00A3               	movwf	printToLCD@str+1
  3286  1597  160A  118A  260E   	fcall	_printToLCD
  3287  159A  0008               	return
  3288  159B                     __end_of_displayTime:	
  3289                           
  3290                           	psect	text10
  3291  1553                     __ptext10:	
  3292 ;; *************** function _displayTemp *****************
  3293 ;; Defined at:
  3294 ;;		line 24 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\temp_module.
      +h"
  3295 ;; Parameters:    Size  Location     Type
  3296 ;;		None
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;  buffer         20   42[BANK0 ] unsigned char [20]
  3299 ;; Return value:  Size  Location     Type
  3300 ;;		None               void
  3301 ;; Registers used:
  3302 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3303 ;; Tracked objects:
  3304 ;;		On entry : 0/0
  3305 ;;		On exit  : 0/0
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3308 ;;      Params:         0       0       0       0       0
  3309 ;;      Locals:         0      20       0       0       0
  3310 ;;      Temps:          0       0       0       0       0
  3311 ;;      Totals:         0      20       0       0       0
  3312 ;;Total ram usage:       20 bytes
  3313 ;; Hardware stack levels used:    1
  3314 ;; Hardware stack levels required when called:    4
  3315 ;; This function calls:
  3316 ;;		_printToLCD
  3317 ;;		_sprintf
  3318 ;; This function is called by:
  3319 ;;		_updateState
  3320 ;; This function uses a non-reentrant model
  3321 ;;
  3322                           
  3323                           
  3324                           ;psect for function _displayTemp
  3325  1553                     _displayTemp:	
  3326                           
  3327                           ;temp_module.h: 26: char buffer[20];
  3328                           ;temp_module.h: 27: sprintf(buffer, "Temp: %d C", tempBuffer);
  3329                           
  3330                           ;incstack = 0
  3331                           ; Regs used in _displayTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3332  1553  309A               	movlw	low (STR_19| (0+32768))
  3333  1554  1283               	bcf	3,5	;RP0=0, select bank0
  3334  1555  1303               	bcf	3,6	;RP1=0, select bank0
  3335  1556  00B4               	movwf	sprintf@f
  3336  1557  3090               	movlw	high (STR_19| (0+32768))
  3337  1558  00B5               	movwf	sprintf@f+1
  3338  1559  1683               	bsf	3,5	;RP0=1, select bank1
  3339  155A  1303               	bcf	3,6	;RP1=0, select bank1
  3340  155B  085B               	movf	(_tempBuffer+1)^(0+128),w
  3341  155C  1283               	bcf	3,5	;RP0=0, select bank0
  3342  155D  1303               	bcf	3,6	;RP1=0, select bank0
  3343  155E  01B7               	clrf	?_sprintf+3
  3344  155F  07B7               	addwf	?_sprintf+3,f
  3345  1560  1683               	bsf	3,5	;RP0=1, select bank1
  3346  1561  1303               	bcf	3,6	;RP1=0, select bank1
  3347  1562  085A               	movf	_tempBuffer^(0+128),w
  3348  1563  1283               	bcf	3,5	;RP0=0, select bank0
  3349  1564  1303               	bcf	3,6	;RP1=0, select bank0
  3350  1565  01B6               	clrf	?_sprintf+2
  3351  1566  07B6               	addwf	?_sprintf+2,f
  3352  1567  304A               	movlw	displayTemp@buffer& (0+255)
  3353  1568  120A  118A  23F8  160A  118A  	fcall	_sprintf
  3354                           
  3355                           ;temp_module.h: 28: printToLCD(buffer);
  3356  156D  304A               	movlw	displayTemp@buffer& (0+255)
  3357  156E  1283               	bcf	3,5	;RP0=0, select bank0
  3358  156F  1303               	bcf	3,6	;RP1=0, select bank0
  3359  1570  00A2               	movwf	printToLCD@str
  3360  1571  3000               	movlw	0
  3361  1572  00A3               	movwf	printToLCD@str+1
  3362  1573  160A  118A  260E   	fcall	_printToLCD
  3363  1576  0008               	return
  3364  1577                     __end_of_displayTemp:	
  3365                           
  3366                           	psect	text11
  3367  0ED7                     __ptext11:	
  3368 ;; *************** function _displayPPM *****************
  3369 ;; Defined at:
  3370 ;;		line 37 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;		None
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;  strBuffer      50    0[BANK1 ] unsigned char [50]
  3375 ;;  ppmFraction     2   52[BANK1 ] int 
  3376 ;;  ppmWhole        2   50[BANK1 ] int 
  3377 ;;  bufPtr          1   54[BANK1 ] PTR unsigned char 
  3378 ;;		 -> displayPPM@strBuffer(50), 
  3379 ;; Return value:  Size  Location     Type
  3380 ;;		None               void
  3381 ;; Registers used:
  3382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3388 ;;      Params:         0       0       0       0       0
  3389 ;;      Locals:         0       0      55       0       0
  3390 ;;      Temps:          0       1       0       0       0
  3391 ;;      Totals:         0       1      55       0       0
  3392 ;;Total ram usage:       56 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:    4
  3395 ;; This function calls:
  3396 ;;		___awtoft
  3397 ;;		___ftadd
  3398 ;;		___ftmul
  3399 ;;		___ftneg
  3400 ;;		___fttol
  3401 ;;		_printToLCD
  3402 ;;		_sprintf
  3403 ;; This function is called by:
  3404 ;;		_updateState
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           
  3409                           ;psect for function _displayPPM
  3410  0ED7                     _displayPPM:	
  3411                           
  3412                           ;mq135_module.h: 39: char strBuffer[50];
  3413                           ;mq135_module.h: 40: int ppmWhole = (int)PPM;
  3414                           
  3415                           ;incstack = 0
  3416                           ; Regs used in _displayPPM: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3417  0ED7  1683               	bsf	3,5	;RP0=1, select bank1
  3418  0ED8  1303               	bcf	3,6	;RP1=0, select bank1
  3419  0ED9  0857               	movf	_PPM^(0+128),w	;volatile
  3420  0EDA  1283               	bcf	3,5	;RP0=0, select bank0
  3421  0EDB  1303               	bcf	3,6	;RP1=0, select bank0
  3422  0EDC  00CE               	movwf	___fttol@f1
  3423  0EDD  1683               	bsf	3,5	;RP0=1, select bank1
  3424  0EDE  1303               	bcf	3,6	;RP1=0, select bank1
  3425  0EDF  0858               	movf	(_PPM+1)^(0+128),w	;volatile
  3426  0EE0  1283               	bcf	3,5	;RP0=0, select bank0
  3427  0EE1  1303               	bcf	3,6	;RP1=0, select bank0
  3428  0EE2  00CF               	movwf	___fttol@f1+1
  3429  0EE3  1683               	bsf	3,5	;RP0=1, select bank1
  3430  0EE4  1303               	bcf	3,6	;RP1=0, select bank1
  3431  0EE5  0859               	movf	(_PPM+2)^(0+128),w	;volatile
  3432  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  3433  0EE7  1303               	bcf	3,6	;RP1=0, select bank0
  3434  0EE8  00D0               	movwf	___fttol@f1+2
  3435  0EE9  120A  158A  20C9  120A  158A  	fcall	___fttol
  3436  0EEE  1283               	bcf	3,5	;RP0=0, select bank0
  3437  0EEF  1303               	bcf	3,6	;RP1=0, select bank0
  3438  0EF0  084F               	movf	?___fttol+1,w
  3439  0EF1  1683               	bsf	3,5	;RP0=1, select bank1
  3440  0EF2  1303               	bcf	3,6	;RP1=0, select bank1
  3441  0EF3  01D3               	clrf	(displayPPM@ppmWhole+1)^(0+128)
  3442  0EF4  07D3               	addwf	(displayPPM@ppmWhole+1)^(0+128),f
  3443  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  3444  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  3445  0EF7  084E               	movf	?___fttol,w
  3446  0EF8  1683               	bsf	3,5	;RP0=1, select bank1
  3447  0EF9  1303               	bcf	3,6	;RP1=0, select bank1
  3448  0EFA  01D2               	clrf	displayPPM@ppmWhole^(0+128)
  3449  0EFB  07D2               	addwf	displayPPM@ppmWhole^(0+128),f
  3450                           
  3451                           ;mq135_module.h: 41: int ppmFraction = (int)((PPM - ppmWhole) * 100);
  3452  0EFC  0853               	movf	(displayPPM@ppmWhole+1)^(0+128),w
  3453  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  3454  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  3455  0EFF  01A9               	clrf	___awtoft@c+1
  3456  0F00  07A9               	addwf	___awtoft@c+1,f
  3457  0F01  1683               	bsf	3,5	;RP0=1, select bank1
  3458  0F02  1303               	bcf	3,6	;RP1=0, select bank1
  3459  0F03  0852               	movf	displayPPM@ppmWhole^(0+128),w
  3460  0F04  1283               	bcf	3,5	;RP0=0, select bank0
  3461  0F05  1303               	bcf	3,6	;RP1=0, select bank0
  3462  0F06  01A8               	clrf	___awtoft@c
  3463  0F07  07A8               	addwf	___awtoft@c,f
  3464  0F08  160A  118A  25C0  120A  158A  	fcall	___awtoft
  3465  0F0D  1283               	bcf	3,5	;RP0=0, select bank0
  3466  0F0E  1303               	bcf	3,6	;RP1=0, select bank0
  3467  0F0F  0828               	movf	?___awtoft,w
  3468  0F10  00AE               	movwf	___ftneg@f1
  3469  0F11  0829               	movf	?___awtoft+1,w
  3470  0F12  00AF               	movwf	___ftneg@f1+1
  3471  0F13  082A               	movf	?___awtoft+2,w
  3472  0F14  00B0               	movwf	___ftneg@f1+2
  3473  0F15  160A  118A  23E3  120A  158A  	fcall	___ftneg
  3474  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  3475  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  3476  0F1C  082E               	movf	?___ftneg,w
  3477  0F1D  00B4               	movwf	___ftadd@f2
  3478  0F1E  082F               	movf	?___ftneg+1,w
  3479  0F1F  00B5               	movwf	___ftadd@f2+1
  3480  0F20  0830               	movf	?___ftneg+2,w
  3481  0F21  00B6               	movwf	___ftadd@f2+2
  3482  0F22  1683               	bsf	3,5	;RP0=1, select bank1
  3483  0F23  1303               	bcf	3,6	;RP1=0, select bank1
  3484  0F24  0857               	movf	_PPM^(0+128),w	;volatile
  3485  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  3486  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  3487  0F27  00B1               	movwf	___ftadd@f1
  3488  0F28  1683               	bsf	3,5	;RP0=1, select bank1
  3489  0F29  1303               	bcf	3,6	;RP1=0, select bank1
  3490  0F2A  0858               	movf	(_PPM+1)^(0+128),w	;volatile
  3491  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  3492  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  3493  0F2D  00B2               	movwf	___ftadd@f1+1
  3494  0F2E  1683               	bsf	3,5	;RP0=1, select bank1
  3495  0F2F  1303               	bcf	3,6	;RP1=0, select bank1
  3496  0F30  0859               	movf	(_PPM+2)^(0+128),w	;volatile
  3497  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  3498  0F32  1303               	bcf	3,6	;RP1=0, select bank0
  3499  0F33  00B3               	movwf	___ftadd@f1+2
  3500  0F34  120A  158A  25CE  120A  158A  	fcall	___ftadd
  3501  0F39  1283               	bcf	3,5	;RP0=0, select bank0
  3502  0F3A  1303               	bcf	3,6	;RP1=0, select bank0
  3503  0F3B  0831               	movf	?___ftadd,w
  3504  0F3C  00C1               	movwf	___ftmul@f2
  3505  0F3D  0832               	movf	?___ftadd+1,w
  3506  0F3E  00C2               	movwf	___ftmul@f2+1
  3507  0F3F  0833               	movf	?___ftadd+2,w
  3508  0F40  00C3               	movwf	___ftmul@f2+2
  3509  0F41  3000               	movlw	0
  3510  0F42  00BE               	movwf	___ftmul@f1
  3511  0F43  30C8               	movlw	200
  3512  0F44  00BF               	movwf	___ftmul@f1+1
  3513  0F45  3042               	movlw	66
  3514  0F46  00C0               	movwf	___ftmul@f1+2
  3515  0F47  120A  158A  24FB  120A  158A  	fcall	___ftmul
  3516  0F4C  1283               	bcf	3,5	;RP0=0, select bank0
  3517  0F4D  1303               	bcf	3,6	;RP1=0, select bank0
  3518  0F4E  083E               	movf	?___ftmul,w
  3519  0F4F  00CE               	movwf	___fttol@f1
  3520  0F50  083F               	movf	?___ftmul+1,w
  3521  0F51  00CF               	movwf	___fttol@f1+1
  3522  0F52  0840               	movf	?___ftmul+2,w
  3523  0F53  00D0               	movwf	___fttol@f1+2
  3524  0F54  120A  158A  20C9  120A  158A  	fcall	___fttol
  3525  0F59  1283               	bcf	3,5	;RP0=0, select bank0
  3526  0F5A  1303               	bcf	3,6	;RP1=0, select bank0
  3527  0F5B  084F               	movf	?___fttol+1,w
  3528  0F5C  1683               	bsf	3,5	;RP0=1, select bank1
  3529  0F5D  1303               	bcf	3,6	;RP1=0, select bank1
  3530  0F5E  01D5               	clrf	(displayPPM@ppmFraction+1)^(0+128)
  3531  0F5F  07D5               	addwf	(displayPPM@ppmFraction+1)^(0+128),f
  3532  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  3533  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  3534  0F62  084E               	movf	?___fttol,w
  3535  0F63  1683               	bsf	3,5	;RP0=1, select bank1
  3536  0F64  1303               	bcf	3,6	;RP1=0, select bank1
  3537  0F65  01D4               	clrf	displayPPM@ppmFraction^(0+128)
  3538  0F66  07D4               	addwf	displayPPM@ppmFraction^(0+128),f
  3539                           
  3540                           ;mq135_module.h: 44: char *bufPtr = strBuffer;
  3541  0F67  30A0               	movlw	displayPPM@strBuffer& (0+255)
  3542  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  3543  0F69  1303               	bcf	3,6	;RP1=0, select bank0
  3544  0F6A  00DC               	movwf	??_displayPPM
  3545  0F6B  085C               	movf	??_displayPPM,w
  3546  0F6C  1683               	bsf	3,5	;RP0=1, select bank1
  3547  0F6D  1303               	bcf	3,6	;RP1=0, select bank1
  3548  0F6E  00D6               	movwf	displayPPM@bufPtr^(0+128)
  3549                           
  3550                           ;mq135_module.h: 45: bufPtr += sprintf(bufPtr, "CO2: ");
  3551  0F6F  3005               	movlw	low (STR_1| (0+32768))
  3552  0F70  1283               	bcf	3,5	;RP0=0, select bank0
  3553  0F71  1303               	bcf	3,6	;RP1=0, select bank0
  3554  0F72  00B4               	movwf	sprintf@f
  3555  0F73  3091               	movlw	high (STR_1| (0+32768))
  3556  0F74  00B5               	movwf	sprintf@f+1
  3557  0F75  1683               	bsf	3,5	;RP0=1, select bank1
  3558  0F76  1303               	bcf	3,6	;RP1=0, select bank1
  3559  0F77  0856               	movf	displayPPM@bufPtr^(0+128),w
  3560  0F78  120A  118A  23F8  120A  158A  	fcall	_sprintf
  3561  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  3562  0F7E  1303               	bcf	3,6	;RP1=0, select bank0
  3563  0F7F  0834               	movf	?_sprintf,w
  3564  0F80  00DC               	movwf	??_displayPPM
  3565  0F81  085C               	movf	??_displayPPM,w
  3566  0F82  1683               	bsf	3,5	;RP0=1, select bank1
  3567  0F83  1303               	bcf	3,6	;RP1=0, select bank1
  3568  0F84  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  3569                           
  3570                           ;mq135_module.h: 46: bufPtr += sprintf(bufPtr, "%d", ppmWhole);
  3571  0F85  300B               	movlw	low (STR_2| (0+32768))
  3572  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  3573  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  3574  0F88  00B4               	movwf	sprintf@f
  3575  0F89  3091               	movlw	high (STR_2| (0+32768))
  3576  0F8A  00B5               	movwf	sprintf@f+1
  3577  0F8B  1683               	bsf	3,5	;RP0=1, select bank1
  3578  0F8C  1303               	bcf	3,6	;RP1=0, select bank1
  3579  0F8D  0853               	movf	(displayPPM@ppmWhole+1)^(0+128),w
  3580  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  3581  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  3582  0F90  01B7               	clrf	?_sprintf+3
  3583  0F91  07B7               	addwf	?_sprintf+3,f
  3584  0F92  1683               	bsf	3,5	;RP0=1, select bank1
  3585  0F93  1303               	bcf	3,6	;RP1=0, select bank1
  3586  0F94  0852               	movf	displayPPM@ppmWhole^(0+128),w
  3587  0F95  1283               	bcf	3,5	;RP0=0, select bank0
  3588  0F96  1303               	bcf	3,6	;RP1=0, select bank0
  3589  0F97  01B6               	clrf	?_sprintf+2
  3590  0F98  07B6               	addwf	?_sprintf+2,f
  3591  0F99  1683               	bsf	3,5	;RP0=1, select bank1
  3592  0F9A  1303               	bcf	3,6	;RP1=0, select bank1
  3593  0F9B  0856               	movf	displayPPM@bufPtr^(0+128),w
  3594  0F9C  120A  118A  23F8  120A  158A  	fcall	_sprintf
  3595  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  3596  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  3597  0FA3  0834               	movf	?_sprintf,w
  3598  0FA4  00DC               	movwf	??_displayPPM
  3599  0FA5  085C               	movf	??_displayPPM,w
  3600  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  3601  0FA7  1303               	bcf	3,6	;RP1=0, select bank1
  3602  0FA8  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  3603                           
  3604                           ;mq135_module.h: 47: *bufPtr++ = '.';
  3605  0FA9  302E               	movlw	46
  3606  0FAA  1283               	bcf	3,5	;RP0=0, select bank0
  3607  0FAB  1303               	bcf	3,6	;RP1=0, select bank0
  3608  0FAC  00DC               	movwf	??_displayPPM
  3609  0FAD  1683               	bsf	3,5	;RP0=1, select bank1
  3610  0FAE  1303               	bcf	3,6	;RP1=0, select bank1
  3611  0FAF  0856               	movf	displayPPM@bufPtr^(0+128),w
  3612  0FB0  0084               	movwf	4
  3613  0FB1  1283               	bcf	3,5	;RP0=0, select bank0
  3614  0FB2  1303               	bcf	3,6	;RP1=0, select bank0
  3615  0FB3  085C               	movf	??_displayPPM,w
  3616  0FB4  1383               	bcf	3,7	;select IRP bank0
  3617  0FB5  0080               	movwf	0
  3618  0FB6  3001               	movlw	1
  3619  0FB7  00DC               	movwf	??_displayPPM
  3620  0FB8  085C               	movf	??_displayPPM,w
  3621  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  3622  0FBA  1303               	bcf	3,6	;RP1=0, select bank1
  3623  0FBB  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  3624                           
  3625                           ;mq135_module.h: 48: if (ppmFraction < 10)
  3626  0FBC  0855               	movf	(displayPPM@ppmFraction+1)^(0+128),w
  3627  0FBD  3A80               	xorlw	128
  3628  0FBE  00FF               	movwf	127
  3629  0FBF  3080               	movlw	128
  3630  0FC0  027F               	subwf	127,w
  3631  0FC1  1D03               	skipz
  3632  0FC2  2FC5               	goto	u4105
  3633  0FC3  300A               	movlw	10
  3634  0FC4  0254               	subwf	displayPPM@ppmFraction^(0+128),w
  3635  0FC5                     u4105:	
  3636  0FC5  1803               	skipnc
  3637  0FC6  2FDA               	goto	l2999
  3638                           
  3639                           ;mq135_module.h: 49: *bufPtr++ = '0';
  3640  0FC7  3030               	movlw	48
  3641  0FC8  1283               	bcf	3,5	;RP0=0, select bank0
  3642  0FC9  1303               	bcf	3,6	;RP1=0, select bank0
  3643  0FCA  00DC               	movwf	??_displayPPM
  3644  0FCB  1683               	bsf	3,5	;RP0=1, select bank1
  3645  0FCC  1303               	bcf	3,6	;RP1=0, select bank1
  3646  0FCD  0856               	movf	displayPPM@bufPtr^(0+128),w
  3647  0FCE  0084               	movwf	4
  3648  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  3649  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  3650  0FD1  085C               	movf	??_displayPPM,w
  3651  0FD2  1383               	bcf	3,7	;select IRP bank0
  3652  0FD3  0080               	movwf	0
  3653  0FD4  3001               	movlw	1
  3654  0FD5  00DC               	movwf	??_displayPPM
  3655  0FD6  085C               	movf	??_displayPPM,w
  3656  0FD7  1683               	bsf	3,5	;RP0=1, select bank1
  3657  0FD8  1303               	bcf	3,6	;RP1=0, select bank1
  3658  0FD9  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  3659  0FDA                     l2999:	
  3660                           
  3661                           ;mq135_module.h: 50: sprintf(bufPtr, "%d ppm  ", ppmFraction);
  3662  0FDA  30CD               	movlw	low (STR_3| (0+32768))
  3663  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  3664  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
  3665  0FDD  00B4               	movwf	sprintf@f
  3666  0FDE  3090               	movlw	high (STR_3| (0+32768))
  3667  0FDF  00B5               	movwf	sprintf@f+1
  3668  0FE0  1683               	bsf	3,5	;RP0=1, select bank1
  3669  0FE1  1303               	bcf	3,6	;RP1=0, select bank1
  3670  0FE2  0855               	movf	(displayPPM@ppmFraction+1)^(0+128),w
  3671  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  3672  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  3673  0FE5  01B7               	clrf	?_sprintf+3
  3674  0FE6  07B7               	addwf	?_sprintf+3,f
  3675  0FE7  1683               	bsf	3,5	;RP0=1, select bank1
  3676  0FE8  1303               	bcf	3,6	;RP1=0, select bank1
  3677  0FE9  0854               	movf	displayPPM@ppmFraction^(0+128),w
  3678  0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  3679  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  3680  0FEC  01B6               	clrf	?_sprintf+2
  3681  0FED  07B6               	addwf	?_sprintf+2,f
  3682  0FEE  1683               	bsf	3,5	;RP0=1, select bank1
  3683  0FEF  1303               	bcf	3,6	;RP1=0, select bank1
  3684  0FF0  0856               	movf	displayPPM@bufPtr^(0+128),w
  3685  0FF1  120A  118A  23F8  120A  158A  	fcall	_sprintf
  3686                           
  3687                           ;mq135_module.h: 51: printToLCD(strBuffer);
  3688  0FF6  30A0               	movlw	displayPPM@strBuffer& (0+255)
  3689  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  3690  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  3691  0FF9  00A2               	movwf	printToLCD@str
  3692  0FFA  3000               	movlw	0
  3693  0FFB  00A3               	movwf	printToLCD@str+1
  3694  0FFC  160A  118A  260E   	fcall	_printToLCD
  3695  0FFF  0008               	return
  3696  1000                     __end_of_displayPPM:	
  3697                           
  3698                           	psect	text12
  3699  03F8                     __ptext12:	
  3700 ;; *************** function _sprintf *****************
  3701 ;; Defined at:
  3702 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;  sp              1    wreg     PTR unsigned char 
  3705 ;;		 -> updateState@buffer(10), displayTemp@buffer(20), debugInfo(10), displayTime@timeFormat(10), 
  3706 ;;		 -> displayPPM@strBuffer(50), 
  3707 ;;  f               2   20[BANK0 ] PTR const unsigned char 
  3708 ;;		 -> STR_26(13), STR_25(14), STR_19(11), STR_18(10), 
  3709 ;;		 -> STR_17(10), STR_16(10), STR_15(10), STR_14(10), 
  3710 ;;		 -> STR_13(10), STR_12(10), STR_11(10), STR_10(10), 
  3711 ;;		 -> STR_9(10), STR_8(10), STR_7(10), STR_6(16), 
  3712 ;;		 -> STR_3(9), STR_2(3), STR_1(6), 
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;  sp              1   41[BANK0 ] PTR unsigned char 
  3715 ;;		 -> updateState@buffer(10), displayTemp@buffer(20), debugInfo(10), displayTime@timeFormat(10), 
  3716 ;;		 -> displayPPM@strBuffer(50), 
  3717 ;;  _val            4   33[BANK0 ] struct .
  3718 ;;  width           2   38[BANK0 ] int 
  3719 ;;  ccnt            2   31[BANK0 ] int 
  3720 ;;  c               1   40[BANK0 ] char 
  3721 ;;  flag            1   37[BANK0 ] unsigned char 
  3722 ;;  prec            1   30[BANK0 ] char 
  3723 ;;  ap              1   29[BANK0 ] PTR void [1]
  3724 ;;		 -> ?_sprintf(2), 
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  2   20[BANK0 ] int 
  3727 ;; Registers used:
  3728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3734 ;;      Params:         0       6       0       0       0
  3735 ;;      Locals:         0      13       0       0       0
  3736 ;;      Temps:          0       3       0       0       0
  3737 ;;      Totals:         0      22       0       0       0
  3738 ;;Total ram usage:       22 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:    3
  3741 ;; This function calls:
  3742 ;;		___lwdiv
  3743 ;;		___lwmod
  3744 ;;		___wmul
  3745 ;;		_isdigit
  3746 ;; This function is called by:
  3747 ;;		_displayPPM
  3748 ;;		_displayTime
  3749 ;;		_setHoursStart
  3750 ;;		_setHoursEnd
  3751 ;;		_setMinutesStart
  3752 ;;		_setMinutesEnd
  3753 ;;		_displayTemp
  3754 ;;		_updateState
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           
  3759                           ;psect for function _sprintf
  3760  03F8                     _sprintf:	
  3761                           
  3762                           ;incstack = 0
  3763                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3764                           ;sprintf@sp stored from wreg
  3765  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  3766  03F9  1303               	bcf	3,6	;RP1=0, select bank0
  3767  03FA  00C9               	movwf	sprintf@sp
  3768                           
  3769                           ;doprnt.c: 494: va_list ap;
  3770                           ;doprnt.c: 499: signed char c;
  3771                           ;doprnt.c: 501: int width;
  3772                           ;doprnt.c: 506: signed char prec;
  3773                           ;doprnt.c: 508: unsigned char flag;
  3774                           ;doprnt.c: 510: int ccnt = 0;
  3775  03FB  01BF               	clrf	sprintf@ccnt
  3776  03FC  01C0               	clrf	sprintf@ccnt+1
  3777                           
  3778                           ;doprnt.c: 527: union {
  3779                           ;doprnt.c: 528: unsigned int _val;
  3780                           ;doprnt.c: 529: struct {
  3781                           ;doprnt.c: 530: const char * _cp;
  3782                           ;doprnt.c: 531: unsigned _len;
  3783                           ;doprnt.c: 532: } _str;
  3784                           ;doprnt.c: 533: } _val;
  3785                           ;doprnt.c: 542: *ap = __va_start();
  3786  03FD  3036               	movlw	(?_sprintf+2)& (0+255)
  3787  03FE  00BA               	movwf	??_sprintf
  3788  03FF  083A               	movf	??_sprintf,w
  3789  0400  00BD               	movwf	sprintf@ap
  3790  0401                     l2959:	
  3791                           ;doprnt.c: 545: while(c = *f++) {
  3792                           
  3793  0401  1283               	bcf	3,5	;RP0=0, select bank0
  3794  0402  1303               	bcf	3,6	;RP1=0, select bank0
  3795  0403  0835               	movf	sprintf@f+1,w
  3796  0404  00BB               	movwf	??_sprintf+1
  3797  0405  0834               	movf	sprintf@f,w
  3798  0406  00BA               	movwf	??_sprintf
  3799  0407  0AB4               	incf	sprintf@f,f
  3800  0408  1903               	skipnz
  3801  0409  0AB5               	incf	sprintf@f+1,f
  3802  040A  083B               	movf	??_sprintf+1,w
  3803  040B  00FF               	movwf	127
  3804  040C  083A               	movf	??_sprintf,w
  3805  040D  0084               	movwf	4
  3806  040E  160A  118A  2000  120A  118A  	fcall	stringtab
  3807  0413  00BC               	movwf	??_sprintf+2
  3808  0414  083C               	movf	??_sprintf+2,w
  3809  0415  00C8               	movwf	sprintf@c
  3810  0416  08C8               	movf	sprintf@c,f
  3811  0417  1903               	btfsc	3,2
  3812  0418  2DEA               	goto	l2961
  3813                           
  3814                           ;doprnt.c: 547: if(c != '%')
  3815  0419  0848               	movf	sprintf@c,w
  3816  041A  3A25               	xorlw	37
  3817  041B  1903               	skipnz
  3818  041C  2C2F               	goto	l2855
  3819                           
  3820                           ;doprnt.c: 549: {
  3821                           ;doprnt.c: 550: ((*sp++ = (c)),(++ccnt));
  3822  041D  0848               	movf	sprintf@c,w
  3823  041E  00BA               	movwf	??_sprintf
  3824  041F  0849               	movf	sprintf@sp,w
  3825  0420  0084               	movwf	4
  3826  0421  083A               	movf	??_sprintf,w
  3827  0422  1383               	bcf	3,7	;select IRP bank0
  3828  0423  0080               	movwf	0
  3829  0424  3001               	movlw	1
  3830  0425  00BA               	movwf	??_sprintf
  3831  0426  083A               	movf	??_sprintf,w
  3832  0427  07C9               	addwf	sprintf@sp,f
  3833  0428  3001               	movlw	1
  3834  0429  07BF               	addwf	sprintf@ccnt,f
  3835  042A  1803               	skipnc
  3836  042B  0AC0               	incf	sprintf@ccnt+1,f
  3837  042C  3000               	movlw	0
  3838  042D  07C0               	addwf	sprintf@ccnt+1,f
  3839                           
  3840                           ;doprnt.c: 551: continue;
  3841  042E  2C01               	goto	l2959
  3842  042F                     l2855:	
  3843                           
  3844                           ;doprnt.c: 552: }
  3845                           ;doprnt.c: 555: width = 0;
  3846  042F  01C6               	clrf	sprintf@width
  3847  0430  01C7               	clrf	sprintf@width+1
  3848                           
  3849                           ;doprnt.c: 557: flag = 0;
  3850  0431  01C5               	clrf	sprintf@flag
  3851                           
  3852                           ;doprnt.c: 560: switch(*f) {
  3853                           
  3854                           ;doprnt.c: 559: for(;;) {
  3855  0432  2C38               	goto	l2859
  3856  0433                     l320:	
  3857                           ;doprnt.c: 588: case '0':
  3858                           
  3859                           
  3860                           ;doprnt.c: 589: flag |= 0x04;
  3861  0433  1545               	bsf	sprintf@flag,2
  3862                           
  3863                           ;doprnt.c: 590: f++;
  3864  0434  3001               	movlw	1
  3865  0435  07B4               	addwf	sprintf@f,f
  3866  0436  1803               	skipnc
  3867  0437  0AB5               	incf	sprintf@f+1,f
  3868  0438                     l2859:	
  3869                           ;doprnt.c: 593: }
  3870                           
  3871                           ;doprnt.c: 591: continue;
  3872                           
  3873  0438  0835               	movf	sprintf@f+1,w
  3874  0439  00FF               	movwf	127
  3875  043A  0834               	movf	sprintf@f,w
  3876  043B  0084               	movwf	4
  3877  043C  160A  118A  2000  120A  118A  	fcall	stringtab
  3878                           
  3879                           ; Switch size 1, requested type "space"
  3880                           ; Number of cases is 1, Range of values is 48 to 48
  3881                           ; switch strategies available:
  3882                           ; Name         Instructions Cycles
  3883                           ; simple_byte            4     3 (average)
  3884                           ; direct_byte           14    11 (fixed)
  3885                           ; jumptable            263     9 (fixed)
  3886                           ;	Chosen strategy is simple_byte
  3887  0441  3A30               	xorlw	48	; case 48
  3888  0442  1903               	skipnz
  3889  0443  2C33               	goto	l320
  3890  0444  2C45               	goto	l2861
  3891  0445                     l2861:	
  3892                           ;doprnt.c: 595: }
  3893                           
  3894                           ;doprnt.c: 594: break;
  3895                           
  3896                           
  3897                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  3898  0445  0835               	movf	sprintf@f+1,w
  3899  0446  00FF               	movwf	127
  3900  0447  0834               	movf	sprintf@f,w
  3901  0448  0084               	movwf	4
  3902  0449  160A  118A  2000  120A  118A  	fcall	stringtab
  3903  044E  160A  118A  23FC  120A  118A  	fcall	_isdigit
  3904  0453  1C03               	btfss	3,0
  3905  0454  2C9B               	goto	l2875
  3906                           
  3907                           ;doprnt.c: 607: width = 0;
  3908  0455  1283               	bcf	3,5	;RP0=0, select bank0
  3909  0456  1303               	bcf	3,6	;RP1=0, select bank0
  3910  0457  01C6               	clrf	sprintf@width
  3911  0458  01C7               	clrf	sprintf@width+1
  3912  0459                     l2865:	
  3913                           ;doprnt.c: 608: do {
  3914                           
  3915                           
  3916                           ;doprnt.c: 609: width *= 10;
  3917  0459  300A               	movlw	10
  3918  045A  1283               	bcf	3,5	;RP0=0, select bank0
  3919  045B  1303               	bcf	3,6	;RP1=0, select bank0
  3920  045C  00A0               	movwf	___wmul@multiplier
  3921  045D  3000               	movlw	0
  3922  045E  00A1               	movwf	___wmul@multiplier+1
  3923  045F  0847               	movf	sprintf@width+1,w
  3924  0460  01A3               	clrf	___wmul@multiplicand+1
  3925  0461  07A3               	addwf	___wmul@multiplicand+1,f
  3926  0462  0846               	movf	sprintf@width,w
  3927  0463  01A2               	clrf	___wmul@multiplicand
  3928  0464  07A2               	addwf	___wmul@multiplicand,f
  3929  0465  160A  118A  259B  120A  118A  	fcall	___wmul
  3930  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3931  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3932  046C  0821               	movf	?___wmul+1,w
  3933  046D  01C7               	clrf	sprintf@width+1
  3934  046E  07C7               	addwf	sprintf@width+1,f
  3935  046F  0820               	movf	?___wmul,w
  3936  0470  01C6               	clrf	sprintf@width
  3937  0471  07C6               	addwf	sprintf@width,f
  3938                           
  3939                           ;doprnt.c: 610: width += *f++ - '0';
  3940  0472  0835               	movf	sprintf@f+1,w
  3941  0473  00FF               	movwf	127
  3942  0474  0834               	movf	sprintf@f,w
  3943  0475  0084               	movwf	4
  3944  0476  160A  118A  2000  120A  118A  	fcall	stringtab
  3945  047B  3ED0               	addlw	208
  3946  047C  00BA               	movwf	??_sprintf
  3947  047D  30FF               	movlw	255
  3948  047E  1803               	skipnc
  3949  047F  3000               	movlw	0
  3950  0480  00BB               	movwf	??_sprintf+1
  3951  0481  083A               	movf	??_sprintf,w
  3952  0482  07C6               	addwf	sprintf@width,f
  3953  0483  1803               	skipnc
  3954  0484  0AC7               	incf	sprintf@width+1,f
  3955  0485  083B               	movf	??_sprintf+1,w
  3956  0486  07C7               	addwf	sprintf@width+1,f
  3957  0487  3001               	movlw	1
  3958  0488  07B4               	addwf	sprintf@f,f
  3959  0489  1803               	skipnc
  3960  048A  0AB5               	incf	sprintf@f+1,f
  3961                           
  3962                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  3963  048B  0835               	movf	sprintf@f+1,w
  3964  048C  00FF               	movwf	127
  3965  048D  0834               	movf	sprintf@f,w
  3966  048E  0084               	movwf	4
  3967  048F  160A  118A  2000  120A  118A  	fcall	stringtab
  3968  0494  160A  118A  23FC  120A  118A  	fcall	_isdigit
  3969  0499  1803               	btfsc	3,0
  3970  049A  2C59               	goto	l2865
  3971  049B                     l2875:	
  3972                           ;doprnt.c: 831: }
  3973                           
  3974                           ;doprnt.c: 822: continue;
  3975                           
  3976                           ;doprnt.c: 811: default:
  3977                           
  3978                           ;doprnt.c: 707: case 'i':
  3979                           ;doprnt.c: 708: break;
  3980                           
  3981                           ;doprnt.c: 706: case 'd':
  3982                           
  3983                           ;doprnt.c: 647: goto alldone;
  3984                           
  3985                           ;doprnt.c: 646: case 0:
  3986                           
  3987                           ;doprnt.c: 617: }
  3988                           ;doprnt.c: 644: switch(c = *f++) {
  3989                           
  3990  049B  1283               	bcf	3,5	;RP0=0, select bank0
  3991  049C  1303               	bcf	3,6	;RP1=0, select bank0
  3992  049D  0835               	movf	sprintf@f+1,w
  3993  049E  00BB               	movwf	??_sprintf+1
  3994  049F  0834               	movf	sprintf@f,w
  3995  04A0  00BA               	movwf	??_sprintf
  3996  04A1  0AB4               	incf	sprintf@f,f
  3997  04A2  1903               	skipnz
  3998  04A3  0AB5               	incf	sprintf@f+1,f
  3999  04A4  083B               	movf	??_sprintf+1,w
  4000  04A5  00FF               	movwf	127
  4001  04A6  083A               	movf	??_sprintf,w
  4002  04A7  0084               	movwf	4
  4003  04A8  160A  118A  2000  120A  118A  	fcall	stringtab
  4004  04AD  00C8               	movwf	sprintf@c
  4005                           
  4006                           ; Switch size 1, requested type "space"
  4007                           ; Number of cases is 3, Range of values is 0 to 105
  4008                           ; switch strategies available:
  4009                           ; Name         Instructions Cycles
  4010                           ; simple_byte           10     6 (average)
  4011                           ; jumptable            260     6 (fixed)
  4012                           ;	Chosen strategy is simple_byte
  4013  04AE  3A00               	xorlw	0	; case 0
  4014  04AF  1903               	skipnz
  4015  04B0  2DEA               	goto	l2961
  4016  04B1  3A64               	xorlw	100	; case 100
  4017  04B2  1903               	skipnz
  4018  04B3  2CB8               	goto	l2877
  4019  04B4  3A0D               	xorlw	13	; case 105
  4020  04B5  1903               	skipnz
  4021  04B6  2CB8               	goto	l2877
  4022  04B7  2C01               	goto	l2959
  4023  04B8                     l2877:	
  4024                           
  4025                           ;doprnt.c: 1262: {
  4026                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4027  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  4028  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  4029  04BA  083D               	movf	sprintf@ap,w
  4030  04BB  0084               	movwf	4
  4031  04BC  1383               	bcf	3,7	;select IRP bank0
  4032  04BD  0800               	movf	0,w
  4033  04BE  00C1               	movwf	sprintf@_val
  4034  04BF  0A84               	incf	4,f
  4035  04C0  0800               	movf	0,w
  4036  04C1  00C2               	movwf	sprintf@_val+1
  4037  04C2  3002               	movlw	2
  4038  04C3  00BA               	movwf	??_sprintf
  4039  04C4  083A               	movf	??_sprintf,w
  4040  04C5  07BD               	addwf	sprintf@ap,f
  4041                           
  4042                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  4043  04C6  1FC2               	btfss	sprintf@_val+1,7
  4044  04C7  2CD1               	goto	l2887
  4045                           
  4046                           ;doprnt.c: 1271: flag |= 0x03;
  4047  04C8  3003               	movlw	3
  4048  04C9  00BA               	movwf	??_sprintf
  4049  04CA  083A               	movf	??_sprintf,w
  4050  04CB  04C5               	iorwf	sprintf@flag,f
  4051                           
  4052                           ;doprnt.c: 1272: _val._val = -_val._val;
  4053  04CC  09C1               	comf	sprintf@_val,f
  4054  04CD  09C2               	comf	sprintf@_val+1,f
  4055  04CE  0AC1               	incf	sprintf@_val,f
  4056  04CF  1903               	skipnz
  4057  04D0  0AC2               	incf	sprintf@_val+1,f
  4058  04D1                     l2887:	
  4059                           
  4060                           ;doprnt.c: 1273: }
  4061                           ;doprnt.c: 1275: }
  4062                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4063  04D1  01C8               	clrf	sprintf@c
  4064  04D2  0AC8               	incf	sprintf@c,f
  4065  04D3  0848               	movf	sprintf@c,w
  4066  04D4  3A05               	xorlw	5
  4067  04D5  1903               	btfsc	3,2
  4068  04D6  2CFC               	goto	l2899
  4069  04D7                     l2891:	
  4070                           
  4071                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4072  04D7  0848               	movf	sprintf@c,w
  4073  04D8  00BA               	movwf	??_sprintf
  4074  04D9  073A               	addwf	??_sprintf,w
  4075  04DA  3E12               	addlw	low (_dpowers| (0+32768))
  4076  04DB  0084               	movwf	4
  4077  04DC  3090               	movlw	high (_dpowers| (0+32768))
  4078  04DD  1803               	skipnc
  4079  04DE  3E01               	addlw	1
  4080  04DF  00FF               	movwf	127
  4081  04E0  160A  118A  2000  120A  118A  	fcall	stringtab
  4082  04E5  00BB               	movwf	??_sprintf+1
  4083  04E6  160A  118A  2000  120A  118A  	fcall	stringtab
  4084  04EB  00BC               	movwf	??_sprintf+2
  4085  04EC  083C               	movf	??_sprintf+2,w
  4086  04ED  0242               	subwf	sprintf@_val+1,w
  4087  04EE  1D03               	skipz
  4088  04EF  2CF2               	goto	u3955
  4089  04F0  083B               	movf	??_sprintf+1,w
  4090  04F1  0241               	subwf	sprintf@_val,w
  4091  04F2                     u3955:	
  4092  04F2  1C03               	btfss	3,0
  4093  04F3  2CFC               	goto	l2899
  4094                           
  4095                           ;doprnt.c: 1316: break;
  4096  04F4  3001               	movlw	1
  4097  04F5  00BA               	movwf	??_sprintf
  4098  04F6  083A               	movf	??_sprintf,w
  4099  04F7  07C8               	addwf	sprintf@c,f
  4100  04F8  0848               	movf	sprintf@c,w
  4101  04F9  3A05               	xorlw	5
  4102  04FA  1D03               	skipz
  4103  04FB  2CD7               	goto	l2891
  4104  04FC                     l2899:	
  4105                           
  4106                           ;doprnt.c: 1354: if(width && flag & 0x03)
  4107  04FC  0847               	movf	sprintf@width+1,w
  4108  04FD  0446               	iorwf	sprintf@width,w
  4109  04FE  1903               	skipnz
  4110  04FF  2D0A               	goto	l338
  4111  0500  0845               	movf	sprintf@flag,w
  4112  0501  3903               	andlw	3
  4113  0502  1903               	btfsc	3,2
  4114  0503  2D0A               	goto	l338
  4115                           
  4116                           ;doprnt.c: 1355: width--;
  4117  0504  30FF               	movlw	255
  4118  0505  07C6               	addwf	sprintf@width,f
  4119  0506  1803               	skipnc
  4120  0507  0AC7               	incf	sprintf@width+1,f
  4121  0508  30FF               	movlw	255
  4122  0509  07C7               	addwf	sprintf@width+1,f
  4123  050A                     l338:	
  4124                           
  4125                           ;doprnt.c: 1390: if(width > c)
  4126  050A  0848               	movf	sprintf@c,w
  4127  050B  00BA               	movwf	??_sprintf
  4128  050C  01BB               	clrf	??_sprintf+1
  4129  050D  1BBA               	btfsc	??_sprintf,7
  4130  050E  03BB               	decf	??_sprintf+1,f
  4131  050F  083B               	movf	??_sprintf+1,w
  4132  0510  3A80               	xorlw	128
  4133  0511  00BC               	movwf	??_sprintf+2
  4134  0512  0847               	movf	sprintf@width+1,w
  4135  0513  3A80               	xorlw	128
  4136  0514  023C               	subwf	??_sprintf+2,w
  4137  0515  1D03               	skipz
  4138  0516  2D19               	goto	u3995
  4139  0517  0846               	movf	sprintf@width,w
  4140  0518  023A               	subwf	??_sprintf,w
  4141  0519                     u3995:	
  4142  0519  1803               	skipnc
  4143  051A  2D29               	goto	l2907
  4144                           
  4145                           ;doprnt.c: 1391: width -= c;
  4146  051B  1283               	bcf	3,5	;RP0=0, select bank0
  4147  051C  1303               	bcf	3,6	;RP1=0, select bank0
  4148  051D  0848               	movf	sprintf@c,w
  4149  051E  00BA               	movwf	??_sprintf
  4150  051F  01BB               	clrf	??_sprintf+1
  4151  0520  1BBA               	btfsc	??_sprintf,7
  4152  0521  03BB               	decf	??_sprintf+1,f
  4153  0522  083A               	movf	??_sprintf,w
  4154  0523  02C6               	subwf	sprintf@width,f
  4155  0524  083B               	movf	??_sprintf+1,w
  4156  0525  1C03               	skipc
  4157  0526  03C7               	decf	sprintf@width+1,f
  4158  0527  02C7               	subwf	sprintf@width+1,f
  4159  0528  2D2D               	goto	l2909
  4160  0529                     l2907:	
  4161                           
  4162                           ;doprnt.c: 1392: else
  4163                           ;doprnt.c: 1393: width = 0;
  4164  0529  1283               	bcf	3,5	;RP0=0, select bank0
  4165  052A  1303               	bcf	3,6	;RP1=0, select bank0
  4166  052B  01C6               	clrf	sprintf@width
  4167  052C  01C7               	clrf	sprintf@width+1
  4168  052D                     l2909:	
  4169                           
  4170                           ;doprnt.c: 1396: if(flag & 0x04) {
  4171  052D  1D45               	btfss	sprintf@flag,2
  4172  052E  2D60               	goto	l2929
  4173                           
  4174                           ;doprnt.c: 1401: if(flag & 0x03)
  4175  052F  0845               	movf	sprintf@flag,w
  4176  0530  3903               	andlw	3
  4177  0531  1903               	btfsc	3,2
  4178  0532  2D44               	goto	l2919
  4179                           
  4180                           ;doprnt.c: 1402: ((*sp++ = ('-')),(++ccnt));
  4181  0533  302D               	movlw	45
  4182  0534  00BA               	movwf	??_sprintf
  4183  0535  0849               	movf	sprintf@sp,w
  4184  0536  0084               	movwf	4
  4185  0537  083A               	movf	??_sprintf,w
  4186  0538  1383               	bcf	3,7	;select IRP bank0
  4187  0539  0080               	movwf	0
  4188  053A  3001               	movlw	1
  4189  053B  00BA               	movwf	??_sprintf
  4190  053C  083A               	movf	??_sprintf,w
  4191  053D  07C9               	addwf	sprintf@sp,f
  4192  053E  3001               	movlw	1
  4193  053F  07BF               	addwf	sprintf@ccnt,f
  4194  0540  1803               	skipnc
  4195  0541  0AC0               	incf	sprintf@ccnt+1,f
  4196  0542  3000               	movlw	0
  4197  0543  07C0               	addwf	sprintf@ccnt+1,f
  4198  0544                     l2919:	
  4199                           
  4200                           ;doprnt.c: 1424: if(width)
  4201  0544  0847               	movf	sprintf@width+1,w
  4202  0545  0446               	iorwf	sprintf@width,w
  4203  0546  1903               	skipnz
  4204  0547  2D94               	goto	l2947
  4205                           
  4206                           ;doprnt.c: 1426: ((*sp++ = ('0')),(++ccnt));
  4207                           
  4208                           ;doprnt.c: 1425: do
  4209  0548  3030               	movlw	48
  4210  0549  00BA               	movwf	??_sprintf
  4211  054A  0849               	movf	sprintf@sp,w
  4212  054B  0084               	movwf	4
  4213  054C  083A               	movf	??_sprintf,w
  4214  054D  1383               	bcf	3,7	;select IRP bank0
  4215  054E  0080               	movwf	0
  4216  054F  3001               	movlw	1
  4217  0550  00BA               	movwf	??_sprintf
  4218  0551  083A               	movf	??_sprintf,w
  4219  0552  07C9               	addwf	sprintf@sp,f
  4220  0553  3001               	movlw	1
  4221  0554  07BF               	addwf	sprintf@ccnt,f
  4222  0555  1803               	skipnc
  4223  0556  0AC0               	incf	sprintf@ccnt+1,f
  4224  0557  3000               	movlw	0
  4225  0558  07C0               	addwf	sprintf@ccnt+1,f
  4226                           
  4227                           ;doprnt.c: 1427: while(--width);
  4228  0559  30FF               	movlw	255
  4229  055A  07C6               	addwf	sprintf@width,f
  4230  055B  1803               	skipnc
  4231  055C  0AC7               	incf	sprintf@width+1,f
  4232  055D  30FF               	movlw	255
  4233  055E  07C7               	addwf	sprintf@width+1,f
  4234  055F  2D44               	goto	l2919
  4235  0560                     l2929:	
  4236                           ;doprnt.c: 1429: } else
  4237                           
  4238                           
  4239                           ;doprnt.c: 1431: {
  4240                           ;doprnt.c: 1433: if(width
  4241                           ;doprnt.c: 1437: )
  4242  0560  0847               	movf	sprintf@width+1,w
  4243  0561  0446               	iorwf	sprintf@width,w
  4244  0562  1903               	skipnz
  4245  0563  2D7F               	goto	l2939
  4246  0564                     l2931:	
  4247                           ;doprnt.c: 1438: do
  4248                           
  4249                           
  4250                           ;doprnt.c: 1439: ((*sp++ = (' ')),(++ccnt));
  4251  0564  3020               	movlw	32
  4252  0565  00BA               	movwf	??_sprintf
  4253  0566  0849               	movf	sprintf@sp,w
  4254  0567  0084               	movwf	4
  4255  0568  083A               	movf	??_sprintf,w
  4256  0569  1383               	bcf	3,7	;select IRP bank0
  4257  056A  0080               	movwf	0
  4258  056B  3001               	movlw	1
  4259  056C  00BA               	movwf	??_sprintf
  4260  056D  083A               	movf	??_sprintf,w
  4261  056E  07C9               	addwf	sprintf@sp,f
  4262  056F  3001               	movlw	1
  4263  0570  07BF               	addwf	sprintf@ccnt,f
  4264  0571  1803               	skipnc
  4265  0572  0AC0               	incf	sprintf@ccnt+1,f
  4266  0573  3000               	movlw	0
  4267  0574  07C0               	addwf	sprintf@ccnt+1,f
  4268                           
  4269                           ;doprnt.c: 1440: while(--width);
  4270  0575  30FF               	movlw	255
  4271  0576  07C6               	addwf	sprintf@width,f
  4272  0577  1803               	skipnc
  4273  0578  0AC7               	incf	sprintf@width+1,f
  4274  0579  30FF               	movlw	255
  4275  057A  07C7               	addwf	sprintf@width+1,f
  4276  057B  0847               	movf	sprintf@width+1,w
  4277  057C  0446               	iorwf	sprintf@width,w
  4278  057D  1D03               	skipz
  4279  057E  2D64               	goto	l2931
  4280  057F                     l2939:	
  4281                           
  4282                           ;doprnt.c: 1447: if(flag & 0x03)
  4283  057F  0845               	movf	sprintf@flag,w
  4284  0580  3903               	andlw	3
  4285  0581  1903               	btfsc	3,2
  4286  0582  2D94               	goto	l2947
  4287                           
  4288                           ;doprnt.c: 1448: ((*sp++ = ('-')),(++ccnt));
  4289  0583  302D               	movlw	45
  4290  0584  00BA               	movwf	??_sprintf
  4291  0585  0849               	movf	sprintf@sp,w
  4292  0586  0084               	movwf	4
  4293  0587  083A               	movf	??_sprintf,w
  4294  0588  1383               	bcf	3,7	;select IRP bank0
  4295  0589  0080               	movwf	0
  4296  058A  3001               	movlw	1
  4297  058B  00BA               	movwf	??_sprintf
  4298  058C  083A               	movf	??_sprintf,w
  4299  058D  07C9               	addwf	sprintf@sp,f
  4300  058E  3001               	movlw	1
  4301  058F  07BF               	addwf	sprintf@ccnt,f
  4302  0590  1803               	skipnc
  4303  0591  0AC0               	incf	sprintf@ccnt+1,f
  4304  0592  3000               	movlw	0
  4305  0593  07C0               	addwf	sprintf@ccnt+1,f
  4306  0594                     l2947:	
  4307                           
  4308                           ;doprnt.c: 1478: }
  4309                           ;doprnt.c: 1481: prec = c;
  4310  0594  0848               	movf	sprintf@c,w
  4311  0595  00BA               	movwf	??_sprintf
  4312  0596  083A               	movf	??_sprintf,w
  4313  0597  00BE               	movwf	sprintf@prec
  4314  0598                     l2957:	
  4315                           ;doprnt.c: 1483: while(prec--) {
  4316                           
  4317  0598  30FF               	movlw	-1
  4318  0599  00BA               	movwf	??_sprintf
  4319  059A  083A               	movf	??_sprintf,w
  4320  059B  07BE               	addwf	sprintf@prec,f
  4321  059C  083E               	movf	sprintf@prec,w
  4322  059D  3AFF               	xorlw	-1
  4323  059E  1903               	btfsc	3,2
  4324  059F  2C01               	goto	l2959
  4325                           
  4326                           ;doprnt.c: 1487: {
  4327                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4328  05A0  300A               	movlw	10
  4329  05A1  00AE               	movwf	___lwmod@divisor
  4330  05A2  3000               	movlw	0
  4331  05A3  00AF               	movwf	___lwmod@divisor+1
  4332  05A4  083E               	movf	sprintf@prec,w
  4333  05A5  00BA               	movwf	??_sprintf
  4334  05A6  073A               	addwf	??_sprintf,w
  4335  05A7  3E12               	addlw	low (_dpowers| (0+32768))
  4336  05A8  0084               	movwf	4
  4337  05A9  3090               	movlw	high (_dpowers| (0+32768))
  4338  05AA  1803               	skipnc
  4339  05AB  3E01               	addlw	1
  4340  05AC  00FF               	movwf	127
  4341  05AD  160A  118A  2000  120A  118A  	fcall	stringtab
  4342  05B2  00A6               	movwf	___lwdiv@divisor
  4343  05B3  160A  118A  2000  120A  118A  	fcall	stringtab
  4344  05B8  00A7               	movwf	___lwdiv@divisor+1
  4345  05B9  0842               	movf	sprintf@_val+1,w
  4346  05BA  01A9               	clrf	___lwdiv@dividend+1
  4347  05BB  07A9               	addwf	___lwdiv@dividend+1,f
  4348  05BC  0841               	movf	sprintf@_val,w
  4349  05BD  01A8               	clrf	___lwdiv@dividend
  4350  05BE  07A8               	addwf	___lwdiv@dividend,f
  4351  05BF  160A  118A  2702  120A  118A  	fcall	___lwdiv
  4352  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  4353  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  4354  05C6  0827               	movf	?___lwdiv+1,w
  4355  05C7  01B1               	clrf	___lwmod@dividend+1
  4356  05C8  07B1               	addwf	___lwmod@dividend+1,f
  4357  05C9  0826               	movf	?___lwdiv,w
  4358  05CA  01B0               	clrf	___lwmod@dividend
  4359  05CB  07B0               	addwf	___lwmod@dividend,f
  4360  05CC  160A  118A  26CC  120A  118A  	fcall	___lwmod
  4361  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  4362  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  4363  05D3  082E               	movf	?___lwmod,w
  4364  05D4  3E30               	addlw	48
  4365  05D5  00BB               	movwf	??_sprintf+1
  4366  05D6  083B               	movf	??_sprintf+1,w
  4367  05D7  00C8               	movwf	sprintf@c
  4368                           
  4369                           ;doprnt.c: 1532: }
  4370                           ;doprnt.c: 1533: ((*sp++ = (c)),(++ccnt));
  4371  05D8  0848               	movf	sprintf@c,w
  4372  05D9  00BA               	movwf	??_sprintf
  4373  05DA  0849               	movf	sprintf@sp,w
  4374  05DB  0084               	movwf	4
  4375  05DC  083A               	movf	??_sprintf,w
  4376  05DD  1383               	bcf	3,7	;select IRP bank0
  4377  05DE  0080               	movwf	0
  4378  05DF  3001               	movlw	1
  4379  05E0  00BA               	movwf	??_sprintf
  4380  05E1  083A               	movf	??_sprintf,w
  4381  05E2  07C9               	addwf	sprintf@sp,f
  4382  05E3  3001               	movlw	1
  4383  05E4  07BF               	addwf	sprintf@ccnt,f
  4384  05E5  1803               	skipnc
  4385  05E6  0AC0               	incf	sprintf@ccnt+1,f
  4386  05E7  3000               	movlw	0
  4387  05E8  07C0               	addwf	sprintf@ccnt+1,f
  4388  05E9  2D98               	goto	l2957
  4389  05EA                     l2961:	
  4390                           ;doprnt.c: 1534: }
  4391                           ;doprnt.c: 1542: }
  4392                           ;doprnt.c: 1544: alldone:
  4393                           
  4394                           
  4395                           ;doprnt.c: 1547: *sp = 0;
  4396  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  4397  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  4398  05EC  0849               	movf	sprintf@sp,w
  4399  05ED  0084               	movwf	4
  4400  05EE  1383               	bcf	3,7	;select IRP bank0
  4401  05EF  0180               	clrf	0
  4402                           
  4403                           ;doprnt.c: 1549: return ccnt;
  4404  05F0  0840               	movf	sprintf@ccnt+1,w
  4405  05F1  01B5               	clrf	?_sprintf+1
  4406  05F2  07B5               	addwf	?_sprintf+1,f
  4407  05F3  083F               	movf	sprintf@ccnt,w
  4408  05F4  01B4               	clrf	?_sprintf
  4409  05F5  07B4               	addwf	?_sprintf,f
  4410  05F6  0008               	return
  4411  05F7                     __end_of_sprintf:	
  4412                           
  4413                           	psect	text13
  4414  13FC                     __ptext13:	
  4415 ;; *************** function _isdigit *****************
  4416 ;; Defined at:
  4417 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  c               1    wreg     unsigned char 
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  c               1    1[BANK0 ] unsigned char 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;		None               void
  4424 ;; Registers used:
  4425 ;;		wreg, status,2, status,0
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4431 ;;      Params:         0       0       0       0       0
  4432 ;;      Locals:         0       2       0       0       0
  4433 ;;      Temps:          0       0       0       0       0
  4434 ;;      Totals:         0       2       0       0       0
  4435 ;;Total ram usage:        2 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    2
  4438 ;; This function calls:
  4439 ;;		Nothing
  4440 ;; This function is called by:
  4441 ;;		_sprintf
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444                           
  4445                           
  4446                           ;psect for function _isdigit
  4447  13FC                     _isdigit:	
  4448                           
  4449                           ;incstack = 0
  4450                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4451                           ;isdigit@c stored from wreg
  4452  13FC  1283               	bcf	3,5	;RP0=0, select bank0
  4453  13FD  1303               	bcf	3,6	;RP1=0, select bank0
  4454  13FE  00A1               	movwf	isdigit@c
  4455  13FF  01A0               	clrf	_isdigit$441
  4456  1400  303A               	movlw	58
  4457  1401  0221               	subwf	isdigit@c,w
  4458  1402  1803               	skipnc
  4459  1403  2C0A               	goto	l2819
  4460  1404  3030               	movlw	48
  4461  1405  0221               	subwf	isdigit@c,w
  4462  1406  1C03               	skipc
  4463  1407  2C0A               	goto	l2819
  4464  1408  01A0               	clrf	_isdigit$441
  4465  1409  0AA0               	incf	_isdigit$441,f
  4466  140A                     l2819:	
  4467  140A  0C20               	rrf	_isdigit$441,w
  4468  140B  0008               	return
  4469  140C                     __end_of_isdigit:	
  4470                           
  4471                           	psect	text14
  4472  16CC                     __ptext14:	
  4473 ;; *************** function ___lwmod *****************
  4474 ;; Defined at:
  4475 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  4476 ;; Parameters:    Size  Location     Type
  4477 ;;  divisor         2   14[BANK0 ] unsigned int 
  4478 ;;  dividend        2   16[BANK0 ] unsigned int 
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;  counter         1   19[BANK0 ] unsigned char 
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  2   14[BANK0 ] unsigned int 
  4483 ;; Registers used:
  4484 ;;		wreg, status,2, status,0
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4490 ;;      Params:         0       4       0       0       0
  4491 ;;      Locals:         0       1       0       0       0
  4492 ;;      Temps:          0       1       0       0       0
  4493 ;;      Totals:         0       6       0       0       0
  4494 ;;Total ram usage:        6 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:    2
  4497 ;; This function calls:
  4498 ;;		Nothing
  4499 ;; This function is called by:
  4500 ;;		_sprintf
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           
  4505                           ;psect for function ___lwmod
  4506  16CC                     ___lwmod:	
  4507                           
  4508                           ;incstack = 0
  4509                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4510  16CC  1283               	bcf	3,5	;RP0=0, select bank0
  4511  16CD  1303               	bcf	3,6	;RP1=0, select bank0
  4512  16CE  082F               	movf	___lwmod@divisor+1,w
  4513  16CF  042E               	iorwf	___lwmod@divisor,w
  4514  16D0  1903               	skipnz
  4515  16D1  2EFB               	goto	l1949
  4516  16D2  01B3               	clrf	___lwmod@counter
  4517  16D3  0AB3               	incf	___lwmod@counter,f
  4518  16D4                     l1939:	
  4519  16D4  1BAF               	btfsc	___lwmod@divisor+1,7
  4520  16D5  2EE2               	goto	l1941
  4521  16D6  3001               	movlw	1
  4522  16D7                     u2175:	
  4523  16D7  1003               	clrc
  4524  16D8  0DAE               	rlf	___lwmod@divisor,f
  4525  16D9  0DAF               	rlf	___lwmod@divisor+1,f
  4526  16DA  3EFF               	addlw	-1
  4527  16DB  1D03               	skipz
  4528  16DC  2ED7               	goto	u2175
  4529  16DD  3001               	movlw	1
  4530  16DE  00B2               	movwf	??___lwmod
  4531  16DF  0832               	movf	??___lwmod,w
  4532  16E0  07B3               	addwf	___lwmod@counter,f
  4533  16E1  2ED4               	goto	l1939
  4534  16E2                     l1941:	
  4535  16E2  082F               	movf	___lwmod@divisor+1,w
  4536  16E3  0231               	subwf	___lwmod@dividend+1,w
  4537  16E4  1D03               	skipz
  4538  16E5  2EE8               	goto	u2195
  4539  16E6  082E               	movf	___lwmod@divisor,w
  4540  16E7  0230               	subwf	___lwmod@dividend,w
  4541  16E8                     u2195:	
  4542  16E8  1C03               	skipc
  4543  16E9  2EF0               	goto	l1945
  4544  16EA  082E               	movf	___lwmod@divisor,w
  4545  16EB  02B0               	subwf	___lwmod@dividend,f
  4546  16EC  082F               	movf	___lwmod@divisor+1,w
  4547  16ED  1C03               	skipc
  4548  16EE  03B1               	decf	___lwmod@dividend+1,f
  4549  16EF  02B1               	subwf	___lwmod@dividend+1,f
  4550  16F0                     l1945:	
  4551  16F0  3001               	movlw	1
  4552  16F1                     u2205:	
  4553  16F1  1003               	clrc
  4554  16F2  0CAF               	rrf	___lwmod@divisor+1,f
  4555  16F3  0CAE               	rrf	___lwmod@divisor,f
  4556  16F4  3EFF               	addlw	-1
  4557  16F5  1D03               	skipz
  4558  16F6  2EF1               	goto	u2205
  4559  16F7  3001               	movlw	1
  4560  16F8  02B3               	subwf	___lwmod@counter,f
  4561  16F9  1D03               	btfss	3,2
  4562  16FA  2EE2               	goto	l1941
  4563  16FB                     l1949:	
  4564  16FB  0831               	movf	___lwmod@dividend+1,w
  4565  16FC  01AF               	clrf	?___lwmod+1
  4566  16FD  07AF               	addwf	?___lwmod+1,f
  4567  16FE  0830               	movf	___lwmod@dividend,w
  4568  16FF  01AE               	clrf	?___lwmod
  4569  1700  07AE               	addwf	?___lwmod,f
  4570  1701  0008               	return
  4571  1702                     __end_of___lwmod:	
  4572                           
  4573                           	psect	text15
  4574  08C9                     __ptext15:	
  4575 ;; *************** function ___fttol *****************
  4576 ;; Defined at:
  4577 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;  f1              3   46[BANK0 ] float 
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;  lval            4   55[BANK0 ] unsigned long 
  4582 ;;  exp1            1   59[BANK0 ] unsigned char 
  4583 ;;  sign1           1   54[BANK0 ] unsigned char 
  4584 ;; Return value:  Size  Location     Type
  4585 ;;                  4   46[BANK0 ] long 
  4586 ;; Registers used:
  4587 ;;		wreg, status,2, status,0
  4588 ;; Tracked objects:
  4589 ;;		On entry : 0/0
  4590 ;;		On exit  : 0/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4593 ;;      Params:         0       4       0       0       0
  4594 ;;      Locals:         0       6       0       0       0
  4595 ;;      Temps:          0       4       0       0       0
  4596 ;;      Totals:         0      14       0       0       0
  4597 ;;Total ram usage:       14 bytes
  4598 ;; Hardware stack levels used:    1
  4599 ;; Hardware stack levels required when called:    2
  4600 ;; This function calls:
  4601 ;;		Nothing
  4602 ;; This function is called by:
  4603 ;;		_displayPPM
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607                           
  4608                           ;psect for function ___fttol
  4609  08C9                     ___fttol:	
  4610                           
  4611                           ;incstack = 0
  4612                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4613  08C9  1283               	bcf	3,5	;RP0=0, select bank0
  4614  08CA  1303               	bcf	3,6	;RP1=0, select bank0
  4615  08CB  084E               	movf	___fttol@f1,w
  4616  08CC  00D2               	movwf	??___fttol
  4617  08CD  084F               	movf	___fttol@f1+1,w
  4618  08CE  00D3               	movwf	??___fttol+1
  4619  08CF  0850               	movf	___fttol@f1+2,w
  4620  08D0  00D4               	movwf	??___fttol+2
  4621  08D1  1003               	clrc
  4622  08D2  0D53               	rlf	??___fttol+1,w
  4623  08D3  0D54               	rlf	??___fttol+2,w
  4624  08D4  00D5               	movwf	??___fttol+3
  4625  08D5  0855               	movf	??___fttol+3,w
  4626  08D6  00DB               	movwf	___fttol@exp1
  4627  08D7  08DB               	movf	___fttol@exp1,f
  4628  08D8  1D03               	skipz
  4629  08D9  28E3               	goto	l2313
  4630  08DA  3000               	movlw	0
  4631  08DB  00D1               	movwf	?___fttol+3
  4632  08DC  3000               	movlw	0
  4633  08DD  00D0               	movwf	?___fttol+2
  4634  08DE  3000               	movlw	0
  4635  08DF  00CF               	movwf	?___fttol+1
  4636  08E0  3000               	movlw	0
  4637  08E1  00CE               	movwf	?___fttol
  4638  08E2  0008               	return
  4639  08E3                     l2313:	
  4640  08E3  084E               	movf	___fttol@f1,w
  4641  08E4  00D2               	movwf	??___fttol
  4642  08E5  084F               	movf	___fttol@f1+1,w
  4643  08E6  00D3               	movwf	??___fttol+1
  4644  08E7  0850               	movf	___fttol@f1+2,w
  4645  08E8  00D4               	movwf	??___fttol+2
  4646  08E9  3017               	movlw	23
  4647  08EA                     u3005:	
  4648  08EA  1003               	clrc
  4649  08EB  0CD4               	rrf	??___fttol+2,f
  4650  08EC  0CD3               	rrf	??___fttol+1,f
  4651  08ED  0CD2               	rrf	??___fttol,f
  4652  08EE  3EFF               	addlw	-1
  4653  08EF  1D03               	skipz
  4654  08F0  28EA               	goto	u3005
  4655  08F1  0852               	movf	??___fttol,w
  4656  08F2  00D5               	movwf	??___fttol+3
  4657  08F3  0855               	movf	??___fttol+3,w
  4658  08F4  00D6               	movwf	___fttol@sign1
  4659  08F5  17CF               	bsf	___fttol@f1+1,7
  4660  08F6  30FF               	movlw	255
  4661  08F7  05CE               	andwf	___fttol@f1,f
  4662  08F8  30FF               	movlw	255
  4663  08F9  05CF               	andwf	___fttol@f1+1,f
  4664  08FA  3000               	movlw	0
  4665  08FB  05D0               	andwf	___fttol@f1+2,f
  4666  08FC  084E               	movf	___fttol@f1,w
  4667  08FD  00D7               	movwf	___fttol@lval
  4668  08FE  084F               	movf	___fttol@f1+1,w
  4669  08FF  00D8               	movwf	___fttol@lval+1
  4670  0900  0850               	movf	___fttol@f1+2,w
  4671  0901  00D9               	movwf	___fttol@lval+2
  4672  0902  01DA               	clrf	___fttol@lval+3
  4673  0903  308E               	movlw	142
  4674  0904  02DB               	subwf	___fttol@exp1,f
  4675  0905  1FDB               	btfss	___fttol@exp1,7
  4676  0906  2925               	goto	l2333
  4677  0907  085B               	movf	___fttol@exp1,w
  4678  0908  3A80               	xorlw	128
  4679  0909  3E8F               	addlw	143
  4680  090A  1803               	skipnc
  4681  090B  2915               	goto	l2331
  4682  090C  3000               	movlw	0
  4683  090D  00D1               	movwf	?___fttol+3
  4684  090E  3000               	movlw	0
  4685  090F  00D0               	movwf	?___fttol+2
  4686  0910  3000               	movlw	0
  4687  0911  00CF               	movwf	?___fttol+1
  4688  0912  3000               	movlw	0
  4689  0913  00CE               	movwf	?___fttol
  4690  0914  0008               	return
  4691  0915                     l2331:	
  4692  0915  3001               	movlw	1
  4693  0916                     u3035:	
  4694  0916  1003               	clrc
  4695  0917  0CDA               	rrf	___fttol@lval+3,f
  4696  0918  0CD9               	rrf	___fttol@lval+2,f
  4697  0919  0CD8               	rrf	___fttol@lval+1,f
  4698  091A  0CD7               	rrf	___fttol@lval,f
  4699  091B  3EFF               	addlw	-1
  4700  091C  1D03               	skipz
  4701  091D  2916               	goto	u3035
  4702  091E  3001               	movlw	1
  4703  091F  00D2               	movwf	??___fttol
  4704  0920  0852               	movf	??___fttol,w
  4705  0921  07DB               	addwf	___fttol@exp1,f
  4706  0922  1903               	btfsc	3,2
  4707  0923  2940               	goto	l2343
  4708  0924  2915               	goto	l2331
  4709  0925                     l2333:	
  4710  0925  3018               	movlw	24
  4711  0926  025B               	subwf	___fttol@exp1,w
  4712  0927  1C03               	skipc
  4713  0928  293D               	goto	l2341
  4714  0929  3000               	movlw	0
  4715  092A  00D1               	movwf	?___fttol+3
  4716  092B  3000               	movlw	0
  4717  092C  00D0               	movwf	?___fttol+2
  4718  092D  3000               	movlw	0
  4719  092E  00CF               	movwf	?___fttol+1
  4720  092F  3000               	movlw	0
  4721  0930  00CE               	movwf	?___fttol
  4722  0931  0008               	return
  4723  0932                     l2339:	
  4724  0932  3001               	movlw	1
  4725  0933  00D2               	movwf	??___fttol
  4726  0934                     u3065:	
  4727  0934  1003               	clrc
  4728  0935  0DD7               	rlf	___fttol@lval,f
  4729  0936  0DD8               	rlf	___fttol@lval+1,f
  4730  0937  0DD9               	rlf	___fttol@lval+2,f
  4731  0938  0DDA               	rlf	___fttol@lval+3,f
  4732  0939  0BD2               	decfsz	??___fttol,f
  4733  093A  2934               	goto	u3065
  4734  093B  3001               	movlw	1
  4735  093C  02DB               	subwf	___fttol@exp1,f
  4736  093D                     l2341:	
  4737  093D  08DB               	movf	___fttol@exp1,f
  4738  093E  1D03               	skipz
  4739  093F  2932               	goto	l2339
  4740  0940                     l2343:	
  4741  0940  0856               	movf	___fttol@sign1,w
  4742  0941  1903               	btfsc	3,2
  4743  0942  294E               	goto	l2347
  4744  0943  09D7               	comf	___fttol@lval,f
  4745  0944  09D8               	comf	___fttol@lval+1,f
  4746  0945  09D9               	comf	___fttol@lval+2,f
  4747  0946  09DA               	comf	___fttol@lval+3,f
  4748  0947  0AD7               	incf	___fttol@lval,f
  4749  0948  1903               	skipnz
  4750  0949  0AD8               	incf	___fttol@lval+1,f
  4751  094A  1903               	skipnz
  4752  094B  0AD9               	incf	___fttol@lval+2,f
  4753  094C  1903               	skipnz
  4754  094D  0ADA               	incf	___fttol@lval+3,f
  4755  094E                     l2347:	
  4756  094E  085A               	movf	___fttol@lval+3,w
  4757  094F  00D1               	movwf	?___fttol+3
  4758  0950  0859               	movf	___fttol@lval+2,w
  4759  0951  00D0               	movwf	?___fttol+2
  4760  0952  0858               	movf	___fttol@lval+1,w
  4761  0953  00CF               	movwf	?___fttol+1
  4762  0954  0857               	movf	___fttol@lval,w
  4763  0955  00CE               	movwf	?___fttol
  4764  0956  0008               	return
  4765  0957                     __end_of___fttol:	
  4766                           
  4767                           	psect	text16
  4768  13E3                     __ptext16:	
  4769 ;; *************** function ___ftneg *****************
  4770 ;; Defined at:
  4771 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  4772 ;; Parameters:    Size  Location     Type
  4773 ;;  f1              3   14[BANK0 ] float 
  4774 ;; Auto vars:     Size  Location     Type
  4775 ;;		None
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  3   14[BANK0 ] float 
  4778 ;; Registers used:
  4779 ;;		wreg
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4785 ;;      Params:         0       3       0       0       0
  4786 ;;      Locals:         0       0       0       0       0
  4787 ;;      Temps:          0       0       0       0       0
  4788 ;;      Totals:         0       3       0       0       0
  4789 ;;Total ram usage:        3 bytes
  4790 ;; Hardware stack levels used:    1
  4791 ;; Hardware stack levels required when called:    2
  4792 ;; This function calls:
  4793 ;;		Nothing
  4794 ;; This function is called by:
  4795 ;;		_displayPPM
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           
  4800                           ;psect for function ___ftneg
  4801  13E3                     ___ftneg:	
  4802                           
  4803                           ;incstack = 0
  4804                           ; Regs used in ___ftneg: [wreg]
  4805  13E3  1283               	bcf	3,5	;RP0=0, select bank0
  4806  13E4  1303               	bcf	3,6	;RP1=0, select bank0
  4807  13E5  0830               	movf	___ftneg@f1+2,w
  4808  13E6  042F               	iorwf	___ftneg@f1+1,w
  4809  13E7  042E               	iorwf	___ftneg@f1,w
  4810  13E8  1903               	skipnz
  4811  13E9  0008               	return
  4812  13EA  3080               	movlw	128
  4813  13EB  06B0               	xorwf	___ftneg@f1+2,f
  4814  13EC  0008               	return
  4815  13ED                     __end_of___ftneg:	
  4816                           
  4817                           	psect	text17
  4818  1445                     __ptext17:	
  4819 ;; *************** function _startUpLCD *****************
  4820 ;; Defined at:
  4821 ;;		line 69 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  4822 ;; Parameters:    Size  Location     Type
  4823 ;;		None
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;		None
  4826 ;; Return value:  Size  Location     Type
  4827 ;;		None               void
  4828 ;; Registers used:
  4829 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4830 ;; Tracked objects:
  4831 ;;		On entry : 0/0
  4832 ;;		On exit  : 0/0
  4833 ;;		Unchanged: 0/0
  4834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4835 ;;      Params:         0       0       0       0       0
  4836 ;;      Locals:         0       0       0       0       0
  4837 ;;      Temps:          0       0       0       0       0
  4838 ;;      Totals:         0       0       0       0       0
  4839 ;;Total ram usage:        0 bytes
  4840 ;; Hardware stack levels used:    1
  4841 ;; Hardware stack levels required when called:    4
  4842 ;; This function calls:
  4843 ;;		_initLCD
  4844 ;;		_instCTRL
  4845 ;;		_printToLCD
  4846 ;; This function is called by:
  4847 ;;		_main
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851                           
  4852                           ;psect for function _startUpLCD
  4853  1445                     _startUpLCD:	
  4854                           
  4855                           ;main.c: 71: initLCD();
  4856                           
  4857                           ;incstack = 0
  4858                           ; Regs used in _startUpLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4859  1445  160A  118A  252F  160A  118A  	fcall	_initLCD
  4860                           
  4861                           ;main.c: 72: instCTRL(0x80);
  4862  144A  3080               	movlw	128
  4863  144B  160A  118A  241F  160A  118A  	fcall	_instCTRL
  4864                           
  4865                           ;main.c: 73: printToLCD("PWR ON");
  4866  1450  30FE               	movlw	low (STR_22| (0+32768))
  4867  1451  1283               	bcf	3,5	;RP0=0, select bank0
  4868  1452  1303               	bcf	3,6	;RP1=0, select bank0
  4869  1453  00A2               	movwf	printToLCD@str
  4870  1454  3090               	movlw	high (STR_22| (0+32768))
  4871  1455  00A3               	movwf	printToLCD@str+1
  4872  1456  160A  118A  260E   	fcall	_printToLCD
  4873  1459  0008               	return
  4874  145A                     __end_of_startUpLCD:	
  4875                           
  4876                           	psect	text18
  4877  160E                     __ptext18:	
  4878 ;; *************** function _printToLCD *****************
  4879 ;; Defined at:
  4880 ;;		line 47 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  str             2    2[BANK0 ] PTR const unsigned char 
  4883 ;;		 -> STR_34(11), STR_33(12), STR_32(10), STR_31(14), 
  4884 ;;		 -> STR_30(12), STR_29(10), STR_28(16), STR_27(15), 
  4885 ;;		 -> updateState@buffer(10), STR_24(15), STR_23(7), STR_22(7), 
  4886 ;;		 -> STR_21(8), STR_20(9), displayTemp@buffer(20), debugInfo(10), 
  4887 ;;		 -> displayTime@timeFormat(10), STR_5(8), STR_4(8), displayPPM@strBuffer(50), 
  4888 ;; Auto vars:     Size  Location     Type
  4889 ;;		None
  4890 ;; Return value:  Size  Location     Type
  4891 ;;		None               void
  4892 ;; Registers used:
  4893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4899 ;;      Params:         0       2       0       0       0
  4900 ;;      Locals:         0       0       0       0       0
  4901 ;;      Temps:          0       0       0       0       0
  4902 ;;      Totals:         0       2       0       0       0
  4903 ;;Total ram usage:        2 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:    3
  4906 ;; This function calls:
  4907 ;;		_dataCTRL
  4908 ;;		_instCTRL
  4909 ;; This function is called by:
  4910 ;;		_displayPPM
  4911 ;;		_printStatusPPM
  4912 ;;		_displayTime
  4913 ;;		_setHoursStart
  4914 ;;		_setHoursEnd
  4915 ;;		_setMinutesStart
  4916 ;;		_setMinutesEnd
  4917 ;;		_displayTemp
  4918 ;;		_printStatusTMP
  4919 ;;		_startUpLCD
  4920 ;;		_updateState
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           
  4925                           ;psect for function _printToLCD
  4926  160E                     _printToLCD:	
  4927                           
  4928                           ;lcd_functions.h: 49: instCTRL(0x0C);
  4929                           
  4930                           ;incstack = 0
  4931                           ; Regs used in _printToLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4932  160E  300C               	movlw	12
  4933  160F  160A  118A  241F  160A  118A  	fcall	_instCTRL
  4934  1614                     l2841:	
  4935                           ;lcd_functions.h: 50: while (*str)
  4936                           
  4937  1614  1283               	bcf	3,5	;RP0=0, select bank0
  4938  1615  1303               	bcf	3,6	;RP1=0, select bank0
  4939  1616  0823               	movf	printToLCD@str+1,w
  4940  1617  00FF               	movwf	127
  4941  1618  0822               	movf	printToLCD@str,w
  4942  1619  0084               	movwf	4
  4943  161A  160A  118A  2000  160A  118A  	fcall	stringtab
  4944  161F  3800               	iorlw	0
  4945  1620  1903               	btfsc	3,2
  4946  1621  0008               	return
  4947                           
  4948                           ;lcd_functions.h: 51: {
  4949                           ;lcd_functions.h: 52: dataCTRL(*str);
  4950  1622  1283               	bcf	3,5	;RP0=0, select bank0
  4951  1623  1303               	bcf	3,6	;RP1=0, select bank0
  4952  1624  0823               	movf	printToLCD@str+1,w
  4953  1625  00FF               	movwf	127
  4954  1626  0822               	movf	printToLCD@str,w
  4955  1627  0084               	movwf	4
  4956  1628  160A  118A  2000  160A  118A  	fcall	stringtab
  4957  162D  160A  118A  2432  160A  118A  	fcall	_dataCTRL
  4958                           
  4959                           ;lcd_functions.h: 53: str++;
  4960  1632  3001               	movlw	1
  4961  1633  1283               	bcf	3,5	;RP0=0, select bank0
  4962  1634  1303               	bcf	3,6	;RP1=0, select bank0
  4963  1635  07A2               	addwf	printToLCD@str,f
  4964  1636  1803               	skipnc
  4965  1637  0AA3               	incf	printToLCD@str+1,f
  4966  1638  2E14               	goto	l2841
  4967  1639                     __end_of_printToLCD:	
  4968                           
  4969                           	psect	text19
  4970  1432                     __ptext19:	
  4971 ;; *************** function _dataCTRL *****************
  4972 ;; Defined at:
  4973 ;;		line 27 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;  DAT             1    wreg     unsigned char 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;  DAT             1    1[BANK0 ] unsigned char 
  4978 ;; Return value:  Size  Location     Type
  4979 ;;		None               void
  4980 ;; Registers used:
  4981 ;;		wreg
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4987 ;;      Params:         0       0       0       0       0
  4988 ;;      Locals:         0       1       0       0       0
  4989 ;;      Temps:          0       1       0       0       0
  4990 ;;      Totals:         0       2       0       0       0
  4991 ;;Total ram usage:        2 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:    2
  4994 ;; This function calls:
  4995 ;;		Nothing
  4996 ;; This function is called by:
  4997 ;;		_printToLCD
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           
  5002                           ;psect for function _dataCTRL
  5003  1432                     _dataCTRL:	
  5004                           
  5005                           ;incstack = 0
  5006                           ; Regs used in _dataCTRL: [wreg]
  5007                           ;dataCTRL@DAT stored from wreg
  5008  1432  1283               	bcf	3,5	;RP0=0, select bank0
  5009  1433  1303               	bcf	3,6	;RP1=0, select bank0
  5010  1434  00A1               	movwf	dataCTRL@DAT
  5011                           
  5012                           ;lcd_functions.h: 29: PORTD = DAT;
  5013  1435  0821               	movf	dataCTRL@DAT,w
  5014  1436  0088               	movwf	8	;volatile
  5015                           
  5016                           ;lcd_functions.h: 30: RC0 = 1;
  5017  1437  1407               	bsf	7,0	;volatile
  5018                           
  5019                           ;lcd_functions.h: 31: RC1 = 0;
  5020  1438  1087               	bcf	7,1	;volatile
  5021                           
  5022                           ;lcd_functions.h: 32: RC2 = 1;
  5023  1439  1507               	bsf	7,2	;volatile
  5024                           
  5025                           ;lcd_functions.h: 33: _delay((unsigned long)((1)*(4000000/4000.0)));
  5026  143A  30F9               	movlw	249
  5027  143B  00A0               	movwf	??_dataCTRL
  5028  143C                     u4807:	
  5029  143C  0000               	nop
  5030  143D  0BA0               	decfsz	??_dataCTRL,f
  5031  143E  2C3C               	goto	u4807
  5032  143F  2C40               	nop2	;nop
  5033  1440  0000               	nop
  5034                           
  5035                           ;lcd_functions.h: 34: RC2 = 0;
  5036  1441  1283               	bcf	3,5	;RP0=0, select bank0
  5037  1442  1303               	bcf	3,6	;RP1=0, select bank0
  5038  1443  1107               	bcf	7,2	;volatile
  5039  1444  0008               	return
  5040  1445                     __end_of_dataCTRL:	
  5041                           
  5042                           	psect	text20
  5043  152F                     __ptext20:	
  5044 ;; *************** function _initLCD *****************
  5045 ;; Defined at:
  5046 ;;		line 37 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;		None
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;		None
  5051 ;; Return value:  Size  Location     Type
  5052 ;;		None               void
  5053 ;; Registers used:
  5054 ;;		wreg, status,2, status,0, pclath, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5060 ;;      Params:         0       0       0       0       0
  5061 ;;      Locals:         0       0       0       0       0
  5062 ;;      Temps:          0       1       0       0       0
  5063 ;;      Totals:         0       1       0       0       0
  5064 ;;Total ram usage:        1 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    3
  5067 ;; This function calls:
  5068 ;;		_instCTRL
  5069 ;; This function is called by:
  5070 ;;		_startUpLCD
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           
  5075                           ;psect for function _initLCD
  5076  152F                     _initLCD:	
  5077                           
  5078                           ;lcd_functions.h: 39: instCTRL(0x38);
  5079                           
  5080                           ;incstack = 0
  5081                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  5082  152F  3038               	movlw	56
  5083  1530  160A  118A  241F  160A  118A  	fcall	_instCTRL
  5084                           
  5085                           ;lcd_functions.h: 40: _delay((unsigned long)((50)*(4000000/4000000.0)));
  5086  1535  3010               	movlw	16
  5087  1536  1283               	bcf	3,5	;RP0=0, select bank0
  5088  1537  1303               	bcf	3,6	;RP1=0, select bank0
  5089  1538  00A2               	movwf	??_initLCD
  5090  1539                     u4817:	
  5091  1539  0BA2               	decfsz	??_initLCD,f
  5092  153A  2D39               	goto	u4817
  5093  153B  0000               	nop
  5094                           
  5095                           ;lcd_functions.h: 41: instCTRL(0x0C);
  5096  153C  300C               	movlw	12
  5097  153D  160A  118A  241F  160A  118A  	fcall	_instCTRL
  5098                           
  5099                           ;lcd_functions.h: 42: instCTRL(0x01);
  5100  1542  3001               	movlw	1
  5101  1543  160A  118A  241F  160A  118A  	fcall	_instCTRL
  5102                           
  5103                           ;lcd_functions.h: 43: instCTRL(0x06);
  5104  1548  3006               	movlw	6
  5105  1549  160A  118A  241F  160A  118A  	fcall	_instCTRL
  5106                           
  5107                           ;lcd_functions.h: 44: instCTRL(0x0F);
  5108  154E  300F               	movlw	15
  5109  154F  160A  118A  241F   	fcall	_instCTRL
  5110  1552  0008               	return
  5111  1553                     __end_of_initLCD:	
  5112                           
  5113                           	psect	text21
  5114  13ED                     __ptext21:	
  5115 ;; *************** function _setPortDirections *****************
  5116 ;; Defined at:
  5117 ;;		line 51 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;		None
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;		None
  5122 ;; Return value:  Size  Location     Type
  5123 ;;		None               void
  5124 ;; Registers used:
  5125 ;;		wreg, status,2
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5131 ;;      Params:         0       0       0       0       0
  5132 ;;      Locals:         0       0       0       0       0
  5133 ;;      Temps:          0       0       0       0       0
  5134 ;;      Totals:         0       0       0       0       0
  5135 ;;Total ram usage:        0 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    2
  5138 ;; This function calls:
  5139 ;;		Nothing
  5140 ;; This function is called by:
  5141 ;;		_main
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           
  5146                           ;psect for function _setPortDirections
  5147  13ED                     _setPortDirections:	
  5148                           
  5149                           ;main.c: 53: TRISA = 0xFF;
  5150                           
  5151                           ;incstack = 0
  5152                           ; Regs used in _setPortDirections: [wreg+status,2]
  5153  13ED  30FF               	movlw	255
  5154  13EE  1683               	bsf	3,5	;RP0=1, select bank1
  5155  13EF  1303               	bcf	3,6	;RP1=0, select bank1
  5156  13F0  0085               	movwf	5	;volatile
  5157                           
  5158                           ;main.c: 54: TRISB = 0xFF;
  5159  13F1  30FF               	movlw	255
  5160  13F2  0086               	movwf	6	;volatile
  5161                           
  5162                           ;main.c: 55: TRISC = 0x00;
  5163  13F3  0187               	clrf	7	;volatile
  5164                           
  5165                           ;main.c: 56: TRISD = 0x00;
  5166  13F4  0188               	clrf	8	;volatile
  5167                           
  5168                           ;main.c: 57: PORTA = 0x00;
  5169  13F5  1283               	bcf	3,5	;RP0=0, select bank0
  5170  13F6  1303               	bcf	3,6	;RP1=0, select bank0
  5171  13F7  0185               	clrf	5	;volatile
  5172                           
  5173                           ;main.c: 58: PORTB = 0x00;
  5174  13F8  0186               	clrf	6	;volatile
  5175                           
  5176                           ;main.c: 59: PORTC = 0x00;
  5177  13F9  0187               	clrf	7	;volatile
  5178                           
  5179                           ;main.c: 60: PORTD = 0x00;
  5180  13FA  0188               	clrf	8	;volatile
  5181  13FB  0008               	return
  5182  13FC                     __end_of_setPortDirections:	
  5183                           
  5184                           	psect	text22
  5185  150B                     __ptext22:	
  5186 ;; *************** function _runMQ135 *****************
  5187 ;; Defined at:
  5188 ;;		line 32 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  5189 ;; Parameters:    Size  Location     Type
  5190 ;;		None
  5191 ;; Auto vars:     Size  Location     Type
  5192 ;;		None
  5193 ;; Return value:  Size  Location     Type
  5194 ;;		None               void
  5195 ;; Registers used:
  5196 ;;		wreg, status,2, status,0, pclath, cstack
  5197 ;; Tracked objects:
  5198 ;;		On entry : 0/0
  5199 ;;		On exit  : 0/0
  5200 ;;		Unchanged: 0/0
  5201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5202 ;;      Params:         0       0       0       0       0
  5203 ;;      Locals:         0       0       0       0       0
  5204 ;;      Temps:          0       0       0       0       0
  5205 ;;      Totals:         0       0       0       0       0
  5206 ;;Total ram usage:        0 bytes
  5207 ;; Hardware stack levels used:    1
  5208 ;; Hardware stack levels required when called:    5
  5209 ;; This function calls:
  5210 ;;		_CalcMQ135
  5211 ;;		_readADC
  5212 ;; This function is called by:
  5213 ;;		_main
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           
  5218                           ;psect for function _runMQ135
  5219  150B                     _runMQ135:	
  5220                           
  5221                           ;mq135_module.h: 34: PPM = CalcMQ135(readADC(0));
  5222                           
  5223                           ;incstack = 0
  5224                           ; Regs used in _runMQ135: [wreg+status,2+status,0+pclath+cstack]
  5225  150B  3000               	movlw	0
  5226  150C  160A  118A  25E5  160A  118A  	fcall	_readADC
  5227  1511  1283               	bcf	3,5	;RP0=0, select bank0
  5228  1512  1303               	bcf	3,6	;RP1=0, select bank0
  5229  1513  0821               	movf	?_readADC+1,w
  5230  1514  01DF               	clrf	CalcMQ135@RAW_ADC+1
  5231  1515  07DF               	addwf	CalcMQ135@RAW_ADC+1,f
  5232  1516  0820               	movf	?_readADC,w
  5233  1517  01DE               	clrf	CalcMQ135@RAW_ADC
  5234  1518  07DE               	addwf	CalcMQ135@RAW_ADC,f
  5235  1519  120A  118A  2051   	fcall	_CalcMQ135
  5236  151C  1283               	bcf	3,5	;RP0=0, select bank0
  5237  151D  1303               	bcf	3,6	;RP1=0, select bank0
  5238  151E  085E               	movf	?_CalcMQ135,w
  5239  151F  1683               	bsf	3,5	;RP0=1, select bank1
  5240  1520  1303               	bcf	3,6	;RP1=0, select bank1
  5241  1521  00D7               	movwf	_PPM^(0+128)	;volatile
  5242  1522  1283               	bcf	3,5	;RP0=0, select bank0
  5243  1523  1303               	bcf	3,6	;RP1=0, select bank0
  5244  1524  085F               	movf	?_CalcMQ135+1,w
  5245  1525  1683               	bsf	3,5	;RP0=1, select bank1
  5246  1526  1303               	bcf	3,6	;RP1=0, select bank1
  5247  1527  00D8               	movwf	(_PPM+1)^(0+128)	;volatile
  5248  1528  1283               	bcf	3,5	;RP0=0, select bank0
  5249  1529  1303               	bcf	3,6	;RP1=0, select bank0
  5250  152A  0860               	movf	?_CalcMQ135+2,w
  5251  152B  1683               	bsf	3,5	;RP0=1, select bank1
  5252  152C  1303               	bcf	3,6	;RP1=0, select bank1
  5253  152D  00D9               	movwf	(_PPM+2)^(0+128)	;volatile
  5254  152E  0008               	return
  5255  152F                     __end_of_runMQ135:	
  5256                           
  5257                           	psect	text23
  5258  15E5                     __ptext23:	
  5259 ;; *************** function _readADC *****************
  5260 ;; Defined at:
  5261 ;;		line 23 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\common_depen
      +dencies.h"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;  channel         1    wreg     unsigned char 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  channel         1    4[BANK0 ] unsigned char 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  2    0[BANK0 ] int 
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5275 ;;      Params:         0       2       0       0       0
  5276 ;;      Locals:         0       1       0       0       0
  5277 ;;      Temps:          0       2       0       0       0
  5278 ;;      Totals:         0       5       0       0       0
  5279 ;;Total ram usage:        5 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    2
  5282 ;; This function calls:
  5283 ;;		Nothing
  5284 ;; This function is called by:
  5285 ;;		_runMQ135
  5286 ;;		_main
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           
  5291                           ;psect for function _readADC
  5292  15E5                     _readADC:	
  5293                           
  5294                           ;incstack = 0
  5295                           ; Regs used in _readADC: [wreg+status,2+status,0]
  5296                           ;readADC@channel stored from wreg
  5297  15E5  1283               	bcf	3,5	;RP0=0, select bank0
  5298  15E6  1303               	bcf	3,6	;RP1=0, select bank0
  5299  15E7  00A4               	movwf	readADC@channel
  5300                           
  5301                           ;common_dependencies.h: 25: ADCON0 &= 0xC3;
  5302  15E8  30C3               	movlw	195
  5303  15E9  00A2               	movwf	??_readADC
  5304  15EA  0822               	movf	??_readADC,w
  5305  15EB  059F               	andwf	31,f	;volatile
  5306                           
  5307                           ;common_dependencies.h: 26: ADCON0 |= (channel << 3);
  5308  15EC  0824               	movf	readADC@channel,w
  5309  15ED  00A2               	movwf	??_readADC
  5310  15EE  3002               	movlw	2
  5311  15EF                     u3095:	
  5312  15EF  1003               	clrc
  5313  15F0  0DA2               	rlf	??_readADC,f
  5314  15F1  3EFF               	addlw	-1
  5315  15F2  1D03               	skipz
  5316  15F3  2DEF               	goto	u3095
  5317  15F4  1003               	clrc
  5318  15F5  0D22               	rlf	??_readADC,w
  5319  15F6  00A3               	movwf	??_readADC+1
  5320  15F7  0823               	movf	??_readADC+1,w
  5321  15F8  049F               	iorwf	31,f	;volatile
  5322                           
  5323                           ;common_dependencies.h: 27: _delay((unsigned long)((20)*(4000000/4000000.0)));
  5324  15F9  3006               	movlw	6
  5325  15FA  00A2               	movwf	??_readADC
  5326  15FB                     u4827:	
  5327  15FB  0BA2               	decfsz	??_readADC,f
  5328  15FC  2DFB               	goto	u4827
  5329  15FD  0000               	nop
  5330                           
  5331                           ;common_dependencies.h: 28: GO_DONE = 1;
  5332  15FE  1283               	bcf	3,5	;RP0=0, select bank0
  5333  15FF  1303               	bcf	3,6	;RP1=0, select bank0
  5334  1600  151F               	bsf	31,2	;volatile
  5335  1601                     l71:	
  5336                           ;common_dependencies.h: 30: ;
  5337                           
  5338                           ;common_dependencies.h: 29: while (GO_DONE)
  5339                           
  5340  1601  191F               	btfsc	31,2	;volatile
  5341  1602  2E01               	goto	l71
  5342                           
  5343                           ;common_dependencies.h: 31: return ((ADRESH << 8) + ADRESL);
  5344  1603  081E               	movf	30,w	;volatile
  5345  1604  01A1               	clrf	?_readADC+1
  5346  1605  07A1               	addwf	?_readADC+1,f
  5347  1606  1683               	bsf	3,5	;RP0=1, select bank1
  5348  1607  1303               	bcf	3,6	;RP1=0, select bank1
  5349  1608  081E               	movf	30,w	;volatile
  5350  1609  1283               	bcf	3,5	;RP0=0, select bank0
  5351  160A  1303               	bcf	3,6	;RP1=0, select bank0
  5352  160B  01A0               	clrf	?_readADC
  5353  160C  07A0               	addwf	?_readADC,f
  5354  160D  0008               	return
  5355  160E                     __end_of_readADC:	
  5356                           
  5357                           	psect	text24
  5358  0051                     __ptext24:	
  5359 ;; *************** function _CalcMQ135 *****************
  5360 ;; Defined at:
  5361 ;;		line 93 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  RAW_ADC         2   62[BANK0 ] int 
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;  ratio           3   36[BANK1 ] float 
  5366 ;;  co2             3   33[BANK1 ] float 
  5367 ;;  ratio5          3   30[BANK1 ] float 
  5368 ;;  ratio4          3   27[BANK1 ] float 
  5369 ;;  ratio3          3   24[BANK1 ] float 
  5370 ;;  ratio2          3   21[BANK1 ] float 
  5371 ;;  ratio6          3    3[BANK1 ] float 
  5372 ;;  voltage         3    0[BANK1 ] float 
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  3   62[BANK0 ] float 
  5375 ;; Registers used:
  5376 ;;		wreg, status,2, status,0, pclath, cstack
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5382 ;;      Params:         0       3       0       0       0
  5383 ;;      Locals:         0       0      39       0       0
  5384 ;;      Temps:          0       0       0       0       0
  5385 ;;      Totals:         0       3      39       0       0
  5386 ;;Total ram usage:       42 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    4
  5389 ;; This function calls:
  5390 ;;		___awtoft
  5391 ;;		___ftadd
  5392 ;;		___ftdiv
  5393 ;;		___ftmul
  5394 ;; This function is called by:
  5395 ;;		_runMQ135
  5396 ;; This function uses a non-reentrant model
  5397 ;;
  5398                           
  5399                           
  5400                           ;psect for function _CalcMQ135
  5401  0051                     _CalcMQ135:	
  5402                           
  5403                           ;mq135_module.h: 95: float voltage = (RAW_ADC * 5.0) / 1023.0;
  5404                           
  5405                           ;incstack = 0
  5406                           ; Regs used in _CalcMQ135: [wreg+status,2+status,0+pclath+cstack]
  5407  0051  30C0               	movlw	192
  5408  0052  1283               	bcf	3,5	;RP0=0, select bank0
  5409  0053  1303               	bcf	3,6	;RP1=0, select bank0
  5410  0054  00CE               	movwf	___ftdiv@f2
  5411  0055  307F               	movlw	127
  5412  0056  00CF               	movwf	___ftdiv@f2+1
  5413  0057  3044               	movlw	68
  5414  0058  00D0               	movwf	___ftdiv@f2+2
  5415  0059  3000               	movlw	0
  5416  005A  00BE               	movwf	___ftmul@f1
  5417  005B  30A0               	movlw	160
  5418  005C  00BF               	movwf	___ftmul@f1+1
  5419  005D  3040               	movlw	64
  5420  005E  00C0               	movwf	___ftmul@f1+2
  5421  005F  085F               	movf	CalcMQ135@RAW_ADC+1,w
  5422  0060  01A9               	clrf	___awtoft@c+1
  5423  0061  07A9               	addwf	___awtoft@c+1,f
  5424  0062  085E               	movf	CalcMQ135@RAW_ADC,w
  5425  0063  01A8               	clrf	___awtoft@c
  5426  0064  07A8               	addwf	___awtoft@c,f
  5427  0065  160A  118A  25C0  120A  118A  	fcall	___awtoft
  5428  006A  1283               	bcf	3,5	;RP0=0, select bank0
  5429  006B  1303               	bcf	3,6	;RP1=0, select bank0
  5430  006C  0828               	movf	?___awtoft,w
  5431  006D  00C1               	movwf	___ftmul@f2
  5432  006E  0829               	movf	?___awtoft+1,w
  5433  006F  00C2               	movwf	___ftmul@f2+1
  5434  0070  082A               	movf	?___awtoft+2,w
  5435  0071  00C3               	movwf	___ftmul@f2+2
  5436  0072  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5437  0077  1283               	bcf	3,5	;RP0=0, select bank0
  5438  0078  1303               	bcf	3,6	;RP1=0, select bank0
  5439  0079  083E               	movf	?___ftmul,w
  5440  007A  00D1               	movwf	___ftdiv@f1
  5441  007B  083F               	movf	?___ftmul+1,w
  5442  007C  00D2               	movwf	___ftdiv@f1+1
  5443  007D  0840               	movf	?___ftmul+2,w
  5444  007E  00D3               	movwf	___ftdiv@f1+2
  5445  007F  120A  158A  2203  120A  118A  	fcall	___ftdiv
  5446  0084  1283               	bcf	3,5	;RP0=0, select bank0
  5447  0085  1303               	bcf	3,6	;RP1=0, select bank0
  5448  0086  084E               	movf	?___ftdiv,w
  5449  0087  1683               	bsf	3,5	;RP0=1, select bank1
  5450  0088  1303               	bcf	3,6	;RP1=0, select bank1
  5451  0089  00A0               	movwf	CalcMQ135@voltage^(0+128)
  5452  008A  1283               	bcf	3,5	;RP0=0, select bank0
  5453  008B  1303               	bcf	3,6	;RP1=0, select bank0
  5454  008C  084F               	movf	?___ftdiv+1,w
  5455  008D  1683               	bsf	3,5	;RP0=1, select bank1
  5456  008E  1303               	bcf	3,6	;RP1=0, select bank1
  5457  008F  00A1               	movwf	(CalcMQ135@voltage+1)^(0+128)
  5458  0090  1283               	bcf	3,5	;RP0=0, select bank0
  5459  0091  1303               	bcf	3,6	;RP1=0, select bank0
  5460  0092  0850               	movf	?___ftdiv+2,w
  5461  0093  1683               	bsf	3,5	;RP0=1, select bank1
  5462  0094  1303               	bcf	3,6	;RP1=0, select bank1
  5463  0095  00A2               	movwf	(CalcMQ135@voltage+2)^(0+128)
  5464                           
  5465                           ;mq135_module.h: 96: float ratio = voltage / 5.0;
  5466  0096  3000               	movlw	0
  5467  0097  1283               	bcf	3,5	;RP0=0, select bank0
  5468  0098  1303               	bcf	3,6	;RP1=0, select bank0
  5469  0099  00CE               	movwf	___ftdiv@f2
  5470  009A  30A0               	movlw	160
  5471  009B  00CF               	movwf	___ftdiv@f2+1
  5472  009C  3040               	movlw	64
  5473  009D  00D0               	movwf	___ftdiv@f2+2
  5474  009E  1683               	bsf	3,5	;RP0=1, select bank1
  5475  009F  1303               	bcf	3,6	;RP1=0, select bank1
  5476  00A0  0820               	movf	CalcMQ135@voltage^(0+128),w
  5477  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  5478  00A2  1303               	bcf	3,6	;RP1=0, select bank0
  5479  00A3  00D1               	movwf	___ftdiv@f1
  5480  00A4  1683               	bsf	3,5	;RP0=1, select bank1
  5481  00A5  1303               	bcf	3,6	;RP1=0, select bank1
  5482  00A6  0821               	movf	(CalcMQ135@voltage+1)^(0+128),w
  5483  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  5484  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  5485  00A9  00D2               	movwf	___ftdiv@f1+1
  5486  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  5487  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  5488  00AC  0822               	movf	(CalcMQ135@voltage+2)^(0+128),w
  5489  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  5490  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  5491  00AF  00D3               	movwf	___ftdiv@f1+2
  5492  00B0  120A  158A  2203  120A  118A  	fcall	___ftdiv
  5493  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  5494  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  5495  00B7  084E               	movf	?___ftdiv,w
  5496  00B8  1683               	bsf	3,5	;RP0=1, select bank1
  5497  00B9  1303               	bcf	3,6	;RP1=0, select bank1
  5498  00BA  00C4               	movwf	CalcMQ135@ratio^(0+128)
  5499  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  5500  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  5501  00BD  084F               	movf	?___ftdiv+1,w
  5502  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  5503  00BF  1303               	bcf	3,6	;RP1=0, select bank1
  5504  00C0  00C5               	movwf	(CalcMQ135@ratio+1)^(0+128)
  5505  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  5506  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  5507  00C3  0850               	movf	?___ftdiv+2,w
  5508  00C4  1683               	bsf	3,5	;RP0=1, select bank1
  5509  00C5  1303               	bcf	3,6	;RP1=0, select bank1
  5510  00C6  00C6               	movwf	(CalcMQ135@ratio+2)^(0+128)
  5511                           
  5512                           ;mq135_module.h: 99: float ratio2 = ratio * ratio;
  5513  00C7  0844               	movf	CalcMQ135@ratio^(0+128),w
  5514  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  5515  00C9  1303               	bcf	3,6	;RP1=0, select bank0
  5516  00CA  00BE               	movwf	___ftmul@f1
  5517  00CB  1683               	bsf	3,5	;RP0=1, select bank1
  5518  00CC  1303               	bcf	3,6	;RP1=0, select bank1
  5519  00CD  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5520  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  5521  00CF  1303               	bcf	3,6	;RP1=0, select bank0
  5522  00D0  00BF               	movwf	___ftmul@f1+1
  5523  00D1  1683               	bsf	3,5	;RP0=1, select bank1
  5524  00D2  1303               	bcf	3,6	;RP1=0, select bank1
  5525  00D3  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5526  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  5527  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  5528  00D6  00C0               	movwf	___ftmul@f1+2
  5529  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  5530  00D8  1303               	bcf	3,6	;RP1=0, select bank1
  5531  00D9  0844               	movf	CalcMQ135@ratio^(0+128),w
  5532  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  5533  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  5534  00DC  00C1               	movwf	___ftmul@f2
  5535  00DD  1683               	bsf	3,5	;RP0=1, select bank1
  5536  00DE  1303               	bcf	3,6	;RP1=0, select bank1
  5537  00DF  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5538  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  5539  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  5540  00E2  00C2               	movwf	___ftmul@f2+1
  5541  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  5542  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  5543  00E5  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5544  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  5545  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  5546  00E8  00C3               	movwf	___ftmul@f2+2
  5547  00E9  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5548  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  5549  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  5550  00F0  083E               	movf	?___ftmul,w
  5551  00F1  1683               	bsf	3,5	;RP0=1, select bank1
  5552  00F2  1303               	bcf	3,6	;RP1=0, select bank1
  5553  00F3  00B5               	movwf	CalcMQ135@ratio2^(0+128)
  5554  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  5555  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  5556  00F6  083F               	movf	?___ftmul+1,w
  5557  00F7  1683               	bsf	3,5	;RP0=1, select bank1
  5558  00F8  1303               	bcf	3,6	;RP1=0, select bank1
  5559  00F9  00B6               	movwf	(CalcMQ135@ratio2+1)^(0+128)
  5560  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  5561  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  5562  00FC  0840               	movf	?___ftmul+2,w
  5563  00FD  1683               	bsf	3,5	;RP0=1, select bank1
  5564  00FE  1303               	bcf	3,6	;RP1=0, select bank1
  5565  00FF  00B7               	movwf	(CalcMQ135@ratio2+2)^(0+128)
  5566                           
  5567                           ;mq135_module.h: 100: float ratio3 = ratio2 * ratio;
  5568  0100  0844               	movf	CalcMQ135@ratio^(0+128),w
  5569  0101  1283               	bcf	3,5	;RP0=0, select bank0
  5570  0102  1303               	bcf	3,6	;RP1=0, select bank0
  5571  0103  00BE               	movwf	___ftmul@f1
  5572  0104  1683               	bsf	3,5	;RP0=1, select bank1
  5573  0105  1303               	bcf	3,6	;RP1=0, select bank1
  5574  0106  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5575  0107  1283               	bcf	3,5	;RP0=0, select bank0
  5576  0108  1303               	bcf	3,6	;RP1=0, select bank0
  5577  0109  00BF               	movwf	___ftmul@f1+1
  5578  010A  1683               	bsf	3,5	;RP0=1, select bank1
  5579  010B  1303               	bcf	3,6	;RP1=0, select bank1
  5580  010C  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5581  010D  1283               	bcf	3,5	;RP0=0, select bank0
  5582  010E  1303               	bcf	3,6	;RP1=0, select bank0
  5583  010F  00C0               	movwf	___ftmul@f1+2
  5584  0110  1683               	bsf	3,5	;RP0=1, select bank1
  5585  0111  1303               	bcf	3,6	;RP1=0, select bank1
  5586  0112  0835               	movf	CalcMQ135@ratio2^(0+128),w
  5587  0113  1283               	bcf	3,5	;RP0=0, select bank0
  5588  0114  1303               	bcf	3,6	;RP1=0, select bank0
  5589  0115  00C1               	movwf	___ftmul@f2
  5590  0116  1683               	bsf	3,5	;RP0=1, select bank1
  5591  0117  1303               	bcf	3,6	;RP1=0, select bank1
  5592  0118  0836               	movf	(CalcMQ135@ratio2+1)^(0+128),w
  5593  0119  1283               	bcf	3,5	;RP0=0, select bank0
  5594  011A  1303               	bcf	3,6	;RP1=0, select bank0
  5595  011B  00C2               	movwf	___ftmul@f2+1
  5596  011C  1683               	bsf	3,5	;RP0=1, select bank1
  5597  011D  1303               	bcf	3,6	;RP1=0, select bank1
  5598  011E  0837               	movf	(CalcMQ135@ratio2+2)^(0+128),w
  5599  011F  1283               	bcf	3,5	;RP0=0, select bank0
  5600  0120  1303               	bcf	3,6	;RP1=0, select bank0
  5601  0121  00C3               	movwf	___ftmul@f2+2
  5602  0122  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5603  0127  1283               	bcf	3,5	;RP0=0, select bank0
  5604  0128  1303               	bcf	3,6	;RP1=0, select bank0
  5605  0129  083E               	movf	?___ftmul,w
  5606  012A  1683               	bsf	3,5	;RP0=1, select bank1
  5607  012B  1303               	bcf	3,6	;RP1=0, select bank1
  5608  012C  00B8               	movwf	CalcMQ135@ratio3^(0+128)
  5609  012D  1283               	bcf	3,5	;RP0=0, select bank0
  5610  012E  1303               	bcf	3,6	;RP1=0, select bank0
  5611  012F  083F               	movf	?___ftmul+1,w
  5612  0130  1683               	bsf	3,5	;RP0=1, select bank1
  5613  0131  1303               	bcf	3,6	;RP1=0, select bank1
  5614  0132  00B9               	movwf	(CalcMQ135@ratio3+1)^(0+128)
  5615  0133  1283               	bcf	3,5	;RP0=0, select bank0
  5616  0134  1303               	bcf	3,6	;RP1=0, select bank0
  5617  0135  0840               	movf	?___ftmul+2,w
  5618  0136  1683               	bsf	3,5	;RP0=1, select bank1
  5619  0137  1303               	bcf	3,6	;RP1=0, select bank1
  5620  0138  00BA               	movwf	(CalcMQ135@ratio3+2)^(0+128)
  5621                           
  5622                           ;mq135_module.h: 101: float ratio4 = ratio3 * ratio;
  5623  0139  0844               	movf	CalcMQ135@ratio^(0+128),w
  5624  013A  1283               	bcf	3,5	;RP0=0, select bank0
  5625  013B  1303               	bcf	3,6	;RP1=0, select bank0
  5626  013C  00BE               	movwf	___ftmul@f1
  5627  013D  1683               	bsf	3,5	;RP0=1, select bank1
  5628  013E  1303               	bcf	3,6	;RP1=0, select bank1
  5629  013F  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5630  0140  1283               	bcf	3,5	;RP0=0, select bank0
  5631  0141  1303               	bcf	3,6	;RP1=0, select bank0
  5632  0142  00BF               	movwf	___ftmul@f1+1
  5633  0143  1683               	bsf	3,5	;RP0=1, select bank1
  5634  0144  1303               	bcf	3,6	;RP1=0, select bank1
  5635  0145  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5636  0146  1283               	bcf	3,5	;RP0=0, select bank0
  5637  0147  1303               	bcf	3,6	;RP1=0, select bank0
  5638  0148  00C0               	movwf	___ftmul@f1+2
  5639  0149  1683               	bsf	3,5	;RP0=1, select bank1
  5640  014A  1303               	bcf	3,6	;RP1=0, select bank1
  5641  014B  0838               	movf	CalcMQ135@ratio3^(0+128),w
  5642  014C  1283               	bcf	3,5	;RP0=0, select bank0
  5643  014D  1303               	bcf	3,6	;RP1=0, select bank0
  5644  014E  00C1               	movwf	___ftmul@f2
  5645  014F  1683               	bsf	3,5	;RP0=1, select bank1
  5646  0150  1303               	bcf	3,6	;RP1=0, select bank1
  5647  0151  0839               	movf	(CalcMQ135@ratio3+1)^(0+128),w
  5648  0152  1283               	bcf	3,5	;RP0=0, select bank0
  5649  0153  1303               	bcf	3,6	;RP1=0, select bank0
  5650  0154  00C2               	movwf	___ftmul@f2+1
  5651  0155  1683               	bsf	3,5	;RP0=1, select bank1
  5652  0156  1303               	bcf	3,6	;RP1=0, select bank1
  5653  0157  083A               	movf	(CalcMQ135@ratio3+2)^(0+128),w
  5654  0158  1283               	bcf	3,5	;RP0=0, select bank0
  5655  0159  1303               	bcf	3,6	;RP1=0, select bank0
  5656  015A  00C3               	movwf	___ftmul@f2+2
  5657  015B  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5658  0160  1283               	bcf	3,5	;RP0=0, select bank0
  5659  0161  1303               	bcf	3,6	;RP1=0, select bank0
  5660  0162  083E               	movf	?___ftmul,w
  5661  0163  1683               	bsf	3,5	;RP0=1, select bank1
  5662  0164  1303               	bcf	3,6	;RP1=0, select bank1
  5663  0165  00BB               	movwf	CalcMQ135@ratio4^(0+128)
  5664  0166  1283               	bcf	3,5	;RP0=0, select bank0
  5665  0167  1303               	bcf	3,6	;RP1=0, select bank0
  5666  0168  083F               	movf	?___ftmul+1,w
  5667  0169  1683               	bsf	3,5	;RP0=1, select bank1
  5668  016A  1303               	bcf	3,6	;RP1=0, select bank1
  5669  016B  00BC               	movwf	(CalcMQ135@ratio4+1)^(0+128)
  5670  016C  1283               	bcf	3,5	;RP0=0, select bank0
  5671  016D  1303               	bcf	3,6	;RP1=0, select bank0
  5672  016E  0840               	movf	?___ftmul+2,w
  5673  016F  1683               	bsf	3,5	;RP0=1, select bank1
  5674  0170  1303               	bcf	3,6	;RP1=0, select bank1
  5675  0171  00BD               	movwf	(CalcMQ135@ratio4+2)^(0+128)
  5676                           
  5677                           ;mq135_module.h: 102: float ratio5 = ratio4 * ratio;
  5678  0172  0844               	movf	CalcMQ135@ratio^(0+128),w
  5679  0173  1283               	bcf	3,5	;RP0=0, select bank0
  5680  0174  1303               	bcf	3,6	;RP1=0, select bank0
  5681  0175  00BE               	movwf	___ftmul@f1
  5682  0176  1683               	bsf	3,5	;RP0=1, select bank1
  5683  0177  1303               	bcf	3,6	;RP1=0, select bank1
  5684  0178  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5685  0179  1283               	bcf	3,5	;RP0=0, select bank0
  5686  017A  1303               	bcf	3,6	;RP1=0, select bank0
  5687  017B  00BF               	movwf	___ftmul@f1+1
  5688  017C  1683               	bsf	3,5	;RP0=1, select bank1
  5689  017D  1303               	bcf	3,6	;RP1=0, select bank1
  5690  017E  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5691  017F  1283               	bcf	3,5	;RP0=0, select bank0
  5692  0180  1303               	bcf	3,6	;RP1=0, select bank0
  5693  0181  00C0               	movwf	___ftmul@f1+2
  5694  0182  1683               	bsf	3,5	;RP0=1, select bank1
  5695  0183  1303               	bcf	3,6	;RP1=0, select bank1
  5696  0184  083B               	movf	CalcMQ135@ratio4^(0+128),w
  5697  0185  1283               	bcf	3,5	;RP0=0, select bank0
  5698  0186  1303               	bcf	3,6	;RP1=0, select bank0
  5699  0187  00C1               	movwf	___ftmul@f2
  5700  0188  1683               	bsf	3,5	;RP0=1, select bank1
  5701  0189  1303               	bcf	3,6	;RP1=0, select bank1
  5702  018A  083C               	movf	(CalcMQ135@ratio4+1)^(0+128),w
  5703  018B  1283               	bcf	3,5	;RP0=0, select bank0
  5704  018C  1303               	bcf	3,6	;RP1=0, select bank0
  5705  018D  00C2               	movwf	___ftmul@f2+1
  5706  018E  1683               	bsf	3,5	;RP0=1, select bank1
  5707  018F  1303               	bcf	3,6	;RP1=0, select bank1
  5708  0190  083D               	movf	(CalcMQ135@ratio4+2)^(0+128),w
  5709  0191  1283               	bcf	3,5	;RP0=0, select bank0
  5710  0192  1303               	bcf	3,6	;RP1=0, select bank0
  5711  0193  00C3               	movwf	___ftmul@f2+2
  5712  0194  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5713  0199  1283               	bcf	3,5	;RP0=0, select bank0
  5714  019A  1303               	bcf	3,6	;RP1=0, select bank0
  5715  019B  083E               	movf	?___ftmul,w
  5716  019C  1683               	bsf	3,5	;RP0=1, select bank1
  5717  019D  1303               	bcf	3,6	;RP1=0, select bank1
  5718  019E  00BE               	movwf	CalcMQ135@ratio5^(0+128)
  5719  019F  1283               	bcf	3,5	;RP0=0, select bank0
  5720  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  5721  01A1  083F               	movf	?___ftmul+1,w
  5722  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  5723  01A3  1303               	bcf	3,6	;RP1=0, select bank1
  5724  01A4  00BF               	movwf	(CalcMQ135@ratio5+1)^(0+128)
  5725  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  5726  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  5727  01A7  0840               	movf	?___ftmul+2,w
  5728  01A8  1683               	bsf	3,5	;RP0=1, select bank1
  5729  01A9  1303               	bcf	3,6	;RP1=0, select bank1
  5730  01AA  00C0               	movwf	(CalcMQ135@ratio5+2)^(0+128)
  5731                           
  5732                           ;mq135_module.h: 103: float ratio6 = ratio5 * ratio;
  5733  01AB  0844               	movf	CalcMQ135@ratio^(0+128),w
  5734  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  5735  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  5736  01AE  00BE               	movwf	___ftmul@f1
  5737  01AF  1683               	bsf	3,5	;RP0=1, select bank1
  5738  01B0  1303               	bcf	3,6	;RP1=0, select bank1
  5739  01B1  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5740  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  5741  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  5742  01B4  00BF               	movwf	___ftmul@f1+1
  5743  01B5  1683               	bsf	3,5	;RP0=1, select bank1
  5744  01B6  1303               	bcf	3,6	;RP1=0, select bank1
  5745  01B7  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5746  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  5747  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  5748  01BA  00C0               	movwf	___ftmul@f1+2
  5749  01BB  1683               	bsf	3,5	;RP0=1, select bank1
  5750  01BC  1303               	bcf	3,6	;RP1=0, select bank1
  5751  01BD  083E               	movf	CalcMQ135@ratio5^(0+128),w
  5752  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  5753  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  5754  01C0  00C1               	movwf	___ftmul@f2
  5755  01C1  1683               	bsf	3,5	;RP0=1, select bank1
  5756  01C2  1303               	bcf	3,6	;RP1=0, select bank1
  5757  01C3  083F               	movf	(CalcMQ135@ratio5+1)^(0+128),w
  5758  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  5759  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  5760  01C6  00C2               	movwf	___ftmul@f2+1
  5761  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  5762  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  5763  01C9  0840               	movf	(CalcMQ135@ratio5+2)^(0+128),w
  5764  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  5765  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  5766  01CC  00C3               	movwf	___ftmul@f2+2
  5767  01CD  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5768  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  5769  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  5770  01D4  083E               	movf	?___ftmul,w
  5771  01D5  1683               	bsf	3,5	;RP0=1, select bank1
  5772  01D6  1303               	bcf	3,6	;RP1=0, select bank1
  5773  01D7  00A3               	movwf	CalcMQ135@ratio6^(0+128)
  5774  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  5775  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  5776  01DA  083F               	movf	?___ftmul+1,w
  5777  01DB  1683               	bsf	3,5	;RP0=1, select bank1
  5778  01DC  1303               	bcf	3,6	;RP1=0, select bank1
  5779  01DD  00A4               	movwf	(CalcMQ135@ratio6+1)^(0+128)
  5780  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  5781  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  5782  01E0  0840               	movf	?___ftmul+2,w
  5783  01E1  1683               	bsf	3,5	;RP0=1, select bank1
  5784  01E2  1303               	bcf	3,6	;RP1=0, select bank1
  5785  01E3  00A5               	movwf	(CalcMQ135@ratio6+2)^(0+128)
  5786                           
  5787                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  5788                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  5789  01E4  309C               	movlw	156
  5790  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  5791  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  5792  01E7  00BE               	movwf	___ftmul@f1
  5793  01E8  30B2               	movlw	178
  5794  01E9  00BF               	movwf	___ftmul@f1+1
  5795  01EA  303F               	movlw	63
  5796  01EB  00C0               	movwf	___ftmul@f1+2
  5797  01EC  1683               	bsf	3,5	;RP0=1, select bank1
  5798  01ED  1303               	bcf	3,6	;RP1=0, select bank1
  5799  01EE  0835               	movf	CalcMQ135@ratio2^(0+128),w
  5800  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  5801  01F0  1303               	bcf	3,6	;RP1=0, select bank0
  5802  01F1  00C1               	movwf	___ftmul@f2
  5803  01F2  1683               	bsf	3,5	;RP0=1, select bank1
  5804  01F3  1303               	bcf	3,6	;RP1=0, select bank1
  5805  01F4  0836               	movf	(CalcMQ135@ratio2+1)^(0+128),w
  5806  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  5807  01F6  1303               	bcf	3,6	;RP1=0, select bank0
  5808  01F7  00C2               	movwf	___ftmul@f2+1
  5809  01F8  1683               	bsf	3,5	;RP0=1, select bank1
  5810  01F9  1303               	bcf	3,6	;RP1=0, select bank1
  5811  01FA  0837               	movf	(CalcMQ135@ratio2+2)^(0+128),w
  5812  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  5813  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  5814  01FD  00C3               	movwf	___ftmul@f2+2
  5815  01FE  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5816  0203  1283               	bcf	3,5	;RP0=0, select bank0
  5817  0204  1303               	bcf	3,6	;RP1=0, select bank0
  5818  0205  083E               	movf	?___ftmul,w
  5819  0206  00B1               	movwf	___ftadd@f1
  5820  0207  083F               	movf	?___ftmul+1,w
  5821  0208  00B2               	movwf	___ftadd@f1+1
  5822  0209  0840               	movf	?___ftmul+2,w
  5823  020A  00B3               	movwf	___ftadd@f1+2
  5824  020B  30A9               	movlw	169
  5825  020C  00BE               	movwf	___ftmul@f1
  5826  020D  30DE               	movlw	222
  5827  020E  00BF               	movwf	___ftmul@f1+1
  5828  020F  303C               	movlw	60
  5829  0210  00C0               	movwf	___ftmul@f1+2
  5830  0211  1683               	bsf	3,5	;RP0=1, select bank1
  5831  0212  1303               	bcf	3,6	;RP1=0, select bank1
  5832  0213  0844               	movf	CalcMQ135@ratio^(0+128),w
  5833  0214  1283               	bcf	3,5	;RP0=0, select bank0
  5834  0215  1303               	bcf	3,6	;RP1=0, select bank0
  5835  0216  00C1               	movwf	___ftmul@f2
  5836  0217  1683               	bsf	3,5	;RP0=1, select bank1
  5837  0218  1303               	bcf	3,6	;RP1=0, select bank1
  5838  0219  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5839  021A  1283               	bcf	3,5	;RP0=0, select bank0
  5840  021B  1303               	bcf	3,6	;RP1=0, select bank0
  5841  021C  00C2               	movwf	___ftmul@f2+1
  5842  021D  1683               	bsf	3,5	;RP0=1, select bank1
  5843  021E  1303               	bcf	3,6	;RP1=0, select bank1
  5844  021F  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5845  0220  1283               	bcf	3,5	;RP0=0, select bank0
  5846  0221  1303               	bcf	3,6	;RP1=0, select bank0
  5847  0222  00C3               	movwf	___ftmul@f2+2
  5848  0223  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5849  0228  1283               	bcf	3,5	;RP0=0, select bank0
  5850  0229  1303               	bcf	3,6	;RP1=0, select bank0
  5851  022A  083E               	movf	?___ftmul,w
  5852  022B  00B4               	movwf	___ftadd@f2
  5853  022C  083F               	movf	?___ftmul+1,w
  5854  022D  00B5               	movwf	___ftadd@f2+1
  5855  022E  0840               	movf	?___ftmul+2,w
  5856  022F  00B6               	movwf	___ftadd@f2+2
  5857  0230  120A  158A  25CE  120A  118A  	fcall	___ftadd
  5858  0235  1283               	bcf	3,5	;RP0=0, select bank0
  5859  0236  1303               	bcf	3,6	;RP1=0, select bank0
  5860  0237  0831               	movf	?___ftadd,w
  5861  0238  1683               	bsf	3,5	;RP0=1, select bank1
  5862  0239  1303               	bcf	3,6	;RP1=0, select bank1
  5863  023A  00A6               	movwf	_CalcMQ135$682^(0+128)
  5864  023B  1283               	bcf	3,5	;RP0=0, select bank0
  5865  023C  1303               	bcf	3,6	;RP1=0, select bank0
  5866  023D  0832               	movf	?___ftadd+1,w
  5867  023E  1683               	bsf	3,5	;RP0=1, select bank1
  5868  023F  1303               	bcf	3,6	;RP1=0, select bank1
  5869  0240  00A7               	movwf	(_CalcMQ135$682+1)^(0+128)
  5870  0241  1283               	bcf	3,5	;RP0=0, select bank0
  5871  0242  1303               	bcf	3,6	;RP1=0, select bank0
  5872  0243  0833               	movf	?___ftadd+2,w
  5873  0244  1683               	bsf	3,5	;RP0=1, select bank1
  5874  0245  1303               	bcf	3,6	;RP1=0, select bank1
  5875  0246  00A8               	movwf	(_CalcMQ135$682+2)^(0+128)
  5876                           
  5877                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  5878                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  5879  0247  30EE               	movlw	238
  5880  0248  1283               	bcf	3,5	;RP0=0, select bank0
  5881  0249  1303               	bcf	3,6	;RP1=0, select bank0
  5882  024A  00BE               	movwf	___ftmul@f1
  5883  024B  30EB               	movlw	235
  5884  024C  00BF               	movwf	___ftmul@f1+1
  5885  024D  303A               	movlw	58
  5886  024E  00C0               	movwf	___ftmul@f1+2
  5887  024F  1683               	bsf	3,5	;RP0=1, select bank1
  5888  0250  1303               	bcf	3,6	;RP1=0, select bank1
  5889  0251  0838               	movf	CalcMQ135@ratio3^(0+128),w
  5890  0252  1283               	bcf	3,5	;RP0=0, select bank0
  5891  0253  1303               	bcf	3,6	;RP1=0, select bank0
  5892  0254  00C1               	movwf	___ftmul@f2
  5893  0255  1683               	bsf	3,5	;RP0=1, select bank1
  5894  0256  1303               	bcf	3,6	;RP1=0, select bank1
  5895  0257  0839               	movf	(CalcMQ135@ratio3+1)^(0+128),w
  5896  0258  1283               	bcf	3,5	;RP0=0, select bank0
  5897  0259  1303               	bcf	3,6	;RP1=0, select bank0
  5898  025A  00C2               	movwf	___ftmul@f2+1
  5899  025B  1683               	bsf	3,5	;RP0=1, select bank1
  5900  025C  1303               	bcf	3,6	;RP1=0, select bank1
  5901  025D  083A               	movf	(CalcMQ135@ratio3+2)^(0+128),w
  5902  025E  1283               	bcf	3,5	;RP0=0, select bank0
  5903  025F  1303               	bcf	3,6	;RP1=0, select bank0
  5904  0260  00C3               	movwf	___ftmul@f2+2
  5905  0261  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5906  0266  1283               	bcf	3,5	;RP0=0, select bank0
  5907  0267  1303               	bcf	3,6	;RP1=0, select bank0
  5908  0268  083E               	movf	?___ftmul,w
  5909  0269  00B1               	movwf	___ftadd@f1
  5910  026A  083F               	movf	?___ftmul+1,w
  5911  026B  00B2               	movwf	___ftadd@f1+1
  5912  026C  0840               	movf	?___ftmul+2,w
  5913  026D  00B3               	movwf	___ftadd@f1+2
  5914  026E  1683               	bsf	3,5	;RP0=1, select bank1
  5915  026F  1303               	bcf	3,6	;RP1=0, select bank1
  5916  0270  0826               	movf	_CalcMQ135$682^(0+128),w
  5917  0271  1283               	bcf	3,5	;RP0=0, select bank0
  5918  0272  1303               	bcf	3,6	;RP1=0, select bank0
  5919  0273  00B4               	movwf	___ftadd@f2
  5920  0274  1683               	bsf	3,5	;RP0=1, select bank1
  5921  0275  1303               	bcf	3,6	;RP1=0, select bank1
  5922  0276  0827               	movf	(_CalcMQ135$682+1)^(0+128),w
  5923  0277  1283               	bcf	3,5	;RP0=0, select bank0
  5924  0278  1303               	bcf	3,6	;RP1=0, select bank0
  5925  0279  00B5               	movwf	___ftadd@f2+1
  5926  027A  1683               	bsf	3,5	;RP0=1, select bank1
  5927  027B  1303               	bcf	3,6	;RP1=0, select bank1
  5928  027C  0828               	movf	(_CalcMQ135$682+2)^(0+128),w
  5929  027D  1283               	bcf	3,5	;RP0=0, select bank0
  5930  027E  1303               	bcf	3,6	;RP1=0, select bank0
  5931  027F  00B6               	movwf	___ftadd@f2+2
  5932  0280  120A  158A  25CE  120A  118A  	fcall	___ftadd
  5933  0285  1283               	bcf	3,5	;RP0=0, select bank0
  5934  0286  1303               	bcf	3,6	;RP1=0, select bank0
  5935  0287  0831               	movf	?___ftadd,w
  5936  0288  1683               	bsf	3,5	;RP0=1, select bank1
  5937  0289  1303               	bcf	3,6	;RP1=0, select bank1
  5938  028A  00A9               	movwf	_CalcMQ135$683^(0+128)
  5939  028B  1283               	bcf	3,5	;RP0=0, select bank0
  5940  028C  1303               	bcf	3,6	;RP1=0, select bank0
  5941  028D  0832               	movf	?___ftadd+1,w
  5942  028E  1683               	bsf	3,5	;RP0=1, select bank1
  5943  028F  1303               	bcf	3,6	;RP1=0, select bank1
  5944  0290  00AA               	movwf	(_CalcMQ135$683+1)^(0+128)
  5945  0291  1283               	bcf	3,5	;RP0=0, select bank0
  5946  0292  1303               	bcf	3,6	;RP1=0, select bank0
  5947  0293  0833               	movf	?___ftadd+2,w
  5948  0294  1683               	bsf	3,5	;RP0=1, select bank1
  5949  0295  1303               	bcf	3,6	;RP1=0, select bank1
  5950  0296  00AB               	movwf	(_CalcMQ135$683+2)^(0+128)
  5951                           
  5952                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  5953                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  5954  0297  3074               	movlw	116
  5955  0298  1283               	bcf	3,5	;RP0=0, select bank0
  5956  0299  1303               	bcf	3,6	;RP1=0, select bank0
  5957  029A  00BE               	movwf	___ftmul@f1
  5958  029B  305A               	movlw	90
  5959  029C  00BF               	movwf	___ftmul@f1+1
  5960  029D  30BB               	movlw	187
  5961  029E  00C0               	movwf	___ftmul@f1+2
  5962  029F  1683               	bsf	3,5	;RP0=1, select bank1
  5963  02A0  1303               	bcf	3,6	;RP1=0, select bank1
  5964  02A1  083B               	movf	CalcMQ135@ratio4^(0+128),w
  5965  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  5966  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  5967  02A4  00C1               	movwf	___ftmul@f2
  5968  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  5969  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  5970  02A7  083C               	movf	(CalcMQ135@ratio4+1)^(0+128),w
  5971  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  5972  02A9  1303               	bcf	3,6	;RP1=0, select bank0
  5973  02AA  00C2               	movwf	___ftmul@f2+1
  5974  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  5975  02AC  1303               	bcf	3,6	;RP1=0, select bank1
  5976  02AD  083D               	movf	(CalcMQ135@ratio4+2)^(0+128),w
  5977  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  5978  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  5979  02B0  00C3               	movwf	___ftmul@f2+2
  5980  02B1  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5981  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  5982  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  5983  02B8  083E               	movf	?___ftmul,w
  5984  02B9  00B1               	movwf	___ftadd@f1
  5985  02BA  083F               	movf	?___ftmul+1,w
  5986  02BB  00B2               	movwf	___ftadd@f1+1
  5987  02BC  0840               	movf	?___ftmul+2,w
  5988  02BD  00B3               	movwf	___ftadd@f1+2
  5989  02BE  1683               	bsf	3,5	;RP0=1, select bank1
  5990  02BF  1303               	bcf	3,6	;RP1=0, select bank1
  5991  02C0  0829               	movf	_CalcMQ135$683^(0+128),w
  5992  02C1  1283               	bcf	3,5	;RP0=0, select bank0
  5993  02C2  1303               	bcf	3,6	;RP1=0, select bank0
  5994  02C3  00B4               	movwf	___ftadd@f2
  5995  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  5996  02C5  1303               	bcf	3,6	;RP1=0, select bank1
  5997  02C6  082A               	movf	(_CalcMQ135$683+1)^(0+128),w
  5998  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  5999  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  6000  02C9  00B5               	movwf	___ftadd@f2+1
  6001  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  6002  02CB  1303               	bcf	3,6	;RP1=0, select bank1
  6003  02CC  082B               	movf	(_CalcMQ135$683+2)^(0+128),w
  6004  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  6005  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  6006  02CF  00B6               	movwf	___ftadd@f2+2
  6007  02D0  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6008  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  6009  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  6010  02D7  0831               	movf	?___ftadd,w
  6011  02D8  1683               	bsf	3,5	;RP0=1, select bank1
  6012  02D9  1303               	bcf	3,6	;RP1=0, select bank1
  6013  02DA  00AC               	movwf	_CalcMQ135$684^(0+128)
  6014  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  6015  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  6016  02DD  0832               	movf	?___ftadd+1,w
  6017  02DE  1683               	bsf	3,5	;RP0=1, select bank1
  6018  02DF  1303               	bcf	3,6	;RP1=0, select bank1
  6019  02E0  00AD               	movwf	(_CalcMQ135$684+1)^(0+128)
  6020  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  6021  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  6022  02E3  0833               	movf	?___ftadd+2,w
  6023  02E4  1683               	bsf	3,5	;RP0=1, select bank1
  6024  02E5  1303               	bcf	3,6	;RP1=0, select bank1
  6025  02E6  00AE               	movwf	(_CalcMQ135$684+2)^(0+128)
  6026                           
  6027                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  6028                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  6029  02E7  3010               	movlw	16
  6030  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  6031  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  6032  02EA  00BE               	movwf	___ftmul@f1
  6033  02EB  30FC               	movlw	252
  6034  02EC  00BF               	movwf	___ftmul@f1+1
  6035  02ED  30BA               	movlw	186
  6036  02EE  00C0               	movwf	___ftmul@f1+2
  6037  02EF  1683               	bsf	3,5	;RP0=1, select bank1
  6038  02F0  1303               	bcf	3,6	;RP1=0, select bank1
  6039  02F1  083E               	movf	CalcMQ135@ratio5^(0+128),w
  6040  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  6041  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  6042  02F4  00C1               	movwf	___ftmul@f2
  6043  02F5  1683               	bsf	3,5	;RP0=1, select bank1
  6044  02F6  1303               	bcf	3,6	;RP1=0, select bank1
  6045  02F7  083F               	movf	(CalcMQ135@ratio5+1)^(0+128),w
  6046  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  6047  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  6048  02FA  00C2               	movwf	___ftmul@f2+1
  6049  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  6050  02FC  1303               	bcf	3,6	;RP1=0, select bank1
  6051  02FD  0840               	movf	(CalcMQ135@ratio5+2)^(0+128),w
  6052  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  6053  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  6054  0300  00C3               	movwf	___ftmul@f2+2
  6055  0301  120A  158A  24FB  120A  118A  	fcall	___ftmul
  6056  0306  1283               	bcf	3,5	;RP0=0, select bank0
  6057  0307  1303               	bcf	3,6	;RP1=0, select bank0
  6058  0308  083E               	movf	?___ftmul,w
  6059  0309  00B1               	movwf	___ftadd@f1
  6060  030A  083F               	movf	?___ftmul+1,w
  6061  030B  00B2               	movwf	___ftadd@f1+1
  6062  030C  0840               	movf	?___ftmul+2,w
  6063  030D  00B3               	movwf	___ftadd@f1+2
  6064  030E  1683               	bsf	3,5	;RP0=1, select bank1
  6065  030F  1303               	bcf	3,6	;RP1=0, select bank1
  6066  0310  082C               	movf	_CalcMQ135$684^(0+128),w
  6067  0311  1283               	bcf	3,5	;RP0=0, select bank0
  6068  0312  1303               	bcf	3,6	;RP1=0, select bank0
  6069  0313  00B4               	movwf	___ftadd@f2
  6070  0314  1683               	bsf	3,5	;RP0=1, select bank1
  6071  0315  1303               	bcf	3,6	;RP1=0, select bank1
  6072  0316  082D               	movf	(_CalcMQ135$684+1)^(0+128),w
  6073  0317  1283               	bcf	3,5	;RP0=0, select bank0
  6074  0318  1303               	bcf	3,6	;RP1=0, select bank0
  6075  0319  00B5               	movwf	___ftadd@f2+1
  6076  031A  1683               	bsf	3,5	;RP0=1, select bank1
  6077  031B  1303               	bcf	3,6	;RP1=0, select bank1
  6078  031C  082E               	movf	(_CalcMQ135$684+2)^(0+128),w
  6079  031D  1283               	bcf	3,5	;RP0=0, select bank0
  6080  031E  1303               	bcf	3,6	;RP1=0, select bank0
  6081  031F  00B6               	movwf	___ftadd@f2+2
  6082  0320  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6083  0325  1283               	bcf	3,5	;RP0=0, select bank0
  6084  0326  1303               	bcf	3,6	;RP1=0, select bank0
  6085  0327  0831               	movf	?___ftadd,w
  6086  0328  1683               	bsf	3,5	;RP0=1, select bank1
  6087  0329  1303               	bcf	3,6	;RP1=0, select bank1
  6088  032A  00AF               	movwf	_CalcMQ135$685^(0+128)
  6089  032B  1283               	bcf	3,5	;RP0=0, select bank0
  6090  032C  1303               	bcf	3,6	;RP1=0, select bank0
  6091  032D  0832               	movf	?___ftadd+1,w
  6092  032E  1683               	bsf	3,5	;RP0=1, select bank1
  6093  032F  1303               	bcf	3,6	;RP1=0, select bank1
  6094  0330  00B0               	movwf	(_CalcMQ135$685+1)^(0+128)
  6095  0331  1283               	bcf	3,5	;RP0=0, select bank0
  6096  0332  1303               	bcf	3,6	;RP1=0, select bank0
  6097  0333  0833               	movf	?___ftadd+2,w
  6098  0334  1683               	bsf	3,5	;RP0=1, select bank1
  6099  0335  1303               	bcf	3,6	;RP1=0, select bank1
  6100  0336  00B1               	movwf	(_CalcMQ135$685+2)^(0+128)
  6101                           
  6102                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  6103                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  6104  0337  30A8               	movlw	168
  6105  0338  1283               	bcf	3,5	;RP0=0, select bank0
  6106  0339  1303               	bcf	3,6	;RP1=0, select bank0
  6107  033A  00BE               	movwf	___ftmul@f1
  6108  033B  3090               	movlw	144
  6109  033C  00BF               	movwf	___ftmul@f1+1
  6110  033D  303F               	movlw	63
  6111  033E  00C0               	movwf	___ftmul@f1+2
  6112  033F  1683               	bsf	3,5	;RP0=1, select bank1
  6113  0340  1303               	bcf	3,6	;RP1=0, select bank1
  6114  0341  0823               	movf	CalcMQ135@ratio6^(0+128),w
  6115  0342  1283               	bcf	3,5	;RP0=0, select bank0
  6116  0343  1303               	bcf	3,6	;RP1=0, select bank0
  6117  0344  00C1               	movwf	___ftmul@f2
  6118  0345  1683               	bsf	3,5	;RP0=1, select bank1
  6119  0346  1303               	bcf	3,6	;RP1=0, select bank1
  6120  0347  0824               	movf	(CalcMQ135@ratio6+1)^(0+128),w
  6121  0348  1283               	bcf	3,5	;RP0=0, select bank0
  6122  0349  1303               	bcf	3,6	;RP1=0, select bank0
  6123  034A  00C2               	movwf	___ftmul@f2+1
  6124  034B  1683               	bsf	3,5	;RP0=1, select bank1
  6125  034C  1303               	bcf	3,6	;RP1=0, select bank1
  6126  034D  0825               	movf	(CalcMQ135@ratio6+2)^(0+128),w
  6127  034E  1283               	bcf	3,5	;RP0=0, select bank0
  6128  034F  1303               	bcf	3,6	;RP1=0, select bank0
  6129  0350  00C3               	movwf	___ftmul@f2+2
  6130  0351  120A  158A  24FB  120A  118A  	fcall	___ftmul
  6131  0356  1283               	bcf	3,5	;RP0=0, select bank0
  6132  0357  1303               	bcf	3,6	;RP1=0, select bank0
  6133  0358  083E               	movf	?___ftmul,w
  6134  0359  00B1               	movwf	___ftadd@f1
  6135  035A  083F               	movf	?___ftmul+1,w
  6136  035B  00B2               	movwf	___ftadd@f1+1
  6137  035C  0840               	movf	?___ftmul+2,w
  6138  035D  00B3               	movwf	___ftadd@f1+2
  6139  035E  1683               	bsf	3,5	;RP0=1, select bank1
  6140  035F  1303               	bcf	3,6	;RP1=0, select bank1
  6141  0360  082F               	movf	_CalcMQ135$685^(0+128),w
  6142  0361  1283               	bcf	3,5	;RP0=0, select bank0
  6143  0362  1303               	bcf	3,6	;RP1=0, select bank0
  6144  0363  00B4               	movwf	___ftadd@f2
  6145  0364  1683               	bsf	3,5	;RP0=1, select bank1
  6146  0365  1303               	bcf	3,6	;RP1=0, select bank1
  6147  0366  0830               	movf	(_CalcMQ135$685+1)^(0+128),w
  6148  0367  1283               	bcf	3,5	;RP0=0, select bank0
  6149  0368  1303               	bcf	3,6	;RP1=0, select bank0
  6150  0369  00B5               	movwf	___ftadd@f2+1
  6151  036A  1683               	bsf	3,5	;RP0=1, select bank1
  6152  036B  1303               	bcf	3,6	;RP1=0, select bank1
  6153  036C  0831               	movf	(_CalcMQ135$685+2)^(0+128),w
  6154  036D  1283               	bcf	3,5	;RP0=0, select bank0
  6155  036E  1303               	bcf	3,6	;RP1=0, select bank0
  6156  036F  00B6               	movwf	___ftadd@f2+2
  6157  0370  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6158  0375  1283               	bcf	3,5	;RP0=0, select bank0
  6159  0376  1303               	bcf	3,6	;RP1=0, select bank0
  6160  0377  0831               	movf	?___ftadd,w
  6161  0378  1683               	bsf	3,5	;RP0=1, select bank1
  6162  0379  1303               	bcf	3,6	;RP1=0, select bank1
  6163  037A  00B2               	movwf	_CalcMQ135$686^(0+128)
  6164  037B  1283               	bcf	3,5	;RP0=0, select bank0
  6165  037C  1303               	bcf	3,6	;RP1=0, select bank0
  6166  037D  0832               	movf	?___ftadd+1,w
  6167  037E  1683               	bsf	3,5	;RP0=1, select bank1
  6168  037F  1303               	bcf	3,6	;RP1=0, select bank1
  6169  0380  00B3               	movwf	(_CalcMQ135$686+1)^(0+128)
  6170  0381  1283               	bcf	3,5	;RP0=0, select bank0
  6171  0382  1303               	bcf	3,6	;RP1=0, select bank0
  6172  0383  0833               	movf	?___ftadd+2,w
  6173  0384  1683               	bsf	3,5	;RP0=1, select bank1
  6174  0385  1303               	bcf	3,6	;RP1=0, select bank1
  6175  0386  00B4               	movwf	(_CalcMQ135$686+2)^(0+128)
  6176                           
  6177                           ;mq135_module.h: 106: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  6178                           ;mq135_module.h: 107: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  6179  0387  3080               	movlw	128
  6180  0388  1283               	bcf	3,5	;RP0=0, select bank0
  6181  0389  1303               	bcf	3,6	;RP1=0, select bank0
  6182  038A  00B1               	movwf	___ftadd@f1
  6183  038B  30B7               	movlw	183
  6184  038C  00B2               	movwf	___ftadd@f1+1
  6185  038D  3039               	movlw	57
  6186  038E  00B3               	movwf	___ftadd@f1+2
  6187  038F  1683               	bsf	3,5	;RP0=1, select bank1
  6188  0390  1303               	bcf	3,6	;RP1=0, select bank1
  6189  0391  0832               	movf	_CalcMQ135$686^(0+128),w
  6190  0392  1283               	bcf	3,5	;RP0=0, select bank0
  6191  0393  1303               	bcf	3,6	;RP1=0, select bank0
  6192  0394  00B4               	movwf	___ftadd@f2
  6193  0395  1683               	bsf	3,5	;RP0=1, select bank1
  6194  0396  1303               	bcf	3,6	;RP1=0, select bank1
  6195  0397  0833               	movf	(_CalcMQ135$686+1)^(0+128),w
  6196  0398  1283               	bcf	3,5	;RP0=0, select bank0
  6197  0399  1303               	bcf	3,6	;RP1=0, select bank0
  6198  039A  00B5               	movwf	___ftadd@f2+1
  6199  039B  1683               	bsf	3,5	;RP0=1, select bank1
  6200  039C  1303               	bcf	3,6	;RP1=0, select bank1
  6201  039D  0834               	movf	(_CalcMQ135$686+2)^(0+128),w
  6202  039E  1283               	bcf	3,5	;RP0=0, select bank0
  6203  039F  1303               	bcf	3,6	;RP1=0, select bank0
  6204  03A0  00B6               	movwf	___ftadd@f2+2
  6205  03A1  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6206  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  6207  03A7  1303               	bcf	3,6	;RP1=0, select bank0
  6208  03A8  0831               	movf	?___ftadd,w
  6209  03A9  1683               	bsf	3,5	;RP0=1, select bank1
  6210  03AA  1303               	bcf	3,6	;RP1=0, select bank1
  6211  03AB  00C1               	movwf	CalcMQ135@co2^(0+128)
  6212  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  6213  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  6214  03AE  0832               	movf	?___ftadd+1,w
  6215  03AF  1683               	bsf	3,5	;RP0=1, select bank1
  6216  03B0  1303               	bcf	3,6	;RP1=0, select bank1
  6217  03B1  00C2               	movwf	(CalcMQ135@co2+1)^(0+128)
  6218  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  6219  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  6220  03B4  0833               	movf	?___ftadd+2,w
  6221  03B5  1683               	bsf	3,5	;RP0=1, select bank1
  6222  03B6  1303               	bcf	3,6	;RP1=0, select bank1
  6223  03B7  00C3               	movwf	(CalcMQ135@co2+2)^(0+128)
  6224                           
  6225                           ;mq135_module.h: 109: co2 *= 415.58;
  6226  03B8  30CA               	movlw	202
  6227  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  6228  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  6229  03BB  00BE               	movwf	___ftmul@f1
  6230  03BC  30CF               	movlw	207
  6231  03BD  00BF               	movwf	___ftmul@f1+1
  6232  03BE  3043               	movlw	67
  6233  03BF  00C0               	movwf	___ftmul@f1+2
  6234  03C0  1683               	bsf	3,5	;RP0=1, select bank1
  6235  03C1  1303               	bcf	3,6	;RP1=0, select bank1
  6236  03C2  0841               	movf	CalcMQ135@co2^(0+128),w
  6237  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  6238  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  6239  03C5  00C1               	movwf	___ftmul@f2
  6240  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  6241  03C7  1303               	bcf	3,6	;RP1=0, select bank1
  6242  03C8  0842               	movf	(CalcMQ135@co2+1)^(0+128),w
  6243  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  6244  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  6245  03CB  00C2               	movwf	___ftmul@f2+1
  6246  03CC  1683               	bsf	3,5	;RP0=1, select bank1
  6247  03CD  1303               	bcf	3,6	;RP1=0, select bank1
  6248  03CE  0843               	movf	(CalcMQ135@co2+2)^(0+128),w
  6249  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  6250  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  6251  03D1  00C3               	movwf	___ftmul@f2+2
  6252  03D2  120A  158A  24FB   	fcall	___ftmul
  6253  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  6254  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  6255  03D7  083E               	movf	?___ftmul,w
  6256  03D8  1683               	bsf	3,5	;RP0=1, select bank1
  6257  03D9  1303               	bcf	3,6	;RP1=0, select bank1
  6258  03DA  00C1               	movwf	CalcMQ135@co2^(0+128)
  6259  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  6260  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  6261  03DD  083F               	movf	?___ftmul+1,w
  6262  03DE  1683               	bsf	3,5	;RP0=1, select bank1
  6263  03DF  1303               	bcf	3,6	;RP1=0, select bank1
  6264  03E0  00C2               	movwf	(CalcMQ135@co2+1)^(0+128)
  6265  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  6266  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  6267  03E3  0840               	movf	?___ftmul+2,w
  6268  03E4  1683               	bsf	3,5	;RP0=1, select bank1
  6269  03E5  1303               	bcf	3,6	;RP1=0, select bank1
  6270  03E6  00C3               	movwf	(CalcMQ135@co2+2)^(0+128)
  6271                           
  6272                           ;mq135_module.h: 110: return co2;
  6273  03E7  0841               	movf	CalcMQ135@co2^(0+128),w
  6274  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  6275  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  6276  03EA  00DE               	movwf	?_CalcMQ135
  6277  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  6278  03EC  1303               	bcf	3,6	;RP1=0, select bank1
  6279  03ED  0842               	movf	(CalcMQ135@co2+1)^(0+128),w
  6280  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  6281  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  6282  03F0  00DF               	movwf	?_CalcMQ135+1
  6283  03F1  1683               	bsf	3,5	;RP0=1, select bank1
  6284  03F2  1303               	bcf	3,6	;RP1=0, select bank1
  6285  03F3  0843               	movf	(CalcMQ135@co2+2)^(0+128),w
  6286  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  6287  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  6288  03F6  00E0               	movwf	?_CalcMQ135+2
  6289  03F7  0008               	return
  6290  03F8                     __end_of_CalcMQ135:	
  6291                           
  6292                           	psect	text25
  6293  0CFB                     __ptext25:	
  6294 ;; *************** function ___ftmul *****************
  6295 ;; Defined at:
  6296 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6297 ;; Parameters:    Size  Location     Type
  6298 ;;  f1              3   30[BANK0 ] float 
  6299 ;;  f2              3   33[BANK0 ] float 
  6300 ;; Auto vars:     Size  Location     Type
  6301 ;;  f3_as_produc    3   41[BANK0 ] unsigned um
  6302 ;;  sign            1   45[BANK0 ] unsigned char 
  6303 ;;  cntr            1   44[BANK0 ] unsigned char 
  6304 ;;  exp             1   40[BANK0 ] unsigned char 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  3   30[BANK0 ] float 
  6307 ;; Registers used:
  6308 ;;		wreg, status,2, status,0, pclath, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6314 ;;      Params:         0       6       0       0       0
  6315 ;;      Locals:         0       6       0       0       0
  6316 ;;      Temps:          0       4       0       0       0
  6317 ;;      Totals:         0      16       0       0       0
  6318 ;;Total ram usage:       16 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    3
  6321 ;; This function calls:
  6322 ;;		___ftpack
  6323 ;; This function is called by:
  6324 ;;		_displayPPM
  6325 ;;		_CalcMQ135
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           
  6330                           ;psect for function ___ftmul
  6331  0CFB                     ___ftmul:	
  6332                           
  6333                           ;incstack = 0
  6334                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6335  0CFB  1283               	bcf	3,5	;RP0=0, select bank0
  6336  0CFC  1303               	bcf	3,6	;RP1=0, select bank0
  6337  0CFD  083E               	movf	___ftmul@f1,w
  6338  0CFE  00C4               	movwf	??___ftmul
  6339  0CFF  083F               	movf	___ftmul@f1+1,w
  6340  0D00  00C5               	movwf	??___ftmul+1
  6341  0D01  0840               	movf	___ftmul@f1+2,w
  6342  0D02  00C6               	movwf	??___ftmul+2
  6343  0D03  1003               	clrc
  6344  0D04  0D45               	rlf	??___ftmul+1,w
  6345  0D05  0D46               	rlf	??___ftmul+2,w
  6346  0D06  00C7               	movwf	??___ftmul+3
  6347  0D07  0847               	movf	??___ftmul+3,w
  6348  0D08  00C8               	movwf	___ftmul@exp
  6349  0D09  08C8               	movf	___ftmul@exp,f
  6350  0D0A  1D03               	skipz
  6351  0D0B  2D13               	goto	l2255
  6352  0D0C  3000               	movlw	0
  6353  0D0D  00BE               	movwf	?___ftmul
  6354  0D0E  3000               	movlw	0
  6355  0D0F  00BF               	movwf	?___ftmul+1
  6356  0D10  3000               	movlw	0
  6357  0D11  00C0               	movwf	?___ftmul+2
  6358  0D12  0008               	return
  6359  0D13                     l2255:	
  6360  0D13  0841               	movf	___ftmul@f2,w
  6361  0D14  00C4               	movwf	??___ftmul
  6362  0D15  0842               	movf	___ftmul@f2+1,w
  6363  0D16  00C5               	movwf	??___ftmul+1
  6364  0D17  0843               	movf	___ftmul@f2+2,w
  6365  0D18  00C6               	movwf	??___ftmul+2
  6366  0D19  1003               	clrc
  6367  0D1A  0D45               	rlf	??___ftmul+1,w
  6368  0D1B  0D46               	rlf	??___ftmul+2,w
  6369  0D1C  00C7               	movwf	??___ftmul+3
  6370  0D1D  0847               	movf	??___ftmul+3,w
  6371  0D1E  00CD               	movwf	___ftmul@sign
  6372  0D1F  08CD               	movf	___ftmul@sign,f
  6373  0D20  1D03               	skipz
  6374  0D21  2D29               	goto	l2261
  6375  0D22  3000               	movlw	0
  6376  0D23  00BE               	movwf	?___ftmul
  6377  0D24  3000               	movlw	0
  6378  0D25  00BF               	movwf	?___ftmul+1
  6379  0D26  3000               	movlw	0
  6380  0D27  00C0               	movwf	?___ftmul+2
  6381  0D28  0008               	return
  6382  0D29                     l2261:	
  6383  0D29  084D               	movf	___ftmul@sign,w
  6384  0D2A  3E7B               	addlw	123
  6385  0D2B  00C4               	movwf	??___ftmul
  6386  0D2C  0844               	movf	??___ftmul,w
  6387  0D2D  07C8               	addwf	___ftmul@exp,f
  6388  0D2E  083E               	movf	___ftmul@f1,w
  6389  0D2F  00C4               	movwf	??___ftmul
  6390  0D30  083F               	movf	___ftmul@f1+1,w
  6391  0D31  00C5               	movwf	??___ftmul+1
  6392  0D32  0840               	movf	___ftmul@f1+2,w
  6393  0D33  00C6               	movwf	??___ftmul+2
  6394  0D34  3010               	movlw	16
  6395  0D35                     u2865:	
  6396  0D35  1003               	clrc
  6397  0D36  0CC6               	rrf	??___ftmul+2,f
  6398  0D37  0CC5               	rrf	??___ftmul+1,f
  6399  0D38  0CC4               	rrf	??___ftmul,f
  6400  0D39  3EFF               	addlw	-1
  6401  0D3A  1D03               	skipz
  6402  0D3B  2D35               	goto	u2865
  6403  0D3C  0844               	movf	??___ftmul,w
  6404  0D3D  00C7               	movwf	??___ftmul+3
  6405  0D3E  0847               	movf	??___ftmul+3,w
  6406  0D3F  00CD               	movwf	___ftmul@sign
  6407  0D40  0841               	movf	___ftmul@f2,w
  6408  0D41  00C4               	movwf	??___ftmul
  6409  0D42  0842               	movf	___ftmul@f2+1,w
  6410  0D43  00C5               	movwf	??___ftmul+1
  6411  0D44  0843               	movf	___ftmul@f2+2,w
  6412  0D45  00C6               	movwf	??___ftmul+2
  6413  0D46  3010               	movlw	16
  6414  0D47                     u2875:	
  6415  0D47  1003               	clrc
  6416  0D48  0CC6               	rrf	??___ftmul+2,f
  6417  0D49  0CC5               	rrf	??___ftmul+1,f
  6418  0D4A  0CC4               	rrf	??___ftmul,f
  6419  0D4B  3EFF               	addlw	-1
  6420  0D4C  1D03               	skipz
  6421  0D4D  2D47               	goto	u2875
  6422  0D4E  0844               	movf	??___ftmul,w
  6423  0D4F  00C7               	movwf	??___ftmul+3
  6424  0D50  0847               	movf	??___ftmul+3,w
  6425  0D51  06CD               	xorwf	___ftmul@sign,f
  6426  0D52  3080               	movlw	128
  6427  0D53  00C4               	movwf	??___ftmul
  6428  0D54  0844               	movf	??___ftmul,w
  6429  0D55  05CD               	andwf	___ftmul@sign,f
  6430  0D56  17BF               	bsf	___ftmul@f1+1,7
  6431  0D57  17C2               	bsf	___ftmul@f2+1,7
  6432  0D58  30FF               	movlw	255
  6433  0D59  05C1               	andwf	___ftmul@f2,f
  6434  0D5A  30FF               	movlw	255
  6435  0D5B  05C2               	andwf	___ftmul@f2+1,f
  6436  0D5C  3000               	movlw	0
  6437  0D5D  05C3               	andwf	___ftmul@f2+2,f
  6438  0D5E  3000               	movlw	0
  6439  0D5F  00C9               	movwf	___ftmul@f3_as_product
  6440  0D60  3000               	movlw	0
  6441  0D61  00CA               	movwf	___ftmul@f3_as_product+1
  6442  0D62  3000               	movlw	0
  6443  0D63  00CB               	movwf	___ftmul@f3_as_product+2
  6444  0D64  3007               	movlw	7
  6445  0D65  00C4               	movwf	??___ftmul
  6446  0D66  0844               	movf	??___ftmul,w
  6447  0D67  00CC               	movwf	___ftmul@cntr
  6448  0D68                     l2273:	
  6449  0D68  1C3E               	btfss	___ftmul@f1,0
  6450  0D69  2D78               	goto	l2277
  6451  0D6A  0841               	movf	___ftmul@f2,w
  6452  0D6B  07C9               	addwf	___ftmul@f3_as_product,f
  6453  0D6C  0842               	movf	___ftmul@f2+1,w
  6454  0D6D  1103               	clrz
  6455  0D6E  1803               	skipnc
  6456  0D6F  0A42               	incf	___ftmul@f2+1,w
  6457  0D70  1D03               	btfss	3,2
  6458  0D71  07CA               	addwf	___ftmul@f3_as_product+1,f
  6459  0D72  0843               	movf	___ftmul@f2+2,w
  6460  0D73  1103               	clrz
  6461  0D74  1803               	skipnc
  6462  0D75  0A43               	incf	___ftmul@f2+2,w
  6463  0D76  1D03               	btfss	3,2
  6464  0D77  07CB               	addwf	___ftmul@f3_as_product+2,f
  6465  0D78                     l2277:	
  6466  0D78  3001               	movlw	1
  6467  0D79                     u2905:	
  6468  0D79  1003               	clrc
  6469  0D7A  0CC0               	rrf	___ftmul@f1+2,f
  6470  0D7B  0CBF               	rrf	___ftmul@f1+1,f
  6471  0D7C  0CBE               	rrf	___ftmul@f1,f
  6472  0D7D  3EFF               	addlw	-1
  6473  0D7E  1D03               	skipz
  6474  0D7F  2D79               	goto	u2905
  6475  0D80  3001               	movlw	1
  6476  0D81                     u2915:	
  6477  0D81  1003               	clrc
  6478  0D82  0DC1               	rlf	___ftmul@f2,f
  6479  0D83  0DC2               	rlf	___ftmul@f2+1,f
  6480  0D84  0DC3               	rlf	___ftmul@f2+2,f
  6481  0D85  3EFF               	addlw	-1
  6482  0D86  1D03               	skipz
  6483  0D87  2D81               	goto	u2915
  6484  0D88  3001               	movlw	1
  6485  0D89  02CC               	subwf	___ftmul@cntr,f
  6486  0D8A  1D03               	btfss	3,2
  6487  0D8B  2D68               	goto	l2273
  6488  0D8C  3009               	movlw	9
  6489  0D8D  00C4               	movwf	??___ftmul
  6490  0D8E  0844               	movf	??___ftmul,w
  6491  0D8F  00CC               	movwf	___ftmul@cntr
  6492  0D90                     l2285:	
  6493  0D90  1C3E               	btfss	___ftmul@f1,0
  6494  0D91  2DA0               	goto	l2289
  6495  0D92  0841               	movf	___ftmul@f2,w
  6496  0D93  07C9               	addwf	___ftmul@f3_as_product,f
  6497  0D94  0842               	movf	___ftmul@f2+1,w
  6498  0D95  1103               	clrz
  6499  0D96  1803               	skipnc
  6500  0D97  0A42               	incf	___ftmul@f2+1,w
  6501  0D98  1D03               	btfss	3,2
  6502  0D99  07CA               	addwf	___ftmul@f3_as_product+1,f
  6503  0D9A  0843               	movf	___ftmul@f2+2,w
  6504  0D9B  1103               	clrz
  6505  0D9C  1803               	skipnc
  6506  0D9D  0A43               	incf	___ftmul@f2+2,w
  6507  0D9E  1D03               	btfss	3,2
  6508  0D9F  07CB               	addwf	___ftmul@f3_as_product+2,f
  6509  0DA0                     l2289:	
  6510  0DA0  3001               	movlw	1
  6511  0DA1                     u2955:	
  6512  0DA1  1003               	clrc
  6513  0DA2  0CC0               	rrf	___ftmul@f1+2,f
  6514  0DA3  0CBF               	rrf	___ftmul@f1+1,f
  6515  0DA4  0CBE               	rrf	___ftmul@f1,f
  6516  0DA5  3EFF               	addlw	-1
  6517  0DA6  1D03               	skipz
  6518  0DA7  2DA1               	goto	u2955
  6519  0DA8  3001               	movlw	1
  6520  0DA9                     u2965:	
  6521  0DA9  1003               	clrc
  6522  0DAA  0CCB               	rrf	___ftmul@f3_as_product+2,f
  6523  0DAB  0CCA               	rrf	___ftmul@f3_as_product+1,f
  6524  0DAC  0CC9               	rrf	___ftmul@f3_as_product,f
  6525  0DAD  3EFF               	addlw	-1
  6526  0DAE  1D03               	skipz
  6527  0DAF  2DA9               	goto	u2965
  6528  0DB0  3001               	movlw	1
  6529  0DB1  02CC               	subwf	___ftmul@cntr,f
  6530  0DB2  1D03               	btfss	3,2
  6531  0DB3  2D90               	goto	l2285
  6532  0DB4  0849               	movf	___ftmul@f3_as_product,w
  6533  0DB5  00A0               	movwf	___ftpack@arg
  6534  0DB6  084A               	movf	___ftmul@f3_as_product+1,w
  6535  0DB7  00A1               	movwf	___ftpack@arg+1
  6536  0DB8  084B               	movf	___ftmul@f3_as_product+2,w
  6537  0DB9  00A2               	movwf	___ftpack@arg+2
  6538  0DBA  0848               	movf	___ftmul@exp,w
  6539  0DBB  00C4               	movwf	??___ftmul
  6540  0DBC  0844               	movf	??___ftmul,w
  6541  0DBD  00A3               	movwf	___ftpack@exp
  6542  0DBE  084D               	movf	___ftmul@sign,w
  6543  0DBF  00C5               	movwf	??___ftmul+1
  6544  0DC0  0845               	movf	??___ftmul+1,w
  6545  0DC1  00A4               	movwf	___ftpack@sign
  6546  0DC2  120A  118A  278F   	fcall	___ftpack
  6547  0DC5  1283               	bcf	3,5	;RP0=0, select bank0
  6548  0DC6  1303               	bcf	3,6	;RP1=0, select bank0
  6549  0DC7  0820               	movf	?___ftpack,w
  6550  0DC8  00BE               	movwf	?___ftmul
  6551  0DC9  0821               	movf	?___ftpack+1,w
  6552  0DCA  00BF               	movwf	?___ftmul+1
  6553  0DCB  0822               	movf	?___ftpack+2,w
  6554  0DCC  00C0               	movwf	?___ftmul+2
  6555  0DCD  0008               	return
  6556  0DCE                     __end_of___ftmul:	
  6557                           
  6558                           	psect	text26
  6559  0A03                     __ptext26:	
  6560 ;; *************** function ___ftdiv *****************
  6561 ;; Defined at:
  6562 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;  f2              3   46[BANK0 ] float 
  6565 ;;  f1              3   49[BANK0 ] float 
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;  f3              3   57[BANK0 ] float 
  6568 ;;  sign            1   61[BANK0 ] unsigned char 
  6569 ;;  exp             1   60[BANK0 ] unsigned char 
  6570 ;;  cntr            1   56[BANK0 ] unsigned char 
  6571 ;; Return value:  Size  Location     Type
  6572 ;;                  3   46[BANK0 ] float 
  6573 ;; Registers used:
  6574 ;;		wreg, status,2, status,0, pclath, cstack
  6575 ;; Tracked objects:
  6576 ;;		On entry : 0/0
  6577 ;;		On exit  : 0/0
  6578 ;;		Unchanged: 0/0
  6579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6580 ;;      Params:         0       6       0       0       0
  6581 ;;      Locals:         0       6       0       0       0
  6582 ;;      Temps:          0       4       0       0       0
  6583 ;;      Totals:         0      16       0       0       0
  6584 ;;Total ram usage:       16 bytes
  6585 ;; Hardware stack levels used:    1
  6586 ;; Hardware stack levels required when called:    3
  6587 ;; This function calls:
  6588 ;;		___ftpack
  6589 ;; This function is called by:
  6590 ;;		_CalcMQ135
  6591 ;; This function uses a non-reentrant model
  6592 ;;
  6593                           
  6594                           
  6595                           ;psect for function ___ftdiv
  6596  0A03                     ___ftdiv:	
  6597                           
  6598                           ;incstack = 0
  6599                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6600  0A03  1283               	bcf	3,5	;RP0=0, select bank0
  6601  0A04  1303               	bcf	3,6	;RP1=0, select bank0
  6602  0A05  0851               	movf	___ftdiv@f1,w
  6603  0A06  00D4               	movwf	??___ftdiv
  6604  0A07  0852               	movf	___ftdiv@f1+1,w
  6605  0A08  00D5               	movwf	??___ftdiv+1
  6606  0A09  0853               	movf	___ftdiv@f1+2,w
  6607  0A0A  00D6               	movwf	??___ftdiv+2
  6608  0A0B  1003               	clrc
  6609  0A0C  0D55               	rlf	??___ftdiv+1,w
  6610  0A0D  0D56               	rlf	??___ftdiv+2,w
  6611  0A0E  00D7               	movwf	??___ftdiv+3
  6612  0A0F  0857               	movf	??___ftdiv+3,w
  6613  0A10  00DC               	movwf	___ftdiv@exp
  6614  0A11  08DC               	movf	___ftdiv@exp,f
  6615  0A12  1D03               	skipz
  6616  0A13  2A1B               	goto	l2213
  6617  0A14  3000               	movlw	0
  6618  0A15  00CE               	movwf	?___ftdiv
  6619  0A16  3000               	movlw	0
  6620  0A17  00CF               	movwf	?___ftdiv+1
  6621  0A18  3000               	movlw	0
  6622  0A19  00D0               	movwf	?___ftdiv+2
  6623  0A1A  0008               	return
  6624  0A1B                     l2213:	
  6625  0A1B  084E               	movf	___ftdiv@f2,w
  6626  0A1C  00D4               	movwf	??___ftdiv
  6627  0A1D  084F               	movf	___ftdiv@f2+1,w
  6628  0A1E  00D5               	movwf	??___ftdiv+1
  6629  0A1F  0850               	movf	___ftdiv@f2+2,w
  6630  0A20  00D6               	movwf	??___ftdiv+2
  6631  0A21  1003               	clrc
  6632  0A22  0D55               	rlf	??___ftdiv+1,w
  6633  0A23  0D56               	rlf	??___ftdiv+2,w
  6634  0A24  00D7               	movwf	??___ftdiv+3
  6635  0A25  0857               	movf	??___ftdiv+3,w
  6636  0A26  00DD               	movwf	___ftdiv@sign
  6637  0A27  08DD               	movf	___ftdiv@sign,f
  6638  0A28  1D03               	skipz
  6639  0A29  2A31               	goto	l2219
  6640  0A2A  3000               	movlw	0
  6641  0A2B  00CE               	movwf	?___ftdiv
  6642  0A2C  3000               	movlw	0
  6643  0A2D  00CF               	movwf	?___ftdiv+1
  6644  0A2E  3000               	movlw	0
  6645  0A2F  00D0               	movwf	?___ftdiv+2
  6646  0A30  0008               	return
  6647  0A31                     l2219:	
  6648  0A31  3000               	movlw	0
  6649  0A32  00D9               	movwf	___ftdiv@f3
  6650  0A33  3000               	movlw	0
  6651  0A34  00DA               	movwf	___ftdiv@f3+1
  6652  0A35  3000               	movlw	0
  6653  0A36  00DB               	movwf	___ftdiv@f3+2
  6654  0A37  3089               	movlw	137
  6655  0A38  075D               	addwf	___ftdiv@sign,w
  6656  0A39  00D4               	movwf	??___ftdiv
  6657  0A3A  0854               	movf	??___ftdiv,w
  6658  0A3B  02DC               	subwf	___ftdiv@exp,f
  6659  0A3C  0851               	movf	___ftdiv@f1,w
  6660  0A3D  00D4               	movwf	??___ftdiv
  6661  0A3E  0852               	movf	___ftdiv@f1+1,w
  6662  0A3F  00D5               	movwf	??___ftdiv+1
  6663  0A40  0853               	movf	___ftdiv@f1+2,w
  6664  0A41  00D6               	movwf	??___ftdiv+2
  6665  0A42  3010               	movlw	16
  6666  0A43                     u2785:	
  6667  0A43  1003               	clrc
  6668  0A44  0CD6               	rrf	??___ftdiv+2,f
  6669  0A45  0CD5               	rrf	??___ftdiv+1,f
  6670  0A46  0CD4               	rrf	??___ftdiv,f
  6671  0A47  3EFF               	addlw	-1
  6672  0A48  1D03               	skipz
  6673  0A49  2A43               	goto	u2785
  6674  0A4A  0854               	movf	??___ftdiv,w
  6675  0A4B  00D7               	movwf	??___ftdiv+3
  6676  0A4C  0857               	movf	??___ftdiv+3,w
  6677  0A4D  00DD               	movwf	___ftdiv@sign
  6678  0A4E  084E               	movf	___ftdiv@f2,w
  6679  0A4F  00D4               	movwf	??___ftdiv
  6680  0A50  084F               	movf	___ftdiv@f2+1,w
  6681  0A51  00D5               	movwf	??___ftdiv+1
  6682  0A52  0850               	movf	___ftdiv@f2+2,w
  6683  0A53  00D6               	movwf	??___ftdiv+2
  6684  0A54  3010               	movlw	16
  6685  0A55                     u2795:	
  6686  0A55  1003               	clrc
  6687  0A56  0CD6               	rrf	??___ftdiv+2,f
  6688  0A57  0CD5               	rrf	??___ftdiv+1,f
  6689  0A58  0CD4               	rrf	??___ftdiv,f
  6690  0A59  3EFF               	addlw	-1
  6691  0A5A  1D03               	skipz
  6692  0A5B  2A55               	goto	u2795
  6693  0A5C  0854               	movf	??___ftdiv,w
  6694  0A5D  00D7               	movwf	??___ftdiv+3
  6695  0A5E  0857               	movf	??___ftdiv+3,w
  6696  0A5F  06DD               	xorwf	___ftdiv@sign,f
  6697  0A60  3080               	movlw	128
  6698  0A61  00D4               	movwf	??___ftdiv
  6699  0A62  0854               	movf	??___ftdiv,w
  6700  0A63  05DD               	andwf	___ftdiv@sign,f
  6701  0A64  17D2               	bsf	___ftdiv@f1+1,7
  6702  0A65  30FF               	movlw	255
  6703  0A66  05D1               	andwf	___ftdiv@f1,f
  6704  0A67  30FF               	movlw	255
  6705  0A68  05D2               	andwf	___ftdiv@f1+1,f
  6706  0A69  3000               	movlw	0
  6707  0A6A  05D3               	andwf	___ftdiv@f1+2,f
  6708  0A6B  17CF               	bsf	___ftdiv@f2+1,7
  6709  0A6C  30FF               	movlw	255
  6710  0A6D  05CE               	andwf	___ftdiv@f2,f
  6711  0A6E  30FF               	movlw	255
  6712  0A6F  05CF               	andwf	___ftdiv@f2+1,f
  6713  0A70  3000               	movlw	0
  6714  0A71  05D0               	andwf	___ftdiv@f2+2,f
  6715  0A72  3018               	movlw	24
  6716  0A73  00D4               	movwf	??___ftdiv
  6717  0A74  0854               	movf	??___ftdiv,w
  6718  0A75  00D8               	movwf	___ftdiv@cntr
  6719  0A76                     l2233:	
  6720  0A76  3001               	movlw	1
  6721  0A77                     u2805:	
  6722  0A77  1003               	clrc
  6723  0A78  0DD9               	rlf	___ftdiv@f3,f
  6724  0A79  0DDA               	rlf	___ftdiv@f3+1,f
  6725  0A7A  0DDB               	rlf	___ftdiv@f3+2,f
  6726  0A7B  3EFF               	addlw	-1
  6727  0A7C  1D03               	skipz
  6728  0A7D  2A77               	goto	u2805
  6729  0A7E  0850               	movf	___ftdiv@f2+2,w
  6730  0A7F  0253               	subwf	___ftdiv@f1+2,w
  6731  0A80  1D03               	skipz
  6732  0A81  2A88               	goto	u2815
  6733  0A82  084F               	movf	___ftdiv@f2+1,w
  6734  0A83  0252               	subwf	___ftdiv@f1+1,w
  6735  0A84  1D03               	skipz
  6736  0A85  2A88               	goto	u2815
  6737  0A86  084E               	movf	___ftdiv@f2,w
  6738  0A87  0251               	subwf	___ftdiv@f1,w
  6739  0A88                     u2815:	
  6740  0A88  1C03               	skipc
  6741  0A89  2A95               	goto	l2241
  6742  0A8A  084E               	movf	___ftdiv@f2,w
  6743  0A8B  02D1               	subwf	___ftdiv@f1,f
  6744  0A8C  084F               	movf	___ftdiv@f2+1,w
  6745  0A8D  1C03               	skipc
  6746  0A8E  0F4F               	incfsz	___ftdiv@f2+1,w
  6747  0A8F  02D2               	subwf	___ftdiv@f1+1,f
  6748  0A90  0850               	movf	___ftdiv@f2+2,w
  6749  0A91  1C03               	skipc
  6750  0A92  0A50               	incf	___ftdiv@f2+2,w
  6751  0A93  02D3               	subwf	___ftdiv@f1+2,f
  6752  0A94  1459               	bsf	___ftdiv@f3,0
  6753  0A95                     l2241:	
  6754  0A95  3001               	movlw	1
  6755  0A96                     u2825:	
  6756  0A96  1003               	clrc
  6757  0A97  0DD1               	rlf	___ftdiv@f1,f
  6758  0A98  0DD2               	rlf	___ftdiv@f1+1,f
  6759  0A99  0DD3               	rlf	___ftdiv@f1+2,f
  6760  0A9A  3EFF               	addlw	-1
  6761  0A9B  1D03               	skipz
  6762  0A9C  2A96               	goto	u2825
  6763  0A9D  3001               	movlw	1
  6764  0A9E  02D8               	subwf	___ftdiv@cntr,f
  6765  0A9F  1D03               	btfss	3,2
  6766  0AA0  2A76               	goto	l2233
  6767  0AA1  0859               	movf	___ftdiv@f3,w
  6768  0AA2  00A0               	movwf	___ftpack@arg
  6769  0AA3  085A               	movf	___ftdiv@f3+1,w
  6770  0AA4  00A1               	movwf	___ftpack@arg+1
  6771  0AA5  085B               	movf	___ftdiv@f3+2,w
  6772  0AA6  00A2               	movwf	___ftpack@arg+2
  6773  0AA7  085C               	movf	___ftdiv@exp,w
  6774  0AA8  00D4               	movwf	??___ftdiv
  6775  0AA9  0854               	movf	??___ftdiv,w
  6776  0AAA  00A3               	movwf	___ftpack@exp
  6777  0AAB  085D               	movf	___ftdiv@sign,w
  6778  0AAC  00D5               	movwf	??___ftdiv+1
  6779  0AAD  0855               	movf	??___ftdiv+1,w
  6780  0AAE  00A4               	movwf	___ftpack@sign
  6781  0AAF  120A  118A  278F   	fcall	___ftpack
  6782  0AB2  1283               	bcf	3,5	;RP0=0, select bank0
  6783  0AB3  1303               	bcf	3,6	;RP1=0, select bank0
  6784  0AB4  0820               	movf	?___ftpack,w
  6785  0AB5  00CE               	movwf	?___ftdiv
  6786  0AB6  0821               	movf	?___ftpack+1,w
  6787  0AB7  00CF               	movwf	?___ftdiv+1
  6788  0AB8  0822               	movf	?___ftpack+2,w
  6789  0AB9  00D0               	movwf	?___ftdiv+2
  6790  0ABA  0008               	return
  6791  0ABB                     __end_of___ftdiv:	
  6792                           
  6793                           	psect	text27
  6794  0DCE                     __ptext27:	
  6795 ;; *************** function ___ftadd *****************
  6796 ;; Defined at:
  6797 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;  f1              3   17[BANK0 ] float 
  6800 ;;  f2              3   20[BANK0 ] float 
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;  exp1            1   29[BANK0 ] unsigned char 
  6803 ;;  exp2            1   28[BANK0 ] unsigned char 
  6804 ;;  sign            1   27[BANK0 ] unsigned char 
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  3   17[BANK0 ] float 
  6807 ;; Registers used:
  6808 ;;		wreg, status,2, status,0, pclath, cstack
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6814 ;;      Params:         0       6       0       0       0
  6815 ;;      Locals:         0       3       0       0       0
  6816 ;;      Temps:          0       4       0       0       0
  6817 ;;      Totals:         0      13       0       0       0
  6818 ;;Total ram usage:       13 bytes
  6819 ;; Hardware stack levels used:    1
  6820 ;; Hardware stack levels required when called:    3
  6821 ;; This function calls:
  6822 ;;		___ftpack
  6823 ;; This function is called by:
  6824 ;;		_displayPPM
  6825 ;;		_CalcMQ135
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           
  6830                           ;psect for function ___ftadd
  6831  0DCE                     ___ftadd:	
  6832                           
  6833                           ;incstack = 0
  6834                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6835  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  6836  0DCF  1303               	bcf	3,6	;RP1=0, select bank0
  6837  0DD0  0831               	movf	___ftadd@f1,w
  6838  0DD1  00B7               	movwf	??___ftadd
  6839  0DD2  0832               	movf	___ftadd@f1+1,w
  6840  0DD3  00B8               	movwf	??___ftadd+1
  6841  0DD4  0833               	movf	___ftadd@f1+2,w
  6842  0DD5  00B9               	movwf	??___ftadd+2
  6843  0DD6  1003               	clrc
  6844  0DD7  0D38               	rlf	??___ftadd+1,w
  6845  0DD8  0D39               	rlf	??___ftadd+2,w
  6846  0DD9  00BA               	movwf	??___ftadd+3
  6847  0DDA  083A               	movf	??___ftadd+3,w
  6848  0DDB  00BD               	movwf	___ftadd@exp1
  6849  0DDC  0834               	movf	___ftadd@f2,w
  6850  0DDD  00B7               	movwf	??___ftadd
  6851  0DDE  0835               	movf	___ftadd@f2+1,w
  6852  0DDF  00B8               	movwf	??___ftadd+1
  6853  0DE0  0836               	movf	___ftadd@f2+2,w
  6854  0DE1  00B9               	movwf	??___ftadd+2
  6855  0DE2  1003               	clrc
  6856  0DE3  0D38               	rlf	??___ftadd+1,w
  6857  0DE4  0D39               	rlf	??___ftadd+2,w
  6858  0DE5  00BA               	movwf	??___ftadd+3
  6859  0DE6  083A               	movf	??___ftadd+3,w
  6860  0DE7  00BC               	movwf	___ftadd@exp2
  6861  0DE8  083D               	movf	___ftadd@exp1,w
  6862  0DE9  1903               	btfsc	3,2
  6863  0DEA  2DF7               	goto	l2143
  6864  0DEB  083C               	movf	___ftadd@exp2,w
  6865  0DEC  023D               	subwf	___ftadd@exp1,w
  6866  0DED  1803               	skipnc
  6867  0DEE  2DFE               	goto	l2147
  6868  0DEF  033D               	decf	___ftadd@exp1,w
  6869  0DF0  3AFF               	xorlw	255
  6870  0DF1  073C               	addwf	___ftadd@exp2,w
  6871  0DF2  00B7               	movwf	??___ftadd
  6872  0DF3  3019               	movlw	25
  6873  0DF4  0237               	subwf	??___ftadd,w
  6874  0DF5  1C03               	skipc
  6875  0DF6  2DFE               	goto	l2147
  6876  0DF7                     l2143:	
  6877  0DF7  0834               	movf	___ftadd@f2,w
  6878  0DF8  00B1               	movwf	?___ftadd
  6879  0DF9  0835               	movf	___ftadd@f2+1,w
  6880  0DFA  00B2               	movwf	?___ftadd+1
  6881  0DFB  0836               	movf	___ftadd@f2+2,w
  6882  0DFC  00B3               	movwf	?___ftadd+2
  6883  0DFD  0008               	return
  6884  0DFE                     l2147:	
  6885  0DFE  083C               	movf	___ftadd@exp2,w
  6886  0DFF  1903               	btfsc	3,2
  6887  0E00  0008               	return
  6888  0E01  083D               	movf	___ftadd@exp1,w
  6889  0E02  023C               	subwf	___ftadd@exp2,w
  6890  0E03  1803               	skipnc
  6891  0E04  2E0D               	goto	l2153
  6892  0E05  033C               	decf	___ftadd@exp2,w
  6893  0E06  3AFF               	xorlw	255
  6894  0E07  073D               	addwf	___ftadd@exp1,w
  6895  0E08  00B7               	movwf	??___ftadd
  6896  0E09  3019               	movlw	25
  6897  0E0A  0237               	subwf	??___ftadd,w
  6898  0E0B  1803               	btfsc	3,0
  6899  0E0C  0008               	return
  6900  0E0D                     l2153:	
  6901  0E0D  3006               	movlw	6
  6902  0E0E  00B7               	movwf	??___ftadd
  6903  0E0F  0837               	movf	??___ftadd,w
  6904  0E10  00BB               	movwf	___ftadd@sign
  6905  0E11  1BB3               	btfsc	___ftadd@f1+2,7
  6906  0E12  17BB               	bsf	___ftadd@sign,7
  6907  0E13  1BB6               	btfsc	___ftadd@f2+2,7
  6908  0E14  173B               	bsf	___ftadd@sign,6
  6909  0E15  17B2               	bsf	___ftadd@f1+1,7
  6910  0E16  30FF               	movlw	255
  6911  0E17  05B1               	andwf	___ftadd@f1,f
  6912  0E18  30FF               	movlw	255
  6913  0E19  05B2               	andwf	___ftadd@f1+1,f
  6914  0E1A  3000               	movlw	0
  6915  0E1B  05B3               	andwf	___ftadd@f1+2,f
  6916  0E1C  17B5               	bsf	___ftadd@f2+1,7
  6917  0E1D  30FF               	movlw	255
  6918  0E1E  05B4               	andwf	___ftadd@f2,f
  6919  0E1F  30FF               	movlw	255
  6920  0E20  05B5               	andwf	___ftadd@f2+1,f
  6921  0E21  3000               	movlw	0
  6922  0E22  05B6               	andwf	___ftadd@f2+2,f
  6923  0E23  083C               	movf	___ftadd@exp2,w
  6924  0E24  023D               	subwf	___ftadd@exp1,w
  6925  0E25  1803               	skipnc
  6926  0E26  2E4D               	goto	l2175
  6927  0E27                     l2165:	
  6928  0E27  3001               	movlw	1
  6929  0E28                     u2615:	
  6930  0E28  1003               	clrc
  6931  0E29  0DB4               	rlf	___ftadd@f2,f
  6932  0E2A  0DB5               	rlf	___ftadd@f2+1,f
  6933  0E2B  0DB6               	rlf	___ftadd@f2+2,f
  6934  0E2C  3EFF               	addlw	-1
  6935  0E2D  1D03               	skipz
  6936  0E2E  2E28               	goto	u2615
  6937  0E2F  3001               	movlw	1
  6938  0E30  02BC               	subwf	___ftadd@exp2,f
  6939  0E31  083C               	movf	___ftadd@exp2,w
  6940  0E32  063D               	xorwf	___ftadd@exp1,w
  6941  0E33  1903               	skipnz
  6942  0E34  2E48               	goto	l2173
  6943  0E35  3001               	movlw	1
  6944  0E36  02BB               	subwf	___ftadd@sign,f
  6945  0E37  083B               	movf	___ftadd@sign,w
  6946  0E38  3907               	andlw	7
  6947  0E39  1903               	btfsc	3,2
  6948  0E3A  2E48               	goto	l2173
  6949  0E3B  2E27               	goto	l2165
  6950  0E3C                     l2171:	
  6951  0E3C  3001               	movlw	1
  6952  0E3D                     u2645:	
  6953  0E3D  1003               	clrc
  6954  0E3E  0CB3               	rrf	___ftadd@f1+2,f
  6955  0E3F  0CB2               	rrf	___ftadd@f1+1,f
  6956  0E40  0CB1               	rrf	___ftadd@f1,f
  6957  0E41  3EFF               	addlw	-1
  6958  0E42  1D03               	skipz
  6959  0E43  2E3D               	goto	u2645
  6960  0E44  3001               	movlw	1
  6961  0E45  00B7               	movwf	??___ftadd
  6962  0E46  0837               	movf	??___ftadd,w
  6963  0E47  07BD               	addwf	___ftadd@exp1,f
  6964  0E48                     l2173:	
  6965  0E48  083D               	movf	___ftadd@exp1,w
  6966  0E49  063C               	xorwf	___ftadd@exp2,w
  6967  0E4A  1903               	btfsc	3,2
  6968  0E4B  2E76               	goto	l629
  6969  0E4C  2E3C               	goto	l2171
  6970  0E4D                     l2175:	
  6971  0E4D  083D               	movf	___ftadd@exp1,w
  6972  0E4E  023C               	subwf	___ftadd@exp2,w
  6973  0E4F  1803               	skipnc
  6974  0E50  2E76               	goto	l629
  6975  0E51                     l2177:	
  6976  0E51  3001               	movlw	1
  6977  0E52                     u2675:	
  6978  0E52  1003               	clrc
  6979  0E53  0DB1               	rlf	___ftadd@f1,f
  6980  0E54  0DB2               	rlf	___ftadd@f1+1,f
  6981  0E55  0DB3               	rlf	___ftadd@f1+2,f
  6982  0E56  3EFF               	addlw	-1
  6983  0E57  1D03               	skipz
  6984  0E58  2E52               	goto	u2675
  6985  0E59  3001               	movlw	1
  6986  0E5A  02BD               	subwf	___ftadd@exp1,f
  6987  0E5B  083C               	movf	___ftadd@exp2,w
  6988  0E5C  063D               	xorwf	___ftadd@exp1,w
  6989  0E5D  1903               	skipnz
  6990  0E5E  2E72               	goto	l2185
  6991  0E5F  3001               	movlw	1
  6992  0E60  02BB               	subwf	___ftadd@sign,f
  6993  0E61  083B               	movf	___ftadd@sign,w
  6994  0E62  3907               	andlw	7
  6995  0E63  1903               	btfsc	3,2
  6996  0E64  2E72               	goto	l2185
  6997  0E65  2E51               	goto	l2177
  6998  0E66                     l2183:	
  6999  0E66  3001               	movlw	1
  7000  0E67                     u2705:	
  7001  0E67  1003               	clrc
  7002  0E68  0CB6               	rrf	___ftadd@f2+2,f
  7003  0E69  0CB5               	rrf	___ftadd@f2+1,f
  7004  0E6A  0CB4               	rrf	___ftadd@f2,f
  7005  0E6B  3EFF               	addlw	-1
  7006  0E6C  1D03               	skipz
  7007  0E6D  2E67               	goto	u2705
  7008  0E6E  3001               	movlw	1
  7009  0E6F  00B7               	movwf	??___ftadd
  7010  0E70  0837               	movf	??___ftadd,w
  7011  0E71  07BC               	addwf	___ftadd@exp2,f
  7012  0E72                     l2185:	
  7013  0E72  083D               	movf	___ftadd@exp1,w
  7014  0E73  063C               	xorwf	___ftadd@exp2,w
  7015  0E74  1D03               	skipz
  7016  0E75  2E66               	goto	l2183
  7017  0E76                     l629:	
  7018  0E76  1FBB               	btfss	___ftadd@sign,7
  7019  0E77  2E88               	goto	l2189
  7020  0E78  30FF               	movlw	255
  7021  0E79  06B1               	xorwf	___ftadd@f1,f
  7022  0E7A  30FF               	movlw	255
  7023  0E7B  06B2               	xorwf	___ftadd@f1+1,f
  7024  0E7C  30FF               	movlw	255
  7025  0E7D  06B3               	xorwf	___ftadd@f1+2,f
  7026  0E7E  3001               	movlw	1
  7027  0E7F  07B1               	addwf	___ftadd@f1,f
  7028  0E80  3000               	movlw	0
  7029  0E81  1803               	skipnc
  7030  0E82  3001               	movlw	1
  7031  0E83  07B2               	addwf	___ftadd@f1+1,f
  7032  0E84  3000               	movlw	0
  7033  0E85  1803               	skipnc
  7034  0E86  3001               	movlw	1
  7035  0E87  07B3               	addwf	___ftadd@f1+2,f
  7036  0E88                     l2189:	
  7037  0E88  1F3B               	btfss	___ftadd@sign,6
  7038  0E89  2E9A               	goto	l2193
  7039  0E8A  30FF               	movlw	255
  7040  0E8B  06B4               	xorwf	___ftadd@f2,f
  7041  0E8C  30FF               	movlw	255
  7042  0E8D  06B5               	xorwf	___ftadd@f2+1,f
  7043  0E8E  30FF               	movlw	255
  7044  0E8F  06B6               	xorwf	___ftadd@f2+2,f
  7045  0E90  3001               	movlw	1
  7046  0E91  07B4               	addwf	___ftadd@f2,f
  7047  0E92  3000               	movlw	0
  7048  0E93  1803               	skipnc
  7049  0E94  3001               	movlw	1
  7050  0E95  07B5               	addwf	___ftadd@f2+1,f
  7051  0E96  3000               	movlw	0
  7052  0E97  1803               	skipnc
  7053  0E98  3001               	movlw	1
  7054  0E99  07B6               	addwf	___ftadd@f2+2,f
  7055  0E9A                     l2193:	
  7056  0E9A  01BB               	clrf	___ftadd@sign
  7057  0E9B  0831               	movf	___ftadd@f1,w
  7058  0E9C  07B4               	addwf	___ftadd@f2,f
  7059  0E9D  0832               	movf	___ftadd@f1+1,w
  7060  0E9E  1103               	clrz
  7061  0E9F  1803               	skipnc
  7062  0EA0  0A32               	incf	___ftadd@f1+1,w
  7063  0EA1  1D03               	btfss	3,2
  7064  0EA2  07B5               	addwf	___ftadd@f2+1,f
  7065  0EA3  0833               	movf	___ftadd@f1+2,w
  7066  0EA4  1103               	clrz
  7067  0EA5  1803               	skipnc
  7068  0EA6  0A33               	incf	___ftadd@f1+2,w
  7069  0EA7  1D03               	btfss	3,2
  7070  0EA8  07B6               	addwf	___ftadd@f2+2,f
  7071  0EA9  1FB6               	btfss	___ftadd@f2+2,7
  7072  0EAA  2EBD               	goto	l2203
  7073  0EAB  30FF               	movlw	255
  7074  0EAC  06B4               	xorwf	___ftadd@f2,f
  7075  0EAD  30FF               	movlw	255
  7076  0EAE  06B5               	xorwf	___ftadd@f2+1,f
  7077  0EAF  30FF               	movlw	255
  7078  0EB0  06B6               	xorwf	___ftadd@f2+2,f
  7079  0EB1  3001               	movlw	1
  7080  0EB2  07B4               	addwf	___ftadd@f2,f
  7081  0EB3  3000               	movlw	0
  7082  0EB4  1803               	skipnc
  7083  0EB5  3001               	movlw	1
  7084  0EB6  07B5               	addwf	___ftadd@f2+1,f
  7085  0EB7  3000               	movlw	0
  7086  0EB8  1803               	skipnc
  7087  0EB9  3001               	movlw	1
  7088  0EBA  07B6               	addwf	___ftadd@f2+2,f
  7089  0EBB  01BB               	clrf	___ftadd@sign
  7090  0EBC  0ABB               	incf	___ftadd@sign,f
  7091  0EBD                     l2203:	
  7092  0EBD  0834               	movf	___ftadd@f2,w
  7093  0EBE  00A0               	movwf	___ftpack@arg
  7094  0EBF  0835               	movf	___ftadd@f2+1,w
  7095  0EC0  00A1               	movwf	___ftpack@arg+1
  7096  0EC1  0836               	movf	___ftadd@f2+2,w
  7097  0EC2  00A2               	movwf	___ftpack@arg+2
  7098  0EC3  083D               	movf	___ftadd@exp1,w
  7099  0EC4  00B7               	movwf	??___ftadd
  7100  0EC5  0837               	movf	??___ftadd,w
  7101  0EC6  00A3               	movwf	___ftpack@exp
  7102  0EC7  083B               	movf	___ftadd@sign,w
  7103  0EC8  00B8               	movwf	??___ftadd+1
  7104  0EC9  0838               	movf	??___ftadd+1,w
  7105  0ECA  00A4               	movwf	___ftpack@sign
  7106  0ECB  120A  118A  278F   	fcall	___ftpack
  7107  0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  7108  0ECF  1303               	bcf	3,6	;RP1=0, select bank0
  7109  0ED0  0820               	movf	?___ftpack,w
  7110  0ED1  00B1               	movwf	?___ftadd
  7111  0ED2  0821               	movf	?___ftpack+1,w
  7112  0ED3  00B2               	movwf	?___ftadd+1
  7113  0ED4  0822               	movf	?___ftpack+2,w
  7114  0ED5  00B3               	movwf	?___ftadd+2
  7115  0ED6  0008               	return
  7116  0ED7                     __end_of___ftadd:	
  7117                           
  7118                           	psect	text28
  7119  15C0                     __ptext28:	
  7120 ;; *************** function ___awtoft *****************
  7121 ;; Defined at:
  7122 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;  c               2    8[BANK0 ] int 
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  sign            1   13[BANK0 ] unsigned char 
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  3    8[BANK0 ] float 
  7129 ;; Registers used:
  7130 ;;		wreg, status,2, status,0, pclath, cstack
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7136 ;;      Params:         0       3       0       0       0
  7137 ;;      Locals:         0       1       0       0       0
  7138 ;;      Temps:          0       2       0       0       0
  7139 ;;      Totals:         0       6       0       0       0
  7140 ;;Total ram usage:        6 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    3
  7143 ;; This function calls:
  7144 ;;		___ftpack
  7145 ;; This function is called by:
  7146 ;;		_displayPPM
  7147 ;;		_CalcMQ135
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           
  7152                           ;psect for function ___awtoft
  7153  15C0                     ___awtoft:	
  7154                           
  7155                           ;incstack = 0
  7156                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7157  15C0  1283               	bcf	3,5	;RP0=0, select bank0
  7158  15C1  1303               	bcf	3,6	;RP1=0, select bank0
  7159  15C2  01AD               	clrf	___awtoft@sign
  7160  15C3  1FA9               	btfss	___awtoft@c+1,7
  7161  15C4  2DCC               	goto	l2131
  7162  15C5  09A8               	comf	___awtoft@c,f
  7163  15C6  09A9               	comf	___awtoft@c+1,f
  7164  15C7  0AA8               	incf	___awtoft@c,f
  7165  15C8  1903               	skipnz
  7166  15C9  0AA9               	incf	___awtoft@c+1,f
  7167  15CA  01AD               	clrf	___awtoft@sign
  7168  15CB  0AAD               	incf	___awtoft@sign,f
  7169  15CC                     l2131:	
  7170  15CC  0828               	movf	___awtoft@c,w
  7171  15CD  00A0               	movwf	___ftpack@arg
  7172  15CE  0829               	movf	___awtoft@c+1,w
  7173  15CF  00A1               	movwf	___ftpack@arg+1
  7174  15D0  01A2               	clrf	___ftpack@arg+2
  7175  15D1  308E               	movlw	142
  7176  15D2  00AB               	movwf	??___awtoft
  7177  15D3  082B               	movf	??___awtoft,w
  7178  15D4  00A3               	movwf	___ftpack@exp
  7179  15D5  082D               	movf	___awtoft@sign,w
  7180  15D6  00AC               	movwf	??___awtoft+1
  7181  15D7  082C               	movf	??___awtoft+1,w
  7182  15D8  00A4               	movwf	___ftpack@sign
  7183  15D9  120A  118A  278F   	fcall	___ftpack
  7184  15DC  1283               	bcf	3,5	;RP0=0, select bank0
  7185  15DD  1303               	bcf	3,6	;RP1=0, select bank0
  7186  15DE  0820               	movf	?___ftpack,w
  7187  15DF  00A8               	movwf	?___awtoft
  7188  15E0  0821               	movf	?___ftpack+1,w
  7189  15E1  00A9               	movwf	?___awtoft+1
  7190  15E2  0822               	movf	?___ftpack+2,w
  7191  15E3  00AA               	movwf	?___awtoft+2
  7192  15E4  0008               	return
  7193  15E5                     __end_of___awtoft:	
  7194                           
  7195                           	psect	text29
  7196  078F                     __ptext29:	
  7197 ;; *************** function ___ftpack *****************
  7198 ;; Defined at:
  7199 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;  arg             3    0[BANK0 ] unsigned um
  7202 ;;  exp             1    3[BANK0 ] unsigned char 
  7203 ;;  sign            1    4[BANK0 ] unsigned char 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;		None
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  3    0[BANK0 ] float 
  7208 ;; Registers used:
  7209 ;;		wreg, status,2, status,0
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7215 ;;      Params:         0       5       0       0       0
  7216 ;;      Locals:         0       0       0       0       0
  7217 ;;      Temps:          0       3       0       0       0
  7218 ;;      Totals:         0       8       0       0       0
  7219 ;;Total ram usage:        8 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    2
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		___awtoft
  7226 ;;		___ftadd
  7227 ;;		___ftdiv
  7228 ;;		___ftmul
  7229 ;; This function uses a non-reentrant model
  7230 ;;
  7231                           
  7232                           
  7233                           ;psect for function ___ftpack
  7234  078F                     ___ftpack:	
  7235                           
  7236                           ;incstack = 0
  7237                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7238  078F  1283               	bcf	3,5	;RP0=0, select bank0
  7239  0790  1303               	bcf	3,6	;RP1=0, select bank0
  7240  0791  0823               	movf	___ftpack@exp,w
  7241  0792  1903               	btfsc	3,2
  7242  0793  2F99               	goto	l1879
  7243  0794  0822               	movf	___ftpack@arg+2,w
  7244  0795  0421               	iorwf	___ftpack@arg+1,w
  7245  0796  0420               	iorwf	___ftpack@arg,w
  7246  0797  1D03               	skipz
  7247  0798  2FAC               	goto	l1885
  7248  0799                     l1879:	
  7249  0799  3000               	movlw	0
  7250  079A  00A0               	movwf	?___ftpack
  7251  079B  3000               	movlw	0
  7252  079C  00A1               	movwf	?___ftpack+1
  7253  079D  3000               	movlw	0
  7254  079E  00A2               	movwf	?___ftpack+2
  7255  079F  0008               	return
  7256  07A0                     l1883:	
  7257  07A0  3001               	movlw	1
  7258  07A1  00A5               	movwf	??___ftpack
  7259  07A2  0825               	movf	??___ftpack,w
  7260  07A3  07A3               	addwf	___ftpack@exp,f
  7261  07A4  3001               	movlw	1
  7262  07A5                     u2005:	
  7263  07A5  1003               	clrc
  7264  07A6  0CA2               	rrf	___ftpack@arg+2,f
  7265  07A7  0CA1               	rrf	___ftpack@arg+1,f
  7266  07A8  0CA0               	rrf	___ftpack@arg,f
  7267  07A9  3EFF               	addlw	-1
  7268  07AA  1D03               	skipz
  7269  07AB  2FA5               	goto	u2005
  7270  07AC                     l1885:	
  7271  07AC  30FE               	movlw	254
  7272  07AD  0522               	andwf	___ftpack@arg+2,w
  7273  07AE  1903               	btfsc	3,2
  7274  07AF  2FC7               	goto	l600
  7275  07B0  2FA0               	goto	l1883
  7276  07B1                     l1887:	
  7277  07B1  3001               	movlw	1
  7278  07B2  00A5               	movwf	??___ftpack
  7279  07B3  0825               	movf	??___ftpack,w
  7280  07B4  07A3               	addwf	___ftpack@exp,f
  7281  07B5  3001               	movlw	1
  7282  07B6  07A0               	addwf	___ftpack@arg,f
  7283  07B7  3000               	movlw	0
  7284  07B8  1803               	skipnc
  7285  07B9  3001               	movlw	1
  7286  07BA  07A1               	addwf	___ftpack@arg+1,f
  7287  07BB  3000               	movlw	0
  7288  07BC  1803               	skipnc
  7289  07BD  3001               	movlw	1
  7290  07BE  07A2               	addwf	___ftpack@arg+2,f
  7291  07BF  3001               	movlw	1
  7292  07C0                     u2025:	
  7293  07C0  1003               	clrc
  7294  07C1  0CA2               	rrf	___ftpack@arg+2,f
  7295  07C2  0CA1               	rrf	___ftpack@arg+1,f
  7296  07C3  0CA0               	rrf	___ftpack@arg,f
  7297  07C4  3EFF               	addlw	-1
  7298  07C5  1D03               	skipz
  7299  07C6  2FC0               	goto	u2025
  7300  07C7                     l600:	
  7301  07C7  30FF               	movlw	255
  7302  07C8  0522               	andwf	___ftpack@arg+2,w
  7303  07C9  1903               	btfsc	3,2
  7304  07CA  2FD6               	goto	l1895
  7305  07CB  2FB1               	goto	l1887
  7306  07CC                     l1893:	
  7307  07CC  3001               	movlw	1
  7308  07CD  02A3               	subwf	___ftpack@exp,f
  7309  07CE  3001               	movlw	1
  7310  07CF                     u2045:	
  7311  07CF  1003               	clrc
  7312  07D0  0DA0               	rlf	___ftpack@arg,f
  7313  07D1  0DA1               	rlf	___ftpack@arg+1,f
  7314  07D2  0DA2               	rlf	___ftpack@arg+2,f
  7315  07D3  3EFF               	addlw	-1
  7316  07D4  1D03               	skipz
  7317  07D5  2FCF               	goto	u2045
  7318  07D6                     l1895:	
  7319  07D6  1FA1               	btfss	___ftpack@arg+1,7
  7320  07D7  2FCC               	goto	l1893
  7321  07D8  1823               	btfsc	___ftpack@exp,0
  7322  07D9  2FE0               	goto	l606
  7323  07DA  30FF               	movlw	255
  7324  07DB  05A0               	andwf	___ftpack@arg,f
  7325  07DC  307F               	movlw	127
  7326  07DD  05A1               	andwf	___ftpack@arg+1,f
  7327  07DE  30FF               	movlw	255
  7328  07DF  05A2               	andwf	___ftpack@arg+2,f
  7329  07E0                     l606:	
  7330  07E0  1003               	clrc
  7331  07E1  0CA3               	rrf	___ftpack@exp,f
  7332  07E2  0823               	movf	___ftpack@exp,w
  7333  07E3  00A5               	movwf	??___ftpack
  7334  07E4  01A6               	clrf	??___ftpack+1
  7335  07E5  01A7               	clrf	??___ftpack+2
  7336  07E6  3010               	movlw	16
  7337  07E7                     u2075:	
  7338  07E7  1003               	clrc
  7339  07E8  0DA5               	rlf	??___ftpack,f
  7340  07E9  0DA6               	rlf	??___ftpack+1,f
  7341  07EA  0DA7               	rlf	??___ftpack+2,f
  7342  07EB  3EFF               	addlw	-1
  7343  07EC  1D03               	skipz
  7344  07ED  2FE7               	goto	u2075
  7345  07EE  0825               	movf	??___ftpack,w
  7346  07EF  04A0               	iorwf	___ftpack@arg,f
  7347  07F0  0826               	movf	??___ftpack+1,w
  7348  07F1  04A1               	iorwf	___ftpack@arg+1,f
  7349  07F2  0827               	movf	??___ftpack+2,w
  7350  07F3  04A2               	iorwf	___ftpack@arg+2,f
  7351  07F4  0824               	movf	___ftpack@sign,w
  7352  07F5  1903               	btfsc	3,2
  7353  07F6  0008               	return
  7354  07F7  17A2               	bsf	___ftpack@arg+2,7
  7355  07F8  0008               	return
  7356  07F9                     __end_of___ftpack:	
  7357                           
  7358                           	psect	text30
  7359  14AE                     __ptext30:	
  7360 ;; *************** function _runClock *****************
  7361 ;; Defined at:
  7362 ;;		line 33 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedul
      +er.h"
  7363 ;; Parameters:    Size  Location     Type
  7364 ;;		None
  7365 ;; Auto vars:     Size  Location     Type
  7366 ;;		None
  7367 ;; Return value:  Size  Location     Type
  7368 ;;		None               void
  7369 ;; Registers used:
  7370 ;;		wreg, status,2, status,0
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7376 ;;      Params:         0       0       0       0       0
  7377 ;;      Locals:         0       0       0       0       0
  7378 ;;      Temps:          0       2       0       0       0
  7379 ;;      Totals:         0       2       0       0       0
  7380 ;;Total ram usage:        2 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    2
  7383 ;; This function calls:
  7384 ;;		Nothing
  7385 ;; This function is called by:
  7386 ;;		_main
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           
  7391                           ;psect for function _runClock
  7392  14AE                     _runClock:	
  7393                           
  7394                           ;time_scheduler.h: 35: minutes++;
  7395                           
  7396                           ;incstack = 0
  7397                           ; Regs used in _runClock: [wreg+status,2+status,0]
  7398  14AE  3001               	movlw	1
  7399  14AF  1283               	bcf	3,5	;RP0=0, select bank0
  7400  14B0  1303               	bcf	3,6	;RP1=0, select bank0
  7401  14B1  00A0               	movwf	??_runClock
  7402  14B2  0820               	movf	??_runClock,w
  7403  14B3  07F9               	addwf	_minutes,f	;volatile
  7404                           
  7405                           ;time_scheduler.h: 36: if (minutes >= 60)
  7406  14B4  303C               	movlw	60
  7407  14B5  0279               	subwf	_minutes,w	;volatile
  7408  14B6  1C03               	skipc
  7409  14B7  2CC1               	goto	l2601
  7410                           
  7411                           ;time_scheduler.h: 37: {
  7412                           ;time_scheduler.h: 38: minutes = 0;
  7413  14B8  01F9               	clrf	_minutes	;volatile
  7414                           
  7415                           ;time_scheduler.h: 39: hours++;
  7416  14B9  3001               	movlw	1
  7417  14BA  00A0               	movwf	??_runClock
  7418  14BB  0820               	movf	??_runClock,w
  7419  14BC  07FA               	addwf	_hours,f	;volatile
  7420                           
  7421                           ;time_scheduler.h: 40: if (hours >= 24)
  7422  14BD  3018               	movlw	24
  7423  14BE  027A               	subwf	_hours,w	;volatile
  7424  14BF  1803               	btfsc	3,0
  7425                           
  7426                           ;time_scheduler.h: 41: {
  7427                           ;time_scheduler.h: 42: hours = 0;
  7428  14C0  01FA               	clrf	_hours	;volatile
  7429  14C1                     l2601:	
  7430                           
  7431                           ;time_scheduler.h: 43: }
  7432                           ;time_scheduler.h: 44: }
  7433                           ;time_scheduler.h: 45: _delay((unsigned long)((50)*(4000000/4000.0)));
  7434  14C1  3041               	movlw	65
  7435  14C2  00A1               	movwf	??_runClock+1
  7436  14C3  30EE               	movlw	238
  7437  14C4  00A0               	movwf	??_runClock
  7438  14C5                     u4837:	
  7439  14C5  0BA0               	decfsz	??_runClock,f
  7440  14C6  2CC5               	goto	u4837
  7441  14C7  0BA1               	decfsz	??_runClock+1,f
  7442  14C8  2CC5               	goto	u4837
  7443  14C9  0000               	nop
  7444  14CA  0008               	return
  7445  14CB                     __end_of_runClock:	
  7446                           
  7447                           	psect	text31
  7448  07F9                     __ptext31:	
  7449 ;; *************** function _initInterrupt *****************
  7450 ;; Defined at:
  7451 ;;		line 76 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;		None
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;		None
  7456 ;; Return value:  Size  Location     Type
  7457 ;;		None               void
  7458 ;; Registers used:
  7459 ;;		None
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7465 ;;      Params:         0       0       0       0       0
  7466 ;;      Locals:         0       0       0       0       0
  7467 ;;      Temps:          0       0       0       0       0
  7468 ;;      Totals:         0       0       0       0       0
  7469 ;;Total ram usage:        0 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; Hardware stack levels required when called:    2
  7472 ;; This function calls:
  7473 ;;		Nothing
  7474 ;; This function is called by:
  7475 ;;		_main
  7476 ;; This function uses a non-reentrant model
  7477 ;;
  7478                           
  7479                           
  7480                           ;psect for function _initInterrupt
  7481  07F9                     _initInterrupt:	
  7482                           
  7483                           ;main.c: 78: GIE = 1;
  7484                           
  7485                           ;incstack = 0
  7486                           ; Regs used in _initInterrupt: []
  7487  07F9  178B               	bsf	11,7	;volatile
  7488                           
  7489                           ;main.c: 79: INTE = 1;
  7490  07FA  160B               	bsf	11,4	;volatile
  7491                           
  7492                           ;main.c: 80: INTF = 0;
  7493  07FB  108B               	bcf	11,1	;volatile
  7494                           
  7495                           ;main.c: 81: INTEDG = 0;
  7496  07FC  1683               	bsf	3,5	;RP0=1, select bank1
  7497  07FD  1303               	bcf	3,6	;RP1=0, select bank1
  7498  07FE  1301               	bcf	1,6	;volatile
  7499  07FF  0008               	return
  7500  0800                     __end_of_initInterrupt:	
  7501                           
  7502                           	psect	text32
  7503  13DA                     __ptext32:	
  7504 ;; *************** function _initADC *****************
  7505 ;; Defined at:
  7506 ;;		line 63 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;		None
  7509 ;; Auto vars:     Size  Location     Type
  7510 ;;		None
  7511 ;; Return value:  Size  Location     Type
  7512 ;;		None               void
  7513 ;; Registers used:
  7514 ;;		wreg
  7515 ;; Tracked objects:
  7516 ;;		On entry : 0/0
  7517 ;;		On exit  : 0/0
  7518 ;;		Unchanged: 0/0
  7519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7520 ;;      Params:         0       0       0       0       0
  7521 ;;      Locals:         0       0       0       0       0
  7522 ;;      Temps:          0       0       0       0       0
  7523 ;;      Totals:         0       0       0       0       0
  7524 ;;Total ram usage:        0 bytes
  7525 ;; Hardware stack levels used:    1
  7526 ;; Hardware stack levels required when called:    2
  7527 ;; This function calls:
  7528 ;;		Nothing
  7529 ;; This function is called by:
  7530 ;;		_main
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           
  7535                           ;psect for function _initADC
  7536  13DA                     _initADC:	
  7537                           
  7538                           ;main.c: 65: ADCON1 = 0x80;
  7539                           
  7540                           ;incstack = 0
  7541                           ; Regs used in _initADC: [wreg]
  7542  13DA  3080               	movlw	128
  7543  13DB  1683               	bsf	3,5	;RP0=1, select bank1
  7544  13DC  1303               	bcf	3,6	;RP1=0, select bank1
  7545  13DD  009F               	movwf	31	;volatile
  7546                           
  7547                           ;main.c: 66: ADCON0 = 0x01;
  7548  13DE  3001               	movlw	1
  7549  13DF  1283               	bcf	3,5	;RP0=0, select bank0
  7550  13E0  1303               	bcf	3,6	;RP1=0, select bank0
  7551  13E1  009F               	movwf	31	;volatile
  7552  13E2  0008               	return
  7553  13E3                     __end_of_initADC:	
  7554                           
  7555                           	psect	text33
  7556  145A                     __ptext33:	
  7557 ;; *************** function _handleTemp *****************
  7558 ;; Defined at:
  7559 ;;		line 31 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\temp_module.
      +h"
  7560 ;; Parameters:    Size  Location     Type
  7561 ;;		None
  7562 ;; Auto vars:     Size  Location     Type
  7563 ;;		None
  7564 ;; Return value:  Size  Location     Type
  7565 ;;                  1    wreg      unsigned char 
  7566 ;; Registers used:
  7567 ;;		wreg, status,2, btemp+1
  7568 ;; Tracked objects:
  7569 ;;		On entry : 0/0
  7570 ;;		On exit  : 0/0
  7571 ;;		Unchanged: 0/0
  7572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7573 ;;      Params:         0       0       0       0       0
  7574 ;;      Locals:         0       0       0       0       0
  7575 ;;      Temps:          0       0       0       0       0
  7576 ;;      Totals:         0       0       0       0       0
  7577 ;;Total ram usage:        0 bytes
  7578 ;; Hardware stack levels used:    1
  7579 ;; Hardware stack levels required when called:    2
  7580 ;; This function calls:
  7581 ;;		Nothing
  7582 ;; This function is called by:
  7583 ;;		_main
  7584 ;; This function uses a non-reentrant model
  7585 ;;
  7586                           
  7587                           
  7588                           ;psect for function _handleTemp
  7589  145A                     _handleTemp:	
  7590                           
  7591                           ;temp_module.h: 33: if (tempBuffer > 32)
  7592                           
  7593                           ;incstack = 0
  7594                           ; Regs used in _handleTemp: [wreg+status,2+btemp+1]
  7595  145A  1683               	bsf	3,5	;RP0=1, select bank1
  7596  145B  1303               	bcf	3,6	;RP1=0, select bank1
  7597  145C  085B               	movf	(_tempBuffer+1)^(0+128),w
  7598  145D  3A80               	xorlw	128
  7599  145E  00FF               	movwf	127
  7600  145F  3080               	movlw	128
  7601  1460  027F               	subwf	127,w
  7602  1461  1D03               	skipz
  7603  1462  2C65               	goto	u4705
  7604  1463  3021               	movlw	33
  7605  1464  025A               	subwf	_tempBuffer^(0+128),w
  7606  1465                     u4705:	
  7607  1465  1C03               	skipc
  7608  1466  2C6F               	goto	l236
  7609                           
  7610                           ;temp_module.h: 34: {
  7611                           ;temp_module.h: 35: RC5 = 1;
  7612  1467  1283               	bcf	3,5	;RP0=0, select bank0
  7613  1468  1303               	bcf	3,6	;RP1=0, select bank0
  7614  1469  1687               	bsf	7,5	;volatile
  7615                           
  7616                           ;temp_module.h: 36: tempFlag = 1;
  7617  146A  1683               	bsf	3,5	;RP0=1, select bank1
  7618  146B  1303               	bcf	3,6	;RP1=0, select bank1
  7619  146C  01E1               	clrf	_tempFlag^(0+128)
  7620  146D  0AE1               	incf	_tempFlag^(0+128),f
  7621                           
  7622                           ;temp_module.h: 38: }
  7623                           
  7624                           ;temp_module.h: 37: return 1;
  7625                           ;	Return value of _handleTemp is never used
  7626  146E  0008               	return
  7627  146F                     l236:	
  7628                           
  7629                           ;temp_module.h: 39: else
  7630                           ;temp_module.h: 40: {
  7631                           ;temp_module.h: 41: RC5 = 0;
  7632  146F  1283               	bcf	3,5	;RP0=0, select bank0
  7633  1470  1303               	bcf	3,6	;RP1=0, select bank0
  7634  1471  1287               	bcf	7,5	;volatile
  7635                           
  7636                           ;temp_module.h: 42: tempFlag = 0;
  7637  1472  1683               	bsf	3,5	;RP0=1, select bank1
  7638  1473  1303               	bcf	3,6	;RP1=0, select bank1
  7639  1474  01E1               	clrf	_tempFlag^(0+128)
  7640                           
  7641                           ;temp_module.h: 43: return 0;
  7642                           ;	Return value of _handleTemp is never used
  7643  1475  0008               	return
  7644  1476                     __end_of_handleTemp:	
  7645                           
  7646                           	psect	text34
  7647  1668                     __ptext34:	
  7648 ;; *************** function _handlePPM *****************
  7649 ;; Defined at:
  7650 ;;		line 54 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  7651 ;; Parameters:    Size  Location     Type
  7652 ;;		None
  7653 ;; Auto vars:     Size  Location     Type
  7654 ;;		None
  7655 ;; Return value:  Size  Location     Type
  7656 ;;                  1    wreg      unsigned char 
  7657 ;; Registers used:
  7658 ;;		wreg, status,2, status,0, pclath, cstack
  7659 ;; Tracked objects:
  7660 ;;		On entry : 0/0
  7661 ;;		On exit  : 0/0
  7662 ;;		Unchanged: 0/0
  7663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7664 ;;      Params:         0       0       0       0       0
  7665 ;;      Locals:         0       0       0       0       0
  7666 ;;      Temps:          0       0       0       0       0
  7667 ;;      Totals:         0       0       0       0       0
  7668 ;;Total ram usage:        0 bytes
  7669 ;; Hardware stack levels used:    1
  7670 ;; Hardware stack levels required when called:    3
  7671 ;; This function calls:
  7672 ;;		___ftge
  7673 ;; This function is called by:
  7674 ;;		_main
  7675 ;; This function uses a non-reentrant model
  7676 ;;
  7677                           
  7678                           
  7679                           ;psect for function _handlePPM
  7680  1668                     _handlePPM:	
  7681                           
  7682                           ;mq135_module.h: 56: if (PPM > 9)
  7683                           
  7684                           ;incstack = 0
  7685                           ; Regs used in _handlePPM: [wreg+status,2+status,0+pclath+cstack]
  7686  1668  3000               	movlw	0
  7687  1669  1283               	bcf	3,5	;RP0=0, select bank0
  7688  166A  1303               	bcf	3,6	;RP1=0, select bank0
  7689  166B  00A0               	movwf	___ftge@ff1
  7690  166C  3010               	movlw	16
  7691  166D  00A1               	movwf	___ftge@ff1+1
  7692  166E  3041               	movlw	65
  7693  166F  00A2               	movwf	___ftge@ff1+2
  7694  1670  1683               	bsf	3,5	;RP0=1, select bank1
  7695  1671  1303               	bcf	3,6	;RP1=0, select bank1
  7696  1672  0857               	movf	_PPM^(0+128),w	;volatile
  7697  1673  1283               	bcf	3,5	;RP0=0, select bank0
  7698  1674  1303               	bcf	3,6	;RP1=0, select bank0
  7699  1675  00A3               	movwf	___ftge@ff2
  7700  1676  1683               	bsf	3,5	;RP0=1, select bank1
  7701  1677  1303               	bcf	3,6	;RP1=0, select bank1
  7702  1678  0858               	movf	(_PPM+1)^(0+128),w	;volatile
  7703  1679  1283               	bcf	3,5	;RP0=0, select bank0
  7704  167A  1303               	bcf	3,6	;RP1=0, select bank0
  7705  167B  00A4               	movwf	___ftge@ff2+1
  7706  167C  1683               	bsf	3,5	;RP0=1, select bank1
  7707  167D  1303               	bcf	3,6	;RP1=0, select bank1
  7708  167E  0859               	movf	(_PPM+2)^(0+128),w	;volatile
  7709  167F  1283               	bcf	3,5	;RP0=0, select bank0
  7710  1680  1303               	bcf	3,6	;RP1=0, select bank0
  7711  1681  00A5               	movwf	___ftge@ff2+2
  7712  1682  160A  118A  2742  160A  118A  	fcall	___ftge
  7713  1687  1803               	btfsc	3,0
  7714  1688  2E91               	goto	l103
  7715                           
  7716                           ;mq135_module.h: 57: {
  7717                           ;mq135_module.h: 58: RC3 = 1;
  7718  1689  1283               	bcf	3,5	;RP0=0, select bank0
  7719  168A  1303               	bcf	3,6	;RP1=0, select bank0
  7720  168B  1587               	bsf	7,3	;volatile
  7721                           
  7722                           ;mq135_module.h: 59: ppmFlag = 1;
  7723  168C  1683               	bsf	3,5	;RP0=1, select bank1
  7724  168D  1303               	bcf	3,6	;RP1=0, select bank1
  7725  168E  01DF               	clrf	_ppmFlag^(0+128)
  7726  168F  0ADF               	incf	_ppmFlag^(0+128),f
  7727                           
  7728                           ;mq135_module.h: 61: }
  7729                           
  7730                           ;mq135_module.h: 60: return 1;
  7731                           ;	Return value of _handlePPM is never used
  7732  1690  0008               	return
  7733  1691                     l103:	
  7734                           
  7735                           ;mq135_module.h: 62: else
  7736                           ;mq135_module.h: 63: {
  7737                           ;mq135_module.h: 64: RC3 = 0;
  7738  1691  1283               	bcf	3,5	;RP0=0, select bank0
  7739  1692  1303               	bcf	3,6	;RP1=0, select bank0
  7740  1693  1187               	bcf	7,3	;volatile
  7741                           
  7742                           ;mq135_module.h: 65: ppmFlag = 0;
  7743  1694  1683               	bsf	3,5	;RP0=1, select bank1
  7744  1695  1303               	bcf	3,6	;RP1=0, select bank1
  7745  1696  01DF               	clrf	_ppmFlag^(0+128)
  7746                           
  7747                           ;mq135_module.h: 66: return 0;
  7748                           ;	Return value of _handlePPM is never used
  7749  1697  0008               	return
  7750  1698                     __end_of_handlePPM:	
  7751                           
  7752                           	psect	text35
  7753  1742                     __ptext35:	
  7754 ;; *************** function ___ftge *****************
  7755 ;; Defined at:
  7756 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;  ff1             3    0[BANK0 ] float 
  7759 ;;  ff2             3    3[BANK0 ] float 
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;		None
  7762 ;; Return value:  Size  Location     Type
  7763 ;;		None               void
  7764 ;; Registers used:
  7765 ;;		wreg, status,2, status,0
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7771 ;;      Params:         0       6       0       0       0
  7772 ;;      Locals:         0       0       0       0       0
  7773 ;;      Temps:          0       6       0       0       0
  7774 ;;      Totals:         0      12       0       0       0
  7775 ;;Total ram usage:       12 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; Hardware stack levels required when called:    2
  7778 ;; This function calls:
  7779 ;;		Nothing
  7780 ;; This function is called by:
  7781 ;;		_handlePPM
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           
  7786                           ;psect for function ___ftge
  7787  1742                     ___ftge:	
  7788                           
  7789                           ;incstack = 0
  7790                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7791  1742  1283               	bcf	3,5	;RP0=0, select bank0
  7792  1743  1303               	bcf	3,6	;RP1=0, select bank0
  7793  1744  1FA2               	btfss	___ftge@ff1+2,7
  7794  1745  2F6B               	goto	l2561
  7795  1746  3000               	movlw	0
  7796  1747  00A6               	movwf	??___ftge
  7797  1748  3000               	movlw	0
  7798  1749  00A7               	movwf	??___ftge+1
  7799  174A  3080               	movlw	128
  7800  174B  00A8               	movwf	??___ftge+2
  7801  174C  0920               	comf	___ftge@ff1,w
  7802  174D  00A9               	movwf	??___ftge+3
  7803  174E  0921               	comf	___ftge@ff1+1,w
  7804  174F  00AA               	movwf	??___ftge+4
  7805  1750  0922               	comf	___ftge@ff1+2,w
  7806  1751  00AB               	movwf	??___ftge+5
  7807  1752  0AA9               	incf	??___ftge+3,f
  7808  1753  1903               	skipnz
  7809  1754  0AAA               	incf	??___ftge+4,f
  7810  1755  1903               	skipnz
  7811  1756  0AAB               	incf	??___ftge+5,f
  7812  1757  0829               	movf	??___ftge+3,w
  7813  1758  07A6               	addwf	??___ftge,f
  7814  1759  082A               	movf	??___ftge+4,w
  7815  175A  1803               	skipnc
  7816  175B  0F2A               	incfsz	??___ftge+4,w
  7817  175C  2F5E               	goto	u3531
  7818  175D  2F5F               	goto	u3532
  7819  175E                     u3531:	
  7820  175E  07A7               	addwf	??___ftge+1,f
  7821  175F                     u3532:	
  7822  175F  082B               	movf	??___ftge+5,w
  7823  1760  1803               	skipnc
  7824  1761  0F2B               	incfsz	??___ftge+5,w
  7825  1762  2F64               	goto	u3533
  7826  1763  2F65               	goto	u3534
  7827  1764                     u3533:	
  7828  1764  07A8               	addwf	??___ftge+2,f
  7829  1765                     u3534:	
  7830  1765  0826               	movf	??___ftge,w
  7831  1766  00A0               	movwf	___ftge@ff1
  7832  1767  0827               	movf	??___ftge+1,w
  7833  1768  00A1               	movwf	___ftge@ff1+1
  7834  1769  0828               	movf	??___ftge+2,w
  7835  176A  00A2               	movwf	___ftge@ff1+2
  7836  176B                     l2561:	
  7837  176B  1FA5               	btfss	___ftge@ff2+2,7
  7838  176C  2F92               	goto	l2565
  7839  176D  3000               	movlw	0
  7840  176E  00A6               	movwf	??___ftge
  7841  176F  3000               	movlw	0
  7842  1770  00A7               	movwf	??___ftge+1
  7843  1771  3080               	movlw	128
  7844  1772  00A8               	movwf	??___ftge+2
  7845  1773  0923               	comf	___ftge@ff2,w
  7846  1774  00A9               	movwf	??___ftge+3
  7847  1775  0924               	comf	___ftge@ff2+1,w
  7848  1776  00AA               	movwf	??___ftge+4
  7849  1777  0925               	comf	___ftge@ff2+2,w
  7850  1778  00AB               	movwf	??___ftge+5
  7851  1779  0AA9               	incf	??___ftge+3,f
  7852  177A  1903               	skipnz
  7853  177B  0AAA               	incf	??___ftge+4,f
  7854  177C  1903               	skipnz
  7855  177D  0AAB               	incf	??___ftge+5,f
  7856  177E  0829               	movf	??___ftge+3,w
  7857  177F  07A6               	addwf	??___ftge,f
  7858  1780  082A               	movf	??___ftge+4,w
  7859  1781  1803               	skipnc
  7860  1782  0F2A               	incfsz	??___ftge+4,w
  7861  1783  2F85               	goto	u3551
  7862  1784  2F86               	goto	u3552
  7863  1785                     u3551:	
  7864  1785  07A7               	addwf	??___ftge+1,f
  7865  1786                     u3552:	
  7866  1786  082B               	movf	??___ftge+5,w
  7867  1787  1803               	skipnc
  7868  1788  0F2B               	incfsz	??___ftge+5,w
  7869  1789  2F8B               	goto	u3553
  7870  178A  2F8C               	goto	u3554
  7871  178B                     u3553:	
  7872  178B  07A8               	addwf	??___ftge+2,f
  7873  178C                     u3554:	
  7874  178C  0826               	movf	??___ftge,w
  7875  178D  00A3               	movwf	___ftge@ff2
  7876  178E  0827               	movf	??___ftge+1,w
  7877  178F  00A4               	movwf	___ftge@ff2+1
  7878  1790  0828               	movf	??___ftge+2,w
  7879  1791  00A5               	movwf	___ftge@ff2+2
  7880  1792                     l2565:	
  7881  1792  3080               	movlw	128
  7882  1793  06A2               	xorwf	___ftge@ff1+2,f
  7883  1794  3080               	movlw	128
  7884  1795  06A5               	xorwf	___ftge@ff2+2,f
  7885  1796  0825               	movf	___ftge@ff2+2,w
  7886  1797  0222               	subwf	___ftge@ff1+2,w
  7887  1798  1D03               	skipz
  7888  1799  0008               	return
  7889  179A  0824               	movf	___ftge@ff2+1,w
  7890  179B  0221               	subwf	___ftge@ff1+1,w
  7891  179C  1D03               	skipz
  7892  179D  0008               	return
  7893  179E  0823               	movf	___ftge@ff2,w
  7894  179F  0220               	subwf	___ftge@ff1,w
  7895  17A0  0008               	return
  7896  17A1                     __end_of___ftge:	
  7897                           
  7898                           	psect	text36
  7899  0852                     __ptext36:	
  7900 ;; *************** function _checkTime *****************
  7901 ;; Defined at:
  7902 ;;		line 208 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedu
      +ler.h"
  7903 ;; Parameters:    Size  Location     Type
  7904 ;;		None
  7905 ;; Auto vars:     Size  Location     Type
  7906 ;;		None
  7907 ;; Return value:  Size  Location     Type
  7908 ;;		None               void
  7909 ;; Registers used:
  7910 ;;		wreg
  7911 ;; Tracked objects:
  7912 ;;		On entry : 0/0
  7913 ;;		On exit  : 0/0
  7914 ;;		Unchanged: 0/0
  7915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7916 ;;      Params:         0       0       0       0       0
  7917 ;;      Locals:         0       0       0       0       0
  7918 ;;      Temps:          0       0       0       0       0
  7919 ;;      Totals:         0       0       0       0       0
  7920 ;;Total ram usage:        0 bytes
  7921 ;; Hardware stack levels used:    1
  7922 ;; Hardware stack levels required when called:    2
  7923 ;; This function calls:
  7924 ;;		Nothing
  7925 ;; This function is called by:
  7926 ;;		_main
  7927 ;; This function uses a non-reentrant model
  7928 ;;
  7929                           
  7930                           
  7931                           ;psect for function _checkTime
  7932  0852                     _checkTime:	
  7933                           
  7934                           ;time_scheduler.h: 210: if (hours == savedHoursEnd && minutes == savedMinutesEnd)
  7935                           
  7936                           ;incstack = 0
  7937                           ; Regs used in _checkTime: [wreg]
  7938  0852  087A               	movf	_hours,w	;volatile
  7939  0853  1283               	bcf	3,5	;RP0=0, select bank0
  7940  0854  1303               	bcf	3,6	;RP1=0, select bank0
  7941  0855  066F               	xorwf	_savedHoursEnd,w	;volatile
  7942  0856  1D03               	skipz
  7943  0857  2862               	goto	l3177
  7944  0858  0879               	movf	_minutes,w	;volatile
  7945  0859  1683               	bsf	3,5	;RP0=1, select bank1
  7946  085A  1303               	bcf	3,6	;RP1=0, select bank1
  7947  085B  066D               	xorwf	_savedMinutesEnd^(0+128),w	;volatile
  7948  085C  1D03               	skipz
  7949  085D  2862               	goto	l3177
  7950                           
  7951                           ;time_scheduler.h: 211: {
  7952                           ;time_scheduler.h: 212: RC4 = 1;
  7953  085E  1283               	bcf	3,5	;RP0=0, select bank0
  7954  085F  1303               	bcf	3,6	;RP1=0, select bank0
  7955  0860  1607               	bsf	7,4	;volatile
  7956                           
  7957                           ;time_scheduler.h: 213: }
  7958  0861  0008               	return
  7959  0862                     l3177:	
  7960                           
  7961                           ;time_scheduler.h: 214: else if (savedHoursEnd > savedHoursStart)
  7962  0862  1283               	bcf	3,5	;RP0=0, select bank0
  7963  0863  086F               	movf	_savedHoursEnd,w	;volatile
  7964  0864  1683               	bsf	3,5	;RP0=1, select bank1
  7965  0865  1303               	bcf	3,6	;RP1=0, select bank1
  7966  0866  026C               	subwf	_savedHoursStart^(0+128),w	;volatile
  7967  0867  1803               	skipnc
  7968  0868  288B               	goto	l3191
  7969                           
  7970                           ;time_scheduler.h: 215: {
  7971                           ;time_scheduler.h: 217: if ((hours > savedHoursStart || (hours == savedHoursStart && min
      +                          utes >= savedMinutesStart)) &&
  7972                           ;time_scheduler.h: 218: (hours < savedHoursEnd || (hours == savedHoursEnd && minutes < s
      +                          avedMinutesEnd)))
  7973  0869  087A               	movf	_hours,w	;volatile
  7974  086A  026C               	subwf	_savedHoursStart^(0+128),w	;volatile
  7975  086B  1C03               	skipc
  7976  086C  2875               	goto	l3185
  7977  086D  087A               	movf	_hours,w	;volatile
  7978  086E  066C               	xorwf	_savedHoursStart^(0+128),w	;volatile
  7979  086F  1D03               	skipz
  7980  0870  2888               	goto	l204
  7981  0871  086E               	movf	_savedMinutesStart^(0+128),w	;volatile
  7982  0872  0279               	subwf	_minutes,w	;volatile
  7983  0873  1C03               	skipc
  7984  0874  2888               	goto	l204
  7985  0875                     l3185:	
  7986  0875  1283               	bcf	3,5	;RP0=0, select bank0
  7987  0876  1303               	bcf	3,6	;RP1=0, select bank0
  7988  0877  086F               	movf	_savedHoursEnd,w	;volatile
  7989  0878  027A               	subwf	_hours,w	;volatile
  7990  0879  1C03               	skipc
  7991  087A  2885               	goto	l208
  7992  087B  087A               	movf	_hours,w	;volatile
  7993  087C  066F               	xorwf	_savedHoursEnd,w	;volatile
  7994  087D  1D03               	skipz
  7995  087E  2888               	goto	l204
  7996  087F  1683               	bsf	3,5	;RP0=1, select bank1
  7997  0880  1303               	bcf	3,6	;RP1=0, select bank1
  7998  0881  086D               	movf	_savedMinutesEnd^(0+128),w	;volatile
  7999  0882  0279               	subwf	_minutes,w	;volatile
  8000  0883  1803               	skipnc
  8001  0884  2888               	goto	l204
  8002  0885                     l208:	
  8003                           
  8004                           ;time_scheduler.h: 219: {
  8005                           ;time_scheduler.h: 220: RC4 = 1;
  8006  0885  1283               	bcf	3,5	;RP0=0, select bank0
  8007  0886  1607               	bsf	7,4	;volatile
  8008                           
  8009                           ;time_scheduler.h: 221: }
  8010  0887  0008               	return
  8011  0888                     l204:	
  8012                           
  8013                           ;time_scheduler.h: 222: else
  8014                           ;time_scheduler.h: 223: {
  8015                           ;time_scheduler.h: 224: RC4 = 0;
  8016  0888  1283               	bcf	3,5	;RP0=0, select bank0
  8017  0889  1207               	bcf	7,4	;volatile
  8018                           
  8019                           ;time_scheduler.h: 225: }
  8020                           ;time_scheduler.h: 226: }
  8021  088A  0008               	return
  8022  088B                     l3191:	
  8023                           
  8024                           ;time_scheduler.h: 227: else if (savedHoursEnd < savedHoursStart)
  8025  088B  1683               	bsf	3,5	;RP0=1, select bank1
  8026  088C  1303               	bcf	3,6	;RP1=0, select bank1
  8027  088D  086C               	movf	_savedHoursStart^(0+128),w	;volatile
  8028  088E  1283               	bcf	3,5	;RP0=0, select bank0
  8029  088F  1303               	bcf	3,6	;RP1=0, select bank0
  8030  0890  026F               	subwf	_savedHoursEnd,w	;volatile
  8031  0891  1803               	skipnc
  8032  0892  28B7               	goto	l3205
  8033                           
  8034                           ;time_scheduler.h: 228: {
  8035                           ;time_scheduler.h: 230: if ((hours > savedHoursStart || (hours == savedHoursStart && min
      +                          utes >= savedMinutesStart)) ||
  8036                           ;time_scheduler.h: 231: (hours < savedHoursEnd || (hours == savedHoursEnd && minutes < s
      +                          avedMinutesEnd)))
  8037  0893  087A               	movf	_hours,w	;volatile
  8038  0894  1683               	bsf	3,5	;RP0=1, select bank1
  8039  0895  1303               	bcf	3,6	;RP1=0, select bank1
  8040  0896  026C               	subwf	_savedHoursStart^(0+128),w	;volatile
  8041  0897  1C03               	skipc
  8042  0898  28B1               	goto	l214
  8043  0899  087A               	movf	_hours,w	;volatile
  8044  089A  066C               	xorwf	_savedHoursStart^(0+128),w	;volatile
  8045  089B  1D03               	skipz
  8046  089C  28A1               	goto	l3199
  8047  089D  086E               	movf	_savedMinutesStart^(0+128),w	;volatile
  8048  089E  0279               	subwf	_minutes,w	;volatile
  8049  089F  1803               	skipnc
  8050  08A0  28B1               	goto	l214
  8051  08A1                     l3199:	
  8052  08A1  1283               	bcf	3,5	;RP0=0, select bank0
  8053  08A2  1303               	bcf	3,6	;RP1=0, select bank0
  8054  08A3  086F               	movf	_savedHoursEnd,w	;volatile
  8055  08A4  027A               	subwf	_hours,w	;volatile
  8056  08A5  1C03               	skipc
  8057  08A6  28B1               	goto	l214
  8058  08A7  087A               	movf	_hours,w	;volatile
  8059  08A8  066F               	xorwf	_savedHoursEnd,w	;volatile
  8060  08A9  1D03               	skipz
  8061  08AA  28B4               	goto	l212
  8062  08AB  1683               	bsf	3,5	;RP0=1, select bank1
  8063  08AC  1303               	bcf	3,6	;RP1=0, select bank1
  8064  08AD  086D               	movf	_savedMinutesEnd^(0+128),w	;volatile
  8065  08AE  0279               	subwf	_minutes,w	;volatile
  8066  08AF  1803               	skipnc
  8067  08B0  28B4               	goto	l212
  8068  08B1                     l214:	
  8069                           
  8070                           ;time_scheduler.h: 232: {
  8071                           ;time_scheduler.h: 233: RC4 = 1;
  8072  08B1  1283               	bcf	3,5	;RP0=0, select bank0
  8073  08B2  1607               	bsf	7,4	;volatile
  8074                           
  8075                           ;time_scheduler.h: 234: }
  8076  08B3  0008               	return
  8077  08B4                     l212:	
  8078                           
  8079                           ;time_scheduler.h: 235: else
  8080                           ;time_scheduler.h: 236: {
  8081                           ;time_scheduler.h: 237: RC4 = 0;
  8082  08B4  1283               	bcf	3,5	;RP0=0, select bank0
  8083  08B5  1207               	bcf	7,4	;volatile
  8084                           
  8085                           ;time_scheduler.h: 238: }
  8086                           ;time_scheduler.h: 239: }
  8087  08B6  0008               	return
  8088  08B7                     l3205:	
  8089                           
  8090                           ;time_scheduler.h: 240: else
  8091                           ;time_scheduler.h: 241: {
  8092                           ;time_scheduler.h: 242: if (minutes >= savedMinutesStart && minutes < savedMinutesEnd)
  8093  08B7  1683               	bsf	3,5	;RP0=1, select bank1
  8094  08B8  1303               	bcf	3,6	;RP1=0, select bank1
  8095  08B9  086E               	movf	_savedMinutesStart^(0+128),w	;volatile
  8096  08BA  0279               	subwf	_minutes,w	;volatile
  8097  08BB  1C03               	skipc
  8098  08BC  28C5               	goto	l221
  8099  08BD  086D               	movf	_savedMinutesEnd^(0+128),w	;volatile
  8100  08BE  0279               	subwf	_minutes,w	;volatile
  8101  08BF  1803               	skipnc
  8102  08C0  28C5               	goto	l221
  8103                           
  8104                           ;time_scheduler.h: 243: {
  8105                           ;time_scheduler.h: 244: RC4 = 1;
  8106  08C1  1283               	bcf	3,5	;RP0=0, select bank0
  8107  08C2  1303               	bcf	3,6	;RP1=0, select bank0
  8108  08C3  1607               	bsf	7,4	;volatile
  8109                           
  8110                           ;time_scheduler.h: 245: }
  8111  08C4  0008               	return
  8112  08C5                     l221:	
  8113                           
  8114                           ;time_scheduler.h: 246: else
  8115                           ;time_scheduler.h: 247: {
  8116                           ;time_scheduler.h: 248: RC4 = 0;
  8117  08C5  1283               	bcf	3,5	;RP0=0, select bank0
  8118  08C6  1303               	bcf	3,6	;RP1=0, select bank0
  8119  08C7  1207               	bcf	7,4	;volatile
  8120  08C8  0008               	return
  8121  08C9                     __end_of_checkTime:	
  8122                           
  8123                           	psect	text37
  8124  1698                     __ptext37:	
  8125 ;; *************** function _checkSelect *****************
  8126 ;; Defined at:
  8127 ;;		line 190 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;		None
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;  currentRB1St    2    4[BANK0 ] int 
  8132 ;; Return value:  Size  Location     Type
  8133 ;;		None               void
  8134 ;; Registers used:
  8135 ;;		wreg, status,2, status,0, pclath, cstack
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8141 ;;      Params:         0       0       0       0       0
  8142 ;;      Locals:         0       2       0       0       0
  8143 ;;      Temps:          0       2       0       0       0
  8144 ;;      Totals:         0       4       0       0       0
  8145 ;;Total ram usage:        4 bytes
  8146 ;; Hardware stack levels used:    1
  8147 ;; Hardware stack levels required when called:    3
  8148 ;; This function calls:
  8149 ;;		_instCTRL
  8150 ;; This function is called by:
  8151 ;;		_main
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           
  8156                           ;psect for function _checkSelect
  8157  1698                     _checkSelect:	
  8158                           
  8159                           ;main.c: 192: static int lastRB1State = 0;
  8160                           ;main.c: 193: int currentRB1State = RB1;
  8161                           
  8162                           ;incstack = 0
  8163                           ; Regs used in _checkSelect: [wreg+status,2+status,0+pclath+cstack]
  8164  1698  1003               	clrc
  8165  1699  1283               	bcf	3,5	;RP0=0, select bank0
  8166  169A  1303               	bcf	3,6	;RP1=0, select bank0
  8167  169B  1886               	btfsc	6,1	;volatile
  8168  169C  1403               	setc
  8169  169D  3000               	movlw	0
  8170  169E  1803               	skipnc
  8171  169F  3001               	movlw	1
  8172  16A0  00A2               	movwf	??_checkSelect
  8173  16A1  01A3               	clrf	??_checkSelect+1
  8174  16A2  0822               	movf	??_checkSelect,w
  8175  16A3  00A4               	movwf	checkSelect@currentRB1State
  8176  16A4  0823               	movf	??_checkSelect+1,w
  8177  16A5  00A5               	movwf	checkSelect@currentRB1State+1
  8178                           
  8179                           ;main.c: 194: if (currentRB1State == 1 && lastRB1State == 0)
  8180  16A6  3001               	movlw	1
  8181  16A7  0624               	xorwf	checkSelect@currentRB1State,w
  8182  16A8  0425               	iorwf	checkSelect@currentRB1State+1,w
  8183  16A9  1D03               	skipz
  8184  16AA  2EBD               	goto	l2669
  8185  16AB  1683               	bsf	3,5	;RP0=1, select bank1
  8186  16AC  1303               	bcf	3,6	;RP1=0, select bank1
  8187  16AD  085D               	movf	(checkSelect@lastRB1State+1)^(0+128),w
  8188  16AE  045C               	iorwf	checkSelect@lastRB1State^(0+128),w
  8189  16AF  1D03               	skipz
  8190  16B0  2EBD               	goto	l2669
  8191                           
  8192                           ;main.c: 195: {
  8193                           ;main.c: 196: select ^= 1;
  8194  16B1  3001               	movlw	1
  8195  16B2  1283               	bcf	3,5	;RP0=0, select bank0
  8196  16B3  1303               	bcf	3,6	;RP1=0, select bank0
  8197  16B4  00A2               	movwf	??_checkSelect
  8198  16B5  0822               	movf	??_checkSelect,w
  8199  16B6  1683               	bsf	3,5	;RP0=1, select bank1
  8200  16B7  1303               	bcf	3,6	;RP1=0, select bank1
  8201  16B8  06E0               	xorwf	_select^(0+128),f	;volatile
  8202                           
  8203                           ;main.c: 198: instCTRL(0x01);
  8204  16B9  3001               	movlw	1
  8205  16BA  160A  118A  241F   	fcall	_instCTRL
  8206  16BD                     l2669:	
  8207                           
  8208                           ;main.c: 199: }
  8209                           ;main.c: 200: lastRB1State = currentRB1State;
  8210  16BD  1283               	bcf	3,5	;RP0=0, select bank0
  8211  16BE  1303               	bcf	3,6	;RP1=0, select bank0
  8212  16BF  0825               	movf	checkSelect@currentRB1State+1,w
  8213  16C0  1683               	bsf	3,5	;RP0=1, select bank1
  8214  16C1  1303               	bcf	3,6	;RP1=0, select bank1
  8215  16C2  01DD               	clrf	(checkSelect@lastRB1State+1)^(0+128)
  8216  16C3  07DD               	addwf	(checkSelect@lastRB1State+1)^(0+128),f
  8217  16C4  1283               	bcf	3,5	;RP0=0, select bank0
  8218  16C5  1303               	bcf	3,6	;RP1=0, select bank0
  8219  16C6  0824               	movf	checkSelect@currentRB1State,w
  8220  16C7  1683               	bsf	3,5	;RP0=1, select bank1
  8221  16C8  1303               	bcf	3,6	;RP1=0, select bank1
  8222  16C9  01DC               	clrf	checkSelect@lastRB1State^(0+128)
  8223  16CA  07DC               	addwf	checkSelect@lastRB1State^(0+128),f
  8224  16CB  0008               	return
  8225  16CC                     __end_of_checkSelect:	
  8226                           
  8227                           	psect	text38
  8228  14EB                     __ptext38:	
  8229 ;; *************** function _checkMode *****************
  8230 ;; Defined at:
  8231 ;;		line 179 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  8232 ;; Parameters:    Size  Location     Type
  8233 ;;		None
  8234 ;; Auto vars:     Size  Location     Type
  8235 ;;		None
  8236 ;; Return value:  Size  Location     Type
  8237 ;;		None               void
  8238 ;; Registers used:
  8239 ;;		wreg, status,2, status,0, pclath, cstack
  8240 ;; Tracked objects:
  8241 ;;		On entry : 0/0
  8242 ;;		On exit  : 0/0
  8243 ;;		Unchanged: 0/0
  8244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8245 ;;      Params:         0       0       0       0       0
  8246 ;;      Locals:         0       0       0       0       0
  8247 ;;      Temps:          0       2       0       0       0
  8248 ;;      Totals:         0       2       0       0       0
  8249 ;;Total ram usage:        2 bytes
  8250 ;; Hardware stack levels used:    1
  8251 ;; Hardware stack levels required when called:    3
  8252 ;; This function calls:
  8253 ;;		_instCTRL
  8254 ;; This function is called by:
  8255 ;;		_main
  8256 ;; This function uses a non-reentrant model
  8257 ;;
  8258                           
  8259                           
  8260                           ;psect for function _checkMode
  8261  14EB                     _checkMode:	
  8262                           
  8263                           ;main.c: 181: if (lastMode != mode)
  8264                           
  8265                           ;incstack = 0
  8266                           ; Regs used in _checkMode: [wreg+status,2+status,0+pclath+cstack]
  8267  14EB  087C               	movf	_lastMode,w
  8268  14EC  1683               	bsf	3,5	;RP0=1, select bank1
  8269  14ED  1303               	bcf	3,6	;RP1=0, select bank1
  8270  14EE  065E               	xorwf	_mode^(0+128),w
  8271  14EF  1903               	skipnz
  8272  14F0  0008               	return
  8273                           
  8274                           ;main.c: 182: {
  8275                           ;main.c: 184: instCTRL(0x01);
  8276  14F1  3001               	movlw	1
  8277  14F2  160A  118A  241F  160A  118A  	fcall	_instCTRL
  8278                           
  8279                           ;main.c: 185: _delay((unsigned long)((50)*(4000000/4000.0)));
  8280  14F7  3041               	movlw	65
  8281  14F8  1283               	bcf	3,5	;RP0=0, select bank0
  8282  14F9  1303               	bcf	3,6	;RP1=0, select bank0
  8283  14FA  00A3               	movwf	??_checkMode+1
  8284  14FB  30EE               	movlw	238
  8285  14FC  00A2               	movwf	??_checkMode
  8286  14FD                     u4847:	
  8287  14FD  0BA2               	decfsz	??_checkMode,f
  8288  14FE  2CFD               	goto	u4847
  8289  14FF  0BA3               	decfsz	??_checkMode+1,f
  8290  1500  2CFD               	goto	u4847
  8291  1501  0000               	nop
  8292                           
  8293                           ;main.c: 186: lastMode = mode;
  8294  1502  1683               	bsf	3,5	;RP0=1, select bank1
  8295  1503  1303               	bcf	3,6	;RP1=0, select bank1
  8296  1504  085E               	movf	_mode^(0+128),w
  8297  1505  1283               	bcf	3,5	;RP0=0, select bank0
  8298  1506  1303               	bcf	3,6	;RP1=0, select bank0
  8299  1507  00A2               	movwf	??_checkMode
  8300  1508  0822               	movf	??_checkMode,w
  8301  1509  00FC               	movwf	_lastMode
  8302  150A  0008               	return
  8303  150B                     __end_of_checkMode:	
  8304                           
  8305                           	psect	text39
  8306  141F                     __ptext39:	
  8307 ;; *************** function _instCTRL *****************
  8308 ;; Defined at:
  8309 ;;		line 17 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;  CMD             1    wreg     unsigned char 
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;  CMD             1    1[BANK0 ] unsigned char 
  8314 ;; Return value:  Size  Location     Type
  8315 ;;		None               void
  8316 ;; Registers used:
  8317 ;;		wreg
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8323 ;;      Params:         0       0       0       0       0
  8324 ;;      Locals:         0       1       0       0       0
  8325 ;;      Temps:          0       1       0       0       0
  8326 ;;      Totals:         0       2       0       0       0
  8327 ;;Total ram usage:        2 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    2
  8330 ;; This function calls:
  8331 ;;		Nothing
  8332 ;; This function is called by:
  8333 ;;		_initLCD
  8334 ;;		_printToLCD
  8335 ;;		_startUpLCD
  8336 ;;		_updateState
  8337 ;;		_checkMode
  8338 ;;		_checkSelect
  8339 ;; This function uses a non-reentrant model
  8340 ;;
  8341                           
  8342                           
  8343                           ;psect for function _instCTRL
  8344  141F                     _instCTRL:	
  8345                           
  8346                           ;incstack = 0
  8347                           ; Regs used in _instCTRL: [wreg]
  8348                           ;instCTRL@CMD stored from wreg
  8349  141F  1283               	bcf	3,5	;RP0=0, select bank0
  8350  1420  1303               	bcf	3,6	;RP1=0, select bank0
  8351  1421  00A1               	movwf	instCTRL@CMD
  8352                           
  8353                           ;lcd_functions.h: 19: PORTD = CMD;
  8354  1422  0821               	movf	instCTRL@CMD,w
  8355  1423  0088               	movwf	8	;volatile
  8356                           
  8357                           ;lcd_functions.h: 20: RC0 = 0;
  8358  1424  1007               	bcf	7,0	;volatile
  8359                           
  8360                           ;lcd_functions.h: 21: RC1 = 0;
  8361  1425  1087               	bcf	7,1	;volatile
  8362                           
  8363                           ;lcd_functions.h: 22: RC2 = 1;
  8364  1426  1507               	bsf	7,2	;volatile
  8365                           
  8366                           ;lcd_functions.h: 23: _delay((unsigned long)((1)*(4000000/4000.0)));
  8367  1427  30F9               	movlw	249
  8368  1428  00A0               	movwf	??_instCTRL
  8369  1429                     u4857:	
  8370  1429  0000               	nop
  8371  142A  0BA0               	decfsz	??_instCTRL,f
  8372  142B  2C29               	goto	u4857
  8373  142C  2C2D               	nop2	;nop
  8374  142D  0000               	nop
  8375                           
  8376                           ;lcd_functions.h: 24: RC2 = 0;
  8377  142E  1283               	bcf	3,5	;RP0=0, select bank0
  8378  142F  1303               	bcf	3,6	;RP1=0, select bank0
  8379  1430  1107               	bcf	7,2	;volatile
  8380  1431  0008               	return
  8381  1432                     __end_of_instCTRL:	
  8382                           
  8383                           	psect	text40
  8384  1639                     __ptext40:	
  8385 ;; *************** function _calculateTemp *****************
  8386 ;; Defined at:
  8387 ;;		line 19 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\temp_module.
      +h"
  8388 ;; Parameters:    Size  Location     Type
  8389 ;;  adcValue        2   14[BANK0 ] unsigned int 
  8390 ;; Auto vars:     Size  Location     Type
  8391 ;;		None
  8392 ;; Return value:  Size  Location     Type
  8393 ;;		None               void
  8394 ;; Registers used:
  8395 ;;		wreg, status,2, status,0, pclath, cstack
  8396 ;; Tracked objects:
  8397 ;;		On entry : 0/0
  8398 ;;		On exit  : 0/0
  8399 ;;		Unchanged: 0/0
  8400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8401 ;;      Params:         0       2       0       0       0
  8402 ;;      Locals:         0       0       0       0       0
  8403 ;;      Temps:          0       0       0       0       0
  8404 ;;      Totals:         0       2       0       0       0
  8405 ;;Total ram usage:        2 bytes
  8406 ;; Hardware stack levels used:    1
  8407 ;; Hardware stack levels required when called:    3
  8408 ;; This function calls:
  8409 ;;		___lwdiv
  8410 ;;		___wmul
  8411 ;; This function is called by:
  8412 ;;		_main
  8413 ;; This function uses a non-reentrant model
  8414 ;;
  8415                           
  8416                           
  8417                           ;psect for function _calculateTemp
  8418  1639                     _calculateTemp:	
  8419                           
  8420                           ;temp_module.h: 21: tempBuffer = (adcValue * 500) / 1023;
  8421                           
  8422                           ;incstack = 0
  8423                           ; Regs used in _calculateTemp: [wreg+status,2+status,0+pclath+cstack]
  8424  1639  30FF               	movlw	255
  8425  163A  1283               	bcf	3,5	;RP0=0, select bank0
  8426  163B  1303               	bcf	3,6	;RP1=0, select bank0
  8427  163C  00A6               	movwf	___lwdiv@divisor
  8428  163D  3003               	movlw	3
  8429  163E  00A7               	movwf	___lwdiv@divisor+1
  8430  163F  082F               	movf	calculateTemp@adcValue+1,w
  8431  1640  01A1               	clrf	___wmul@multiplier+1
  8432  1641  07A1               	addwf	___wmul@multiplier+1,f
  8433  1642  082E               	movf	calculateTemp@adcValue,w
  8434  1643  01A0               	clrf	___wmul@multiplier
  8435  1644  07A0               	addwf	___wmul@multiplier,f
  8436  1645  30F4               	movlw	244
  8437  1646  00A2               	movwf	___wmul@multiplicand
  8438  1647  3001               	movlw	1
  8439  1648  00A3               	movwf	___wmul@multiplicand+1
  8440  1649  160A  118A  259B  160A  118A  	fcall	___wmul
  8441  164E  1283               	bcf	3,5	;RP0=0, select bank0
  8442  164F  1303               	bcf	3,6	;RP1=0, select bank0
  8443  1650  0821               	movf	?___wmul+1,w
  8444  1651  01A9               	clrf	___lwdiv@dividend+1
  8445  1652  07A9               	addwf	___lwdiv@dividend+1,f
  8446  1653  0820               	movf	?___wmul,w
  8447  1654  01A8               	clrf	___lwdiv@dividend
  8448  1655  07A8               	addwf	___lwdiv@dividend,f
  8449  1656  160A  118A  2702   	fcall	___lwdiv
  8450  1659  1283               	bcf	3,5	;RP0=0, select bank0
  8451  165A  1303               	bcf	3,6	;RP1=0, select bank0
  8452  165B  0827               	movf	?___lwdiv+1,w
  8453  165C  1683               	bsf	3,5	;RP0=1, select bank1
  8454  165D  1303               	bcf	3,6	;RP1=0, select bank1
  8455  165E  01DB               	clrf	(_tempBuffer+1)^(0+128)
  8456  165F  07DB               	addwf	(_tempBuffer+1)^(0+128),f
  8457  1660  1283               	bcf	3,5	;RP0=0, select bank0
  8458  1661  1303               	bcf	3,6	;RP1=0, select bank0
  8459  1662  0826               	movf	?___lwdiv,w
  8460  1663  1683               	bsf	3,5	;RP0=1, select bank1
  8461  1664  1303               	bcf	3,6	;RP1=0, select bank1
  8462  1665  01DA               	clrf	_tempBuffer^(0+128)
  8463  1666  07DA               	addwf	_tempBuffer^(0+128),f
  8464  1667  0008               	return
  8465  1668                     __end_of_calculateTemp:	
  8466                           
  8467                           	psect	text41
  8468  159B                     __ptext41:	
  8469 ;; *************** function ___wmul *****************
  8470 ;; Defined at:
  8471 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  8472 ;; Parameters:    Size  Location     Type
  8473 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8474 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;  product         2    4[BANK0 ] unsigned int 
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  2    0[BANK0 ] unsigned int 
  8479 ;; Registers used:
  8480 ;;		wreg, status,2, status,0
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8486 ;;      Params:         0       4       0       0       0
  8487 ;;      Locals:         0       2       0       0       0
  8488 ;;      Temps:          0       0       0       0       0
  8489 ;;      Totals:         0       6       0       0       0
  8490 ;;Total ram usage:        6 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; Hardware stack levels required when called:    2
  8493 ;; This function calls:
  8494 ;;		Nothing
  8495 ;; This function is called by:
  8496 ;;		_calculateTemp
  8497 ;;		_sprintf
  8498 ;; This function uses a non-reentrant model
  8499 ;;
  8500                           
  8501                           
  8502                           ;psect for function ___wmul
  8503  159B                     ___wmul:	
  8504                           
  8505                           ;incstack = 0
  8506                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8507  159B  1283               	bcf	3,5	;RP0=0, select bank0
  8508  159C  1303               	bcf	3,6	;RP1=0, select bank0
  8509  159D  01A4               	clrf	___wmul@product
  8510  159E  01A5               	clrf	___wmul@product+1
  8511  159F                     l2825:	
  8512  159F  1C20               	btfss	___wmul@multiplier,0
  8513  15A0  2DA7               	goto	l439
  8514  15A1  0822               	movf	___wmul@multiplicand,w
  8515  15A2  07A4               	addwf	___wmul@product,f
  8516  15A3  1803               	skipnc
  8517  15A4  0AA5               	incf	___wmul@product+1,f
  8518  15A5  0823               	movf	___wmul@multiplicand+1,w
  8519  15A6  07A5               	addwf	___wmul@product+1,f
  8520  15A7                     l439:	
  8521  15A7  3001               	movlw	1
  8522  15A8                     u3865:	
  8523  15A8  1003               	clrc
  8524  15A9  0DA2               	rlf	___wmul@multiplicand,f
  8525  15AA  0DA3               	rlf	___wmul@multiplicand+1,f
  8526  15AB  3EFF               	addlw	-1
  8527  15AC  1D03               	skipz
  8528  15AD  2DA8               	goto	u3865
  8529  15AE  3001               	movlw	1
  8530  15AF                     u3875:	
  8531  15AF  1003               	clrc
  8532  15B0  0CA1               	rrf	___wmul@multiplier+1,f
  8533  15B1  0CA0               	rrf	___wmul@multiplier,f
  8534  15B2  3EFF               	addlw	-1
  8535  15B3  1D03               	skipz
  8536  15B4  2DAF               	goto	u3875
  8537  15B5  0821               	movf	___wmul@multiplier+1,w
  8538  15B6  0420               	iorwf	___wmul@multiplier,w
  8539  15B7  1D03               	skipz
  8540  15B8  2D9F               	goto	l2825
  8541  15B9  0825               	movf	___wmul@product+1,w
  8542  15BA  01A1               	clrf	?___wmul+1
  8543  15BB  07A1               	addwf	?___wmul+1,f
  8544  15BC  0824               	movf	___wmul@product,w
  8545  15BD  01A0               	clrf	?___wmul
  8546  15BE  07A0               	addwf	?___wmul,f
  8547  15BF  0008               	return
  8548  15C0                     __end_of___wmul:	
  8549                           
  8550                           	psect	text42
  8551  1702                     __ptext42:	
  8552 ;; *************** function ___lwdiv *****************
  8553 ;; Defined at:
  8554 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  8555 ;; Parameters:    Size  Location     Type
  8556 ;;  divisor         2    6[BANK0 ] unsigned int 
  8557 ;;  dividend        2    8[BANK0 ] unsigned int 
  8558 ;; Auto vars:     Size  Location     Type
  8559 ;;  quotient        2   11[BANK0 ] unsigned int 
  8560 ;;  counter         1   13[BANK0 ] unsigned char 
  8561 ;; Return value:  Size  Location     Type
  8562 ;;                  2    6[BANK0 ] unsigned int 
  8563 ;; Registers used:
  8564 ;;		wreg, status,2, status,0
  8565 ;; Tracked objects:
  8566 ;;		On entry : 0/0
  8567 ;;		On exit  : 0/0
  8568 ;;		Unchanged: 0/0
  8569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8570 ;;      Params:         0       4       0       0       0
  8571 ;;      Locals:         0       3       0       0       0
  8572 ;;      Temps:          0       1       0       0       0
  8573 ;;      Totals:         0       8       0       0       0
  8574 ;;Total ram usage:        8 bytes
  8575 ;; Hardware stack levels used:    1
  8576 ;; Hardware stack levels required when called:    2
  8577 ;; This function calls:
  8578 ;;		Nothing
  8579 ;; This function is called by:
  8580 ;;		_calculateTemp
  8581 ;;		_sprintf
  8582 ;; This function uses a non-reentrant model
  8583 ;;
  8584                           
  8585                           
  8586                           ;psect for function ___lwdiv
  8587  1702                     ___lwdiv:	
  8588                           
  8589                           ;incstack = 0
  8590                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8591  1702  1283               	bcf	3,5	;RP0=0, select bank0
  8592  1703  1303               	bcf	3,6	;RP1=0, select bank0
  8593  1704  01AB               	clrf	___lwdiv@quotient
  8594  1705  01AC               	clrf	___lwdiv@quotient+1
  8595  1706  0827               	movf	___lwdiv@divisor+1,w
  8596  1707  0426               	iorwf	___lwdiv@divisor,w
  8597  1708  1903               	skipnz
  8598  1709  2F3B               	goto	l1927
  8599  170A  01AD               	clrf	___lwdiv@counter
  8600  170B  0AAD               	incf	___lwdiv@counter,f
  8601  170C                     l1915:	
  8602  170C  1BA7               	btfsc	___lwdiv@divisor+1,7
  8603  170D  2F1A               	goto	l1917
  8604  170E  3001               	movlw	1
  8605  170F                     u2105:	
  8606  170F  1003               	clrc
  8607  1710  0DA6               	rlf	___lwdiv@divisor,f
  8608  1711  0DA7               	rlf	___lwdiv@divisor+1,f
  8609  1712  3EFF               	addlw	-1
  8610  1713  1D03               	skipz
  8611  1714  2F0F               	goto	u2105
  8612  1715  3001               	movlw	1
  8613  1716  00AA               	movwf	??___lwdiv
  8614  1717  082A               	movf	??___lwdiv,w
  8615  1718  07AD               	addwf	___lwdiv@counter,f
  8616  1719  2F0C               	goto	l1915
  8617  171A                     l1917:	
  8618  171A  3001               	movlw	1
  8619  171B                     u2125:	
  8620  171B  1003               	clrc
  8621  171C  0DAB               	rlf	___lwdiv@quotient,f
  8622  171D  0DAC               	rlf	___lwdiv@quotient+1,f
  8623  171E  3EFF               	addlw	-1
  8624  171F  1D03               	skipz
  8625  1720  2F1B               	goto	u2125
  8626  1721  0827               	movf	___lwdiv@divisor+1,w
  8627  1722  0229               	subwf	___lwdiv@dividend+1,w
  8628  1723  1D03               	skipz
  8629  1724  2F27               	goto	u2135
  8630  1725  0826               	movf	___lwdiv@divisor,w
  8631  1726  0228               	subwf	___lwdiv@dividend,w
  8632  1727                     u2135:	
  8633  1727  1C03               	skipc
  8634  1728  2F30               	goto	l1923
  8635  1729  0826               	movf	___lwdiv@divisor,w
  8636  172A  02A8               	subwf	___lwdiv@dividend,f
  8637  172B  0827               	movf	___lwdiv@divisor+1,w
  8638  172C  1C03               	skipc
  8639  172D  03A9               	decf	___lwdiv@dividend+1,f
  8640  172E  02A9               	subwf	___lwdiv@dividend+1,f
  8641  172F  142B               	bsf	___lwdiv@quotient,0
  8642  1730                     l1923:	
  8643  1730  3001               	movlw	1
  8644  1731                     u2145:	
  8645  1731  1003               	clrc
  8646  1732  0CA7               	rrf	___lwdiv@divisor+1,f
  8647  1733  0CA6               	rrf	___lwdiv@divisor,f
  8648  1734  3EFF               	addlw	-1
  8649  1735  1D03               	skipz
  8650  1736  2F31               	goto	u2145
  8651  1737  3001               	movlw	1
  8652  1738  02AD               	subwf	___lwdiv@counter,f
  8653  1739  1D03               	btfss	3,2
  8654  173A  2F1A               	goto	l1917
  8655  173B                     l1927:	
  8656  173B  082C               	movf	___lwdiv@quotient+1,w
  8657  173C  01A7               	clrf	?___lwdiv+1
  8658  173D  07A7               	addwf	?___lwdiv+1,f
  8659  173E  082B               	movf	___lwdiv@quotient,w
  8660  173F  01A6               	clrf	?___lwdiv
  8661  1740  07A6               	addwf	?___lwdiv,f
  8662  1741  0008               	return
  8663  1742                     __end_of___lwdiv:	
  8664                           
  8665                           	psect	text43
  8666  14CB                     __ptext43:	
  8667 ;; *************** function _ISR *****************
  8668 ;; Defined at:
  8669 ;;		line 84 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;		None
  8672 ;; Auto vars:     Size  Location     Type
  8673 ;;		None
  8674 ;; Return value:  Size  Location     Type
  8675 ;;		None               void
  8676 ;; Registers used:
  8677 ;;		wreg, status,2, status,0, pclath, cstack
  8678 ;; Tracked objects:
  8679 ;;		On entry : 0/0
  8680 ;;		On exit  : 0/0
  8681 ;;		Unchanged: 0/0
  8682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8683 ;;      Params:         0       0       0       0       0
  8684 ;;      Locals:         0       0       0       0       0
  8685 ;;      Temps:          5       0       0       0       0
  8686 ;;      Totals:         5       0       0       0       0
  8687 ;;Total ram usage:        5 bytes
  8688 ;; Hardware stack levels used:    1
  8689 ;; Hardware stack levels required when called:    1
  8690 ;; This function calls:
  8691 ;;		i1_instCTRL
  8692 ;; This function is called by:
  8693 ;;		Interrupt level 1
  8694 ;; This function uses a non-reentrant model
  8695 ;;
  8696                           
  8697                           
  8698                           ;psect for function _ISR
  8699  14CB                     _ISR:	
  8700                           
  8701                           ;main.c: 86: GIE = 0;
  8702  14CB  138B               	bcf	11,7	;volatile
  8703                           
  8704                           ;main.c: 87: if (INTF == 1)
  8705  14CC  1C8B               	btfss	11,1	;volatile
  8706  14CD  2CD7               	goto	i1l2807
  8707                           
  8708                           ;main.c: 88: {
  8709                           ;main.c: 89: INTF = 0;
  8710  14CE  108B               	bcf	11,1	;volatile
  8711                           
  8712                           ;main.c: 90: mode = (mode + 1) % 4;
  8713  14CF  1683               	bsf	3,5	;RP0=1, select bank1
  8714  14D0  1303               	bcf	3,6	;RP1=0, select bank1
  8715  14D1  085E               	movf	_mode^(0+128),w
  8716  14D2  3E01               	addlw	1
  8717  14D3  3903               	andlw	3
  8718  14D4  00F2               	movwf	??_ISR
  8719  14D5  0872               	movf	??_ISR,w
  8720  14D6  00DE               	movwf	_mode^(0+128)
  8721  14D7                     i1l2807:	
  8722                           
  8723                           ;main.c: 91: }
  8724                           ;main.c: 92: instCTRL(0x01);
  8725  14D7  3001               	movlw	1
  8726  14D8  160A  118A  240C  160A  118A  	fcall	i1_instCTRL
  8727                           
  8728                           ;main.c: 93: GIE = 1;
  8729  14DD  178B               	bsf	11,7	;volatile
  8730  14DE  0876               	movf	??_ISR+4,w
  8731  14DF  1283               	bcf	3,5	;RP0=0, select bank0
  8732  14E0  1303               	bcf	3,6	;RP1=0, select bank0
  8733  14E1  00FF               	movwf	127
  8734  14E2  0875               	movf	??_ISR+3,w
  8735  14E3  008A               	movwf	10
  8736  14E4  0874               	movf	??_ISR+2,w
  8737  14E5  0084               	movwf	4
  8738  14E6  0E73               	swapf	(??_ISR+1)^(0+-128),w
  8739  14E7  0083               	movwf	3
  8740  14E8  0EFE               	swapf	126,f
  8741  14E9  0E7E               	swapf	126,w
  8742  14EA  0009               	retfie
  8743  14EB                     __end_of_ISR:	
  8744                           
  8745                           	psect	intentry
  8746  0004                     __pintentry:	
  8747                           ;incstack = 0
  8748                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  8749                           
  8750  0004                     interrupt_function:	
  8751  007E                     saved_w	set	btemp
  8752  0004  00FE               	movwf	btemp
  8753  0005  0E03               	swapf	3,w
  8754  0006  00F3               	movwf	??_ISR+1
  8755  0007  0804               	movf	4,w
  8756  0008  00F4               	movwf	??_ISR+2
  8757  0009  080A               	movf	10,w
  8758  000A  00F5               	movwf	??_ISR+3
  8759  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8760  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8761  000D  087F               	movf	btemp+1,w
  8762  000E  00F6               	movwf	??_ISR+4
  8763  000F  160A  118A  2CCB   	ljmp	_ISR
  8764                           
  8765                           	psect	text44
  8766  140C                     __ptext44:	
  8767 ;; *************** function i1_instCTRL *****************
  8768 ;; Defined at:
  8769 ;;		line 17 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;  CMD             1    wreg     unsigned char 
  8772 ;; Auto vars:     Size  Location     Type
  8773 ;;  CMD             1    1[COMMON] unsigned char 
  8774 ;; Return value:  Size  Location     Type
  8775 ;;		None               void
  8776 ;; Registers used:
  8777 ;;		wreg
  8778 ;; Tracked objects:
  8779 ;;		On entry : 0/0
  8780 ;;		On exit  : 0/0
  8781 ;;		Unchanged: 0/0
  8782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8783 ;;      Params:         0       0       0       0       0
  8784 ;;      Locals:         1       0       0       0       0
  8785 ;;      Temps:          1       0       0       0       0
  8786 ;;      Totals:         2       0       0       0       0
  8787 ;;Total ram usage:        2 bytes
  8788 ;; Hardware stack levels used:    1
  8789 ;; This function calls:
  8790 ;;		Nothing
  8791 ;; This function is called by:
  8792 ;;		_ISR
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           
  8797                           ;psect for function i1_instCTRL
  8798  140C                     i1_instCTRL:	
  8799                           
  8800                           ;incstack = 0
  8801                           ; Regs used in i1_instCTRL: [wreg]
  8802                           ;i1instCTRL@CMD stored from wreg
  8803  140C  00F1               	movwf	i1instCTRL@CMD
  8804                           
  8805                           ;lcd_functions.h: 19: PORTD = CMD;
  8806  140D  0871               	movf	i1instCTRL@CMD,w
  8807  140E  1283               	bcf	3,5	;RP0=0, select bank0
  8808  140F  1303               	bcf	3,6	;RP1=0, select bank0
  8809  1410  0088               	movwf	8	;volatile
  8810                           
  8811                           ;lcd_functions.h: 20: RC0 = 0;
  8812  1411  1007               	bcf	7,0	;volatile
  8813                           
  8814                           ;lcd_functions.h: 21: RC1 = 0;
  8815  1412  1087               	bcf	7,1	;volatile
  8816                           
  8817                           ;lcd_functions.h: 22: RC2 = 1;
  8818  1413  1507               	bsf	7,2	;volatile
  8819                           
  8820                           ;lcd_functions.h: 23: _delay((unsigned long)((1)*(4000000/4000.0)));
  8821  1414  30F9               	movlw	249
  8822  1415  00F0               	movwf	??i1_instCTRL
  8823  1416                     u486_27:	
  8824  1416  0000               	nop
  8825  1417  0BF0               	decfsz	??i1_instCTRL,f
  8826  1418  2C16               	goto	u486_27
  8827  1419  2C1A               	nop2	;nop
  8828  141A  0000               	nop
  8829                           
  8830                           ;lcd_functions.h: 24: RC2 = 0;
  8831  141B  1283               	bcf	3,5	;RP0=0, select bank0
  8832  141C  1303               	bcf	3,6	;RP1=0, select bank0
  8833  141D  1107               	bcf	7,2	;volatile
  8834  141E  0008               	return
  8835  141F                     __end_ofi1_instCTRL:	
  8836  007E                     btemp	set	126	;btemp
  8837  007E                     wtemp	set	126
  8838  007E                     wtemp0	set	126
  8839  0080                     wtemp1	set	128
  8840  0082                     wtemp2	set	130
  8841  0084                     wtemp3	set	132
  8842  0086                     wtemp4	set	134
  8843  0088                     wtemp5	set	136
  8844  007F                     wtemp6	set	127
  8845  007E                     ttemp	set	126
  8846  007E                     ttemp0	set	126
  8847  0081                     ttemp1	set	129
  8848  0084                     ttemp2	set	132
  8849  0087                     ttemp3	set	135
  8850  007F                     ttemp4	set	127
  8851  007E                     ltemp	set	126
  8852  007E                     ltemp0	set	126
  8853  0082                     ltemp1	set	130
  8854  0086                     ltemp2	set	134
  8855  0080                     ltemp3	set	128


Data Sizes:
    Strings     242
    Constant    10
    Data        7
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      13
    BANK0            80     79      80
    BANK1            80     55      79
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_26(CODE[13]), STR_25(CODE[14]), STR_19(CODE[11]), STR_18(CODE[10]), 
		 -> STR_17(CODE[10]), STR_16(CODE[10]), STR_15(CODE[10]), STR_14(CODE[10]), 
		 -> STR_13(CODE[10]), STR_12(CODE[10]), STR_11(CODE[10]), STR_10(CODE[10]), 
		 -> STR_9(CODE[10]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[16]), 
		 -> STR_3(CODE[9]), STR_2(CODE[3]), STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 50
		 -> updateState@buffer(BANK0[10]), displayTemp@buffer(BANK0[20]), debugInfo(BANK1[10]), displayTime@timeFormat(BANK0[10]), 
		 -> displayPPM@strBuffer(BANK1[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S245$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    displayPPM@bufPtr	PTR unsigned char  size(1) Largest target is 50
		 -> displayPPM@strBuffer(BANK1[50]), 

    printToLCD@str	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_34(CODE[11]), STR_33(CODE[12]), STR_32(CODE[10]), STR_31(CODE[14]), 
		 -> STR_30(CODE[12]), STR_29(CODE[10]), STR_28(CODE[16]), STR_27(CODE[15]), 
		 -> updateState@buffer(BANK0[10]), STR_24(CODE[15]), STR_23(CODE[7]), STR_22(CODE[7]), 
		 -> STR_21(CODE[8]), STR_20(CODE[9]), displayTemp@buffer(BANK0[20]), debugInfo(BANK1[10]), 
		 -> displayTime@timeFormat(BANK0[10]), STR_5(CODE[8]), STR_4(CODE[8]), displayPPM@strBuffer(BANK1[50]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_instCTRL

Critical Paths under _main in BANK0

    _main->_updateState
    _updateState->_displayTemp
    _setMinutesStart->_sprintf
    _setMinutesEnd->_sprintf
    _setHoursStart->_sprintf
    _setHoursEnd->_sprintf
    _printStatusTMP->_printToLCD
    _printStatusPPM->_printToLCD
    _displayTime->_sprintf
    _displayTemp->_sprintf
    _displayPPM->___fttol
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___fttol->___ftmul
    ___ftneg->___awtoft
    _startUpLCD->_printToLCD
    _printToLCD->_dataCTRL
    _printToLCD->_instCTRL
    _initLCD->_instCTRL
    _runMQ135->_CalcMQ135
    _CalcMQ135->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _handlePPM->___ftge
    _checkSelect->_instCTRL
    _checkMode->_instCTRL
    _calculateTemp->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _updateState->_displayPPM
    _runMQ135->_CalcMQ135

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   80695
                                             76 BANK0      3     3      0
                      _calculateTemp
                          _checkMode
                        _checkSelect
                          _checkTime
                          _handlePPM
                         _handleTemp
                            _initADC
                      _initInterrupt
                            _readADC
                           _runClock
                           _runMQ135
                  _setPortDirections
                         _startUpLCD
                        _updateState
 ---------------------------------------------------------------------------------
 (1) _updateState                                         14    14      0   65958
                                             62 BANK0     14    14      0
                         _displayPPM
                        _displayTemp
                        _displayTime
                           _instCTRL
                     _printStatusPPM
                     _printStatusTMP
                         _printToLCD
                        _setHoursEnd
                      _setHoursStart
                      _setMinutesEnd
                    _setMinutesStart
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setMinutesStart                                      2     2      0    7128
                                             42 BANK0      2     2      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setMinutesEnd                                        2     2      0    7128
                                             42 BANK0      2     2      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setHoursStart                                        2     2      0    7128
                                             42 BANK0      2     2      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setHoursEnd                                          2     2      0    7128
                                             42 BANK0      2     2      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1144
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _printStatusTMP                                       1     1      0    1731
                                              4 BANK0      1     1      0
                         _printToLCD
 ---------------------------------------------------------------------------------
 (2) _printStatusPPM                                       1     1      0    1731
                                              4 BANK0      1     1      0
                         _printToLCD
 ---------------------------------------------------------------------------------
 (2) _displayTime                                         14    14      0    6094
                                             42 BANK0     14    14      0
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _displayTemp                                         20    20      0    6094
                                             42 BANK0     20    20      0
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _displayPPM                                          56    56      0   15618
                                             60 BANK0      1     1      0
                                              0 BANK1     55    55      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    16      6    4315
                                             20 BANK0     22    16      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     265
                                             14 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     358
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     130
                                             14 BANK0      3     0      3
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _startUpLCD                                           0     0      0    1713
                            _initLCD
                           _instCTRL
                         _printToLCD
 ---------------------------------------------------------------------------------
 (3) _printToLCD                                           2     0      2    1669
                                              2 BANK0      2     0      2
                           _dataCTRL
                           _instCTRL
 ---------------------------------------------------------------------------------
 (4) _dataCTRL                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0      22
                                              2 BANK0      1     1      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (1) _setPortDirections                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _runMQ135                                             0     0      0   11805
                          _CalcMQ135
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              5     3      2      22
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _CalcMQ135                                           42    39      3   11783
                                             62 BANK0      3     0      3
                                              0 BANK1     39    39      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3495
                                             30 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2177
                                             46 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3347
                                             17 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    1882
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1685
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _runClock                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleTemp                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handlePPM                                            0     0      0     242
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     242
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (1) _checkTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkSelect                                          4     4      0      67
                                              2 BANK0      4     4      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (1) _checkMode                                            2     2      0      22
                                              2 BANK0      2     2      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (4) _instCTRL                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _calculateTemp                                        2     0      2     866
                                             14 BANK0      2     0      2
                            ___lwdiv
                             ___wmul
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     374
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  5     5      0      22
                                              2 COMMON     5     5      0
                         i1_instCTRL
 ---------------------------------------------------------------------------------
 (6) i1_instCTRL                                           2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculateTemp
     ___lwdiv
       ___wmul (ARG)
     ___wmul
     _readADC (ARG)
   _checkMode
     _instCTRL
   _checkSelect
     _instCTRL
   _checkTime
   _handlePPM
     ___ftge
   _handleTemp
   _initADC
   _initInterrupt
   _readADC
   _runClock
   _runMQ135
     _CalcMQ135
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       _readADC (ARG)
     _readADC
   _setPortDirections
   _startUpLCD
     _initLCD
       _instCTRL
     _instCTRL
     _printToLCD
       _dataCTRL
       _instCTRL
   _updateState
     _displayPPM
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _displayTemp
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _displayTime
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _instCTRL
     _printStatusPPM
       _printToLCD
         _dataCTRL
         _instCTRL
     _printStatusTMP
       _printToLCD
         _dataCTRL
         _instCTRL
     _printToLCD
       _dataCTRL
       _instCTRL
     _setHoursEnd
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _setHoursStart
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _setMinutesEnd
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _setMinutesStart
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         ___wmul
         _isdigit
     _sprintf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _isdigit

 _ISR (ROOT)
   i1_instCTRL

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     37      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4F      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      AC      12        0.0%
ABS                  0      0      AC       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon May 13 14:53:48 2024

                         pc 0002                ?_displayTemp 0070                ?_displayTime 0070  
               __CFG_CP$OFF 0000                          l71 1601                          fsr 0004  
       ___wmul@multiplicand 0022    __size_of_setMinutesStart 00C0                ___ftadd@exp1 003D  
              ___ftadd@exp2 003C                ___ftadd@sign 003B                         l103 1691  
                       l212 08B4                         l204 0888                         l221 08C5  
                       l214 08B1                         l208 0885                         l320 0433  
                       l161 09DA                         l147 0B52                         l236 146F  
                       l175 0CD2                         l600 07C7                         l338 050A  
                       l189 0C12                         l606 07E0                         l294 078E  
                       l439 15A7                         l629 0E76                         _GIE 005F  
                       _RB1 0031                         _RC0 0038                         _RC1 0039  
                       _RC2 003A                         _RC3 003B                         _RC4 003C  
                       _RC5 003D                __CFG_CPD$OFF 0000                         _ISR 14CB  
                       _PPM 00D7                         _key 0077                         fsr0 0004  
                       indf 0000                ___awmod@sign 0026                __CFG_FOSC$HS 0000  
             printToLCD@str 0022                __CFG_LVP$OFF 0000                        ?_ISR 0070  
              ___ftdiv@cntr 0058                ___ftdiv@sign 005D                        l2111 0838  
                      l2105 081C                        l2131 15CC                        l2203 0EBD  
                      l2107 082A                        l2115 0843                        l2213 0A1B  
                      l3101 0CB7                        l2143 0DF7                        l3007 1485  
                      l2119 084B                        l3111 0CF1                        l2153 0E0D  
                      l2241 0A95                        l2233 0A76                        l2313 08E3  
                      l3041 0B63                        l3033 0B37                        l2171 0E3C  
                      l2147 0DFE                        l2219 0A31                        l2331 0915  
                      l3027 0B0F                        l3043 0B71                        l3205 08B7  
                      l2173 0E48                        l2165 0E27                        l2261 0D29  
                      l2341 093D                        l2333 0925                        l2093 080F  
                      l3061 09A3                        l3109 0CE3                        l3301 0711  
                      l2183 0E66                        l2175 0E4D                        l2255 0D13  
                      l2343 0940                        l3143 0C23                        l3135 0BF7  
                      l2601 14C1                        l2193 0E9A                        l2185 0E72  
                      l2177 0E51                        l2273 0D68                        l2097 0816  
                      l3129 0BCF                        l3145 0C31                        l2347 094E  
                      l2339 0932                        l3155 14A1                        l3075 09EB  
                      l3067 09C3                        l3307 072C                        l3315 0747  
                      l3251 060A                        l2189 0E88                        l2285 0D90  
                      l2277 0D78                        l3077 09F9                        l3317 0752  
                      l3191 088B                        l3095 0C8F                        l3247 05F8  
                      l3185 0875                        l3177 0862                        l2561 176B  
                      l2289 0DA0                        l3281 06BE                        l3265 0681  
                      l3329 077E                        l1923 1730                        l1915 170C  
                      l3275 06A1                        l3339 17C4                        l1917 171A  
                      l2565 1792                        l1941 16E2                        l3277 06AC  
                      l1927 173B                        l3199 08A1                        l3287 06D9  
                      l3295 06F4                        l2825 159F                        l2841 1614  
                      l1945 16F0                        l3297 06FF                        l1883 07A0  
                      l1939 16D4                        l2819 140A                        l2931 0564  
                      l2907 0529                        l2669 16BD                        l1893 07CC  
                      l1885 07AC                        l1949 16FB                        l2909 052D  
                      l2861 0445                        l1895 07D6                        l1887 07B1  
                      l1879 0799                        l2919 0544                        l2855 042F  
                      l2929 0560                        l2961 05EA                        l2865 0459  
                      l2939 057F                        l2947 0594                        l2891 04D7  
                      l2875 049B                        l2859 0438                        l2957 0598  
                      l2877 04B8                        l2887 04D1                        l2959 0401  
                      l2899 04FC                        l2999 0FDA                        STR_1 1105  
                      STR_2 110B                        STR_3 10CD                        STR_4 10E7  
                      STR_5 10EF                        STR_6 102C                        STR_7 10B9  
                      STR_8 10AF                        STR_9 10C3                  i1_instCTRL 140C  
                      u2005 07A5                        u2105 170F                        u2025 07C0  
                      u2125 171B                        u2045 07CF                        u3005 08EA  
                      u2205 16F1                        u2135 1727                        u2145 1731  
                      u2075 07E7                        u3035 0916                        u2175 16D7  
                      u3065 0934                        u4105 0FC5                        u2195 16E8  
                      u2615 0E28                        u3095 15EF                        u2455 081F  
                      u4135 0AC0                        u2705 0E67                        u4225 095C  
                      u4145 0ACD                        u3531 175E                        u2475 0830  
                      u4235 0969                        u4315 0C40                        u3532 175F  
                      u3533 1764                        u2645 0E3D                        u2805 0A77  
                      u2485 0839                        u4405 0B80                        u4325 0C4D  
                      u3534 1765                        u3551 1785                        u2815 0A88  
                      u4415 0B8D                        u3552 1786                        u3553 178B  
                      u2825 0A96                        u2905 0D79                        u3554 178C  
                      u2675 0E52                        u2915 0D81                        _INTE 005C  
                      _INTF 0059                        u4705 1465                        u2785 0A43  
                      u2865 0D35                        u2795 0A55                        u2955 0DA1  
                      u2875 0D47                        u2965 0DA9                        u4717 17BD  
                      u4807 143C                        u4727 0C5B                        u3865 15A8  
                      u4817 1539                        u4737 0CEB                        u3875 15AF  
                      u4827 15FB                        u3955 04F2                        u4747 0B9B  
                      u4837 14C5                        u4757 0C2B                        u4847 14FD  
                      u4767 0ADB                        u4857 1429                        u4777 0B6B  
                      u3995 0519                        u4787 0977                        u4797 09F3  
              __CFG_WRT$OFF 0000                        _main 17A1                ___ftpack@arg 0020  
                      _mode 00DE                ___ftpack@exp 0023                        btemp 007E  
             __CFG_BOREN$ON 0000                        ltemp 007E                        start 0012  
                      ttemp 007E                        wtemp 007E       displayPPM@ppmFraction 00D4  
              ___ftmul@cntr 004C                ___ftmul@sign 004D                       ??_ISR 0072  
              ___fttol@exp1 005B                ___fttol@lval 0057                       ?_main 0070  
           __end_of___ftadd 0ED7                       STR_10 10B9                       STR_11 10AF  
                     STR_12 10C3                       STR_20 10D6                       STR_13 10B9  
                     STR_21 10DF                       STR_14 10AF                       STR_22 10FE  
                     STR_30 1083                       STR_15 10C3                       STR_23 10F7  
                     STR_31 105A                       STR_32 10A5                       STR_16 10B9  
                     STR_24 103C                       STR_33 1083                       STR_17 10AF  
                     STR_25 1068               __CFG_WDTE$OFF 0000                       STR_18 10C3  
                     STR_34 108F                       STR_26 1076                       STR_19 109A  
                     STR_27 104B                       STR_28 101C             __end_of___awmod 0852  
                     STR_29 10A5             __end_of___ftdiv 0ABB             __end_of___ftneg 13ED  
           __end_of___ftmul 0DCE             __end_of___fttol 0957             __end_of___lwdiv 1742  
           __end_of___lwmod 1702                       _PORTA 0005                       _PORTB 0006  
                     _PORTC 0007                       _PORTD 0008                       _TRISA 0085  
                     _TRISB 0086                       _TRISC 0087                       _TRISD 0088  
      __size_of_checkSelect 0034                CalcMQ135@co2 00C1             __end_of_initADC 13E3  
           __end_of_readADC 160E             __end_of_initLCD 1553               ___awtoft@sign 002D  
           __end_of_dpowers 101C             __end_of_isdigit 140C                       _hours 007A  
             ___ftpack@sign 0024                       pclath 000A                       ltemp0 007E  
                     ltemp1 0082                       ltemp2 0086                       ltemp3 0080  
        __size_of_CalcMQ135 03A7                       ttemp0 007E                       ttemp1 0081  
                     ttemp2 0084                       ttemp3 0087                       ttemp4 007F  
                     status 0003                       wtemp0 007E                       wtemp1 0080  
                     wtemp2 0082                       wtemp3 0084                       wtemp4 0086  
                     wtemp5 0088                       wtemp6 007F             __end_of_sprintf 05F7  
     __end_of_setHoursStart 0B7B       __end_of_setMinutesEnd 0C3B             __initialization 0015  
        displayPPM@ppmWhole 00D2      __size_of_initInterrupt 0007                __end_of_main 1800  
     printStatusPPM@handler 0024  checkSelect@currentRB1State 0024                      ??_main 006C  
             ___fttol@sign1 0056                ?_setHoursEnd 0070           ??_setMinutesStart 004A  
                    _ADCON0 001F                      _ADCON1 009F                      _ADRESH 001E  
                    _ADRESL 009E            __end_of___awtoft 15E5            __end_of___ftpack 07F9  
               ?i1_instCTRL 0070                      i1l2807 14D7                      _INTEDG 040E  
          __end_of_dataCTRL 1445                      u486_27 1416                 instCTRL@CMD 0021  
            __CFG_PWRTE$OFF 0000       printStatusTMP@handler 0024                      ___ftge 1742  
         _setPortDirections 13ED                      ___wmul 159B                   ??___ftadd 0037  
                 ??___awmod 0024                   ??___ftdiv 0054                   ??___ftneg 0031  
                 ??___ftmul 0044                   ??___fttol 0052                   ??___lwdiv 002A  
                 ??___lwmod 0032            ??_printStatusPPM 0024            ??_printStatusTMP 0024  
          __end_of_instCTRL 1432       displayTime@timeFormat 004E          ?_setPortDirections 0070  
           ___awmod@divisor 0020                      _select 00E0             ___awmod@counter 0025  
         __end_of_CalcMQ135 03F8        __size_of_displayTemp 0024        __size_of_displayTime 0024  
                 ??_initADC 0020       ___ftmul@f3_as_product 0049                   ??_readADC 0022  
                 ??_initLCD 0022            __end_of_runMQ135 152F                __pdataCOMMON 007A  
                 ??_isdigit 0020         ??_setPortDirections 0020                      saved_w 007E  
          __end_of_runClock 14CB               _initInterrupt 07F9                   ??_sprintf 003A  
   __end_of__initialization 004D                  ___ftadd@f1 0031                  ___ftadd@f2 0034  
                ___ftge@ff1 0020                  ___ftge@ff2 0023       calculateTemp@adcValue 002E  
                ___ftdiv@f1 0051                  ___ftdiv@f2 004E                  ___ftdiv@f3 0059  
                ___ftneg@f1 002E                  ___awtoft@c 0028   __end_of_setPortDirections 13FC  
                ___ftmul@f1 003E                  ___ftmul@f2 0041                ?_updateState 0070  
                ___fttol@f1 004E              __pcstackCOMMON 0070                __pidataBANK0 0003  
              __pidataBANK1 13CF          __size_of_checkMode 0020          __size_of_checkTime 0077  
       __size_ofi1_instCTRL 0013          __size_of_handlePPM 0030         displayPPM@strBuffer 00A0  
   checkSelect@lastRB1State 00DC              ?_initInterrupt 0070           updateState@buffer 0062  
              sprintf@width 0046                  __pbssBANK1 00D7                  __pmaintext 17A1  
                   ?___ftge 0020                     ?___wmul 0020                  __pintentry 0004  
                _handleTemp 145A                   ?___awtoft 0028                   ?___ftpack 0020  
                 ?_dataCTRL 0070      __size_of_calculateTemp 002F                     _GO_DONE 00FA  
                _displayPPM 0ED7        __size_of_setHoursEnd 00AC           __end_of_checkMode 150B  
         __end_of_checkTime 08C9                  __stringtab 1000                   ?_instCTRL 0070  
         __end_of_handlePPM 1698                   ?_runMQ135 0070  __size_of_setPortDirections 000F  
            CalcMQ135@ratio 00C4             _savedHoursStart 00EC                   ?_runClock 0070  
           __size_of___ftge 005F                     ___ftadd 0DCE                     ___awmod 0803  
                   ___ftdiv 0A03                     ___ftneg 13E3             __size_of___wmul 0025  
                   ___ftmul 0CFB                     ___fttol 08C9                     ___lwdiv 1702  
                   ___lwmod 16CC             _savedMinutesEnd 00ED             _setMinutesStart 0C3B  
                ??___awtoft 002B                  ??___ftpack 0025               ??_checkSelect 0022  
                   __ptext1 05F7                     __ptext2 0C3B                     __ptext3 0B7B  
                   __ptext4 0ABB                     __ptext5 0957                     __ptext6 0803  
                   __ptext7 1492                     __ptext8 1476                     __ptext9 1577  
                   _initADC 13DA                  ??_dataCTRL 0020                     _readADC 15E5  
                   _initLCD 152F                __size_of_ISR 0020             ??_initInterrupt 0020  
                   _dpowers 1012                     _isdigit 13FC            ___awmod@dividend 0022  
                   _ppmFlag 00DF                     _minutes 0079                     _sprintf 03F8  
                   clrloop0 13D3                ??i1_instCTRL 0070        end_of_initialization 004D  
                ??_instCTRL 0020               _calculateTemp 1639                  _tempBuffer 00DA  
                ??_runMQ135 0061                  ??_runClock 0020        __size_of_updateState 0198  
              __pstringtext 1000                 ?_handleTemp 0070                  _printToLCD 160E  
        __end_ofi1_instCTRL 141F      __size_of_setHoursStart 00C0           displayTemp@buffer 004A  
                 _CalcMQ135 0051         __end_of_checkSelect 16CC                 ?_displayPPM 0070  
    __size_of_setMinutesEnd 00C0                  _startUpLCD 1445              ?_calculateTemp 002E  
               ___ftdiv@exp 005C            displayPPM@bufPtr 00D6            CalcMQ135@RAW_ADC 005E  
   __end_of_setMinutesStart 0CFB                 ___ftmul@exp 0048               ??_displayTemp 004A  
             ??_displayTime 004A              __end_of___ftge 17A1              __end_of___wmul 15C0  
             __pidataCOMMON 0800         start_initialization 0015                  ?_CalcMQ135 005E  
               __end_of_ISR 14EB                _lastKeyState 007B         __size_of_handleTemp 001C  
             _setHoursStart 0ABB               _savedHoursEnd 006F               _setMinutesEnd 0B7B  
          CalcMQ135@voltage 00A0                    ??___ftge 0026                    ??___wmul 0024  
       __size_of_displayPPM 0129                 __pdataBANK0 006F                 __pdataBANK1 00EC  
               ?_printToLCD 0022                 _checkSelect 1698           __size_of___awtoft 0025  
         __size_of___ftpack 006A         __end_of_displayTemp 1577         __end_of_displayTime 159B  
               __pbssCOMMON 0077                   ___latbits 0002               __pcstackBANK0 0020  
             __pcstackBANK1 00A0           __size_of_dataCTRL 0013     __size_of_printStatusPPM 001C  
   __size_of_printStatusTMP 001C         __end_of__stringdata 110E                 ?_startUpLCD 0070  
           ??_calculateTemp 0030                 sprintf@ccnt 003F                 sprintf@_val 0041  
         _savedMinutesStart 00EE                 sprintf@flag 0045                 sprintf@prec 003E  
                 _checkMode 14EB                   _checkTime 0852              ?_setHoursStart 0070  
                 _debugInfo 00E2           __size_of_instCTRL 0013            ___lwdiv@dividend 0028  
            ?_setMinutesEnd 0070            ?_setMinutesStart 0070                   _handlePPM 1668  
         __size_of_runMQ135 0024                    ?___ftadd 0031                    ?___awmod 0020  
                  ?___ftdiv 004E                    ?___ftneg 002E                    ?___ftmul 003E  
                  ?___fttol 004E                    ?___lwdiv 0026                    ?___lwmod 002E  
         __size_of_runClock 001D                    ?_initADC 0070                    ?_readADC 0020  
                  ?_initLCD 0070                    ?_isdigit 0070               ??_setHoursEnd 004A  
               ??_CalcMQ135 0061            ___lwdiv@quotient 002B                    ?_sprintf 0034  
         interrupt_function 0004              ___wmul@product 0024                  ?_checkMode 0070  
                ?_checkTime 0070         __size_of_printToLCD 002B                   clear_ram0 13D2  
             i1instCTRL@CMD 0071                 dataCTRL@DAT 0021                  ?_handlePPM 0070  
               _displayTemp 1553                 _displayTime 1577         __size_of_startUpLCD 0015  
              ??_handleTemp 0020                 __stringbase 1012                 __stringdata 101C  
         ___wmul@multiplier 0020       __end_of_initInterrupt 0800                ??_displayPPM 005C  
       __end_of_setHoursEnd 0A03             ??_setHoursStart 004A          __end_of_handleTemp 1476  
           ??_setMinutesEnd 004A             CalcMQ135@ratio2 00B5             CalcMQ135@ratio3 00B8  
           CalcMQ135@ratio4 00BB             CalcMQ135@ratio5 00BE             CalcMQ135@ratio6 00A3  
             ??_updateState 005E          __end_of_displayPPM 1000            __size_of___ftadd 0109  
          __size_of___awmod 004F            __size_of___ftdiv 00B8            __size_of___ftneg 000A  
          __size_of___ftmul 00D3            __size_of___fttol 008E            __size_of___lwdiv 0040  
          __size_of___lwmod 0036              readADC@channel 0024                    ___awtoft 15C0  
                  ___ftpack 078F          __end_of__stringtab 1012                 _isdigit$441 0020  
                  _dataCTRL 1432            __size_of_initADC 0009            __size_of_readADC 0029  
          __size_of_initLCD 0024            __size_of_isdigit 0010              _printStatusPPM 1476  
            _printStatusTMP 1492             ___lwdiv@divisor 0026             ___lwdiv@counter 002D  
                  __ptext10 1553                    __ptext11 0ED7                    __ptext20 152F  
                  __ptext12 03F8                    __ptext21 13ED                    __ptext13 13FC  
                  __ptext30 14AE                    __ptext22 150B                    __ptext14 16CC  
                  __ptext31 07F9                    __ptext23 15E5                    __ptext15 08C9  
                  __ptext40 1639                    __ptext32 13DA                    __ptext24 0051  
                  __ptext16 13E3                    __ptext41 159B                    __ptext33 145A  
                  __ptext25 0CFB                    __ptext17 1445                    __ptext42 1702  
                  __ptext34 1668                    __ptext26 0A03                    __ptext18 160E  
                  __ptext43 14CB                    __ptext35 1742                    __ptext27 0DCE  
                  __ptext19 1432                    __ptext44 140C                    __ptext36 0852  
                  __ptext28 15C0                    __ptext37 1698                    __ptext29 078F  
                  __ptext38 14EB                    __ptext39 141F            __size_of_sprintf 01FF  
                  _keyValid 0078                    _lastMode 007C                    _instCTRL 141F  
             __size_of_main 005F                 ??_checkMode 0022                 ??_checkTime 0020  
                  _runMQ135 150B                    _tempFlag 00E1                 ??_handlePPM 002C  
                  _runClock 14AE         __end_of_updateState 078F                ??_printToLCD 0024  
              ?_checkSelect 0070      __end_of_printStatusPPM 1492      __end_of_printStatusTMP 14AE  
               _setHoursEnd 0957                    isdigit@c 0021                ??_startUpLCD 0024  
                  intlevel1 0000                   sprintf@ap 003D                   sprintf@sp 0049  
          ___lwmod@dividend 0030          __end_of_printToLCD 1639                   stringcode 100A  
        __end_of_startUpLCD 145A               _CalcMQ135$682 00A6               _CalcMQ135$683 00A9  
             _CalcMQ135$684 00AC               _CalcMQ135$685 00AF               _CalcMQ135$686 00B2  
                  sprintf@c 0048                    sprintf@f 0034             ?_printStatusPPM 0070  
           ?_printStatusTMP 0070             ___lwmod@divisor 002E             ___lwmod@counter 0033  
                  stringtab 1000       __end_of_calculateTemp 1668                 _updateState 05F7  
