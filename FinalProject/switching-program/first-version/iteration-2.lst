

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun May 12 06:36:44 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	intentry,global,class=CODE,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	dabs	1,0x7E,2
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116                           
   117                           	psect	idataCOMMON
   118  08D0                     __pidataCOMMON:	
   119                           
   120                           ;initializer for _lastMode
   121  08D0  34FF               	retlw	255
   122                           
   123                           ;initializer for _savedMinutesEnd
   124  08D1  341E               	retlw	30
   125                           
   126                           	psect	idataBANK0
   127  07FA                     __pidataBANK0:	
   128                           
   129                           ;initializer for _hours
   130  07FA  3408               	retlw	8
   131                           
   132                           ;initializer for _savedHoursEnd
   133  07FB  340A               	retlw	10
   134                           
   135                           ;initializer for _savedHoursStart
   136  07FC  3409               	retlw	9
   137                           
   138                           ;initializer for _savedMinutesStart
   139  07FD  341E               	retlw	30
   140                           
   141                           ;initializer for setHoursStart@lastKeyState
   142  07FE  34FF               	retlw	255
   143                           
   144                           ;initializer for setMinutesStart@lastKeyState
   145  07FF  34FF               	retlw	255
   146                           
   147                           	psect	strings
   148  0800                     __pstrings:	
   149  0800                     stringtab:	
   150  0800                     __stringtab:	
   151                           
   152                           ;	String table - string pointers are 1 byte each
   153  0800  1BFF               	btfsc	btemp+1,7
   154  0801  280A               	ljmp	stringcode
   155  0802  1383               	bcf	3,7
   156  0803  187F               	btfsc	btemp+1,0
   157  0804  1783               	bsf	3,7
   158  0805  0800               	movf	0,w
   159  0806  0A84               	incf	4,f
   160  0807  1903               	skipnz
   161  0808  0AFF               	incf	btemp+1,f
   162  0809  0008               	return
   163  080A                     stringcode:	
   164  080A                     stringdir:	
   165  080A  3008               	movlw	high stringdir
   166  080B  008A               	movwf	10
   167  080C  0804               	movf	4,w
   168  080D  0A84               	incf	4,f
   169  080E  0782               	addwf	2,f
   170  080F                     __stringbase:	
   171  080F  3400               	retlw	0
   172  0810                     __end_of__stringtab:	
   173  0810                     _dpowers:	
   174  0810  3401               	retlw	1
   175  0811  3400               	retlw	0
   176  0812  340A               	retlw	10
   177  0813  3400               	retlw	0
   178  0814  3464               	retlw	100
   179  0815  3400               	retlw	0
   180  0816  34E8               	retlw	232
   181  0817  3403               	retlw	3
   182  0818  3410               	retlw	16
   183  0819  3427               	retlw	39
   184  081A                     __end_of_dpowers:	
   185  001F                     _ADCON0	set	31
   186  001E                     _ADRESH	set	30
   187  0005                     _PORTA	set	5
   188  0006                     _PORTB	set	6
   189  0007                     _PORTC	set	7
   190  0008                     _PORTD	set	8
   191  005F                     _GIE	set	95
   192  00FA                     _GO_DONE	set	250
   193  005C                     _INTE	set	92
   194  0059                     _INTF	set	89
   195  0031                     _RB1	set	49
   196  0038                     _RC0	set	56
   197  0039                     _RC1	set	57
   198  003A                     _RC2	set	58
   199  003B                     _RC3	set	59
   200  003C                     _RC4	set	60
   201  009F                     _ADCON1	set	159
   202  009E                     _ADRESL	set	158
   203  0085                     _TRISA	set	133
   204  0086                     _TRISB	set	134
   205  0087                     _TRISC	set	135
   206  0088                     _TRISD	set	136
   207  040E                     _INTEDG	set	1038
   208  081A                     __stringdata:	
   209  081A                     STR_17:	
   210  081A  344D               	retlw	77	;'M'
   211  081B  344F               	retlw	79	;'O'
   212  081C  3444               	retlw	68	;'D'
   213  081D  3445               	retlw	69	;'E'
   214  081E  343A               	retlw	58	;':'
   215  081F  3420               	retlw	32	;' '
   216  0820  3453               	retlw	83	;'S'
   217  0821  3445               	retlw	69	;'E'
   218  0822  3454               	retlw	84	;'T'
   219  0823  3420               	retlw	32	;' '
   220  0824  3441               	retlw	65	;'A'
   221  0825  3443               	retlw	67	;'C'
   222  0826  3454               	retlw	84	;'T'
   223  0827  3456               	retlw	86	;'V'
   224  0828  3420               	retlw	32	;' '
   225  0829  3448               	retlw	72	;'H'
   226  082A  3452               	retlw	82	;'R'
   227  082B  3453               	retlw	83	;'S'
   228  082C  3400               	retlw	0
   229  082D                     STR_5:	
   230  082D  3441               	retlw	65	;'A'
   231  082E  3469               	retlw	105	;'i'
   232  082F  3472               	retlw	114	;'r'
   233  0830  3420               	retlw	32	;' '
   234  0831  3450               	retlw	80	;'P'
   235  0832  3475               	retlw	117	;'u'
   236  0833  3472               	retlw	114	;'r'
   237  0834  3469               	retlw	105	;'i'
   238  0835  3466               	retlw	102	;'f'
   239  0836  3469               	retlw	105	;'i'
   240  0837  3465               	retlw	101	;'e'
   241  0838  3472               	retlw	114	;'r'
   242  0839  3420               	retlw	32	;' '
   243  083A  344F               	retlw	79	;'O'
   244  083B  344E               	retlw	78	;'N'
   245  083C  3420               	retlw	32	;' '
   246  083D  3400               	retlw	0
   247  083E                     STR_4:	
   248  083E  3441               	retlw	65	;'A'
   249  083F  3469               	retlw	105	;'i'
   250  0840  3472               	retlw	114	;'r'
   251  0841  3420               	retlw	32	;' '
   252  0842  3450               	retlw	80	;'P'
   253  0843  3475               	retlw	117	;'u'
   254  0844  3472               	retlw	114	;'r'
   255  0845  3469               	retlw	105	;'i'
   256  0846  3466               	retlw	102	;'f'
   257  0847  3469               	retlw	105	;'i'
   258  0848  3465               	retlw	101	;'e'
   259  0849  3472               	retlw	114	;'r'
   260  084A  3420               	retlw	32	;' '
   261  084B  344F               	retlw	79	;'O'
   262  084C  3446               	retlw	70	;'F'
   263  084D  3446               	retlw	70	;'F'
   264  084E  3400               	retlw	0
   265  084F                     STR_6:	
   266  084F  3454               	retlw	84	;'T'
   267  0850  3469               	retlw	105	;'i'
   268  0851  346D               	retlw	109	;'m'
   269  0852  3465               	retlw	101	;'e'
   270  0853  343A               	retlw	58	;':'
   271  0854  3420               	retlw	32	;' '
   272  0855  3425               	retlw	37	;'%'
   273  0856  3430               	retlw	48	;'0'
   274  0857  3432               	retlw	50	;'2'
   275  0858  3464               	retlw	100	;'d'
   276  0859  343A               	retlw	58	;':'
   277  085A  3425               	retlw	37	;'%'
   278  085B  3430               	retlw	48	;'0'
   279  085C  3432               	retlw	50	;'2'
   280  085D  3464               	retlw	100	;'d'
   281  085E  3400               	retlw	0
   282  085F                     STR_15:	
   283  085F  3444               	retlw	68	;'D'
   284  0860  3449               	retlw	73	;'I'
   285  0861  3453               	retlw	83	;'S'
   286  0862  3450               	retlw	80	;'P'
   287  0863  3420               	retlw	32	;' '
   288  0864  3443               	retlw	67	;'C'
   289  0865  344D               	retlw	77	;'M'
   290  0866  344D               	retlw	77	;'M'
   291  0867  344F               	retlw	79	;'O'
   292  0868  344E               	retlw	78	;'N'
   293  0869  3420               	retlw	32	;' '
   294  086A  3450               	retlw	80	;'P'
   295  086B  3447               	retlw	71	;'G'
   296  086C  3431               	retlw	49	;'1'
   297  086D  3400               	retlw	0
   298  086E                     STR_16:	
   299  086E  3444               	retlw	68	;'D'
   300  086F  3449               	retlw	73	;'I'
   301  0870  3453               	retlw	83	;'S'
   302  0871  3450               	retlw	80	;'P'
   303  0872  3420               	retlw	32	;' '
   304  0873  3443               	retlw	67	;'C'
   305  0874  344D               	retlw	77	;'M'
   306  0875  344D               	retlw	77	;'M'
   307  0876  344F               	retlw	79	;'O'
   308  0877  344E               	retlw	78	;'N'
   309  0878  3420               	retlw	32	;' '
   310  0879  3450               	retlw	80	;'P'
   311  087A  3447               	retlw	71	;'G'
   312  087B  3432               	retlw	50	;'2'
   313  087C  3400               	retlw	0
   314  087D                     STR_19:	
   315  087D  3453               	retlw	83	;'S'
   316  087E  3445               	retlw	69	;'E'
   317  087F  3454               	retlw	84	;'T'
   318  0880  3420               	retlw	32	;' '
   319  0881  344D               	retlw	77	;'M'
   320  0882  3449               	retlw	73	;'I'
   321  0883  344E               	retlw	78	;'N'
   322  0884  3455               	retlw	85	;'U'
   323  0885  3454               	retlw	84	;'T'
   324  0886  3445               	retlw	69	;'E'
   325  0887  3453               	retlw	83	;'S'
   326  0888  3400               	retlw	0
   327  0889                     STR_18:	
   328  0889  3453               	retlw	83	;'S'
   329  088A  3445               	retlw	69	;'E'
   330  088B  3454               	retlw	84	;'T'
   331  088C  3420               	retlw	32	;' '
   332  088D  3448               	retlw	72	;'H'
   333  088E  344F               	retlw	79	;'O'
   334  088F  3455               	retlw	85	;'U'
   335  0890  3452               	retlw	82	;'R'
   336  0891  3453               	retlw	83	;'S'
   337  0892  3400               	retlw	0
   338  0893                     STR_8:	
   339  0893  3444               	retlw	68	;'D'
   340  0894  3445               	retlw	69	;'E'
   341  0895  3443               	retlw	67	;'C'
   342  0896  343A               	retlw	58	;':'
   343  0897  3420               	retlw	32	;' '
   344  0898  3425               	retlw	37	;'%'
   345  0899  3430               	retlw	48	;'0'
   346  089A  3432               	retlw	50	;'2'
   347  089B  3464               	retlw	100	;'d'
   348  089C  3400               	retlw	0
   349  089D                     STR_7:	
   350  089D  3449               	retlw	73	;'I'
   351  089E  344E               	retlw	78	;'N'
   352  089F  3443               	retlw	67	;'C'
   353  08A0  343A               	retlw	58	;':'
   354  08A1  3420               	retlw	32	;' '
   355  08A2  3425               	retlw	37	;'%'
   356  08A3  3430               	retlw	48	;'0'
   357  08A4  3432               	retlw	50	;'2'
   358  08A5  3464               	retlw	100	;'d'
   359  08A6  3400               	retlw	0
   360  08A7                     STR_9:	
   361  08A7  3453               	retlw	83	;'S'
   362  08A8  3445               	retlw	69	;'E'
   363  08A9  3454               	retlw	84	;'T'
   364  08AA  343A               	retlw	58	;':'
   365  08AB  3420               	retlw	32	;' '
   366  08AC  3425               	retlw	37	;'%'
   367  08AD  3430               	retlw	48	;'0'
   368  08AE  3432               	retlw	50	;'2'
   369  08AF  3464               	retlw	100	;'d'
   370  08B0  3400               	retlw	0
   371  08B1                     STR_3:	
   372  08B1  3425               	retlw	37	;'%'
   373  08B2  3464               	retlw	100	;'d'
   374  08B3  3420               	retlw	32	;' '
   375  08B4  3470               	retlw	112	;'p'
   376  08B5  3470               	retlw	112	;'p'
   377  08B6  346D               	retlw	109	;'m'
   378  08B7  3420               	retlw	32	;' '
   379  08B8  3420               	retlw	32	;' '
   380  08B9  3400               	retlw	0
   381  08BA                     STR_14:	
   382  08BA  344D               	retlw	77	;'M'
   383  08BB  344F               	retlw	79	;'O'
   384  08BC  3444               	retlw	68	;'D'
   385  08BD  3445               	retlw	69	;'E'
   386  08BE  343A               	retlw	58	;':'
   387  08BF  3420               	retlw	32	;' '
   388  08C0  3400               	retlw	0
   389  08C1                     STR_1:	
   390  08C1  3443               	retlw	67	;'C'
   391  08C2  344F               	retlw	79	;'O'
   392  08C3  3432               	retlw	50	;'2'
   393  08C4  343A               	retlw	58	;':'
   394  08C5  3420               	retlw	32	;' '
   395  08C6  3400               	retlw	0
   396  08C7                     STR_13:	
   397  08C7  3454               	retlw	84	;'T'
   398  08C8  3445               	retlw	69	;'E'
   399  08C9  3453               	retlw	83	;'S'
   400  08CA  3454               	retlw	84	;'T'
   401  08CB  3400               	retlw	0
   402  08CC                     STR_2:	
   403  08CC  3425               	retlw	37	;'%'
   404  08CD  3464               	retlw	100	;'d'
   405  08CE  3400               	retlw	0
   406  08CF                     __end_of__stringdata:	
   407                           
   408                           ; #config settings
   409  0000                     
   410                           	psect	cinit
   411  0015                     start_initialization:	
   412  0015                     __initialization:	
   413                           
   414                           ; Clear objects allocated to COMMON
   415  0015  01F7               	clrf	__pbssCOMMON& (0+127)
   416  0016  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   417                           
   418                           ; Clear objects allocated to BANK0
   419  0017  01E4               	clrf	__pbssBANK0& (0+127)
   420  0018  01E5               	clrf	(__pbssBANK0+1)& (0+127)
   421  0019  01E6               	clrf	(__pbssBANK0+2)& (0+127)
   422  001A  01E7               	clrf	(__pbssBANK0+3)& (0+127)
   423  001B  01E8               	clrf	(__pbssBANK0+4)& (0+127)
   424  001C  01E9               	clrf	(__pbssBANK0+5)& (0+127)
   425                           
   426                           ; Clear objects allocated to BANK1
   427  001D  1383               	bcf	3,7	;select IRP bank0
   428  001E  30D7               	movlw	low __pbssBANK1
   429  001F  0084               	movwf	4
   430  0020  30ED               	movlw	low (__pbssBANK1+22)
   431  0021  160A  118A  2664  120A  118A  	fcall	clear_ram0
   432                           
   433                           ; Initialize objects allocated to BANK0
   434  0026  120A  118A  27FA  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   435  002B  00EA               	movwf	__pdataBANK0& (0+127)
   436  002C  120A  118A  27FB  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   437  0031  00EB               	movwf	(__pdataBANK0+1)& (0+127)
   438  0032  120A  118A  27FC  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   439  0037  00EC               	movwf	(__pdataBANK0+2)& (0+127)
   440  0038  120A  118A  27FD  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   441  003D  00ED               	movwf	(__pdataBANK0+3)& (0+127)
   442  003E  120A  118A  27FE  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   443  0043  00EE               	movwf	(__pdataBANK0+4)& (0+127)
   444  0044  120A  118A  27FF  120A  118A  	fcall	__pidataBANK0+5	;fetch initializer
   445  0049  00EF               	movwf	(__pdataBANK0+5)& (0+127)
   446                           
   447                           ; Initialize objects allocated to COMMON
   448  004A  120A  158A  20D0  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   449  004F  00F9               	movwf	__pdataCOMMON& (0+127)
   450  0050  120A  158A  20D1   	fcall	__pidataCOMMON+1	;fetch initializer
   451  0053  00FA               	movwf	(__pdataCOMMON+1)& (0+127)
   452  0054                     end_of_initialization:	
   453                           ;End of C runtime variable initialization code
   454                           
   455  0054                     __end_of__initialization:	
   456  0054  0183               	clrf	3
   457  0055  120A  158A  2B20   	ljmp	_main	;jump to C main() function
   458                           
   459                           	psect	bssCOMMON
   460  0077                     __pbssCOMMON:	
   461  0077                     checkSelect@lastRB1State:	
   462  0077                     	ds	2
   463                           
   464                           	psect	dataCOMMON
   465  0079                     __pdataCOMMON:	
   466  0079                     _lastMode:	
   467  0079                     	ds	1
   468  007A                     _savedMinutesEnd:	
   469  007A                     	ds	1
   470                           
   471                           	psect	bssBANK0
   472  0064                     __pbssBANK0:	
   473  0064                     _PPM:	
   474  0064                     	ds	3
   475  0067                     _minutes:	
   476  0067                     	ds	1
   477  0068                     _mode:	
   478  0068                     	ds	1
   479  0069                     _select:	
   480  0069                     	ds	1
   481                           
   482                           	psect	dataBANK0
   483  006A                     __pdataBANK0:	
   484  006A                     _hours:	
   485  006A                     	ds	1
   486  006B                     _savedHoursEnd:	
   487  006B                     	ds	1
   488  006C                     _savedHoursStart:	
   489  006C                     	ds	1
   490  006D                     _savedMinutesStart:	
   491  006D                     	ds	1
   492  006E                     setHoursStart@lastKeyState:	
   493  006E                     	ds	1
   494  006F                     setMinutesStart@lastKeyState:	
   495  006F                     	ds	1
   496                           
   497                           	psect	bssBANK1
   498  00D7                     __pbssBANK1:	
   499  00D7                     _ppmHandler:	
   500  00D7                     	ds	2
   501  00D9                     setHoursStart@debugInfo:	
   502  00D9                     	ds	10
   503  00E3                     setMinutesStart@debugInfo:	
   504  00E3                     	ds	10
   505                           
   506                           	psect	clrtext
   507  1664                     clear_ram0:	
   508                           ;	Called with FSR containing the base address, and
   509                           ;	W with the last address+1
   510                           
   511  1664  0064               	clrwdt	;clear the watchdog before getting into this loop
   512  1665                     clrloop0:	
   513  1665  0180               	clrf	0	;clear RAM location pointed to by FSR
   514  1666  0A84               	incf	4,f	;increment pointer
   515  1667  0604               	xorwf	4,w	;XOR with final address
   516  1668  1903               	btfsc	3,2	;have we reached the end yet?
   517  1669  3400               	retlw	0	;all done for this memory range, return
   518  166A  0604               	xorwf	4,w	;XOR again to restore value
   519  166B  2E65               	goto	clrloop0	;do the next byte
   520                           
   521                           	psect	cstackBANK1
   522  00A0                     __pcstackBANK1:	
   523  00A0                     CalcMQ135@voltage:	
   524  00A0                     displayPPM@strBuffer:	
   525                           ; 3 bytes @ 0x0
   526                           
   527                           
   528                           ; 50 bytes @ 0x0
   529  00A0                     	ds	3
   530  00A3                     CalcMQ135@ratio6:	
   531                           
   532                           ; 3 bytes @ 0x3
   533  00A3                     	ds	3
   534  00A6                     _CalcMQ135$629:	
   535                           
   536                           ; 3 bytes @ 0x6
   537  00A6                     	ds	3
   538  00A9                     _CalcMQ135$630:	
   539                           
   540                           ; 3 bytes @ 0x9
   541  00A9                     	ds	3
   542  00AC                     _CalcMQ135$631:	
   543                           
   544                           ; 3 bytes @ 0xC
   545  00AC                     	ds	3
   546  00AF                     _CalcMQ135$632:	
   547                           
   548                           ; 3 bytes @ 0xF
   549  00AF                     	ds	3
   550  00B2                     _CalcMQ135$633:	
   551                           
   552                           ; 3 bytes @ 0x12
   553  00B2                     	ds	3
   554  00B5                     CalcMQ135@ratio2:	
   555                           
   556                           ; 3 bytes @ 0x15
   557  00B5                     	ds	3
   558  00B8                     CalcMQ135@ratio3:	
   559                           
   560                           ; 3 bytes @ 0x18
   561  00B8                     	ds	3
   562  00BB                     CalcMQ135@ratio4:	
   563                           
   564                           ; 3 bytes @ 0x1B
   565  00BB                     	ds	3
   566  00BE                     CalcMQ135@ratio5:	
   567                           
   568                           ; 3 bytes @ 0x1E
   569  00BE                     	ds	3
   570  00C1                     CalcMQ135@co2:	
   571                           
   572                           ; 3 bytes @ 0x21
   573  00C1                     	ds	3
   574  00C4                     CalcMQ135@ratio:	
   575                           
   576                           ; 3 bytes @ 0x24
   577  00C4                     	ds	14
   578  00D2                     displayPPM@ppmWhole:	
   579                           
   580                           ; 2 bytes @ 0x32
   581  00D2                     	ds	2
   582  00D4                     displayPPM@ppmFraction:	
   583                           
   584                           ; 2 bytes @ 0x34
   585  00D4                     	ds	2
   586  00D6                     displayPPM@bufPtr:	
   587                           
   588                           ; 1 bytes @ 0x36
   589  00D6                     	ds	1
   590                           
   591                           	psect	cstackCOMMON
   592  0070                     __pcstackCOMMON:	
   593  0070                     ?_setPortDirections:	
   594  0070                     ?_initADC:	
   595                           ; 0 bytes @ 0x0
   596                           
   597  0070                     ?_initInterrupt:	
   598                           ; 0 bytes @ 0x0
   599                           
   600  0070                     ?_startUpLCD:	
   601                           ; 0 bytes @ 0x0
   602                           
   603  0070                     ?_checkSelect:	
   604                           ; 0 bytes @ 0x0
   605                           
   606  0070                     ?_checkMode:	
   607                           ; 0 bytes @ 0x0
   608                           
   609  0070                     ?_updateState:	
   610                           ; 0 bytes @ 0x0
   611                           
   612  0070                     ?_isdigit:	
   613                           ; 0 bytes @ 0x0
   614                           
   615  0070                     ?_instCTRL:	
   616                           ; 1 bit 
   617                           
   618  0070                     ?_dataCTRL:	
   619                           ; 0 bytes @ 0x0
   620                           
   621  0070                     ?_initLCD:	
   622                           ; 0 bytes @ 0x0
   623                           
   624  0070                     ?_runClock:	
   625                           ; 0 bytes @ 0x0
   626                           
   627  0070                     ?_displayTime:	
   628                           ; 0 bytes @ 0x0
   629                           
   630  0070                     ?_setHoursStart:	
   631                           ; 0 bytes @ 0x0
   632                           
   633  0070                     ?_setMinutesStart:	
   634                           ; 0 bytes @ 0x0
   635                           
   636  0070                     ?_checkTime:	
   637                           ; 0 bytes @ 0x0
   638                           
   639  0070                     ?_main:	
   640                           ; 0 bytes @ 0x0
   641                           
   642  0070                     ?_ISR:	
   643                           ; 0 bytes @ 0x0
   644                           
   645  0070                     ?i1_instCTRL:	
   646                           ; 0 bytes @ 0x0
   647                           
   648  0070                     ??i1_instCTRL:	
   649                           ; 0 bytes @ 0x0
   650                           
   651                           
   652                           ; 0 bytes @ 0x0
   653  0070                     	ds	1
   654  0071                     i1instCTRL@CMD:	
   655                           
   656                           ; 1 bytes @ 0x1
   657  0071                     	ds	1
   658  0072                     ??_ISR:	
   659                           
   660                           ; 0 bytes @ 0x2
   661  0072                     	ds	5
   662                           
   663                           	psect	cstackBANK0
   664  0020                     __pcstackBANK0:	
   665  0020                     ??_setPortDirections:	
   666  0020                     ??_initADC:	
   667                           ; 0 bytes @ 0x0
   668                           
   669  0020                     ??_initInterrupt:	
   670                           ; 0 bytes @ 0x0
   671                           
   672  0020                     ??_isdigit:	
   673                           ; 0 bytes @ 0x0
   674                           
   675  0020                     ??_instCTRL:	
   676                           ; 0 bytes @ 0x0
   677                           
   678  0020                     ??_dataCTRL:	
   679                           ; 0 bytes @ 0x0
   680                           
   681  0020                     ??_runClock:	
   682                           ; 0 bytes @ 0x0
   683                           
   684  0020                     ??_checkTime:	
   685                           ; 0 bytes @ 0x0
   686                           
   687  0020                     ?___ftge:	
   688                           ; 0 bytes @ 0x0
   689                           
   690  0020                     ?_Read_ADC_MQ135:	
   691                           ; 1 bit 
   692                           
   693  0020                     ?___wmul:	
   694                           ; 2 bytes @ 0x0
   695                           
   696  0020                     ?___awmod:	
   697                           ; 2 bytes @ 0x0
   698                           
   699  0020                     ?___lwdiv:	
   700                           ; 2 bytes @ 0x0
   701                           
   702  0020                     ?___ftpack:	
   703                           ; 2 bytes @ 0x0
   704                           
   705  0020                     _isdigit$402:	
   706                           ; 3 bytes @ 0x0
   707                           
   708  0020                     ___wmul@multiplier:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  0020                     ___awmod@divisor:	
   712                           ; 2 bytes @ 0x0
   713                           
   714  0020                     ___lwdiv@divisor:	
   715                           ; 2 bytes @ 0x0
   716                           
   717  0020                     ___ftpack@arg:	
   718                           ; 2 bytes @ 0x0
   719                           
   720  0020                     ___ftge@ff1:	
   721                           ; 3 bytes @ 0x0
   722                           
   723                           
   724                           ; 3 bytes @ 0x0
   725  0020                     	ds	1
   726  0021                     instCTRL@CMD:	
   727  0021                     dataCTRL@DAT:	
   728                           ; 1 bytes @ 0x1
   729                           
   730  0021                     isdigit@c:	
   731                           ; 1 bytes @ 0x1
   732                           
   733                           
   734                           ; 1 bytes @ 0x1
   735  0021                     	ds	1
   736  0022                     ??_checkSelect:	
   737  0022                     ??_checkMode:	
   738                           ; 0 bytes @ 0x2
   739                           
   740  0022                     ??_initLCD:	
   741                           ; 0 bytes @ 0x2
   742                           
   743  0022                     ?_printToLCD:	
   744                           ; 0 bytes @ 0x2
   745                           
   746  0022                     ??_Read_ADC_MQ135:	
   747                           ; 0 bytes @ 0x2
   748                           
   749  0022                     printToLCD@str:	
   750                           ; 0 bytes @ 0x2
   751                           
   752  0022                     ___wmul@multiplicand:	
   753                           ; 2 bytes @ 0x2
   754                           
   755  0022                     ___awmod@dividend:	
   756                           ; 2 bytes @ 0x2
   757                           
   758  0022                     ___lwdiv@dividend:	
   759                           ; 2 bytes @ 0x2
   760                           
   761                           
   762                           ; 2 bytes @ 0x2
   763  0022                     	ds	1
   764  0023                     ___ftpack@exp:	
   765  0023                     ___ftge@ff2:	
   766                           ; 1 bytes @ 0x3
   767                           
   768                           
   769                           ; 3 bytes @ 0x3
   770  0023                     	ds	1
   771  0024                     ??_startUpLCD:	
   772  0024                     ??_printToLCD:	
   773                           ; 0 bytes @ 0x4
   774                           
   775  0024                     ??___wmul:	
   776                           ; 0 bytes @ 0x4
   777                           
   778  0024                     ??___awmod:	
   779                           ; 0 bytes @ 0x4
   780                           
   781  0024                     ??___lwdiv:	
   782                           ; 0 bytes @ 0x4
   783                           
   784  0024                     ___ftpack@sign:	
   785                           ; 0 bytes @ 0x4
   786                           
   787  0024                     checkSelect@currentRB1State:	
   788                           ; 1 bytes @ 0x4
   789                           
   790  0024                     ___wmul@product:	
   791                           ; 2 bytes @ 0x4
   792                           
   793                           
   794                           ; 2 bytes @ 0x4
   795  0024                     	ds	1
   796  0025                     ??___ftpack:	
   797  0025                     ___awmod@counter:	
   798                           ; 0 bytes @ 0x5
   799                           
   800  0025                     ___lwdiv@quotient:	
   801                           ; 1 bytes @ 0x5
   802                           
   803                           
   804                           ; 2 bytes @ 0x5
   805  0025                     	ds	1
   806  0026                     ??___ftge:	
   807  0026                     ___awmod@sign:	
   808                           ; 0 bytes @ 0x6
   809                           
   810                           
   811                           ; 1 bytes @ 0x6
   812  0026                     	ds	1
   813  0027                     ___lwdiv@counter:	
   814                           
   815                           ; 1 bytes @ 0x7
   816  0027                     	ds	1
   817  0028                     ?___lwmod:	
   818  0028                     ?___awtoft:	
   819                           ; 2 bytes @ 0x8
   820                           
   821  0028                     ___awtoft@c:	
   822                           ; 3 bytes @ 0x8
   823                           
   824  0028                     ___lwmod@divisor:	
   825                           ; 2 bytes @ 0x8
   826                           
   827                           
   828                           ; 2 bytes @ 0x8
   829  0028                     	ds	2
   830  002A                     ___lwmod@dividend:	
   831                           
   832                           ; 2 bytes @ 0xA
   833  002A                     	ds	1
   834  002B                     ??___awtoft:	
   835                           
   836                           ; 0 bytes @ 0xB
   837  002B                     	ds	1
   838  002C                     ??___lwmod:	
   839  002C                     ?_handlePPM:	
   840                           ; 0 bytes @ 0xC
   841                           
   842                           
   843                           ; 2 bytes @ 0xC
   844  002C                     	ds	1
   845  002D                     ___awtoft@sign:	
   846  002D                     ___lwmod@counter:	
   847                           ; 1 bytes @ 0xD
   848                           
   849                           
   850                           ; 1 bytes @ 0xD
   851  002D                     	ds	1
   852  002E                     ??_handlePPM:	
   853  002E                     ?_sprintf:	
   854                           ; 0 bytes @ 0xE
   855                           
   856  002E                     ?___ftneg:	
   857                           ; 2 bytes @ 0xE
   858                           
   859  002E                     sprintf@f:	
   860                           ; 3 bytes @ 0xE
   861                           
   862  002E                     ___ftneg@f1:	
   863                           ; 1 bytes @ 0xE
   864                           
   865                           
   866                           ; 3 bytes @ 0xE
   867  002E                     	ds	3
   868  0031                     ??___ftneg:	
   869  0031                     ?___ftadd:	
   870                           ; 0 bytes @ 0x11
   871                           
   872  0031                     ___ftadd@f1:	
   873                           ; 3 bytes @ 0x11
   874                           
   875                           
   876                           ; 3 bytes @ 0x11
   877  0031                     	ds	2
   878  0033                     ??_sprintf:	
   879                           
   880                           ; 0 bytes @ 0x13
   881  0033                     	ds	1
   882  0034                     ___ftadd@f2:	
   883                           
   884                           ; 3 bytes @ 0x14
   885  0034                     	ds	2
   886  0036                     sprintf@ap:	
   887                           
   888                           ; 1 bytes @ 0x16
   889  0036                     	ds	1
   890  0037                     ??___ftadd:	
   891  0037                     sprintf@prec:	
   892                           ; 0 bytes @ 0x17
   893                           
   894                           
   895                           ; 1 bytes @ 0x17
   896  0037                     	ds	1
   897  0038                     sprintf@ccnt:	
   898                           
   899                           ; 2 bytes @ 0x18
   900  0038                     	ds	2
   901  003A                     sprintf@_val:	
   902                           
   903                           ; 4 bytes @ 0x1A
   904  003A                     	ds	1
   905  003B                     ___ftadd@sign:	
   906                           
   907                           ; 1 bytes @ 0x1B
   908  003B                     	ds	1
   909  003C                     ___ftadd@exp2:	
   910                           
   911                           ; 1 bytes @ 0x1C
   912  003C                     	ds	1
   913  003D                     ___ftadd@exp1:	
   914                           
   915                           ; 1 bytes @ 0x1D
   916  003D                     	ds	1
   917  003E                     ?___ftmul:	
   918  003E                     sprintf@flag:	
   919                           ; 3 bytes @ 0x1E
   920                           
   921  003E                     ___ftmul@f1:	
   922                           ; 1 bytes @ 0x1E
   923                           
   924                           
   925                           ; 3 bytes @ 0x1E
   926  003E                     	ds	1
   927  003F                     sprintf@width:	
   928                           
   929                           ; 2 bytes @ 0x1F
   930  003F                     	ds	2
   931  0041                     sprintf@c:	
   932  0041                     ___ftmul@f2:	
   933                           ; 1 bytes @ 0x21
   934                           
   935                           
   936                           ; 3 bytes @ 0x21
   937  0041                     	ds	1
   938  0042                     sprintf@sp:	
   939                           
   940                           ; 1 bytes @ 0x22
   941  0042                     	ds	1
   942  0043                     ??_displayTime:	
   943  0043                     ??_setHoursStart:	
   944                           ; 0 bytes @ 0x23
   945                           
   946  0043                     ??_setMinutesStart:	
   947                           ; 0 bytes @ 0x23
   948                           
   949                           
   950                           ; 0 bytes @ 0x23
   951  0043                     	ds	1
   952  0044                     ??___ftmul:	
   953                           
   954                           ; 0 bytes @ 0x24
   955  0044                     	ds	2
   956  0046                     setHoursStart@keyValid:	
   957  0046                     setMinutesStart@keyValid:	
   958                           ; 1 bytes @ 0x26
   959                           
   960                           
   961                           ; 1 bytes @ 0x26
   962  0046                     	ds	1
   963  0047                     setHoursStart@key:	
   964  0047                     setMinutesStart@key:	
   965                           ; 1 bytes @ 0x27
   966                           
   967                           
   968                           ; 1 bytes @ 0x27
   969  0047                     	ds	1
   970  0048                     ___ftmul@exp:	
   971  0048                     displayTime@timeFormat:	
   972                           ; 1 bytes @ 0x28
   973                           
   974                           
   975                           ; 10 bytes @ 0x28
   976  0048                     	ds	1
   977  0049                     ___ftmul@f3_as_product:	
   978                           
   979                           ; 3 bytes @ 0x29
   980  0049                     	ds	3
   981  004C                     ___ftmul@cntr:	
   982                           
   983                           ; 1 bytes @ 0x2C
   984  004C                     	ds	1
   985  004D                     ___ftmul@sign:	
   986                           
   987                           ; 1 bytes @ 0x2D
   988  004D                     	ds	1
   989  004E                     ?___ftdiv:	
   990  004E                     ?___fttol:	
   991                           ; 3 bytes @ 0x2E
   992                           
   993  004E                     ___ftdiv@f2:	
   994                           ; 4 bytes @ 0x2E
   995                           
   996  004E                     ___fttol@f1:	
   997                           ; 3 bytes @ 0x2E
   998                           
   999                           
  1000                           ; 3 bytes @ 0x2E
  1001  004E                     	ds	3
  1002  0051                     ___ftdiv@f1:	
  1003                           
  1004                           ; 3 bytes @ 0x31
  1005  0051                     	ds	1
  1006  0052                     ??___fttol:	
  1007                           
  1008                           ; 0 bytes @ 0x32
  1009  0052                     	ds	2
  1010  0054                     ??___ftdiv:	
  1011                           
  1012                           ; 0 bytes @ 0x34
  1013  0054                     	ds	2
  1014  0056                     ___fttol@sign1:	
  1015                           
  1016                           ; 1 bytes @ 0x36
  1017  0056                     	ds	1
  1018  0057                     ___fttol@lval:	
  1019                           
  1020                           ; 4 bytes @ 0x37
  1021  0057                     	ds	1
  1022  0058                     ___ftdiv@cntr:	
  1023                           
  1024                           ; 1 bytes @ 0x38
  1025  0058                     	ds	1
  1026  0059                     ___ftdiv@f3:	
  1027                           
  1028                           ; 3 bytes @ 0x39
  1029  0059                     	ds	2
  1030  005B                     ___fttol@exp1:	
  1031                           
  1032                           ; 1 bytes @ 0x3B
  1033  005B                     	ds	1
  1034  005C                     ?_displayPPM:	
  1035  005C                     ___ftdiv@exp:	
  1036                           ; 0 bytes @ 0x3C
  1037                           
  1038  005C                     displayPPM@ppmHandler:	
  1039                           ; 1 bytes @ 0x3C
  1040                           
  1041                           
  1042                           ; 2 bytes @ 0x3C
  1043  005C                     	ds	1
  1044  005D                     ___ftdiv@sign:	
  1045                           
  1046                           ; 1 bytes @ 0x3D
  1047  005D                     	ds	1
  1048  005E                     ??_displayPPM:	
  1049  005E                     ?_CalcMQ135:	
  1050                           ; 0 bytes @ 0x3E
  1051                           
  1052  005E                     CalcMQ135@RAW_ADC:	
  1053                           ; 3 bytes @ 0x3E
  1054                           
  1055                           
  1056                           ; 2 bytes @ 0x3E
  1057  005E                     	ds	2
  1058  0060                     ??_updateState:	
  1059                           
  1060                           ; 0 bytes @ 0x40
  1061  0060                     	ds	1
  1062  0061                     ??_CalcMQ135:	
  1063  0061                     ??_main:	
  1064                           ; 0 bytes @ 0x41
  1065                           
  1066                           
  1067                           ; 0 bytes @ 0x41
  1068  0061                     	ds	3
  1069                           
  1070                           	psect	maintext
  1071  0B20                     __pmaintext:	
  1072 ;;
  1073 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1074 ;;
  1075 ;; *************** function _main *****************
  1076 ;; Defined at:
  1077 ;;		line 28 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;		None
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;		None
  1082 ;; Return value:  Size  Location     Type
  1083 ;;		None               void
  1084 ;; Registers used:
  1085 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1086 ;; Tracked objects:
  1087 ;;		On entry : 17F/0
  1088 ;;		On exit  : 0/0
  1089 ;;		Unchanged: 0/0
  1090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1091 ;;      Params:         0       0       0       0       0
  1092 ;;      Locals:         0       0       0       0       0
  1093 ;;      Temps:          0       3       0       0       0
  1094 ;;      Totals:         0       3       0       0       0
  1095 ;;Total ram usage:        3 bytes
  1096 ;; Hardware stack levels required when called:    6
  1097 ;; This function calls:
  1098 ;;		_CalcMQ135
  1099 ;;		_Read_ADC_MQ135
  1100 ;;		_checkMode
  1101 ;;		_checkSelect
  1102 ;;		_checkTime
  1103 ;;		_handlePPM
  1104 ;;		_initADC
  1105 ;;		_initInterrupt
  1106 ;;		_runClock
  1107 ;;		_setPortDirections
  1108 ;;		_startUpLCD
  1109 ;;		_updateState
  1110 ;; This function is called by:
  1111 ;;		Startup code after reset
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115                           
  1116                           ;psect for function _main
  1117  0B20                     _main:	
  1118                           
  1119                           ;main.c: 30: setPortDirections();
  1120                           
  1121                           ;incstack = 0
  1122                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1123  0B20  160A  118A  267F  120A  158A  	fcall	_setPortDirections
  1124                           
  1125                           ;main.c: 31: initADC();
  1126  0B25  160A  118A  266C  120A  158A  	fcall	_initADC
  1127                           
  1128                           ;main.c: 32: initInterrupt();
  1129  0B2A  160A  118A  265D  120A  158A  	fcall	_initInterrupt
  1130                           
  1131                           ;main.c: 33: startUpLCD();
  1132  0B2F  120A  158A  20D2  120A  158A  	fcall	_startUpLCD
  1133                           
  1134                           ;main.c: 34: _delay((unsigned long)((250)*(4000000/4000.0)));
  1135  0B34  3002               	movlw	2
  1136  0B35  1283               	bcf	3,5	;RP0=0, select bank0
  1137  0B36  1303               	bcf	3,6	;RP1=0, select bank0
  1138  0B37  00E3               	movwf	??_main+2
  1139  0B38  3045               	movlw	69
  1140  0B39  00E2               	movwf	??_main+1
  1141  0B3A  30A9               	movlw	169
  1142  0B3B  00E1               	movwf	??_main
  1143  0B3C                     u4007:	
  1144  0B3C  0BE1               	decfsz	??_main,f
  1145  0B3D  2B3C               	goto	u4007
  1146  0B3E  0BE2               	decfsz	??_main+1,f
  1147  0B3F  2B3C               	goto	u4007
  1148  0B40  0BE3               	decfsz	??_main+2,f
  1149  0B41  2B3C               	goto	u4007
  1150  0B42  2B43               	nop2
  1151  0B43                     l2975:	
  1152                           ;main.c: 35: while (1)
  1153                           
  1154                           
  1155                           ;main.c: 36: {
  1156                           ;main.c: 37: runClock();
  1157  0B43  160A  118A  26F2  120A  158A  	fcall	_runClock
  1158                           
  1159                           ;main.c: 38: checkTime();
  1160  0B48  120A  158A  21FF  120A  158A  	fcall	_checkTime
  1161                           
  1162                           ;main.c: 39: PPM = CalcMQ135(Read_ADC_MQ135());
  1163  0B4D  160A  118A  26D7  120A  158A  	fcall	_Read_ADC_MQ135
  1164  0B52  1283               	bcf	3,5	;RP0=0, select bank0
  1165  0B53  1303               	bcf	3,6	;RP1=0, select bank0
  1166  0B54  0821               	movf	?_Read_ADC_MQ135+1,w
  1167  0B55  01DF               	clrf	CalcMQ135@RAW_ADC+1
  1168  0B56  07DF               	addwf	CalcMQ135@RAW_ADC+1,f
  1169  0B57  0820               	movf	?_Read_ADC_MQ135,w
  1170  0B58  01DE               	clrf	CalcMQ135@RAW_ADC
  1171  0B59  07DE               	addwf	CalcMQ135@RAW_ADC,f
  1172  0B5A  120A  118A  2058  120A  158A  	fcall	_CalcMQ135
  1173  0B5F  1283               	bcf	3,5	;RP0=0, select bank0
  1174  0B60  1303               	bcf	3,6	;RP1=0, select bank0
  1175  0B61  085E               	movf	?_CalcMQ135,w
  1176  0B62  00E4               	movwf	_PPM	;volatile
  1177  0B63  085F               	movf	?_CalcMQ135+1,w
  1178  0B64  00E5               	movwf	_PPM+1	;volatile
  1179  0B65  0860               	movf	?_CalcMQ135+2,w
  1180  0B66  00E6               	movwf	_PPM+2	;volatile
  1181                           
  1182                           ;main.c: 40: ppmHandler = handlePPM();
  1183  0B67  160A  118A  274B  120A  158A  	fcall	_handlePPM
  1184  0B6C  1283               	bcf	3,5	;RP0=0, select bank0
  1185  0B6D  1303               	bcf	3,6	;RP1=0, select bank0
  1186  0B6E  082D               	movf	?_handlePPM+1,w
  1187  0B6F  1683               	bsf	3,5	;RP0=1, select bank1
  1188  0B70  1303               	bcf	3,6	;RP1=0, select bank1
  1189  0B71  01D8               	clrf	(_ppmHandler+1)^(0+128)
  1190  0B72  07D8               	addwf	(_ppmHandler+1)^(0+128),f
  1191  0B73  1283               	bcf	3,5	;RP0=0, select bank0
  1192  0B74  1303               	bcf	3,6	;RP1=0, select bank0
  1193  0B75  082C               	movf	?_handlePPM,w
  1194  0B76  1683               	bsf	3,5	;RP0=1, select bank1
  1195  0B77  1303               	bcf	3,6	;RP1=0, select bank1
  1196  0B78  01D7               	clrf	_ppmHandler^(0+128)
  1197  0B79  07D7               	addwf	_ppmHandler^(0+128),f
  1198                           
  1199                           ;main.c: 41: checkSelect();
  1200  0B7A  120A  158A  20E7  120A  158A  	fcall	_checkSelect
  1201                           
  1202                           ;main.c: 42: checkMode();
  1203  0B7F  160A  118A  272D  120A  158A  	fcall	_checkMode
  1204                           
  1205                           ;main.c: 43: updateState();
  1206  0B84  120A  158A  24BE  120A  158A  	fcall	_updateState
  1207  0B89  2B43               	goto	l2975
  1208  0B8A                     __end_of_main:	
  1209                           
  1210                           	psect	text1
  1211  0CBE                     __ptext1:	
  1212 ;; *************** function _updateState *****************
  1213 ;; Defined at:
  1214 ;;		line 95 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;		None
  1217 ;; Auto vars:     Size  Location     Type
  1218 ;;  buffer         10    0        unsigned char [10]
  1219 ;; Return value:  Size  Location     Type
  1220 ;;		None               void
  1221 ;; Registers used:
  1222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 0/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1228 ;;      Params:         0       0       0       0       0
  1229 ;;      Locals:         0       0       0       0       0
  1230 ;;      Temps:          0       0       0       0       0
  1231 ;;      Totals:         0       0       0       0       0
  1232 ;;Total ram usage:        0 bytes
  1233 ;; Hardware stack levels used:    1
  1234 ;; Hardware stack levels required when called:    5
  1235 ;; This function calls:
  1236 ;;		_displayPPM
  1237 ;;		_displayTime
  1238 ;;		_instCTRL
  1239 ;;		_printToLCD
  1240 ;;		_setHoursStart
  1241 ;;		_setMinutesStart
  1242 ;; This function is called by:
  1243 ;;		_main
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           
  1248                           ;psect for function _updateState
  1249  0CBE                     _updateState:	
  1250                           
  1251                           ;main.c: 97: char buffer[10];
  1252                           ;main.c: 98: switch (mode)
  1253                           
  1254                           ;incstack = 0
  1255                           ; Regs used in _updateState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1256  0CBE  2D67               	goto	l2965
  1257  0CBF                     l2923:	
  1258                           ;main.c: 99: {
  1259                           ;main.c: 100: case DISP_CMN:
  1260                           
  1261                           
  1262                           ;main.c: 101: instCTRL(0x80);
  1263  0CBF  3080               	movlw	128
  1264  0CC0  160A  118A  26B1  120A  158A  	fcall	_instCTRL
  1265                           
  1266                           ;main.c: 102: printToLCD("MODE: ");
  1267  0CC5  30AB               	movlw	low (STR_14-__stringbase)
  1268  0CC6  1283               	bcf	3,5	;RP0=0, select bank0
  1269  0CC7  1303               	bcf	3,6	;RP1=0, select bank0
  1270  0CC8  00A2               	movwf	printToLCD@str
  1271  0CC9  3080               	movlw	128
  1272  0CCA  00A3               	movwf	printToLCD@str+1
  1273  0CCB  120A  158A  210F  120A  158A  	fcall	_printToLCD
  1274                           
  1275                           ;main.c: 103: switch (select)
  1276  0CD0  2D09               	goto	l2941
  1277  0CD1                     l2927:	
  1278                           ;main.c: 104: {
  1279                           ;main.c: 105: case 0:
  1280                           
  1281                           
  1282                           ;main.c: 106: printToLCD("DISP CMMON PG1");
  1283  0CD1  3050               	movlw	low (STR_15-__stringbase)
  1284  0CD2  1283               	bcf	3,5	;RP0=0, select bank0
  1285  0CD3  1303               	bcf	3,6	;RP1=0, select bank0
  1286  0CD4  00A2               	movwf	printToLCD@str
  1287  0CD5  3080               	movlw	128
  1288  0CD6  00A3               	movwf	printToLCD@str+1
  1289  0CD7  120A  158A  210F  120A  158A  	fcall	_printToLCD
  1290                           
  1291                           ;main.c: 107: instCTRL(0xC0);
  1292  0CDC  30C0               	movlw	192
  1293  0CDD  160A  118A  26B1  120A  158A  	fcall	_instCTRL
  1294                           
  1295                           ;main.c: 108: displayPPM(ppmHandler);
  1296  0CE2  1683               	bsf	3,5	;RP0=1, select bank1
  1297  0CE3  1303               	bcf	3,6	;RP1=0, select bank1
  1298  0CE4  0858               	movf	(_ppmHandler+1)^(0+128),w
  1299  0CE5  1283               	bcf	3,5	;RP0=0, select bank0
  1300  0CE6  1303               	bcf	3,6	;RP1=0, select bank0
  1301  0CE7  01DD               	clrf	displayPPM@ppmHandler+1
  1302  0CE8  07DD               	addwf	displayPPM@ppmHandler+1,f
  1303  0CE9  1683               	bsf	3,5	;RP0=1, select bank1
  1304  0CEA  1303               	bcf	3,6	;RP1=0, select bank1
  1305  0CEB  0857               	movf	_ppmHandler^(0+128),w
  1306  0CEC  1283               	bcf	3,5	;RP0=0, select bank0
  1307  0CED  1303               	bcf	3,6	;RP1=0, select bank0
  1308  0CEE  01DC               	clrf	displayPPM@ppmHandler
  1309  0CEF  07DC               	addwf	displayPPM@ppmHandler,f
  1310  0CF0  120A  118A  25E2   	fcall	_displayPPM
  1311                           
  1312                           ;main.c: 110: break;
  1313  0CF3  0008               	return
  1314  0CF4                     l2933:	
  1315                           ;main.c: 111: case 1:
  1316                           
  1317                           
  1318                           ;main.c: 112: printToLCD("DISP CMMON PG2");
  1319  0CF4  305F               	movlw	low (STR_16-__stringbase)
  1320  0CF5  1283               	bcf	3,5	;RP0=0, select bank0
  1321  0CF6  1303               	bcf	3,6	;RP1=0, select bank0
  1322  0CF7  00A2               	movwf	printToLCD@str
  1323  0CF8  3080               	movlw	128
  1324  0CF9  00A3               	movwf	printToLCD@str+1
  1325  0CFA  120A  158A  210F  120A  158A  	fcall	_printToLCD
  1326                           
  1327                           ;main.c: 113: instCTRL(0xC0);
  1328  0CFF  30C0               	movlw	192
  1329  0D00  160A  118A  26B1  120A  158A  	fcall	_instCTRL
  1330                           
  1331                           ;main.c: 114: displayTime();
  1332  0D05  160A  118A  2792   	fcall	_displayTime
  1333                           
  1334                           ;main.c: 116: }
  1335                           
  1336                           ;main.c: 115: break;
  1337  0D08  0008               	return
  1338  0D09                     l2941:	
  1339  0D09  1283               	bcf	3,5	;RP0=0, select bank0
  1340  0D0A  1303               	bcf	3,6	;RP1=0, select bank0
  1341  0D0B  0869               	movf	_select,w	;volatile
  1342                           
  1343                           ; Switch size 1, requested type "space"
  1344                           ; Number of cases is 2, Range of values is 0 to 1
  1345                           ; switch strategies available:
  1346                           ; Name         Instructions Cycles
  1347                           ; simple_byte            7     4 (average)
  1348                           ; direct_byte           14     8 (fixed)
  1349                           ; jumptable            260     6 (fixed)
  1350                           ;	Chosen strategy is simple_byte
  1351  0D0C  3A00               	xorlw	0	; case 0
  1352  0D0D  1903               	skipnz
  1353  0D0E  2CD1               	goto	l2927
  1354  0D0F  3A01               	xorlw	1	; case 1
  1355  0D10  1903               	skipnz
  1356  0D11  2CF4               	goto	l2933
  1357  0D12  2D71               	goto	l230
  1358                           
  1359                           ;main.c: 117: break;
  1360  0D13  0008               	return
  1361  0D14                     l2943:	
  1362                           ;main.c: 118: case SET_ACTV_START:
  1363                           
  1364                           
  1365                           ;main.c: 119: instCTRL(0x80);
  1366  0D14  3080               	movlw	128
  1367  0D15  160A  118A  26B1  120A  158A  	fcall	_instCTRL
  1368                           
  1369                           ;main.c: 120: printToLCD("MODE: SET ACTV HRS");
  1370  0D1A  300B               	movlw	low (STR_17-__stringbase)
  1371  0D1B  1283               	bcf	3,5	;RP0=0, select bank0
  1372  0D1C  1303               	bcf	3,6	;RP1=0, select bank0
  1373  0D1D  00A2               	movwf	printToLCD@str
  1374  0D1E  3080               	movlw	128
  1375  0D1F  00A3               	movwf	printToLCD@str+1
  1376  0D20  120A  158A  210F  120A  158A  	fcall	_printToLCD
  1377                           
  1378                           ;main.c: 121: switch (select)
  1379  0D25  2D5C               	goto	l2961
  1380  0D26                     l2947:	
  1381                           ;main.c: 122: {
  1382                           ;main.c: 123: case 0:
  1383                           
  1384                           
  1385                           ;main.c: 124: instCTRL(0xC0);
  1386  0D26  30C0               	movlw	192
  1387  0D27  160A  118A  26B1  120A  158A  	fcall	_instCTRL
  1388                           
  1389                           ;main.c: 125: printToLCD("SET HOURS");
  1390  0D2C  307A               	movlw	low (STR_18-__stringbase)
  1391  0D2D  1283               	bcf	3,5	;RP0=0, select bank0
  1392  0D2E  1303               	bcf	3,6	;RP1=0, select bank0
  1393  0D2F  00A2               	movwf	printToLCD@str
  1394  0D30  3080               	movlw	128
  1395  0D31  00A3               	movwf	printToLCD@str+1
  1396  0D32  120A  158A  210F  120A  158A  	fcall	_printToLCD
  1397                           
  1398                           ;main.c: 126: instCTRL(0x94);
  1399  0D37  3094               	movlw	148
  1400  0D38  160A  118A  26B1  120A  158A  	fcall	_instCTRL
  1401                           
  1402                           ;main.c: 127: setHoursStart();
  1403  0D3D  120A  158A  262A   	fcall	_setHoursStart
  1404                           
  1405                           ;main.c: 128: break;
  1406  0D40  0008               	return
  1407  0D41                     l2953:	
  1408                           ;main.c: 129: case 1:
  1409                           
  1410                           
  1411                           ;main.c: 130: instCTRL(0xC0);
  1412  0D41  30C0               	movlw	192
  1413  0D42  160A  118A  26B1  120A  158A  	fcall	_instCTRL
  1414                           
  1415                           ;main.c: 131: printToLCD("SET MINUTES");
  1416  0D47  306E               	movlw	low (STR_19-__stringbase)
  1417  0D48  1283               	bcf	3,5	;RP0=0, select bank0
  1418  0D49  1303               	bcf	3,6	;RP1=0, select bank0
  1419  0D4A  00A2               	movwf	printToLCD@str
  1420  0D4B  3080               	movlw	128
  1421  0D4C  00A3               	movwf	printToLCD@str+1
  1422  0D4D  120A  158A  210F  120A  158A  	fcall	_printToLCD
  1423                           
  1424                           ;main.c: 132: instCTRL(0x94);
  1425  0D52  3094               	movlw	148
  1426  0D53  160A  118A  26B1  120A  158A  	fcall	_instCTRL
  1427                           
  1428                           ;main.c: 133: setMinutesStart();
  1429  0D58  120A  158A  2418   	fcall	_setMinutesStart
  1430                           
  1431                           ;main.c: 135: }
  1432                           
  1433                           ;main.c: 134: break;
  1434  0D5B  0008               	return
  1435  0D5C                     l2961:	
  1436  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  1437  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  1438  0D5E  0869               	movf	_select,w	;volatile
  1439                           
  1440                           ; Switch size 1, requested type "space"
  1441                           ; Number of cases is 2, Range of values is 0 to 1
  1442                           ; switch strategies available:
  1443                           ; Name         Instructions Cycles
  1444                           ; simple_byte            7     4 (average)
  1445                           ; direct_byte           14     8 (fixed)
  1446                           ; jumptable            260     6 (fixed)
  1447                           ;	Chosen strategy is simple_byte
  1448  0D5F  3A00               	xorlw	0	; case 0
  1449  0D60  1903               	skipnz
  1450  0D61  2D26               	goto	l2947
  1451  0D62  3A01               	xorlw	1	; case 1
  1452  0D63  1903               	skipnz
  1453  0D64  2D41               	goto	l2953
  1454  0D65  2D71               	goto	l230
  1455                           
  1456                           ;main.c: 139: }
  1457                           
  1458                           ;main.c: 138: break;
  1459                           
  1460                           ;main.c: 137: default:
  1461                           
  1462                           ;main.c: 136: break;
  1463  0D66  0008               	return
  1464  0D67                     l2965:	
  1465  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  1466  0D68  1303               	bcf	3,6	;RP1=0, select bank0
  1467  0D69  0868               	movf	_mode,w
  1468                           
  1469                           ; Switch size 1, requested type "space"
  1470                           ; Number of cases is 2, Range of values is 0 to 1
  1471                           ; switch strategies available:
  1472                           ; Name         Instructions Cycles
  1473                           ; simple_byte            7     4 (average)
  1474                           ; direct_byte           14     8 (fixed)
  1475                           ; jumptable            260     6 (fixed)
  1476                           ;	Chosen strategy is simple_byte
  1477  0D6A  3A00               	xorlw	0	; case 0
  1478  0D6B  1903               	skipnz
  1479  0D6C  2CBF               	goto	l2923
  1480  0D6D  3A01               	xorlw	1	; case 1
  1481  0D6E  1903               	skipnz
  1482  0D6F  2D14               	goto	l2943
  1483  0D70  2D71               	goto	l230
  1484  0D71                     l230:	
  1485  0D71  0008               	return
  1486  0D72                     __end_of_updateState:	
  1487                           
  1488                           	psect	text2
  1489  0C18                     __ptext2:	
  1490 ;; *************** function _setMinutesStart *****************
  1491 ;; Defined at:
  1492 ;;		line 85 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedul
      +er.h"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;		None
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;  key             1   39[BANK0 ] unsigned char 
  1497 ;;  keyValid        1   38[BANK0 ] unsigned char 
  1498 ;; Return value:  Size  Location     Type
  1499 ;;		None               void
  1500 ;; Registers used:
  1501 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1507 ;;      Params:         0       0       0       0       0
  1508 ;;      Locals:         0       2       0       0       0
  1509 ;;      Temps:          0       3       0       0       0
  1510 ;;      Totals:         0       5       0       0       0
  1511 ;;Total ram usage:        5 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:    4
  1514 ;; This function calls:
  1515 ;;		___awmod
  1516 ;;		_printToLCD
  1517 ;;		_sprintf
  1518 ;; This function is called by:
  1519 ;;		_updateState
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           
  1524                           ;psect for function _setMinutesStart
  1525  0C18                     _setMinutesStart:	
  1526                           
  1527                           ;time_scheduler.h: 87: static char debugInfo[10];
  1528                           ;time_scheduler.h: 88: static unsigned char lastKeyState = 0xFF;
  1529                           ;time_scheduler.h: 90: unsigned char keyValid = (PORTB & 0x08) >> 3;
  1530                           
  1531                           ;incstack = 0
  1532                           ; Regs used in _setMinutesStart: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1533  0C18  1283               	bcf	3,5	;RP0=0, select bank0
  1534  0C19  1303               	bcf	3,6	;RP1=0, select bank0
  1535  0C1A  0806               	movf	6,w	;volatile
  1536  0C1B  00C3               	movwf	??_setMinutesStart
  1537  0C1C  3003               	movlw	3
  1538  0C1D                     u3725:	
  1539  0C1D  1003               	clrc
  1540  0C1E  0CC3               	rrf	??_setMinutesStart,f
  1541  0C1F  3EFF               	addlw	-1
  1542  0C20  1D03               	skipz
  1543  0C21  2C1D               	goto	u3725
  1544  0C22  0843               	movf	??_setMinutesStart,w
  1545  0C23  3901               	andlw	1
  1546  0C24  00C4               	movwf	??_setMinutesStart+1
  1547  0C25  0844               	movf	??_setMinutesStart+1,w
  1548  0C26  00C6               	movwf	setMinutesStart@keyValid
  1549                           
  1550                           ;time_scheduler.h: 91: unsigned char key = (PORTB & 0xF0) >> 4;
  1551  0C27  0806               	movf	6,w	;volatile
  1552  0C28  00C3               	movwf	??_setMinutesStart
  1553  0C29  3004               	movlw	4
  1554  0C2A                     u3735:	
  1555  0C2A  1003               	clrc
  1556  0C2B  0CC3               	rrf	??_setMinutesStart,f
  1557  0C2C  3EFF               	addlw	-1
  1558  0C2D  1D03               	skipz
  1559  0C2E  2C2A               	goto	u3735
  1560  0C2F  0843               	movf	??_setMinutesStart,w
  1561  0C30  390F               	andlw	15
  1562  0C31  00C4               	movwf	??_setMinutesStart+1
  1563  0C32  0844               	movf	??_setMinutesStart+1,w
  1564  0C33  00C7               	movwf	setMinutesStart@key
  1565                           
  1566                           ;time_scheduler.h: 93: _delay((unsigned long)((50)*(4000000/4000.0)));
  1567  0C34  3041               	movlw	65
  1568  0C35  00C4               	movwf	??_setMinutesStart+1
  1569  0C36  30EE               	movlw	238
  1570  0C37  00C3               	movwf	??_setMinutesStart
  1571  0C38                     u4017:	
  1572  0C38  0BC3               	decfsz	??_setMinutesStart,f
  1573  0C39  2C38               	goto	u4017
  1574  0C3A  0BC4               	decfsz	??_setMinutesStart+1,f
  1575  0C3B  2C38               	goto	u4017
  1576  0C3C  0000               	nop
  1577                           
  1578                           ;time_scheduler.h: 95: if (keyValid && key != lastKeyState)
  1579  0C3D  1283               	bcf	3,5	;RP0=0, select bank0
  1580  0C3E  1303               	bcf	3,6	;RP1=0, select bank0
  1581  0C3F  0846               	movf	setMinutesStart@keyValid,w
  1582  0C40  1903               	btfsc	3,2
  1583  0C41  2CB6               	goto	l2835
  1584  0C42  0847               	movf	setMinutesStart@key,w
  1585  0C43  066F               	xorwf	setMinutesStart@lastKeyState,w
  1586  0C44  1903               	skipnz
  1587  0C45  2CB6               	goto	l2835
  1588                           
  1589                           ;time_scheduler.h: 96: {
  1590                           ;time_scheduler.h: 97: if (key == 0b00001100)
  1591  0C46  0847               	movf	setMinutesStart@key,w
  1592  0C47  3A0C               	xorlw	12
  1593  0C48  1D03               	skipz
  1594  0C49  2C62               	goto	l2819
  1595                           
  1596                           ;time_scheduler.h: 98: {
  1597                           ;time_scheduler.h: 99: savedMinutesStart = (savedMinutesStart + 5) % 60;
  1598  0C4A  303C               	movlw	60
  1599  0C4B  00A0               	movwf	___awmod@divisor
  1600  0C4C  3000               	movlw	0
  1601  0C4D  00A1               	movwf	___awmod@divisor+1
  1602  0C4E  086D               	movf	_savedMinutesStart,w	;volatile
  1603  0C4F  3E05               	addlw	5
  1604  0C50  00A2               	movwf	___awmod@dividend
  1605  0C51  3000               	movlw	0
  1606  0C52  1803               	skipnc
  1607  0C53  3001               	movlw	1
  1608  0C54  00A3               	movwf	___awmod@dividend+1
  1609  0C55  120A  158A  21B0  120A  158A  	fcall	___awmod
  1610  0C5A  1283               	bcf	3,5	;RP0=0, select bank0
  1611  0C5B  1303               	bcf	3,6	;RP1=0, select bank0
  1612  0C5C  0820               	movf	?___awmod,w
  1613  0C5D  00C3               	movwf	??_setMinutesStart
  1614  0C5E  0843               	movf	??_setMinutesStart,w
  1615  0C5F  00ED               	movwf	_savedMinutesStart	;volatile
  1616                           
  1617                           ;time_scheduler.h: 100: sprintf(debugInfo, "INC: %02d", savedMinutesStart);
  1618  0C60  308E               	movlw	(STR_7-__stringbase)& (0+255)
  1619  0C61  2C87               	goto	L1
  1620  0C62                     l2819:	
  1621                           ;time_scheduler.h: 101: }
  1622                           
  1623                           
  1624                           ;time_scheduler.h: 102: else if (key == 0b00001110)
  1625  0C62  1283               	bcf	3,5	;RP0=0, select bank0
  1626  0C63  1303               	bcf	3,6	;RP1=0, select bank0
  1627  0C64  0847               	movf	setMinutesStart@key,w
  1628  0C65  3A0E               	xorlw	14
  1629  0C66  1D03               	skipz
  1630  0C67  2C80               	goto	l2825
  1631                           
  1632                           ;time_scheduler.h: 103: {
  1633                           ;time_scheduler.h: 104: savedMinutesStart = (savedMinutesStart - 5 + 60) % 60;
  1634  0C68  303C               	movlw	60
  1635  0C69  00A0               	movwf	___awmod@divisor
  1636  0C6A  3000               	movlw	0
  1637  0C6B  00A1               	movwf	___awmod@divisor+1
  1638  0C6C  086D               	movf	_savedMinutesStart,w	;volatile
  1639  0C6D  3E37               	addlw	55
  1640  0C6E  00A2               	movwf	___awmod@dividend
  1641  0C6F  3000               	movlw	0
  1642  0C70  1803               	skipnc
  1643  0C71  3001               	movlw	1
  1644  0C72  00A3               	movwf	___awmod@dividend+1
  1645  0C73  120A  158A  21B0  120A  158A  	fcall	___awmod
  1646  0C78  1283               	bcf	3,5	;RP0=0, select bank0
  1647  0C79  1303               	bcf	3,6	;RP1=0, select bank0
  1648  0C7A  0820               	movf	?___awmod,w
  1649  0C7B  00C3               	movwf	??_setMinutesStart
  1650  0C7C  0843               	movf	??_setMinutesStart,w
  1651  0C7D  00ED               	movwf	_savedMinutesStart	;volatile
  1652                           
  1653                           ;time_scheduler.h: 105: sprintf(debugInfo, "DEC: %02d", savedMinutesStart);
  1654  0C7E  3084               	movlw	(STR_8-__stringbase)& (0+255)
  1655  0C7F  2C87               	goto	L1
  1656  0C80                     l2825:	
  1657                           ;time_scheduler.h: 106: }
  1658                           
  1659                           
  1660                           ;time_scheduler.h: 107: else if (key == 0b00001101)
  1661  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  1662  0C81  1303               	bcf	3,6	;RP1=0, select bank0
  1663  0C82  0847               	movf	setMinutesStart@key,w
  1664  0C83  3A0D               	xorlw	13
  1665  0C84  1D03               	skipz
  1666  0C85  2C97               	goto	l150
  1667                           
  1668                           ;time_scheduler.h: 108: {
  1669                           ;time_scheduler.h: 109: sprintf(debugInfo, "SET: %02d", savedMinutesStart);
  1670  0C86  3098               	movlw	(STR_9-__stringbase)& (0+255)
  1671  0C87                     L1:	
  1672  0C87  00C3               	movwf	??_setMinutesStart
  1673  0C88  0843               	movf	??_setMinutesStart,w
  1674  0C89  00AE               	movwf	sprintf@f
  1675  0C8A  086D               	movf	_savedMinutesStart,w	;volatile
  1676  0C8B  00C4               	movwf	??_setMinutesStart+1
  1677  0C8C  01C5               	clrf	??_setMinutesStart+2
  1678  0C8D  0844               	movf	??_setMinutesStart+1,w
  1679  0C8E  00AF               	movwf	?_sprintf+1
  1680  0C8F  0845               	movf	??_setMinutesStart+2,w
  1681  0C90  00B0               	movwf	?_sprintf+2
  1682  0C91  30E3               	movlw	setMinutesStart@debugInfo& (0+255)
  1683  0C92  120A  118A  23FF  120A  158A  	fcall	_sprintf
  1684  0C97                     l150:	
  1685                           
  1686                           ;time_scheduler.h: 110: }
  1687                           ;time_scheduler.h: 112: printToLCD(debugInfo);
  1688  0C97  30E3               	movlw	setMinutesStart@debugInfo& (0+255)
  1689  0C98  1283               	bcf	3,5	;RP0=0, select bank0
  1690  0C99  1303               	bcf	3,6	;RP1=0, select bank0
  1691  0C9A  00A2               	movwf	printToLCD@str
  1692  0C9B  3000               	movlw	0
  1693  0C9C  00A3               	movwf	printToLCD@str+1
  1694  0C9D  120A  158A  210F  120A  158A  	fcall	_printToLCD
  1695                           
  1696                           ;time_scheduler.h: 113: lastKeyState = key;
  1697  0CA2  1283               	bcf	3,5	;RP0=0, select bank0
  1698  0CA3  1303               	bcf	3,6	;RP1=0, select bank0
  1699  0CA4  0847               	movf	setMinutesStart@key,w
  1700  0CA5  00C3               	movwf	??_setMinutesStart
  1701  0CA6  0843               	movf	??_setMinutesStart,w
  1702  0CA7  00EF               	movwf	setMinutesStart@lastKeyState
  1703  0CA8                     l2833:	
  1704                           ;time_scheduler.h: 115: while ((PORTB & 0x08) != 0)
  1705                           
  1706  0CA8  1283               	bcf	3,5	;RP0=0, select bank0
  1707  0CA9  1303               	bcf	3,6	;RP1=0, select bank0
  1708  0CAA  1D86               	btfss	6,3	;volatile
  1709  0CAB  0008               	return
  1710                           
  1711                           ;time_scheduler.h: 116: {
  1712                           ;time_scheduler.h: 117: _delay((unsigned long)((10)*(4000000/4000.0)));
  1713  0CAC  300D               	movlw	13
  1714  0CAD  00C4               	movwf	??_setMinutesStart+1
  1715  0CAE  30FB               	movlw	251
  1716  0CAF  00C3               	movwf	??_setMinutesStart
  1717  0CB0                     u4027:	
  1718  0CB0  0BC3               	decfsz	??_setMinutesStart,f
  1719  0CB1  2CB0               	goto	u4027
  1720  0CB2  0BC4               	decfsz	??_setMinutesStart+1,f
  1721  0CB3  2CB0               	goto	u4027
  1722  0CB4  2CB5               	nop2
  1723  0CB5  2CA8               	goto	l2833
  1724  0CB6                     l2835:	
  1725                           ;time_scheduler.h: 118: }
  1726                           ;time_scheduler.h: 119: }
  1727                           
  1728                           
  1729                           ;time_scheduler.h: 120: else if (!keyValid)
  1730  0CB6  08C6               	movf	setMinutesStart@keyValid,f
  1731  0CB7  1D03               	skipz
  1732  0CB8  0008               	return
  1733                           
  1734                           ;time_scheduler.h: 121: {
  1735                           ;time_scheduler.h: 122: lastKeyState = 0xFF;
  1736  0CB9  30FF               	movlw	255
  1737  0CBA  00C3               	movwf	??_setMinutesStart
  1738  0CBB  0843               	movf	??_setMinutesStart,w
  1739  0CBC  00EF               	movwf	setMinutesStart@lastKeyState
  1740  0CBD  0008               	return
  1741  0CBE                     __end_of_setMinutesStart:	
  1742                           
  1743                           	psect	text3
  1744  0E2A                     __ptext3:	
  1745 ;; *************** function _setHoursStart *****************
  1746 ;; Defined at:
  1747 ;;		line 43 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedul
      +er.h"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;		None
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;  key             1   39[BANK0 ] unsigned char 
  1752 ;;  keyValid        1   38[BANK0 ] unsigned char 
  1753 ;; Return value:  Size  Location     Type
  1754 ;;		None               void
  1755 ;; Registers used:
  1756 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1757 ;; Tracked objects:
  1758 ;;		On entry : 0/0
  1759 ;;		On exit  : 0/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1762 ;;      Params:         0       0       0       0       0
  1763 ;;      Locals:         0       2       0       0       0
  1764 ;;      Temps:          0       3       0       0       0
  1765 ;;      Totals:         0       5       0       0       0
  1766 ;;Total ram usage:        5 bytes
  1767 ;; Hardware stack levels used:    1
  1768 ;; Hardware stack levels required when called:    4
  1769 ;; This function calls:
  1770 ;;		___awmod
  1771 ;;		_printToLCD
  1772 ;;		_sprintf
  1773 ;; This function is called by:
  1774 ;;		_updateState
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           
  1779                           ;psect for function _setHoursStart
  1780  0E2A                     _setHoursStart:	
  1781                           
  1782                           ;time_scheduler.h: 45: static char debugInfo[10];
  1783                           ;time_scheduler.h: 46: static unsigned char lastKeyState = 0xFF;
  1784                           ;time_scheduler.h: 48: unsigned char keyValid = (PORTB & 0x08) >> 3;
  1785                           
  1786                           ;incstack = 0
  1787                           ; Regs used in _setHoursStart: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1788  0E2A  1283               	bcf	3,5	;RP0=0, select bank0
  1789  0E2B  1303               	bcf	3,6	;RP1=0, select bank0
  1790  0E2C  0806               	movf	6,w	;volatile
  1791  0E2D  00C3               	movwf	??_setHoursStart
  1792  0E2E  3003               	movlw	3
  1793  0E2F                     u3635:	
  1794  0E2F  1003               	clrc
  1795  0E30  0CC3               	rrf	??_setHoursStart,f
  1796  0E31  3EFF               	addlw	-1
  1797  0E32  1D03               	skipz
  1798  0E33  2E2F               	goto	u3635
  1799  0E34  0843               	movf	??_setHoursStart,w
  1800  0E35  3901               	andlw	1
  1801  0E36  00C4               	movwf	??_setHoursStart+1
  1802  0E37  0844               	movf	??_setHoursStart+1,w
  1803  0E38  00C6               	movwf	setHoursStart@keyValid
  1804                           
  1805                           ;time_scheduler.h: 49: unsigned char key = (PORTB & 0xF0) >> 4;
  1806  0E39  0806               	movf	6,w	;volatile
  1807  0E3A  00C3               	movwf	??_setHoursStart
  1808  0E3B  3004               	movlw	4
  1809  0E3C                     u3645:	
  1810  0E3C  1003               	clrc
  1811  0E3D  0CC3               	rrf	??_setHoursStart,f
  1812  0E3E  3EFF               	addlw	-1
  1813  0E3F  1D03               	skipz
  1814  0E40  2E3C               	goto	u3645
  1815  0E41  0843               	movf	??_setHoursStart,w
  1816  0E42  390F               	andlw	15
  1817  0E43  00C4               	movwf	??_setHoursStart+1
  1818  0E44  0844               	movf	??_setHoursStart+1,w
  1819  0E45  00C7               	movwf	setHoursStart@key
  1820                           
  1821                           ;time_scheduler.h: 51: _delay((unsigned long)((50)*(4000000/4000.0)));
  1822  0E46  3041               	movlw	65
  1823  0E47  00C4               	movwf	??_setHoursStart+1
  1824  0E48  30EE               	movlw	238
  1825  0E49  00C3               	movwf	??_setHoursStart
  1826  0E4A                     u4037:	
  1827  0E4A  0BC3               	decfsz	??_setHoursStart,f
  1828  0E4B  2E4A               	goto	u4037
  1829  0E4C  0BC4               	decfsz	??_setHoursStart+1,f
  1830  0E4D  2E4A               	goto	u4037
  1831  0E4E  0000               	nop
  1832                           
  1833                           ;time_scheduler.h: 53: if (keyValid && key != lastKeyState)
  1834  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
  1835  0E50  1303               	bcf	3,6	;RP1=0, select bank0
  1836  0E51  0846               	movf	setHoursStart@keyValid,w
  1837  0E52  1903               	btfsc	3,2
  1838  0E53  2EEF               	goto	l2801
  1839  0E54  0847               	movf	setHoursStart@key,w
  1840  0E55  066E               	xorwf	setHoursStart@lastKeyState,w
  1841  0E56  1903               	skipnz
  1842  0E57  2EEF               	goto	l2801
  1843                           
  1844                           ;time_scheduler.h: 54: {
  1845                           ;time_scheduler.h: 55: if (key == 0b00001100)
  1846  0E58  0847               	movf	setHoursStart@key,w
  1847  0E59  3A0C               	xorlw	12
  1848  0E5A  1D03               	skipz
  1849  0E5B  2E84               	goto	l2781
  1850                           
  1851                           ;time_scheduler.h: 56: {
  1852                           ;time_scheduler.h: 57: savedHoursStart = (savedHoursStart + 1) % 24;
  1853  0E5C  3018               	movlw	24
  1854  0E5D  00A0               	movwf	___awmod@divisor
  1855  0E5E  3000               	movlw	0
  1856  0E5F  00A1               	movwf	___awmod@divisor+1
  1857  0E60  086C               	movf	_savedHoursStart,w	;volatile
  1858  0E61  3E01               	addlw	1
  1859  0E62  00A2               	movwf	___awmod@dividend
  1860  0E63  3000               	movlw	0
  1861  0E64  1803               	skipnc
  1862  0E65  3001               	movlw	1
  1863  0E66  00A3               	movwf	___awmod@dividend+1
  1864  0E67  120A  158A  21B0  120A  158A  	fcall	___awmod
  1865  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  1866  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  1867  0E6E  0820               	movf	?___awmod,w
  1868  0E6F  00C3               	movwf	??_setHoursStart
  1869  0E70  0843               	movf	??_setHoursStart,w
  1870  0E71  00EC               	movwf	_savedHoursStart	;volatile
  1871                           
  1872                           ;time_scheduler.h: 58: sprintf(debugInfo, "INC: %02d", savedHoursStart);
  1873  0E72  308E               	movlw	(STR_7-__stringbase)& (0+255)
  1874  0E73  00C3               	movwf	??_setHoursStart
  1875  0E74  0843               	movf	??_setHoursStart,w
  1876  0E75  00AE               	movwf	sprintf@f
  1877  0E76  086C               	movf	_savedHoursStart,w	;volatile
  1878  0E77  00C4               	movwf	??_setHoursStart+1
  1879  0E78  01C5               	clrf	??_setHoursStart+2
  1880  0E79  0844               	movf	??_setHoursStart+1,w
  1881  0E7A  00AF               	movwf	?_sprintf+1
  1882  0E7B  0845               	movf	??_setHoursStart+2,w
  1883  0E7C  00B0               	movwf	?_sprintf+2
  1884  0E7D  30D9               	movlw	setHoursStart@debugInfo& (0+255)
  1885  0E7E  120A  118A  23FF  120A  158A  	fcall	_sprintf
  1886                           
  1887                           ;time_scheduler.h: 59: }
  1888  0E83  2ED0               	goto	l2793
  1889  0E84                     l2781:	
  1890                           
  1891                           ;time_scheduler.h: 60: else if (key == 0b00001110)
  1892  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  1893  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  1894  0E86  0847               	movf	setHoursStart@key,w
  1895  0E87  3A0E               	xorlw	14
  1896  0E88  1D03               	skipz
  1897  0E89  2EB2               	goto	l2787
  1898                           
  1899                           ;time_scheduler.h: 61: {
  1900                           ;time_scheduler.h: 62: savedHoursStart = (savedHoursStart - 1 + 24) % 24;
  1901  0E8A  3018               	movlw	24
  1902  0E8B  00A0               	movwf	___awmod@divisor
  1903  0E8C  3000               	movlw	0
  1904  0E8D  00A1               	movwf	___awmod@divisor+1
  1905  0E8E  086C               	movf	_savedHoursStart,w	;volatile
  1906  0E8F  3E17               	addlw	23
  1907  0E90  00A2               	movwf	___awmod@dividend
  1908  0E91  3000               	movlw	0
  1909  0E92  1803               	skipnc
  1910  0E93  3001               	movlw	1
  1911  0E94  00A3               	movwf	___awmod@dividend+1
  1912  0E95  120A  158A  21B0  120A  158A  	fcall	___awmod
  1913  0E9A  1283               	bcf	3,5	;RP0=0, select bank0
  1914  0E9B  1303               	bcf	3,6	;RP1=0, select bank0
  1915  0E9C  0820               	movf	?___awmod,w
  1916  0E9D  00C3               	movwf	??_setHoursStart
  1917  0E9E  0843               	movf	??_setHoursStart,w
  1918  0E9F  00EC               	movwf	_savedHoursStart	;volatile
  1919                           
  1920                           ;time_scheduler.h: 63: sprintf(debugInfo, "DEC: %02d", savedHoursStart);
  1921  0EA0  3084               	movlw	(STR_8-__stringbase)& (0+255)
  1922  0EA1  00C3               	movwf	??_setHoursStart
  1923  0EA2  0843               	movf	??_setHoursStart,w
  1924  0EA3  00AE               	movwf	sprintf@f
  1925  0EA4  086C               	movf	_savedHoursStart,w	;volatile
  1926  0EA5  00C4               	movwf	??_setHoursStart+1
  1927  0EA6  01C5               	clrf	??_setHoursStart+2
  1928  0EA7  0844               	movf	??_setHoursStart+1,w
  1929  0EA8  00AF               	movwf	?_sprintf+1
  1930  0EA9  0845               	movf	??_setHoursStart+2,w
  1931  0EAA  00B0               	movwf	?_sprintf+2
  1932  0EAB  30D9               	movlw	setHoursStart@debugInfo& (0+255)
  1933  0EAC  120A  118A  23FF  120A  158A  	fcall	_sprintf
  1934                           
  1935                           ;time_scheduler.h: 64: }
  1936  0EB1  2ED0               	goto	l2793
  1937  0EB2                     l2787:	
  1938                           
  1939                           ;time_scheduler.h: 65: else if (key == 0b00001101)
  1940  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
  1941  0EB3  1303               	bcf	3,6	;RP1=0, select bank0
  1942  0EB4  0847               	movf	setHoursStart@key,w
  1943  0EB5  3A0D               	xorlw	13
  1944  0EB6  1D03               	skipz
  1945  0EB7  2ED0               	goto	l2793
  1946                           
  1947                           ;time_scheduler.h: 66: {
  1948                           ;time_scheduler.h: 67: sprintf(debugInfo, "SET: %02d", savedHoursStart);
  1949  0EB8  3098               	movlw	(STR_9-__stringbase)& (0+255)
  1950  0EB9  00C3               	movwf	??_setHoursStart
  1951  0EBA  0843               	movf	??_setHoursStart,w
  1952  0EBB  00AE               	movwf	sprintf@f
  1953  0EBC  086C               	movf	_savedHoursStart,w	;volatile
  1954  0EBD  00C4               	movwf	??_setHoursStart+1
  1955  0EBE  01C5               	clrf	??_setHoursStart+2
  1956  0EBF  0844               	movf	??_setHoursStart+1,w
  1957  0EC0  00AF               	movwf	?_sprintf+1
  1958  0EC1  0845               	movf	??_setHoursStart+2,w
  1959  0EC2  00B0               	movwf	?_sprintf+2
  1960  0EC3  30D9               	movlw	setHoursStart@debugInfo& (0+255)
  1961  0EC4  120A  118A  23FF  120A  158A  	fcall	_sprintf
  1962                           
  1963                           ;time_scheduler.h: 68: savedHoursEnd = savedHoursStart + 2;
  1964  0EC9  1283               	bcf	3,5	;RP0=0, select bank0
  1965  0ECA  1303               	bcf	3,6	;RP1=0, select bank0
  1966  0ECB  086C               	movf	_savedHoursStart,w	;volatile
  1967  0ECC  3E02               	addlw	2
  1968  0ECD  00C3               	movwf	??_setHoursStart
  1969  0ECE  0843               	movf	??_setHoursStart,w
  1970  0ECF  00EB               	movwf	_savedHoursEnd	;volatile
  1971  0ED0                     l2793:	
  1972                           
  1973                           ;time_scheduler.h: 69: }
  1974                           ;time_scheduler.h: 71: printToLCD(debugInfo);
  1975  0ED0  30D9               	movlw	setHoursStart@debugInfo& (0+255)
  1976  0ED1  1283               	bcf	3,5	;RP0=0, select bank0
  1977  0ED2  1303               	bcf	3,6	;RP1=0, select bank0
  1978  0ED3  00A2               	movwf	printToLCD@str
  1979  0ED4  3000               	movlw	0
  1980  0ED5  00A3               	movwf	printToLCD@str+1
  1981  0ED6  120A  158A  210F  120A  158A  	fcall	_printToLCD
  1982                           
  1983                           ;time_scheduler.h: 72: lastKeyState = key;
  1984  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  1985  0EDC  1303               	bcf	3,6	;RP1=0, select bank0
  1986  0EDD  0847               	movf	setHoursStart@key,w
  1987  0EDE  00C3               	movwf	??_setHoursStart
  1988  0EDF  0843               	movf	??_setHoursStart,w
  1989  0EE0  00EE               	movwf	setHoursStart@lastKeyState
  1990  0EE1                     l2799:	
  1991                           ;time_scheduler.h: 74: while ((PORTB & 0x08) != 0)
  1992                           
  1993  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  1994  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  1995  0EE3  1D86               	btfss	6,3	;volatile
  1996  0EE4  0008               	return
  1997                           
  1998                           ;time_scheduler.h: 75: {
  1999                           ;time_scheduler.h: 76: _delay((unsigned long)((10)*(4000000/4000.0)));
  2000  0EE5  300D               	movlw	13
  2001  0EE6  00C4               	movwf	??_setHoursStart+1
  2002  0EE7  30FB               	movlw	251
  2003  0EE8  00C3               	movwf	??_setHoursStart
  2004  0EE9                     u4047:	
  2005  0EE9  0BC3               	decfsz	??_setHoursStart,f
  2006  0EEA  2EE9               	goto	u4047
  2007  0EEB  0BC4               	decfsz	??_setHoursStart+1,f
  2008  0EEC  2EE9               	goto	u4047
  2009  0EED  2EEE               	nop2
  2010  0EEE  2EE1               	goto	l2799
  2011  0EEF                     l2801:	
  2012                           ;time_scheduler.h: 77: }
  2013                           ;time_scheduler.h: 78: }
  2014                           
  2015                           
  2016                           ;time_scheduler.h: 79: else if (!keyValid)
  2017  0EEF  08C6               	movf	setHoursStart@keyValid,f
  2018  0EF0  1D03               	skipz
  2019  0EF1  0008               	return
  2020                           
  2021                           ;time_scheduler.h: 80: {
  2022                           ;time_scheduler.h: 81: lastKeyState = 0xFF;
  2023  0EF2  30FF               	movlw	255
  2024  0EF3  00C3               	movwf	??_setHoursStart
  2025  0EF4  0843               	movf	??_setHoursStart,w
  2026  0EF5  00EE               	movwf	setHoursStart@lastKeyState
  2027  0EF6  0008               	return
  2028  0EF7                     __end_of_setHoursStart:	
  2029                           
  2030                           	psect	text4
  2031  09B0                     __ptext4:	
  2032 ;; *************** function ___awmod *****************
  2033 ;; Defined at:
  2034 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  divisor         2    0[BANK0 ] int 
  2037 ;;  dividend        2    2[BANK0 ] int 
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;  sign            1    6[BANK0 ] unsigned char 
  2040 ;;  counter         1    5[BANK0 ] unsigned char 
  2041 ;; Return value:  Size  Location     Type
  2042 ;;                  2    0[BANK0 ] int 
  2043 ;; Registers used:
  2044 ;;		wreg, status,2, status,0
  2045 ;; Tracked objects:
  2046 ;;		On entry : 0/0
  2047 ;;		On exit  : 0/0
  2048 ;;		Unchanged: 0/0
  2049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2050 ;;      Params:         0       4       0       0       0
  2051 ;;      Locals:         0       2       0       0       0
  2052 ;;      Temps:          0       1       0       0       0
  2053 ;;      Totals:         0       7       0       0       0
  2054 ;;Total ram usage:        7 bytes
  2055 ;; Hardware stack levels used:    1
  2056 ;; Hardware stack levels required when called:    2
  2057 ;; This function calls:
  2058 ;;		Nothing
  2059 ;; This function is called by:
  2060 ;;		_setHoursStart
  2061 ;;		_setMinutesStart
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065                           
  2066                           ;psect for function ___awmod
  2067  09B0                     ___awmod:	
  2068                           
  2069                           ;incstack = 0
  2070                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2071  09B0  1283               	bcf	3,5	;RP0=0, select bank0
  2072  09B1  1303               	bcf	3,6	;RP1=0, select bank0
  2073  09B2  01A6               	clrf	___awmod@sign
  2074  09B3  1FA3               	btfss	___awmod@dividend+1,7
  2075  09B4  29BC               	goto	l1929
  2076  09B5  09A2               	comf	___awmod@dividend,f
  2077  09B6  09A3               	comf	___awmod@dividend+1,f
  2078  09B7  0AA2               	incf	___awmod@dividend,f
  2079  09B8  1903               	skipnz
  2080  09B9  0AA3               	incf	___awmod@dividend+1,f
  2081  09BA  01A6               	clrf	___awmod@sign
  2082  09BB  0AA6               	incf	___awmod@sign,f
  2083  09BC                     l1929:	
  2084  09BC  1FA1               	btfss	___awmod@divisor+1,7
  2085  09BD  29C3               	goto	l1933
  2086  09BE  09A0               	comf	___awmod@divisor,f
  2087  09BF  09A1               	comf	___awmod@divisor+1,f
  2088  09C0  0AA0               	incf	___awmod@divisor,f
  2089  09C1  1903               	skipnz
  2090  09C2  0AA1               	incf	___awmod@divisor+1,f
  2091  09C3                     l1933:	
  2092  09C3  0821               	movf	___awmod@divisor+1,w
  2093  09C4  0420               	iorwf	___awmod@divisor,w
  2094  09C5  1903               	skipnz
  2095  09C6  29F0               	goto	l1951
  2096  09C7  01A5               	clrf	___awmod@counter
  2097  09C8  0AA5               	incf	___awmod@counter,f
  2098  09C9                     l1941:	
  2099  09C9  1BA1               	btfsc	___awmod@divisor+1,7
  2100  09CA  29D7               	goto	l1943
  2101  09CB  3001               	movlw	1
  2102  09CC                     u2215:	
  2103  09CC  1003               	clrc
  2104  09CD  0DA0               	rlf	___awmod@divisor,f
  2105  09CE  0DA1               	rlf	___awmod@divisor+1,f
  2106  09CF  3EFF               	addlw	-1
  2107  09D0  1D03               	skipz
  2108  09D1  29CC               	goto	u2215
  2109  09D2  3001               	movlw	1
  2110  09D3  00A4               	movwf	??___awmod
  2111  09D4  0824               	movf	??___awmod,w
  2112  09D5  07A5               	addwf	___awmod@counter,f
  2113  09D6  29C9               	goto	l1941
  2114  09D7                     l1943:	
  2115  09D7  0821               	movf	___awmod@divisor+1,w
  2116  09D8  0223               	subwf	___awmod@dividend+1,w
  2117  09D9  1D03               	skipz
  2118  09DA  29DD               	goto	u2235
  2119  09DB  0820               	movf	___awmod@divisor,w
  2120  09DC  0222               	subwf	___awmod@dividend,w
  2121  09DD                     u2235:	
  2122  09DD  1C03               	skipc
  2123  09DE  29E5               	goto	l1947
  2124  09DF  0820               	movf	___awmod@divisor,w
  2125  09E0  02A2               	subwf	___awmod@dividend,f
  2126  09E1  0821               	movf	___awmod@divisor+1,w
  2127  09E2  1C03               	skipc
  2128  09E3  03A3               	decf	___awmod@dividend+1,f
  2129  09E4  02A3               	subwf	___awmod@dividend+1,f
  2130  09E5                     l1947:	
  2131  09E5  3001               	movlw	1
  2132  09E6                     u2245:	
  2133  09E6  1003               	clrc
  2134  09E7  0CA1               	rrf	___awmod@divisor+1,f
  2135  09E8  0CA0               	rrf	___awmod@divisor,f
  2136  09E9  3EFF               	addlw	-1
  2137  09EA  1D03               	skipz
  2138  09EB  29E6               	goto	u2245
  2139  09EC  3001               	movlw	1
  2140  09ED  02A5               	subwf	___awmod@counter,f
  2141  09EE  1D03               	btfss	3,2
  2142  09EF  29D7               	goto	l1943
  2143  09F0                     l1951:	
  2144  09F0  0826               	movf	___awmod@sign,w
  2145  09F1  1903               	btfsc	3,2
  2146  09F2  29F8               	goto	l1955
  2147  09F3  09A2               	comf	___awmod@dividend,f
  2148  09F4  09A3               	comf	___awmod@dividend+1,f
  2149  09F5  0AA2               	incf	___awmod@dividend,f
  2150  09F6  1903               	skipnz
  2151  09F7  0AA3               	incf	___awmod@dividend+1,f
  2152  09F8                     l1955:	
  2153  09F8  0823               	movf	___awmod@dividend+1,w
  2154  09F9  01A1               	clrf	?___awmod+1
  2155  09FA  07A1               	addwf	?___awmod+1,f
  2156  09FB  0822               	movf	___awmod@dividend,w
  2157  09FC  01A0               	clrf	?___awmod
  2158  09FD  07A0               	addwf	?___awmod,f
  2159  09FE  0008               	return
  2160  09FF                     __end_of___awmod:	
  2161                           
  2162                           	psect	text5
  2163  1792                     __ptext5:	
  2164 ;; *************** function _displayTime *****************
  2165 ;; Defined at:
  2166 ;;		line 36 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedul
      +er.h"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;		None
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;  timeFormat     10   40[BANK0 ] unsigned char [10]
  2171 ;; Return value:  Size  Location     Type
  2172 ;;		None               void
  2173 ;; Registers used:
  2174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2180 ;;      Params:         0       0       0       0       0
  2181 ;;      Locals:         0      10       0       0       0
  2182 ;;      Temps:          0       5       0       0       0
  2183 ;;      Totals:         0      15       0       0       0
  2184 ;;Total ram usage:       15 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    4
  2187 ;; This function calls:
  2188 ;;		_printToLCD
  2189 ;;		_sprintf
  2190 ;; This function is called by:
  2191 ;;		_updateState
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           
  2196                           ;psect for function _displayTime
  2197  1792                     _displayTime:	
  2198                           
  2199                           ;time_scheduler.h: 38: char timeFormat[10];
  2200                           ;time_scheduler.h: 39: sprintf(timeFormat, "Time: %02d:%02d", hours, minutes);
  2201                           
  2202                           ;incstack = 0
  2203                           ; Regs used in _displayTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2204  1792  3040               	movlw	(STR_6-__stringbase)& (0+255)
  2205  1793  1283               	bcf	3,5	;RP0=0, select bank0
  2206  1794  1303               	bcf	3,6	;RP1=0, select bank0
  2207  1795  00C3               	movwf	??_displayTime
  2208  1796  0843               	movf	??_displayTime,w
  2209  1797  00AE               	movwf	sprintf@f
  2210  1798  086A               	movf	_hours,w	;volatile
  2211  1799  00C4               	movwf	??_displayTime+1
  2212  179A  01C5               	clrf	??_displayTime+2
  2213  179B  0844               	movf	??_displayTime+1,w
  2214  179C  00AF               	movwf	?_sprintf+1
  2215  179D  0845               	movf	??_displayTime+2,w
  2216  179E  00B0               	movwf	?_sprintf+2
  2217  179F  0867               	movf	_minutes,w	;volatile
  2218  17A0  00C6               	movwf	??_displayTime+3
  2219  17A1  01C7               	clrf	??_displayTime+4
  2220  17A2  0846               	movf	??_displayTime+3,w
  2221  17A3  00B1               	movwf	?_sprintf+3
  2222  17A4  0847               	movf	??_displayTime+4,w
  2223  17A5  00B2               	movwf	?_sprintf+4
  2224  17A6  3048               	movlw	displayTime@timeFormat& (0+255)
  2225  17A7  120A  118A  23FF  160A  118A  	fcall	_sprintf
  2226                           
  2227                           ;time_scheduler.h: 40: printToLCD(timeFormat);
  2228  17AC  3048               	movlw	displayTime@timeFormat& (0+255)
  2229  17AD  1283               	bcf	3,5	;RP0=0, select bank0
  2230  17AE  1303               	bcf	3,6	;RP1=0, select bank0
  2231  17AF  00A2               	movwf	printToLCD@str
  2232  17B0  3000               	movlw	0
  2233  17B1  00A3               	movwf	printToLCD@str+1
  2234  17B2  120A  158A  210F   	fcall	_printToLCD
  2235  17B5  0008               	return
  2236  17B6                     __end_of_displayTime:	
  2237                           
  2238                           	psect	text6
  2239  05E2                     __ptext6:	
  2240 ;; *************** function _displayPPM *****************
  2241 ;; Defined at:
  2242 ;;		line 57 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;  ppmHandler      2   60[BANK0 ] int 
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;  strBuffer      50    0[BANK1 ] unsigned char [50]
  2247 ;;  ppmFraction     2   52[BANK1 ] int 
  2248 ;;  ppmWhole        2   50[BANK1 ] int 
  2249 ;;  bufPtr          1   54[BANK1 ] PTR unsigned char 
  2250 ;;		 -> displayPPM@strBuffer(50), 
  2251 ;; Return value:  Size  Location     Type
  2252 ;;		None               void
  2253 ;; Registers used:
  2254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2260 ;;      Params:         0       2       0       0       0
  2261 ;;      Locals:         0       0      55       0       0
  2262 ;;      Temps:          0       2       0       0       0
  2263 ;;      Totals:         0       4      55       0       0
  2264 ;;Total ram usage:       59 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; Hardware stack levels required when called:    4
  2267 ;; This function calls:
  2268 ;;		___awtoft
  2269 ;;		___ftadd
  2270 ;;		___ftmul
  2271 ;;		___ftneg
  2272 ;;		___fttol
  2273 ;;		_instCTRL
  2274 ;;		_printToLCD
  2275 ;;		_sprintf
  2276 ;; This function is called by:
  2277 ;;		_updateState
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           
  2282                           ;psect for function _displayPPM
  2283  05E2                     _displayPPM:	
  2284                           
  2285                           ;mq135_module.h: 59: char strBuffer[50];
  2286                           ;mq135_module.h: 61: int ppmWhole = (int)PPM;
  2287                           
  2288                           ;incstack = 0
  2289                           ; Regs used in _displayPPM: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2290  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  2291  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  2292  05E4  0864               	movf	_PPM,w	;volatile
  2293  05E5  00CE               	movwf	___fttol@f1
  2294  05E6  0865               	movf	_PPM+1,w	;volatile
  2295  05E7  00CF               	movwf	___fttol@f1+1
  2296  05E8  0866               	movf	_PPM+2,w	;volatile
  2297  05E9  00D0               	movwf	___fttol@f1+2
  2298  05EA  120A  158A  238A  120A  118A  	fcall	___fttol
  2299  05EF  1283               	bcf	3,5	;RP0=0, select bank0
  2300  05F0  1303               	bcf	3,6	;RP1=0, select bank0
  2301  05F1  084F               	movf	?___fttol+1,w
  2302  05F2  1683               	bsf	3,5	;RP0=1, select bank1
  2303  05F3  1303               	bcf	3,6	;RP1=0, select bank1
  2304  05F4  01D3               	clrf	(displayPPM@ppmWhole+1)^(0+128)
  2305  05F5  07D3               	addwf	(displayPPM@ppmWhole+1)^(0+128),f
  2306  05F6  1283               	bcf	3,5	;RP0=0, select bank0
  2307  05F7  1303               	bcf	3,6	;RP1=0, select bank0
  2308  05F8  084E               	movf	?___fttol,w
  2309  05F9  1683               	bsf	3,5	;RP0=1, select bank1
  2310  05FA  1303               	bcf	3,6	;RP1=0, select bank1
  2311  05FB  01D2               	clrf	displayPPM@ppmWhole^(0+128)
  2312  05FC  07D2               	addwf	displayPPM@ppmWhole^(0+128),f
  2313                           
  2314                           ;mq135_module.h: 62: int ppmFraction = (int)((PPM - ppmWhole) * 100);
  2315  05FD  0853               	movf	(displayPPM@ppmWhole+1)^(0+128),w
  2316  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  2317  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  2318  0600  01A9               	clrf	___awtoft@c+1
  2319  0601  07A9               	addwf	___awtoft@c+1,f
  2320  0602  1683               	bsf	3,5	;RP0=1, select bank1
  2321  0603  1303               	bcf	3,6	;RP1=0, select bank1
  2322  0604  0852               	movf	displayPPM@ppmWhole^(0+128),w
  2323  0605  1283               	bcf	3,5	;RP0=0, select bank0
  2324  0606  1303               	bcf	3,6	;RP1=0, select bank0
  2325  0607  01A8               	clrf	___awtoft@c
  2326  0608  07A8               	addwf	___awtoft@c,f
  2327  0609  160A  118A  27B6  120A  118A  	fcall	___awtoft
  2328  060E  1283               	bcf	3,5	;RP0=0, select bank0
  2329  060F  1303               	bcf	3,6	;RP1=0, select bank0
  2330  0610  0828               	movf	?___awtoft,w
  2331  0611  00AE               	movwf	___ftneg@f1
  2332  0612  0829               	movf	?___awtoft+1,w
  2333  0613  00AF               	movwf	___ftneg@f1+1
  2334  0614  082A               	movf	?___awtoft+2,w
  2335  0615  00B0               	movwf	___ftneg@f1+2
  2336  0616  160A  118A  2675  120A  118A  	fcall	___ftneg
  2337  061B  1283               	bcf	3,5	;RP0=0, select bank0
  2338  061C  1303               	bcf	3,6	;RP1=0, select bank0
  2339  061D  082E               	movf	?___ftneg,w
  2340  061E  00B4               	movwf	___ftadd@f2
  2341  061F  082F               	movf	?___ftneg+1,w
  2342  0620  00B5               	movwf	___ftadd@f2+1
  2343  0621  0830               	movf	?___ftneg+2,w
  2344  0622  00B6               	movwf	___ftadd@f2+2
  2345  0623  0864               	movf	_PPM,w	;volatile
  2346  0624  00B1               	movwf	___ftadd@f1
  2347  0625  0865               	movf	_PPM+1,w	;volatile
  2348  0626  00B2               	movwf	___ftadd@f1+1
  2349  0627  0866               	movf	_PPM+2,w	;volatile
  2350  0628  00B3               	movwf	___ftadd@f1+2
  2351  0629  120A  158A  26F7  120A  118A  	fcall	___ftadd
  2352  062E  1283               	bcf	3,5	;RP0=0, select bank0
  2353  062F  1303               	bcf	3,6	;RP1=0, select bank0
  2354  0630  0831               	movf	?___ftadd,w
  2355  0631  00C1               	movwf	___ftmul@f2
  2356  0632  0832               	movf	?___ftadd+1,w
  2357  0633  00C2               	movwf	___ftmul@f2+1
  2358  0634  0833               	movf	?___ftadd+2,w
  2359  0635  00C3               	movwf	___ftmul@f2+2
  2360  0636  3000               	movlw	0
  2361  0637  00BE               	movwf	___ftmul@f1
  2362  0638  30C8               	movlw	200
  2363  0639  00BF               	movwf	___ftmul@f1+1
  2364  063A  3042               	movlw	66
  2365  063B  00C0               	movwf	___ftmul@f1+2
  2366  063C  120A  118A  2727  120A  118A  	fcall	___ftmul
  2367  0641  1283               	bcf	3,5	;RP0=0, select bank0
  2368  0642  1303               	bcf	3,6	;RP1=0, select bank0
  2369  0643  083E               	movf	?___ftmul,w
  2370  0644  00CE               	movwf	___fttol@f1
  2371  0645  083F               	movf	?___ftmul+1,w
  2372  0646  00CF               	movwf	___fttol@f1+1
  2373  0647  0840               	movf	?___ftmul+2,w
  2374  0648  00D0               	movwf	___fttol@f1+2
  2375  0649  120A  158A  238A  120A  118A  	fcall	___fttol
  2376  064E  1283               	bcf	3,5	;RP0=0, select bank0
  2377  064F  1303               	bcf	3,6	;RP1=0, select bank0
  2378  0650  084F               	movf	?___fttol+1,w
  2379  0651  1683               	bsf	3,5	;RP0=1, select bank1
  2380  0652  1303               	bcf	3,6	;RP1=0, select bank1
  2381  0653  01D5               	clrf	(displayPPM@ppmFraction+1)^(0+128)
  2382  0654  07D5               	addwf	(displayPPM@ppmFraction+1)^(0+128),f
  2383  0655  1283               	bcf	3,5	;RP0=0, select bank0
  2384  0656  1303               	bcf	3,6	;RP1=0, select bank0
  2385  0657  084E               	movf	?___fttol,w
  2386  0658  1683               	bsf	3,5	;RP0=1, select bank1
  2387  0659  1303               	bcf	3,6	;RP1=0, select bank1
  2388  065A  01D4               	clrf	displayPPM@ppmFraction^(0+128)
  2389  065B  07D4               	addwf	displayPPM@ppmFraction^(0+128),f
  2390                           
  2391                           ;mq135_module.h: 65: char *bufPtr = strBuffer;
  2392  065C  30A0               	movlw	displayPPM@strBuffer& (0+255)
  2393  065D  1283               	bcf	3,5	;RP0=0, select bank0
  2394  065E  1303               	bcf	3,6	;RP1=0, select bank0
  2395  065F  00DE               	movwf	??_displayPPM
  2396  0660  085E               	movf	??_displayPPM,w
  2397  0661  1683               	bsf	3,5	;RP0=1, select bank1
  2398  0662  1303               	bcf	3,6	;RP1=0, select bank1
  2399  0663  00D6               	movwf	displayPPM@bufPtr^(0+128)
  2400                           
  2401                           ;mq135_module.h: 66: bufPtr += sprintf(bufPtr, "CO2: ");
  2402  0664  30B2               	movlw	(STR_1-__stringbase)& (0+255)
  2403  0665  1283               	bcf	3,5	;RP0=0, select bank0
  2404  0666  1303               	bcf	3,6	;RP1=0, select bank0
  2405  0667  00DE               	movwf	??_displayPPM
  2406  0668  085E               	movf	??_displayPPM,w
  2407  0669  00AE               	movwf	sprintf@f
  2408  066A  1683               	bsf	3,5	;RP0=1, select bank1
  2409  066B  1303               	bcf	3,6	;RP1=0, select bank1
  2410  066C  0856               	movf	displayPPM@bufPtr^(0+128),w
  2411  066D  120A  118A  23FF  120A  118A  	fcall	_sprintf
  2412  0672  1283               	bcf	3,5	;RP0=0, select bank0
  2413  0673  1303               	bcf	3,6	;RP1=0, select bank0
  2414  0674  082E               	movf	?_sprintf,w
  2415  0675  00DF               	movwf	??_displayPPM+1
  2416  0676  085F               	movf	??_displayPPM+1,w
  2417  0677  1683               	bsf	3,5	;RP0=1, select bank1
  2418  0678  1303               	bcf	3,6	;RP1=0, select bank1
  2419  0679  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  2420                           
  2421                           ;mq135_module.h: 67: bufPtr += sprintf(bufPtr, "%d", ppmWhole);
  2422  067A  30BD               	movlw	(STR_2-__stringbase)& (0+255)
  2423  067B  1283               	bcf	3,5	;RP0=0, select bank0
  2424  067C  1303               	bcf	3,6	;RP1=0, select bank0
  2425  067D  00DE               	movwf	??_displayPPM
  2426  067E  085E               	movf	??_displayPPM,w
  2427  067F  00AE               	movwf	sprintf@f
  2428  0680  1683               	bsf	3,5	;RP0=1, select bank1
  2429  0681  1303               	bcf	3,6	;RP1=0, select bank1
  2430  0682  0853               	movf	(displayPPM@ppmWhole+1)^(0+128),w
  2431  0683  1283               	bcf	3,5	;RP0=0, select bank0
  2432  0684  1303               	bcf	3,6	;RP1=0, select bank0
  2433  0685  01B0               	clrf	?_sprintf+2
  2434  0686  07B0               	addwf	?_sprintf+2,f
  2435  0687  1683               	bsf	3,5	;RP0=1, select bank1
  2436  0688  1303               	bcf	3,6	;RP1=0, select bank1
  2437  0689  0852               	movf	displayPPM@ppmWhole^(0+128),w
  2438  068A  1283               	bcf	3,5	;RP0=0, select bank0
  2439  068B  1303               	bcf	3,6	;RP1=0, select bank0
  2440  068C  01AF               	clrf	?_sprintf+1
  2441  068D  07AF               	addwf	?_sprintf+1,f
  2442  068E  1683               	bsf	3,5	;RP0=1, select bank1
  2443  068F  1303               	bcf	3,6	;RP1=0, select bank1
  2444  0690  0856               	movf	displayPPM@bufPtr^(0+128),w
  2445  0691  120A  118A  23FF  120A  118A  	fcall	_sprintf
  2446  0696  1283               	bcf	3,5	;RP0=0, select bank0
  2447  0697  1303               	bcf	3,6	;RP1=0, select bank0
  2448  0698  082E               	movf	?_sprintf,w
  2449  0699  00DF               	movwf	??_displayPPM+1
  2450  069A  085F               	movf	??_displayPPM+1,w
  2451  069B  1683               	bsf	3,5	;RP0=1, select bank1
  2452  069C  1303               	bcf	3,6	;RP1=0, select bank1
  2453  069D  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  2454                           
  2455                           ;mq135_module.h: 68: *bufPtr++ = '.';
  2456  069E  302E               	movlw	46
  2457  069F  1283               	bcf	3,5	;RP0=0, select bank0
  2458  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  2459  06A1  00DE               	movwf	??_displayPPM
  2460  06A2  1683               	bsf	3,5	;RP0=1, select bank1
  2461  06A3  1303               	bcf	3,6	;RP1=0, select bank1
  2462  06A4  0856               	movf	displayPPM@bufPtr^(0+128),w
  2463  06A5  0084               	movwf	4
  2464  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  2465  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  2466  06A8  085E               	movf	??_displayPPM,w
  2467  06A9  1383               	bcf	3,7	;select IRP bank0
  2468  06AA  0080               	movwf	0
  2469  06AB  3001               	movlw	1
  2470  06AC  00DE               	movwf	??_displayPPM
  2471  06AD  085E               	movf	??_displayPPM,w
  2472  06AE  1683               	bsf	3,5	;RP0=1, select bank1
  2473  06AF  1303               	bcf	3,6	;RP1=0, select bank1
  2474  06B0  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  2475                           
  2476                           ;mq135_module.h: 69: if (ppmFraction < 10)
  2477  06B1  0855               	movf	(displayPPM@ppmFraction+1)^(0+128),w
  2478  06B2  3A80               	xorlw	128
  2479  06B3  00FF               	movwf	127
  2480  06B4  3080               	movlw	128
  2481  06B5  027F               	subwf	127,w
  2482  06B6  1D03               	skipz
  2483  06B7  2EBA               	goto	u3625
  2484  06B8  300A               	movlw	10
  2485  06B9  0254               	subwf	displayPPM@ppmFraction^(0+128),w
  2486  06BA                     u3625:	
  2487  06BA  1803               	skipnc
  2488  06BB  2ECF               	goto	l2745
  2489                           
  2490                           ;mq135_module.h: 70: *bufPtr++ = '0';
  2491  06BC  3030               	movlw	48
  2492  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  2493  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  2494  06BF  00DE               	movwf	??_displayPPM
  2495  06C0  1683               	bsf	3,5	;RP0=1, select bank1
  2496  06C1  1303               	bcf	3,6	;RP1=0, select bank1
  2497  06C2  0856               	movf	displayPPM@bufPtr^(0+128),w
  2498  06C3  0084               	movwf	4
  2499  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  2500  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  2501  06C6  085E               	movf	??_displayPPM,w
  2502  06C7  1383               	bcf	3,7	;select IRP bank0
  2503  06C8  0080               	movwf	0
  2504  06C9  3001               	movlw	1
  2505  06CA  00DE               	movwf	??_displayPPM
  2506  06CB  085E               	movf	??_displayPPM,w
  2507  06CC  1683               	bsf	3,5	;RP0=1, select bank1
  2508  06CD  1303               	bcf	3,6	;RP1=0, select bank1
  2509  06CE  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  2510  06CF                     l2745:	
  2511                           
  2512                           ;mq135_module.h: 71: sprintf(bufPtr, "%d ppm  ", ppmFraction);
  2513  06CF  30A2               	movlw	(STR_3-__stringbase)& (0+255)
  2514  06D0  1283               	bcf	3,5	;RP0=0, select bank0
  2515  06D1  1303               	bcf	3,6	;RP1=0, select bank0
  2516  06D2  00DE               	movwf	??_displayPPM
  2517  06D3  085E               	movf	??_displayPPM,w
  2518  06D4  00AE               	movwf	sprintf@f
  2519  06D5  1683               	bsf	3,5	;RP0=1, select bank1
  2520  06D6  1303               	bcf	3,6	;RP1=0, select bank1
  2521  06D7  0855               	movf	(displayPPM@ppmFraction+1)^(0+128),w
  2522  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  2523  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  2524  06DA  01B0               	clrf	?_sprintf+2
  2525  06DB  07B0               	addwf	?_sprintf+2,f
  2526  06DC  1683               	bsf	3,5	;RP0=1, select bank1
  2527  06DD  1303               	bcf	3,6	;RP1=0, select bank1
  2528  06DE  0854               	movf	displayPPM@ppmFraction^(0+128),w
  2529  06DF  1283               	bcf	3,5	;RP0=0, select bank0
  2530  06E0  1303               	bcf	3,6	;RP1=0, select bank0
  2531  06E1  01AF               	clrf	?_sprintf+1
  2532  06E2  07AF               	addwf	?_sprintf+1,f
  2533  06E3  1683               	bsf	3,5	;RP0=1, select bank1
  2534  06E4  1303               	bcf	3,6	;RP1=0, select bank1
  2535  06E5  0856               	movf	displayPPM@bufPtr^(0+128),w
  2536  06E6  120A  118A  23FF  120A  118A  	fcall	_sprintf
  2537                           
  2538                           ;mq135_module.h: 72: printToLCD(strBuffer);
  2539  06EB  30A0               	movlw	displayPPM@strBuffer& (0+255)
  2540  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  2541  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  2542  06EE  00A2               	movwf	printToLCD@str
  2543  06EF  3000               	movlw	0
  2544  06F0  00A3               	movwf	printToLCD@str+1
  2545  06F1  120A  158A  210F  120A  118A  	fcall	_printToLCD
  2546                           
  2547                           ;mq135_module.h: 73: switch (ppmHandler)
  2548  06F6  2F17               	goto	l2759
  2549  06F7                     l2749:	
  2550                           ;mq135_module.h: 74: {
  2551                           ;mq135_module.h: 75: case 0:
  2552                           
  2553                           
  2554                           ;mq135_module.h: 76: instCTRL(0x94);
  2555  06F7  3094               	movlw	148
  2556  06F8  160A  118A  26B1  120A  118A  	fcall	_instCTRL
  2557                           
  2558                           ;mq135_module.h: 77: printToLCD("Air Purifier OFF");
  2559  06FD  302F               	movlw	low (STR_4-__stringbase)
  2560  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  2561  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  2562  0700  00A2               	movwf	printToLCD@str
  2563  0701  3080               	movlw	128
  2564  0702  00A3               	movwf	printToLCD@str+1
  2565  0703  120A  158A  210F   	fcall	_printToLCD
  2566                           
  2567                           ;mq135_module.h: 78: break;
  2568  0706  0008               	return
  2569  0707                     l2753:	
  2570                           ;mq135_module.h: 79: case 1:
  2571                           
  2572                           
  2573                           ;mq135_module.h: 80: instCTRL(0x94);
  2574  0707  3094               	movlw	148
  2575  0708  160A  118A  26B1  120A  118A  	fcall	_instCTRL
  2576                           
  2577                           ;mq135_module.h: 81: printToLCD("Air Purifier ON ");
  2578  070D  301E               	movlw	low (STR_5-__stringbase)
  2579  070E  1283               	bcf	3,5	;RP0=0, select bank0
  2580  070F  1303               	bcf	3,6	;RP1=0, select bank0
  2581  0710  00A2               	movwf	printToLCD@str
  2582  0711  3080               	movlw	128
  2583  0712  00A3               	movwf	printToLCD@str+1
  2584  0713  120A  158A  210F   	fcall	_printToLCD
  2585                           
  2586                           ;mq135_module.h: 83: }
  2587                           
  2588                           ;mq135_module.h: 82: break;
  2589  0716  0008               	return
  2590  0717                     l2759:	
  2591                           
  2592                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2593                           ; Switch size 1, requested type "space"
  2594                           ; Number of cases is 1, Range of values is 0 to 0
  2595                           ; switch strategies available:
  2596                           ; Name         Instructions Cycles
  2597                           ; simple_byte            4     3 (average)
  2598                           ; direct_byte           11     8 (fixed)
  2599                           ; jumptable            260     6 (fixed)
  2600                           ;	Chosen strategy is simple_byte
  2601  0717  1283               	bcf	3,5	;RP0=0, select bank0
  2602  0718  1303               	bcf	3,6	;RP1=0, select bank0
  2603  0719  085D               	movf	displayPPM@ppmHandler+1,w
  2604  071A  3A00               	xorlw	0	; case 0
  2605  071B  1903               	skipnz
  2606  071C  2F1E               	goto	l3007
  2607  071D  2F26               	goto	l98
  2608  071E                     l3007:	
  2609                           
  2610                           ; Switch size 1, requested type "space"
  2611                           ; Number of cases is 2, Range of values is 0 to 1
  2612                           ; switch strategies available:
  2613                           ; Name         Instructions Cycles
  2614                           ; simple_byte            7     4 (average)
  2615                           ; direct_byte           14     8 (fixed)
  2616                           ; jumptable            260     6 (fixed)
  2617                           ;	Chosen strategy is simple_byte
  2618  071E  085C               	movf	displayPPM@ppmHandler,w
  2619  071F  3A00               	xorlw	0	; case 0
  2620  0720  1903               	skipnz
  2621  0721  2EF7               	goto	l2749
  2622  0722  3A01               	xorlw	1	; case 1
  2623  0723  1903               	skipnz
  2624  0724  2F07               	goto	l2753
  2625  0725  2F26               	goto	l98
  2626  0726                     l98:	
  2627  0726  0008               	return
  2628  0727                     __end_of_displayPPM:	
  2629                           
  2630                           	psect	text7
  2631  03FF                     __ptext7:	
  2632 ;; *************** function _sprintf *****************
  2633 ;; Defined at:
  2634 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;  sp              1    wreg     PTR unsigned char 
  2637 ;;		 -> setMinutesStart@debugInfo(10), setHoursStart@debugInfo(10), displayTime@timeFormat(10), displayPPM@strBuffer(50)
      +, 
  2638 ;;  f               1   14[BANK0 ] PTR const unsigned char 
  2639 ;;		 -> STR_12(10), STR_11(10), STR_10(10), STR_9(10), 
  2640 ;;		 -> STR_8(10), STR_7(10), STR_6(16), STR_3(9), 
  2641 ;;		 -> STR_2(3), STR_1(6), 
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  sp              1   34[BANK0 ] PTR unsigned char 
  2644 ;;		 -> setMinutesStart@debugInfo(10), setHoursStart@debugInfo(10), displayTime@timeFormat(10), displayPPM@strBuffer(50)
      +, 
  2645 ;;  _val            4   26[BANK0 ] struct .
  2646 ;;  width           2   31[BANK0 ] int 
  2647 ;;  ccnt            2   24[BANK0 ] int 
  2648 ;;  c               1   33[BANK0 ] char 
  2649 ;;  flag            1   30[BANK0 ] unsigned char 
  2650 ;;  prec            1   23[BANK0 ] char 
  2651 ;;  ap              1   22[BANK0 ] PTR void [1]
  2652 ;;		 -> ?_sprintf(2), 
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  2   14[BANK0 ] int 
  2655 ;; Registers used:
  2656 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2662 ;;      Params:         0       5       0       0       0
  2663 ;;      Locals:         0      13       0       0       0
  2664 ;;      Temps:          0       3       0       0       0
  2665 ;;      Totals:         0      21       0       0       0
  2666 ;;Total ram usage:       21 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    3
  2669 ;; This function calls:
  2670 ;;		___lwdiv
  2671 ;;		___lwmod
  2672 ;;		___wmul
  2673 ;;		_isdigit
  2674 ;; This function is called by:
  2675 ;;		_displayPPM
  2676 ;;		_displayTime
  2677 ;;		_setHoursStart
  2678 ;;		_setMinutesStart
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           
  2683                           ;psect for function _sprintf
  2684  03FF                     _sprintf:	
  2685                           
  2686                           ;incstack = 0
  2687                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2688                           ;sprintf@sp stored from wreg
  2689  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  2690  0400  1303               	bcf	3,6	;RP1=0, select bank0
  2691  0401  00C2               	movwf	sprintf@sp
  2692                           
  2693                           ;doprnt.c: 494: va_list ap;
  2694                           ;doprnt.c: 499: signed char c;
  2695                           ;doprnt.c: 501: int width;
  2696                           ;doprnt.c: 506: signed char prec;
  2697                           ;doprnt.c: 508: unsigned char flag;
  2698                           ;doprnt.c: 510: int ccnt = 0;
  2699  0402  01B8               	clrf	sprintf@ccnt
  2700  0403  01B9               	clrf	sprintf@ccnt+1
  2701                           
  2702                           ;doprnt.c: 527: union {
  2703                           ;doprnt.c: 528: unsigned int _val;
  2704                           ;doprnt.c: 529: struct {
  2705                           ;doprnt.c: 530: const char * _cp;
  2706                           ;doprnt.c: 531: unsigned _len;
  2707                           ;doprnt.c: 532: } _str;
  2708                           ;doprnt.c: 533: } _val;
  2709                           ;doprnt.c: 542: *ap = __va_start();
  2710  0404  302F               	movlw	(?_sprintf+1)& (0+255)
  2711  0405  00B3               	movwf	??_sprintf
  2712  0406  0833               	movf	??_sprintf,w
  2713  0407  00B6               	movwf	sprintf@ap
  2714  0408                     l2711:	
  2715                           ;doprnt.c: 545: while(c = *f++) {
  2716                           
  2717  0408  3001               	movlw	1
  2718  0409  1283               	bcf	3,5	;RP0=0, select bank0
  2719  040A  1303               	bcf	3,6	;RP1=0, select bank0
  2720  040B  07AE               	addwf	sprintf@f,f
  2721  040C  30FF               	movlw	-1
  2722  040D  072E               	addwf	sprintf@f,w
  2723  040E  0084               	movwf	4
  2724  040F  120A  158A  200A  120A  118A  	fcall	stringdir
  2725  0414  00B3               	movwf	??_sprintf
  2726  0415  0833               	movf	??_sprintf,w
  2727  0416  00C1               	movwf	sprintf@c
  2728  0417  08C1               	movf	sprintf@c,f
  2729  0418  1903               	btfsc	3,2
  2730  0419  2DD5               	goto	l2713
  2731                           
  2732                           ;doprnt.c: 547: if(c != '%')
  2733  041A  0841               	movf	sprintf@c,w
  2734  041B  3A25               	xorlw	37
  2735  041C  1903               	skipnz
  2736  041D  2C30               	goto	l2605
  2737                           
  2738                           ;doprnt.c: 549: {
  2739                           ;doprnt.c: 550: ((*sp++ = (c)),(++ccnt));
  2740  041E  0841               	movf	sprintf@c,w
  2741  041F  00B3               	movwf	??_sprintf
  2742  0420  0842               	movf	sprintf@sp,w
  2743  0421  0084               	movwf	4
  2744  0422  0833               	movf	??_sprintf,w
  2745  0423  1383               	bcf	3,7	;select IRP bank0
  2746  0424  0080               	movwf	0
  2747  0425  3001               	movlw	1
  2748  0426  00B3               	movwf	??_sprintf
  2749  0427  0833               	movf	??_sprintf,w
  2750  0428  07C2               	addwf	sprintf@sp,f
  2751  0429  3001               	movlw	1
  2752  042A  07B8               	addwf	sprintf@ccnt,f
  2753  042B  1803               	skipnc
  2754  042C  0AB9               	incf	sprintf@ccnt+1,f
  2755  042D  3000               	movlw	0
  2756  042E  07B9               	addwf	sprintf@ccnt+1,f
  2757                           
  2758                           ;doprnt.c: 551: continue;
  2759  042F  2C08               	goto	l2711
  2760  0430                     l2605:	
  2761                           
  2762                           ;doprnt.c: 552: }
  2763                           ;doprnt.c: 555: width = 0;
  2764  0430  01BF               	clrf	sprintf@width
  2765  0431  01C0               	clrf	sprintf@width+1
  2766                           
  2767                           ;doprnt.c: 557: flag = 0;
  2768  0432  01BE               	clrf	sprintf@flag
  2769                           
  2770                           ;doprnt.c: 560: switch(*f) {
  2771                           
  2772                           ;doprnt.c: 559: for(;;) {
  2773  0433  2C39               	goto	l2611
  2774  0434                     l256:	
  2775                           ;doprnt.c: 588: case '0':
  2776                           
  2777                           
  2778                           ;doprnt.c: 589: flag |= 0x04;
  2779  0434  153E               	bsf	sprintf@flag,2
  2780                           
  2781                           ;doprnt.c: 590: f++;
  2782  0435  3001               	movlw	1
  2783  0436  00B3               	movwf	??_sprintf
  2784  0437  0833               	movf	??_sprintf,w
  2785  0438  07AE               	addwf	sprintf@f,f
  2786  0439                     l2611:	
  2787                           ;doprnt.c: 593: }
  2788                           
  2789                           ;doprnt.c: 591: continue;
  2790                           
  2791  0439  082E               	movf	sprintf@f,w
  2792  043A  0084               	movwf	4
  2793  043B  120A  158A  200A  120A  118A  	fcall	stringdir
  2794                           
  2795                           ; Switch size 1, requested type "space"
  2796                           ; Number of cases is 1, Range of values is 48 to 48
  2797                           ; switch strategies available:
  2798                           ; Name         Instructions Cycles
  2799                           ; simple_byte            4     3 (average)
  2800                           ; direct_byte           14    11 (fixed)
  2801                           ; jumptable            263     9 (fixed)
  2802                           ;	Chosen strategy is simple_byte
  2803  0440  3A30               	xorlw	48	; case 48
  2804  0441  1903               	skipnz
  2805  0442  2C34               	goto	l256
  2806  0443  2C44               	goto	l2613
  2807  0444                     l2613:	
  2808                           ;doprnt.c: 595: }
  2809                           
  2810                           ;doprnt.c: 594: break;
  2811                           
  2812                           
  2813                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  2814  0444  082E               	movf	sprintf@f,w
  2815  0445  0084               	movwf	4
  2816  0446  120A  158A  200A  120A  118A  	fcall	stringdir
  2817  044B  160A  118A  268E  120A  118A  	fcall	_isdigit
  2818  0450  1C03               	btfss	3,0
  2819  0451  2C94               	goto	l2627
  2820                           
  2821                           ;doprnt.c: 607: width = 0;
  2822  0452  1283               	bcf	3,5	;RP0=0, select bank0
  2823  0453  1303               	bcf	3,6	;RP1=0, select bank0
  2824  0454  01BF               	clrf	sprintf@width
  2825  0455  01C0               	clrf	sprintf@width+1
  2826  0456                     l2617:	
  2827                           ;doprnt.c: 608: do {
  2828                           
  2829                           
  2830                           ;doprnt.c: 609: width *= 10;
  2831  0456  300A               	movlw	10
  2832  0457  1283               	bcf	3,5	;RP0=0, select bank0
  2833  0458  1303               	bcf	3,6	;RP1=0, select bank0
  2834  0459  00A0               	movwf	___wmul@multiplier
  2835  045A  3000               	movlw	0
  2836  045B  00A1               	movwf	___wmul@multiplier+1
  2837  045C  0840               	movf	sprintf@width+1,w
  2838  045D  01A3               	clrf	___wmul@multiplicand+1
  2839  045E  07A3               	addwf	___wmul@multiplicand+1,f
  2840  045F  083F               	movf	sprintf@width,w
  2841  0460  01A2               	clrf	___wmul@multiplicand
  2842  0461  07A2               	addwf	___wmul@multiplicand,f
  2843  0462  160A  118A  27DB  120A  118A  	fcall	___wmul
  2844  0467  1283               	bcf	3,5	;RP0=0, select bank0
  2845  0468  1303               	bcf	3,6	;RP1=0, select bank0
  2846  0469  0821               	movf	?___wmul+1,w
  2847  046A  01C0               	clrf	sprintf@width+1
  2848  046B  07C0               	addwf	sprintf@width+1,f
  2849  046C  0820               	movf	?___wmul,w
  2850  046D  01BF               	clrf	sprintf@width
  2851  046E  07BF               	addwf	sprintf@width,f
  2852                           
  2853                           ;doprnt.c: 610: width += *f++ - '0';
  2854  046F  082E               	movf	sprintf@f,w
  2855  0470  0084               	movwf	4
  2856  0471  120A  158A  200A  120A  118A  	fcall	stringdir
  2857  0476  3ED0               	addlw	208
  2858  0477  00B3               	movwf	??_sprintf
  2859  0478  30FF               	movlw	255
  2860  0479  1803               	skipnc
  2861  047A  3000               	movlw	0
  2862  047B  00B4               	movwf	??_sprintf+1
  2863  047C  0833               	movf	??_sprintf,w
  2864  047D  07BF               	addwf	sprintf@width,f
  2865  047E  1803               	skipnc
  2866  047F  0AC0               	incf	sprintf@width+1,f
  2867  0480  0834               	movf	??_sprintf+1,w
  2868  0481  07C0               	addwf	sprintf@width+1,f
  2869  0482  3001               	movlw	1
  2870  0483  00B3               	movwf	??_sprintf
  2871  0484  0833               	movf	??_sprintf,w
  2872  0485  07AE               	addwf	sprintf@f,f
  2873                           
  2874                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  2875  0486  082E               	movf	sprintf@f,w
  2876  0487  0084               	movwf	4
  2877  0488  120A  158A  200A  120A  118A  	fcall	stringdir
  2878  048D  160A  118A  268E  120A  118A  	fcall	_isdigit
  2879  0492  1803               	btfsc	3,0
  2880  0493  2C56               	goto	l2617
  2881  0494                     l2627:	
  2882                           ;doprnt.c: 831: }
  2883                           
  2884                           ;doprnt.c: 822: continue;
  2885                           
  2886                           ;doprnt.c: 811: default:
  2887                           
  2888                           ;doprnt.c: 707: case 'i':
  2889                           ;doprnt.c: 708: break;
  2890                           
  2891                           ;doprnt.c: 706: case 'd':
  2892                           
  2893                           ;doprnt.c: 647: goto alldone;
  2894                           
  2895                           ;doprnt.c: 646: case 0:
  2896                           
  2897                           ;doprnt.c: 617: }
  2898                           ;doprnt.c: 644: switch(c = *f++) {
  2899                           
  2900  0494  3001               	movlw	1
  2901  0495  1283               	bcf	3,5	;RP0=0, select bank0
  2902  0496  1303               	bcf	3,6	;RP1=0, select bank0
  2903  0497  07AE               	addwf	sprintf@f,f
  2904  0498  30FF               	movlw	-1
  2905  0499  072E               	addwf	sprintf@f,w
  2906  049A  0084               	movwf	4
  2907  049B  120A  158A  200A  120A  118A  	fcall	stringdir
  2908  04A0  00C1               	movwf	sprintf@c
  2909                           
  2910                           ; Switch size 1, requested type "space"
  2911                           ; Number of cases is 3, Range of values is 0 to 105
  2912                           ; switch strategies available:
  2913                           ; Name         Instructions Cycles
  2914                           ; simple_byte           10     6 (average)
  2915                           ; jumptable            260     6 (fixed)
  2916                           ;	Chosen strategy is simple_byte
  2917  04A1  3A00               	xorlw	0	; case 0
  2918  04A2  1903               	skipnz
  2919  04A3  2DD5               	goto	l2713
  2920  04A4  3A64               	xorlw	100	; case 100
  2921  04A5  1903               	skipnz
  2922  04A6  2CAB               	goto	l2629
  2923  04A7  3A0D               	xorlw	13	; case 105
  2924  04A8  1903               	skipnz
  2925  04A9  2CAB               	goto	l2629
  2926  04AA  2C08               	goto	l2711
  2927  04AB                     l2629:	
  2928                           
  2929                           ;doprnt.c: 1262: {
  2930                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2931  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  2932  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  2933  04AD  0836               	movf	sprintf@ap,w
  2934  04AE  0084               	movwf	4
  2935  04AF  1383               	bcf	3,7	;select IRP bank0
  2936  04B0  0800               	movf	0,w
  2937  04B1  00BA               	movwf	sprintf@_val
  2938  04B2  0A84               	incf	4,f
  2939  04B3  0800               	movf	0,w
  2940  04B4  00BB               	movwf	sprintf@_val+1
  2941  04B5  3002               	movlw	2
  2942  04B6  00B3               	movwf	??_sprintf
  2943  04B7  0833               	movf	??_sprintf,w
  2944  04B8  07B6               	addwf	sprintf@ap,f
  2945                           
  2946                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  2947  04B9  1FBB               	btfss	sprintf@_val+1,7
  2948  04BA  2CC4               	goto	l2639
  2949                           
  2950                           ;doprnt.c: 1271: flag |= 0x03;
  2951  04BB  3003               	movlw	3
  2952  04BC  00B3               	movwf	??_sprintf
  2953  04BD  0833               	movf	??_sprintf,w
  2954  04BE  04BE               	iorwf	sprintf@flag,f
  2955                           
  2956                           ;doprnt.c: 1272: _val._val = -_val._val;
  2957  04BF  09BA               	comf	sprintf@_val,f
  2958  04C0  09BB               	comf	sprintf@_val+1,f
  2959  04C1  0ABA               	incf	sprintf@_val,f
  2960  04C2  1903               	skipnz
  2961  04C3  0ABB               	incf	sprintf@_val+1,f
  2962  04C4                     l2639:	
  2963                           
  2964                           ;doprnt.c: 1273: }
  2965                           ;doprnt.c: 1275: }
  2966                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2967  04C4  01C1               	clrf	sprintf@c
  2968  04C5  0AC1               	incf	sprintf@c,f
  2969  04C6  0841               	movf	sprintf@c,w
  2970  04C7  3A05               	xorlw	5
  2971  04C8  1903               	btfsc	3,2
  2972  04C9  2CEB               	goto	l2651
  2973  04CA                     l2643:	
  2974                           
  2975                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2976  04CA  0841               	movf	sprintf@c,w
  2977  04CB  00B3               	movwf	??_sprintf
  2978  04CC  0733               	addwf	??_sprintf,w
  2979  04CD  3E01               	addlw	low (_dpowers-__stringbase)
  2980  04CE  0084               	movwf	4
  2981  04CF  120A  158A  200A  120A  118A  	fcall	stringdir
  2982  04D4  00B4               	movwf	??_sprintf+1
  2983  04D5  120A  158A  200A  120A  118A  	fcall	stringdir
  2984  04DA  00B5               	movwf	??_sprintf+2
  2985  04DB  0835               	movf	??_sprintf+2,w
  2986  04DC  023B               	subwf	sprintf@_val+1,w
  2987  04DD  1D03               	skipz
  2988  04DE  2CE1               	goto	u3475
  2989  04DF  0834               	movf	??_sprintf+1,w
  2990  04E0  023A               	subwf	sprintf@_val,w
  2991  04E1                     u3475:	
  2992  04E1  1C03               	btfss	3,0
  2993  04E2  2CEB               	goto	l2651
  2994                           
  2995                           ;doprnt.c: 1316: break;
  2996  04E3  3001               	movlw	1
  2997  04E4  00B3               	movwf	??_sprintf
  2998  04E5  0833               	movf	??_sprintf,w
  2999  04E6  07C1               	addwf	sprintf@c,f
  3000  04E7  0841               	movf	sprintf@c,w
  3001  04E8  3A05               	xorlw	5
  3002  04E9  1D03               	skipz
  3003  04EA  2CCA               	goto	l2643
  3004  04EB                     l2651:	
  3005                           
  3006                           ;doprnt.c: 1354: if(width && flag & 0x03)
  3007  04EB  0840               	movf	sprintf@width+1,w
  3008  04EC  043F               	iorwf	sprintf@width,w
  3009  04ED  1903               	skipnz
  3010  04EE  2CF9               	goto	l274
  3011  04EF  083E               	movf	sprintf@flag,w
  3012  04F0  3903               	andlw	3
  3013  04F1  1903               	btfsc	3,2
  3014  04F2  2CF9               	goto	l274
  3015                           
  3016                           ;doprnt.c: 1355: width--;
  3017  04F3  30FF               	movlw	255
  3018  04F4  07BF               	addwf	sprintf@width,f
  3019  04F5  1803               	skipnc
  3020  04F6  0AC0               	incf	sprintf@width+1,f
  3021  04F7  30FF               	movlw	255
  3022  04F8  07C0               	addwf	sprintf@width+1,f
  3023  04F9                     l274:	
  3024                           
  3025                           ;doprnt.c: 1390: if(width > c)
  3026  04F9  0841               	movf	sprintf@c,w
  3027  04FA  00B3               	movwf	??_sprintf
  3028  04FB  01B4               	clrf	??_sprintf+1
  3029  04FC  1BB3               	btfsc	??_sprintf,7
  3030  04FD  03B4               	decf	??_sprintf+1,f
  3031  04FE  0834               	movf	??_sprintf+1,w
  3032  04FF  3A80               	xorlw	128
  3033  0500  00B5               	movwf	??_sprintf+2
  3034  0501  0840               	movf	sprintf@width+1,w
  3035  0502  3A80               	xorlw	128
  3036  0503  0235               	subwf	??_sprintf+2,w
  3037  0504  1D03               	skipz
  3038  0505  2D08               	goto	u3515
  3039  0506  083F               	movf	sprintf@width,w
  3040  0507  0233               	subwf	??_sprintf,w
  3041  0508                     u3515:	
  3042  0508  1803               	skipnc
  3043  0509  2D18               	goto	l2659
  3044                           
  3045                           ;doprnt.c: 1391: width -= c;
  3046  050A  1283               	bcf	3,5	;RP0=0, select bank0
  3047  050B  1303               	bcf	3,6	;RP1=0, select bank0
  3048  050C  0841               	movf	sprintf@c,w
  3049  050D  00B3               	movwf	??_sprintf
  3050  050E  01B4               	clrf	??_sprintf+1
  3051  050F  1BB3               	btfsc	??_sprintf,7
  3052  0510  03B4               	decf	??_sprintf+1,f
  3053  0511  0833               	movf	??_sprintf,w
  3054  0512  02BF               	subwf	sprintf@width,f
  3055  0513  0834               	movf	??_sprintf+1,w
  3056  0514  1C03               	skipc
  3057  0515  03C0               	decf	sprintf@width+1,f
  3058  0516  02C0               	subwf	sprintf@width+1,f
  3059  0517  2D1C               	goto	l2661
  3060  0518                     l2659:	
  3061                           
  3062                           ;doprnt.c: 1392: else
  3063                           ;doprnt.c: 1393: width = 0;
  3064  0518  1283               	bcf	3,5	;RP0=0, select bank0
  3065  0519  1303               	bcf	3,6	;RP1=0, select bank0
  3066  051A  01BF               	clrf	sprintf@width
  3067  051B  01C0               	clrf	sprintf@width+1
  3068  051C                     l2661:	
  3069                           
  3070                           ;doprnt.c: 1396: if(flag & 0x04) {
  3071  051C  1D3E               	btfss	sprintf@flag,2
  3072  051D  2D4F               	goto	l2681
  3073                           
  3074                           ;doprnt.c: 1401: if(flag & 0x03)
  3075  051E  083E               	movf	sprintf@flag,w
  3076  051F  3903               	andlw	3
  3077  0520  1903               	btfsc	3,2
  3078  0521  2D33               	goto	l2671
  3079                           
  3080                           ;doprnt.c: 1402: ((*sp++ = ('-')),(++ccnt));
  3081  0522  302D               	movlw	45
  3082  0523  00B3               	movwf	??_sprintf
  3083  0524  0842               	movf	sprintf@sp,w
  3084  0525  0084               	movwf	4
  3085  0526  0833               	movf	??_sprintf,w
  3086  0527  1383               	bcf	3,7	;select IRP bank0
  3087  0528  0080               	movwf	0
  3088  0529  3001               	movlw	1
  3089  052A  00B3               	movwf	??_sprintf
  3090  052B  0833               	movf	??_sprintf,w
  3091  052C  07C2               	addwf	sprintf@sp,f
  3092  052D  3001               	movlw	1
  3093  052E  07B8               	addwf	sprintf@ccnt,f
  3094  052F  1803               	skipnc
  3095  0530  0AB9               	incf	sprintf@ccnt+1,f
  3096  0531  3000               	movlw	0
  3097  0532  07B9               	addwf	sprintf@ccnt+1,f
  3098  0533                     l2671:	
  3099                           
  3100                           ;doprnt.c: 1424: if(width)
  3101  0533  0840               	movf	sprintf@width+1,w
  3102  0534  043F               	iorwf	sprintf@width,w
  3103  0535  1903               	skipnz
  3104  0536  2D83               	goto	l2699
  3105                           
  3106                           ;doprnt.c: 1426: ((*sp++ = ('0')),(++ccnt));
  3107                           
  3108                           ;doprnt.c: 1425: do
  3109  0537  3030               	movlw	48
  3110  0538  00B3               	movwf	??_sprintf
  3111  0539  0842               	movf	sprintf@sp,w
  3112  053A  0084               	movwf	4
  3113  053B  0833               	movf	??_sprintf,w
  3114  053C  1383               	bcf	3,7	;select IRP bank0
  3115  053D  0080               	movwf	0
  3116  053E  3001               	movlw	1
  3117  053F  00B3               	movwf	??_sprintf
  3118  0540  0833               	movf	??_sprintf,w
  3119  0541  07C2               	addwf	sprintf@sp,f
  3120  0542  3001               	movlw	1
  3121  0543  07B8               	addwf	sprintf@ccnt,f
  3122  0544  1803               	skipnc
  3123  0545  0AB9               	incf	sprintf@ccnt+1,f
  3124  0546  3000               	movlw	0
  3125  0547  07B9               	addwf	sprintf@ccnt+1,f
  3126                           
  3127                           ;doprnt.c: 1427: while(--width);
  3128  0548  30FF               	movlw	255
  3129  0549  07BF               	addwf	sprintf@width,f
  3130  054A  1803               	skipnc
  3131  054B  0AC0               	incf	sprintf@width+1,f
  3132  054C  30FF               	movlw	255
  3133  054D  07C0               	addwf	sprintf@width+1,f
  3134  054E  2D33               	goto	l2671
  3135  054F                     l2681:	
  3136                           ;doprnt.c: 1429: } else
  3137                           
  3138                           
  3139                           ;doprnt.c: 1431: {
  3140                           ;doprnt.c: 1433: if(width
  3141                           ;doprnt.c: 1437: )
  3142  054F  0840               	movf	sprintf@width+1,w
  3143  0550  043F               	iorwf	sprintf@width,w
  3144  0551  1903               	skipnz
  3145  0552  2D6E               	goto	l2691
  3146  0553                     l2683:	
  3147                           ;doprnt.c: 1438: do
  3148                           
  3149                           
  3150                           ;doprnt.c: 1439: ((*sp++ = (' ')),(++ccnt));
  3151  0553  3020               	movlw	32
  3152  0554  00B3               	movwf	??_sprintf
  3153  0555  0842               	movf	sprintf@sp,w
  3154  0556  0084               	movwf	4
  3155  0557  0833               	movf	??_sprintf,w
  3156  0558  1383               	bcf	3,7	;select IRP bank0
  3157  0559  0080               	movwf	0
  3158  055A  3001               	movlw	1
  3159  055B  00B3               	movwf	??_sprintf
  3160  055C  0833               	movf	??_sprintf,w
  3161  055D  07C2               	addwf	sprintf@sp,f
  3162  055E  3001               	movlw	1
  3163  055F  07B8               	addwf	sprintf@ccnt,f
  3164  0560  1803               	skipnc
  3165  0561  0AB9               	incf	sprintf@ccnt+1,f
  3166  0562  3000               	movlw	0
  3167  0563  07B9               	addwf	sprintf@ccnt+1,f
  3168                           
  3169                           ;doprnt.c: 1440: while(--width);
  3170  0564  30FF               	movlw	255
  3171  0565  07BF               	addwf	sprintf@width,f
  3172  0566  1803               	skipnc
  3173  0567  0AC0               	incf	sprintf@width+1,f
  3174  0568  30FF               	movlw	255
  3175  0569  07C0               	addwf	sprintf@width+1,f
  3176  056A  0840               	movf	sprintf@width+1,w
  3177  056B  043F               	iorwf	sprintf@width,w
  3178  056C  1D03               	skipz
  3179  056D  2D53               	goto	l2683
  3180  056E                     l2691:	
  3181                           
  3182                           ;doprnt.c: 1447: if(flag & 0x03)
  3183  056E  083E               	movf	sprintf@flag,w
  3184  056F  3903               	andlw	3
  3185  0570  1903               	btfsc	3,2
  3186  0571  2D83               	goto	l2699
  3187                           
  3188                           ;doprnt.c: 1448: ((*sp++ = ('-')),(++ccnt));
  3189  0572  302D               	movlw	45
  3190  0573  00B3               	movwf	??_sprintf
  3191  0574  0842               	movf	sprintf@sp,w
  3192  0575  0084               	movwf	4
  3193  0576  0833               	movf	??_sprintf,w
  3194  0577  1383               	bcf	3,7	;select IRP bank0
  3195  0578  0080               	movwf	0
  3196  0579  3001               	movlw	1
  3197  057A  00B3               	movwf	??_sprintf
  3198  057B  0833               	movf	??_sprintf,w
  3199  057C  07C2               	addwf	sprintf@sp,f
  3200  057D  3001               	movlw	1
  3201  057E  07B8               	addwf	sprintf@ccnt,f
  3202  057F  1803               	skipnc
  3203  0580  0AB9               	incf	sprintf@ccnt+1,f
  3204  0581  3000               	movlw	0
  3205  0582  07B9               	addwf	sprintf@ccnt+1,f
  3206  0583                     l2699:	
  3207                           
  3208                           ;doprnt.c: 1478: }
  3209                           ;doprnt.c: 1481: prec = c;
  3210  0583  0841               	movf	sprintf@c,w
  3211  0584  00B3               	movwf	??_sprintf
  3212  0585  0833               	movf	??_sprintf,w
  3213  0586  00B7               	movwf	sprintf@prec
  3214  0587                     l2709:	
  3215                           ;doprnt.c: 1483: while(prec--) {
  3216                           
  3217  0587  30FF               	movlw	-1
  3218  0588  00B3               	movwf	??_sprintf
  3219  0589  0833               	movf	??_sprintf,w
  3220  058A  07B7               	addwf	sprintf@prec,f
  3221  058B  0837               	movf	sprintf@prec,w
  3222  058C  3AFF               	xorlw	-1
  3223  058D  1903               	btfsc	3,2
  3224  058E  2C08               	goto	l2711
  3225                           
  3226                           ;doprnt.c: 1487: {
  3227                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  3228  058F  300A               	movlw	10
  3229  0590  00A8               	movwf	___lwmod@divisor
  3230  0591  3000               	movlw	0
  3231  0592  00A9               	movwf	___lwmod@divisor+1
  3232  0593  0837               	movf	sprintf@prec,w
  3233  0594  00B3               	movwf	??_sprintf
  3234  0595  0733               	addwf	??_sprintf,w
  3235  0596  3E01               	addlw	low (_dpowers-__stringbase)
  3236  0597  0084               	movwf	4
  3237  0598  120A  158A  200A  120A  118A  	fcall	stringdir
  3238  059D  00A0               	movwf	___lwdiv@divisor
  3239  059E  120A  158A  200A  120A  118A  	fcall	stringdir
  3240  05A3  00A1               	movwf	___lwdiv@divisor+1
  3241  05A4  083B               	movf	sprintf@_val+1,w
  3242  05A5  01A3               	clrf	___lwdiv@dividend+1
  3243  05A6  07A3               	addwf	___lwdiv@dividend+1,f
  3244  05A7  083A               	movf	sprintf@_val,w
  3245  05A8  01A2               	clrf	___lwdiv@dividend
  3246  05A9  07A2               	addwf	___lwdiv@dividend,f
  3247  05AA  120A  158A  2170  120A  118A  	fcall	___lwdiv
  3248  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  3249  05B0  1303               	bcf	3,6	;RP1=0, select bank0
  3250  05B1  0821               	movf	?___lwdiv+1,w
  3251  05B2  01AB               	clrf	___lwmod@dividend+1
  3252  05B3  07AB               	addwf	___lwmod@dividend+1,f
  3253  05B4  0820               	movf	?___lwdiv,w
  3254  05B5  01AA               	clrf	___lwmod@dividend
  3255  05B6  07AA               	addwf	___lwmod@dividend,f
  3256  05B7  120A  158A  213A  120A  118A  	fcall	___lwmod
  3257  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  3258  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  3259  05BE  0828               	movf	?___lwmod,w
  3260  05BF  3E30               	addlw	48
  3261  05C0  00B4               	movwf	??_sprintf+1
  3262  05C1  0834               	movf	??_sprintf+1,w
  3263  05C2  00C1               	movwf	sprintf@c
  3264                           
  3265                           ;doprnt.c: 1532: }
  3266                           ;doprnt.c: 1533: ((*sp++ = (c)),(++ccnt));
  3267  05C3  0841               	movf	sprintf@c,w
  3268  05C4  00B3               	movwf	??_sprintf
  3269  05C5  0842               	movf	sprintf@sp,w
  3270  05C6  0084               	movwf	4
  3271  05C7  0833               	movf	??_sprintf,w
  3272  05C8  1383               	bcf	3,7	;select IRP bank0
  3273  05C9  0080               	movwf	0
  3274  05CA  3001               	movlw	1
  3275  05CB  00B3               	movwf	??_sprintf
  3276  05CC  0833               	movf	??_sprintf,w
  3277  05CD  07C2               	addwf	sprintf@sp,f
  3278  05CE  3001               	movlw	1
  3279  05CF  07B8               	addwf	sprintf@ccnt,f
  3280  05D0  1803               	skipnc
  3281  05D1  0AB9               	incf	sprintf@ccnt+1,f
  3282  05D2  3000               	movlw	0
  3283  05D3  07B9               	addwf	sprintf@ccnt+1,f
  3284  05D4  2D87               	goto	l2709
  3285  05D5                     l2713:	
  3286                           ;doprnt.c: 1534: }
  3287                           ;doprnt.c: 1542: }
  3288                           ;doprnt.c: 1544: alldone:
  3289                           
  3290                           
  3291                           ;doprnt.c: 1547: *sp = 0;
  3292  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  3293  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  3294  05D7  0842               	movf	sprintf@sp,w
  3295  05D8  0084               	movwf	4
  3296  05D9  1383               	bcf	3,7	;select IRP bank0
  3297  05DA  0180               	clrf	0
  3298                           
  3299                           ;doprnt.c: 1549: return ccnt;
  3300  05DB  0839               	movf	sprintf@ccnt+1,w
  3301  05DC  01AF               	clrf	?_sprintf+1
  3302  05DD  07AF               	addwf	?_sprintf+1,f
  3303  05DE  0838               	movf	sprintf@ccnt,w
  3304  05DF  01AE               	clrf	?_sprintf
  3305  05E0  07AE               	addwf	?_sprintf,f
  3306  05E1  0008               	return
  3307  05E2                     __end_of_sprintf:	
  3308                           
  3309                           	psect	text8
  3310  168E                     __ptext8:	
  3311 ;; *************** function _isdigit *****************
  3312 ;; Defined at:
  3313 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  c               1    wreg     unsigned char 
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;  c               1    1[BANK0 ] unsigned char 
  3318 ;; Return value:  Size  Location     Type
  3319 ;;		None               void
  3320 ;; Registers used:
  3321 ;;		wreg, status,2, status,0
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3327 ;;      Params:         0       0       0       0       0
  3328 ;;      Locals:         0       2       0       0       0
  3329 ;;      Temps:          0       0       0       0       0
  3330 ;;      Totals:         0       2       0       0       0
  3331 ;;Total ram usage:        2 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; Hardware stack levels required when called:    2
  3334 ;; This function calls:
  3335 ;;		Nothing
  3336 ;; This function is called by:
  3337 ;;		_sprintf
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           
  3342                           ;psect for function _isdigit
  3343  168E                     _isdigit:	
  3344                           
  3345                           ;incstack = 0
  3346                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3347                           ;isdigit@c stored from wreg
  3348  168E  1283               	bcf	3,5	;RP0=0, select bank0
  3349  168F  1303               	bcf	3,6	;RP1=0, select bank0
  3350  1690  00A1               	movwf	isdigit@c
  3351  1691  01A0               	clrf	_isdigit$402
  3352  1692  303A               	movlw	58
  3353  1693  0221               	subwf	isdigit@c,w
  3354  1694  1803               	skipnc
  3355  1695  2E9C               	goto	l2569
  3356  1696  3030               	movlw	48
  3357  1697  0221               	subwf	isdigit@c,w
  3358  1698  1C03               	skipc
  3359  1699  2E9C               	goto	l2569
  3360  169A  01A0               	clrf	_isdigit$402
  3361  169B  0AA0               	incf	_isdigit$402,f
  3362  169C                     l2569:	
  3363  169C  0C20               	rrf	_isdigit$402,w
  3364  169D  0008               	return
  3365  169E                     __end_of_isdigit:	
  3366                           
  3367                           	psect	text9
  3368  17DB                     __ptext9:	
  3369 ;; *************** function ___wmul *****************
  3370 ;; Defined at:
  3371 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3374 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  product         2    4[BANK0 ] unsigned int 
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  2    0[BANK0 ] unsigned int 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3386 ;;      Params:         0       4       0       0       0
  3387 ;;      Locals:         0       2       0       0       0
  3388 ;;      Temps:          0       0       0       0       0
  3389 ;;      Totals:         0       6       0       0       0
  3390 ;;Total ram usage:        6 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    2
  3393 ;; This function calls:
  3394 ;;		Nothing
  3395 ;; This function is called by:
  3396 ;;		_sprintf
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           
  3401                           ;psect for function ___wmul
  3402  17DB                     ___wmul:	
  3403                           
  3404                           ;incstack = 0
  3405                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3406  17DB  1283               	bcf	3,5	;RP0=0, select bank0
  3407  17DC  1303               	bcf	3,6	;RP1=0, select bank0
  3408  17DD  01A4               	clrf	___wmul@product
  3409  17DE  01A5               	clrf	___wmul@product+1
  3410  17DF                     l2575:	
  3411  17DF  1C20               	btfss	___wmul@multiplier,0
  3412  17E0  2FE7               	goto	l375
  3413  17E1  0822               	movf	___wmul@multiplicand,w
  3414  17E2  07A4               	addwf	___wmul@product,f
  3415  17E3  1803               	skipnc
  3416  17E4  0AA5               	incf	___wmul@product+1,f
  3417  17E5  0823               	movf	___wmul@multiplicand+1,w
  3418  17E6  07A5               	addwf	___wmul@product+1,f
  3419  17E7                     l375:	
  3420  17E7  3001               	movlw	1
  3421  17E8                     u3385:	
  3422  17E8  1003               	clrc
  3423  17E9  0DA2               	rlf	___wmul@multiplicand,f
  3424  17EA  0DA3               	rlf	___wmul@multiplicand+1,f
  3425  17EB  3EFF               	addlw	-1
  3426  17EC  1D03               	skipz
  3427  17ED  2FE8               	goto	u3385
  3428  17EE  3001               	movlw	1
  3429  17EF                     u3395:	
  3430  17EF  1003               	clrc
  3431  17F0  0CA1               	rrf	___wmul@multiplier+1,f
  3432  17F1  0CA0               	rrf	___wmul@multiplier,f
  3433  17F2  3EFF               	addlw	-1
  3434  17F3  1D03               	skipz
  3435  17F4  2FEF               	goto	u3395
  3436  17F5  0821               	movf	___wmul@multiplier+1,w
  3437  17F6  0420               	iorwf	___wmul@multiplier,w
  3438  17F7  1D03               	skipz
  3439  17F8  2FDF               	goto	l2575
  3440  17F9  0825               	movf	___wmul@product+1,w
  3441  17FA  01A1               	clrf	?___wmul+1
  3442  17FB  07A1               	addwf	?___wmul+1,f
  3443  17FC  0824               	movf	___wmul@product,w
  3444  17FD  01A0               	clrf	?___wmul
  3445  17FE  07A0               	addwf	?___wmul,f
  3446  17FF  0008               	return
  3447  1800                     __end_of___wmul:	
  3448                           
  3449                           	psect	text10
  3450  093A                     __ptext10:	
  3451 ;; *************** function ___lwmod *****************
  3452 ;; Defined at:
  3453 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;  divisor         2    8[BANK0 ] unsigned int 
  3456 ;;  dividend        2   10[BANK0 ] unsigned int 
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;  counter         1   13[BANK0 ] unsigned char 
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  2    8[BANK0 ] unsigned int 
  3461 ;; Registers used:
  3462 ;;		wreg, status,2, status,0
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3468 ;;      Params:         0       4       0       0       0
  3469 ;;      Locals:         0       1       0       0       0
  3470 ;;      Temps:          0       1       0       0       0
  3471 ;;      Totals:         0       6       0       0       0
  3472 ;;Total ram usage:        6 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:    2
  3475 ;; This function calls:
  3476 ;;		Nothing
  3477 ;; This function is called by:
  3478 ;;		_sprintf
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           
  3483                           ;psect for function ___lwmod
  3484  093A                     ___lwmod:	
  3485                           
  3486                           ;incstack = 0
  3487                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3488  093A  1283               	bcf	3,5	;RP0=0, select bank0
  3489  093B  1303               	bcf	3,6	;RP1=0, select bank0
  3490  093C  0829               	movf	___lwmod@divisor+1,w
  3491  093D  0428               	iorwf	___lwmod@divisor,w
  3492  093E  1903               	skipnz
  3493  093F  2969               	goto	l1783
  3494  0940  01AD               	clrf	___lwmod@counter
  3495  0941  0AAD               	incf	___lwmod@counter,f
  3496  0942                     l1773:	
  3497  0942  1BA9               	btfsc	___lwmod@divisor+1,7
  3498  0943  2950               	goto	l1775
  3499  0944  3001               	movlw	1
  3500  0945                     u1935:	
  3501  0945  1003               	clrc
  3502  0946  0DA8               	rlf	___lwmod@divisor,f
  3503  0947  0DA9               	rlf	___lwmod@divisor+1,f
  3504  0948  3EFF               	addlw	-1
  3505  0949  1D03               	skipz
  3506  094A  2945               	goto	u1935
  3507  094B  3001               	movlw	1
  3508  094C  00AC               	movwf	??___lwmod
  3509  094D  082C               	movf	??___lwmod,w
  3510  094E  07AD               	addwf	___lwmod@counter,f
  3511  094F  2942               	goto	l1773
  3512  0950                     l1775:	
  3513  0950  0829               	movf	___lwmod@divisor+1,w
  3514  0951  022B               	subwf	___lwmod@dividend+1,w
  3515  0952  1D03               	skipz
  3516  0953  2956               	goto	u1955
  3517  0954  0828               	movf	___lwmod@divisor,w
  3518  0955  022A               	subwf	___lwmod@dividend,w
  3519  0956                     u1955:	
  3520  0956  1C03               	skipc
  3521  0957  295E               	goto	l1779
  3522  0958  0828               	movf	___lwmod@divisor,w
  3523  0959  02AA               	subwf	___lwmod@dividend,f
  3524  095A  0829               	movf	___lwmod@divisor+1,w
  3525  095B  1C03               	skipc
  3526  095C  03AB               	decf	___lwmod@dividend+1,f
  3527  095D  02AB               	subwf	___lwmod@dividend+1,f
  3528  095E                     l1779:	
  3529  095E  3001               	movlw	1
  3530  095F                     u1965:	
  3531  095F  1003               	clrc
  3532  0960  0CA9               	rrf	___lwmod@divisor+1,f
  3533  0961  0CA8               	rrf	___lwmod@divisor,f
  3534  0962  3EFF               	addlw	-1
  3535  0963  1D03               	skipz
  3536  0964  295F               	goto	u1965
  3537  0965  3001               	movlw	1
  3538  0966  02AD               	subwf	___lwmod@counter,f
  3539  0967  1D03               	btfss	3,2
  3540  0968  2950               	goto	l1775
  3541  0969                     l1783:	
  3542  0969  082B               	movf	___lwmod@dividend+1,w
  3543  096A  01A9               	clrf	?___lwmod+1
  3544  096B  07A9               	addwf	?___lwmod+1,f
  3545  096C  082A               	movf	___lwmod@dividend,w
  3546  096D  01A8               	clrf	?___lwmod
  3547  096E  07A8               	addwf	?___lwmod,f
  3548  096F  0008               	return
  3549  0970                     __end_of___lwmod:	
  3550                           
  3551                           	psect	text11
  3552  0970                     __ptext11:	
  3553 ;; *************** function ___lwdiv *****************
  3554 ;; Defined at:
  3555 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;  divisor         2    0[BANK0 ] unsigned int 
  3558 ;;  dividend        2    2[BANK0 ] unsigned int 
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;  quotient        2    5[BANK0 ] unsigned int 
  3561 ;;  counter         1    7[BANK0 ] unsigned char 
  3562 ;; Return value:  Size  Location     Type
  3563 ;;                  2    0[BANK0 ] unsigned int 
  3564 ;; Registers used:
  3565 ;;		wreg, status,2, status,0
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3571 ;;      Params:         0       4       0       0       0
  3572 ;;      Locals:         0       3       0       0       0
  3573 ;;      Temps:          0       1       0       0       0
  3574 ;;      Totals:         0       8       0       0       0
  3575 ;;Total ram usage:        8 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    2
  3578 ;; This function calls:
  3579 ;;		Nothing
  3580 ;; This function is called by:
  3581 ;;		_sprintf
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           
  3586                           ;psect for function ___lwdiv
  3587  0970                     ___lwdiv:	
  3588                           
  3589                           ;incstack = 0
  3590                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3591  0970  1283               	bcf	3,5	;RP0=0, select bank0
  3592  0971  1303               	bcf	3,6	;RP1=0, select bank0
  3593  0972  01A5               	clrf	___lwdiv@quotient
  3594  0973  01A6               	clrf	___lwdiv@quotient+1
  3595  0974  0821               	movf	___lwdiv@divisor+1,w
  3596  0975  0420               	iorwf	___lwdiv@divisor,w
  3597  0976  1903               	skipnz
  3598  0977  29A9               	goto	l1761
  3599  0978  01A7               	clrf	___lwdiv@counter
  3600  0979  0AA7               	incf	___lwdiv@counter,f
  3601  097A                     l1749:	
  3602  097A  1BA1               	btfsc	___lwdiv@divisor+1,7
  3603  097B  2988               	goto	l1751
  3604  097C  3001               	movlw	1
  3605  097D                     u1865:	
  3606  097D  1003               	clrc
  3607  097E  0DA0               	rlf	___lwdiv@divisor,f
  3608  097F  0DA1               	rlf	___lwdiv@divisor+1,f
  3609  0980  3EFF               	addlw	-1
  3610  0981  1D03               	skipz
  3611  0982  297D               	goto	u1865
  3612  0983  3001               	movlw	1
  3613  0984  00A4               	movwf	??___lwdiv
  3614  0985  0824               	movf	??___lwdiv,w
  3615  0986  07A7               	addwf	___lwdiv@counter,f
  3616  0987  297A               	goto	l1749
  3617  0988                     l1751:	
  3618  0988  3001               	movlw	1
  3619  0989                     u1885:	
  3620  0989  1003               	clrc
  3621  098A  0DA5               	rlf	___lwdiv@quotient,f
  3622  098B  0DA6               	rlf	___lwdiv@quotient+1,f
  3623  098C  3EFF               	addlw	-1
  3624  098D  1D03               	skipz
  3625  098E  2989               	goto	u1885
  3626  098F  0821               	movf	___lwdiv@divisor+1,w
  3627  0990  0223               	subwf	___lwdiv@dividend+1,w
  3628  0991  1D03               	skipz
  3629  0992  2995               	goto	u1895
  3630  0993  0820               	movf	___lwdiv@divisor,w
  3631  0994  0222               	subwf	___lwdiv@dividend,w
  3632  0995                     u1895:	
  3633  0995  1C03               	skipc
  3634  0996  299E               	goto	l1757
  3635  0997  0820               	movf	___lwdiv@divisor,w
  3636  0998  02A2               	subwf	___lwdiv@dividend,f
  3637  0999  0821               	movf	___lwdiv@divisor+1,w
  3638  099A  1C03               	skipc
  3639  099B  03A3               	decf	___lwdiv@dividend+1,f
  3640  099C  02A3               	subwf	___lwdiv@dividend+1,f
  3641  099D  1425               	bsf	___lwdiv@quotient,0
  3642  099E                     l1757:	
  3643  099E  3001               	movlw	1
  3644  099F                     u1905:	
  3645  099F  1003               	clrc
  3646  09A0  0CA1               	rrf	___lwdiv@divisor+1,f
  3647  09A1  0CA0               	rrf	___lwdiv@divisor,f
  3648  09A2  3EFF               	addlw	-1
  3649  09A3  1D03               	skipz
  3650  09A4  299F               	goto	u1905
  3651  09A5  3001               	movlw	1
  3652  09A6  02A7               	subwf	___lwdiv@counter,f
  3653  09A7  1D03               	btfss	3,2
  3654  09A8  2988               	goto	l1751
  3655  09A9                     l1761:	
  3656  09A9  0826               	movf	___lwdiv@quotient+1,w
  3657  09AA  01A1               	clrf	?___lwdiv+1
  3658  09AB  07A1               	addwf	?___lwdiv+1,f
  3659  09AC  0825               	movf	___lwdiv@quotient,w
  3660  09AD  01A0               	clrf	?___lwdiv
  3661  09AE  07A0               	addwf	?___lwdiv,f
  3662  09AF  0008               	return
  3663  09B0                     __end_of___lwdiv:	
  3664                           
  3665                           	psect	text12
  3666  0B8A                     __ptext12:	
  3667 ;; *************** function ___fttol *****************
  3668 ;; Defined at:
  3669 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  f1              3   46[BANK0 ] float 
  3672 ;; Auto vars:     Size  Location     Type
  3673 ;;  lval            4   55[BANK0 ] unsigned long 
  3674 ;;  exp1            1   59[BANK0 ] unsigned char 
  3675 ;;  sign1           1   54[BANK0 ] unsigned char 
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  4   46[BANK0 ] long 
  3678 ;; Registers used:
  3679 ;;		wreg, status,2, status,0
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3685 ;;      Params:         0       4       0       0       0
  3686 ;;      Locals:         0       6       0       0       0
  3687 ;;      Temps:          0       4       0       0       0
  3688 ;;      Totals:         0      14       0       0       0
  3689 ;;Total ram usage:       14 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; Hardware stack levels required when called:    2
  3692 ;; This function calls:
  3693 ;;		Nothing
  3694 ;; This function is called by:
  3695 ;;		_displayPPM
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           
  3700                           ;psect for function ___fttol
  3701  0B8A                     ___fttol:	
  3702                           
  3703                           ;incstack = 0
  3704                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3705  0B8A  1283               	bcf	3,5	;RP0=0, select bank0
  3706  0B8B  1303               	bcf	3,6	;RP1=0, select bank0
  3707  0B8C  084E               	movf	___fttol@f1,w
  3708  0B8D  00D2               	movwf	??___fttol
  3709  0B8E  084F               	movf	___fttol@f1+1,w
  3710  0B8F  00D3               	movwf	??___fttol+1
  3711  0B90  0850               	movf	___fttol@f1+2,w
  3712  0B91  00D4               	movwf	??___fttol+2
  3713  0B92  1003               	clrc
  3714  0B93  0D53               	rlf	??___fttol+1,w
  3715  0B94  0D54               	rlf	??___fttol+2,w
  3716  0B95  00D5               	movwf	??___fttol+3
  3717  0B96  0855               	movf	??___fttol+3,w
  3718  0B97  00DB               	movwf	___fttol@exp1
  3719  0B98  08DB               	movf	___fttol@exp1,f
  3720  0B99  1D03               	skipz
  3721  0B9A  2BA4               	goto	l2107
  3722  0B9B  3000               	movlw	0
  3723  0B9C  00D1               	movwf	?___fttol+3
  3724  0B9D  3000               	movlw	0
  3725  0B9E  00D0               	movwf	?___fttol+2
  3726  0B9F  3000               	movlw	0
  3727  0BA0  00CF               	movwf	?___fttol+1
  3728  0BA1  3000               	movlw	0
  3729  0BA2  00CE               	movwf	?___fttol
  3730  0BA3  0008               	return
  3731  0BA4                     l2107:	
  3732  0BA4  084E               	movf	___fttol@f1,w
  3733  0BA5  00D2               	movwf	??___fttol
  3734  0BA6  084F               	movf	___fttol@f1+1,w
  3735  0BA7  00D3               	movwf	??___fttol+1
  3736  0BA8  0850               	movf	___fttol@f1+2,w
  3737  0BA9  00D4               	movwf	??___fttol+2
  3738  0BAA  3017               	movlw	23
  3739  0BAB                     u2685:	
  3740  0BAB  1003               	clrc
  3741  0BAC  0CD4               	rrf	??___fttol+2,f
  3742  0BAD  0CD3               	rrf	??___fttol+1,f
  3743  0BAE  0CD2               	rrf	??___fttol,f
  3744  0BAF  3EFF               	addlw	-1
  3745  0BB0  1D03               	skipz
  3746  0BB1  2BAB               	goto	u2685
  3747  0BB2  0852               	movf	??___fttol,w
  3748  0BB3  00D5               	movwf	??___fttol+3
  3749  0BB4  0855               	movf	??___fttol+3,w
  3750  0BB5  00D6               	movwf	___fttol@sign1
  3751  0BB6  17CF               	bsf	___fttol@f1+1,7
  3752  0BB7  30FF               	movlw	255
  3753  0BB8  05CE               	andwf	___fttol@f1,f
  3754  0BB9  30FF               	movlw	255
  3755  0BBA  05CF               	andwf	___fttol@f1+1,f
  3756  0BBB  3000               	movlw	0
  3757  0BBC  05D0               	andwf	___fttol@f1+2,f
  3758  0BBD  084E               	movf	___fttol@f1,w
  3759  0BBE  00D7               	movwf	___fttol@lval
  3760  0BBF  084F               	movf	___fttol@f1+1,w
  3761  0BC0  00D8               	movwf	___fttol@lval+1
  3762  0BC1  0850               	movf	___fttol@f1+2,w
  3763  0BC2  00D9               	movwf	___fttol@lval+2
  3764  0BC3  01DA               	clrf	___fttol@lval+3
  3765  0BC4  308E               	movlw	142
  3766  0BC5  02DB               	subwf	___fttol@exp1,f
  3767  0BC6  1FDB               	btfss	___fttol@exp1,7
  3768  0BC7  2BE6               	goto	l2127
  3769  0BC8  085B               	movf	___fttol@exp1,w
  3770  0BC9  3A80               	xorlw	128
  3771  0BCA  3E8F               	addlw	143
  3772  0BCB  1803               	skipnc
  3773  0BCC  2BD6               	goto	l2125
  3774  0BCD  3000               	movlw	0
  3775  0BCE  00D1               	movwf	?___fttol+3
  3776  0BCF  3000               	movlw	0
  3777  0BD0  00D0               	movwf	?___fttol+2
  3778  0BD1  3000               	movlw	0
  3779  0BD2  00CF               	movwf	?___fttol+1
  3780  0BD3  3000               	movlw	0
  3781  0BD4  00CE               	movwf	?___fttol
  3782  0BD5  0008               	return
  3783  0BD6                     l2125:	
  3784  0BD6  3001               	movlw	1
  3785  0BD7                     u2715:	
  3786  0BD7  1003               	clrc
  3787  0BD8  0CDA               	rrf	___fttol@lval+3,f
  3788  0BD9  0CD9               	rrf	___fttol@lval+2,f
  3789  0BDA  0CD8               	rrf	___fttol@lval+1,f
  3790  0BDB  0CD7               	rrf	___fttol@lval,f
  3791  0BDC  3EFF               	addlw	-1
  3792  0BDD  1D03               	skipz
  3793  0BDE  2BD7               	goto	u2715
  3794  0BDF  3001               	movlw	1
  3795  0BE0  00D2               	movwf	??___fttol
  3796  0BE1  0852               	movf	??___fttol,w
  3797  0BE2  07DB               	addwf	___fttol@exp1,f
  3798  0BE3  1903               	btfsc	3,2
  3799  0BE4  2C01               	goto	l2137
  3800  0BE5  2BD6               	goto	l2125
  3801  0BE6                     l2127:	
  3802  0BE6  3018               	movlw	24
  3803  0BE7  025B               	subwf	___fttol@exp1,w
  3804  0BE8  1C03               	skipc
  3805  0BE9  2BFE               	goto	l2135
  3806  0BEA  3000               	movlw	0
  3807  0BEB  00D1               	movwf	?___fttol+3
  3808  0BEC  3000               	movlw	0
  3809  0BED  00D0               	movwf	?___fttol+2
  3810  0BEE  3000               	movlw	0
  3811  0BEF  00CF               	movwf	?___fttol+1
  3812  0BF0  3000               	movlw	0
  3813  0BF1  00CE               	movwf	?___fttol
  3814  0BF2  0008               	return
  3815  0BF3                     l2133:	
  3816  0BF3  3001               	movlw	1
  3817  0BF4  00D2               	movwf	??___fttol
  3818  0BF5                     u2745:	
  3819  0BF5  1003               	clrc
  3820  0BF6  0DD7               	rlf	___fttol@lval,f
  3821  0BF7  0DD8               	rlf	___fttol@lval+1,f
  3822  0BF8  0DD9               	rlf	___fttol@lval+2,f
  3823  0BF9  0DDA               	rlf	___fttol@lval+3,f
  3824  0BFA  0BD2               	decfsz	??___fttol,f
  3825  0BFB  2BF5               	goto	u2745
  3826  0BFC  3001               	movlw	1
  3827  0BFD  02DB               	subwf	___fttol@exp1,f
  3828  0BFE                     l2135:	
  3829  0BFE  08DB               	movf	___fttol@exp1,f
  3830  0BFF  1D03               	skipz
  3831  0C00  2BF3               	goto	l2133
  3832  0C01                     l2137:	
  3833  0C01  0856               	movf	___fttol@sign1,w
  3834  0C02  1903               	btfsc	3,2
  3835  0C03  2C0F               	goto	l2141
  3836  0C04  09D7               	comf	___fttol@lval,f
  3837  0C05  09D8               	comf	___fttol@lval+1,f
  3838  0C06  09D9               	comf	___fttol@lval+2,f
  3839  0C07  09DA               	comf	___fttol@lval+3,f
  3840  0C08  0AD7               	incf	___fttol@lval,f
  3841  0C09  1903               	skipnz
  3842  0C0A  0AD8               	incf	___fttol@lval+1,f
  3843  0C0B  1903               	skipnz
  3844  0C0C  0AD9               	incf	___fttol@lval+2,f
  3845  0C0D  1903               	skipnz
  3846  0C0E  0ADA               	incf	___fttol@lval+3,f
  3847  0C0F                     l2141:	
  3848  0C0F  085A               	movf	___fttol@lval+3,w
  3849  0C10  00D1               	movwf	?___fttol+3
  3850  0C11  0859               	movf	___fttol@lval+2,w
  3851  0C12  00D0               	movwf	?___fttol+2
  3852  0C13  0858               	movf	___fttol@lval+1,w
  3853  0C14  00CF               	movwf	?___fttol+1
  3854  0C15  0857               	movf	___fttol@lval,w
  3855  0C16  00CE               	movwf	?___fttol
  3856  0C17  0008               	return
  3857  0C18                     __end_of___fttol:	
  3858                           
  3859                           	psect	text13
  3860  1675                     __ptext13:	
  3861 ;; *************** function ___ftneg *****************
  3862 ;; Defined at:
  3863 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;  f1              3   14[BANK0 ] float 
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;		None
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  3   14[BANK0 ] float 
  3870 ;; Registers used:
  3871 ;;		wreg
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3877 ;;      Params:         0       3       0       0       0
  3878 ;;      Locals:         0       0       0       0       0
  3879 ;;      Temps:          0       0       0       0       0
  3880 ;;      Totals:         0       3       0       0       0
  3881 ;;Total ram usage:        3 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    2
  3884 ;; This function calls:
  3885 ;;		Nothing
  3886 ;; This function is called by:
  3887 ;;		_displayPPM
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           
  3892                           ;psect for function ___ftneg
  3893  1675                     ___ftneg:	
  3894                           
  3895                           ;incstack = 0
  3896                           ; Regs used in ___ftneg: [wreg]
  3897  1675  1283               	bcf	3,5	;RP0=0, select bank0
  3898  1676  1303               	bcf	3,6	;RP1=0, select bank0
  3899  1677  0830               	movf	___ftneg@f1+2,w
  3900  1678  042F               	iorwf	___ftneg@f1+1,w
  3901  1679  042E               	iorwf	___ftneg@f1,w
  3902  167A  1903               	skipnz
  3903  167B  0008               	return
  3904  167C  3080               	movlw	128
  3905  167D  06B0               	xorwf	___ftneg@f1+2,f
  3906  167E  0008               	return
  3907  167F                     __end_of___ftneg:	
  3908                           
  3909                           	psect	text14
  3910  08D2                     __ptext14:	
  3911 ;; *************** function _startUpLCD *****************
  3912 ;; Defined at:
  3913 ;;		line 67 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;		None
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;		None
  3918 ;; Return value:  Size  Location     Type
  3919 ;;		None               void
  3920 ;; Registers used:
  3921 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3922 ;; Tracked objects:
  3923 ;;		On entry : 0/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3927 ;;      Params:         0       0       0       0       0
  3928 ;;      Locals:         0       0       0       0       0
  3929 ;;      Temps:          0       0       0       0       0
  3930 ;;      Totals:         0       0       0       0       0
  3931 ;;Total ram usage:        0 bytes
  3932 ;; Hardware stack levels used:    1
  3933 ;; Hardware stack levels required when called:    4
  3934 ;; This function calls:
  3935 ;;		_initLCD
  3936 ;;		_instCTRL
  3937 ;;		_printToLCD
  3938 ;; This function is called by:
  3939 ;;		_main
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           
  3944                           ;psect for function _startUpLCD
  3945  08D2                     _startUpLCD:	
  3946                           
  3947                           ;main.c: 69: initLCD();
  3948                           
  3949                           ;incstack = 0
  3950                           ; Regs used in _startUpLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3951  08D2  160A  118A  276E  120A  158A  	fcall	_initLCD
  3952                           
  3953                           ;main.c: 70: instCTRL(0x80);
  3954  08D7  3080               	movlw	128
  3955  08D8  160A  118A  26B1  120A  158A  	fcall	_instCTRL
  3956                           
  3957                           ;main.c: 71: printToLCD("TEST");
  3958  08DD  30B8               	movlw	low (STR_13-__stringbase)
  3959  08DE  1283               	bcf	3,5	;RP0=0, select bank0
  3960  08DF  1303               	bcf	3,6	;RP1=0, select bank0
  3961  08E0  00A2               	movwf	printToLCD@str
  3962  08E1  3080               	movlw	128
  3963  08E2  00A3               	movwf	printToLCD@str+1
  3964  08E3  120A  158A  210F   	fcall	_printToLCD
  3965  08E6  0008               	return
  3966  08E7                     __end_of_startUpLCD:	
  3967                           
  3968                           	psect	text15
  3969  090F                     __ptext15:	
  3970 ;; *************** function _printToLCD *****************
  3971 ;; Defined at:
  3972 ;;		line 47 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;  str             2    2[BANK0 ] PTR const unsigned char 
  3975 ;;		 -> STR_19(12), STR_18(10), STR_17(19), STR_16(15), 
  3976 ;;		 -> STR_15(15), STR_14(7), STR_13(5), setMinutesStart@debugInfo(10), 
  3977 ;;		 -> setHoursStart@debugInfo(10), displayTime@timeFormat(10), STR_5(17), STR_4(17), 
  3978 ;;		 -> displayPPM@strBuffer(50), 
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;		None
  3981 ;; Return value:  Size  Location     Type
  3982 ;;		None               void
  3983 ;; Registers used:
  3984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3990 ;;      Params:         0       2       0       0       0
  3991 ;;      Locals:         0       0       0       0       0
  3992 ;;      Temps:          0       0       0       0       0
  3993 ;;      Totals:         0       2       0       0       0
  3994 ;;Total ram usage:        2 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    3
  3997 ;; This function calls:
  3998 ;;		_dataCTRL
  3999 ;;		_instCTRL
  4000 ;; This function is called by:
  4001 ;;		_displayPPM
  4002 ;;		_displayTime
  4003 ;;		_setHoursStart
  4004 ;;		_setMinutesStart
  4005 ;;		_startUpLCD
  4006 ;;		_updateState
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           
  4011                           ;psect for function _printToLCD
  4012  090F                     _printToLCD:	
  4013                           
  4014                           ;lcd_functions.h: 49: instCTRL(0x0C);
  4015                           
  4016                           ;incstack = 0
  4017                           ; Regs used in _printToLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4018  090F  300C               	movlw	12
  4019  0910  160A  118A  26B1  120A  158A  	fcall	_instCTRL
  4020  0915                     l2591:	
  4021                           ;lcd_functions.h: 50: while (*str)
  4022                           
  4023  0915  1283               	bcf	3,5	;RP0=0, select bank0
  4024  0916  1303               	bcf	3,6	;RP1=0, select bank0
  4025  0917  0823               	movf	printToLCD@str+1,w
  4026  0918  00FF               	movwf	127
  4027  0919  0822               	movf	printToLCD@str,w
  4028  091A  0084               	movwf	4
  4029  091B  120A  158A  2000  120A  158A  	fcall	stringtab
  4030  0920  3800               	iorlw	0
  4031  0921  1903               	btfsc	3,2
  4032  0922  0008               	return
  4033                           
  4034                           ;lcd_functions.h: 51: {
  4035                           ;lcd_functions.h: 52: dataCTRL(*str);
  4036  0923  1283               	bcf	3,5	;RP0=0, select bank0
  4037  0924  1303               	bcf	3,6	;RP1=0, select bank0
  4038  0925  0823               	movf	printToLCD@str+1,w
  4039  0926  00FF               	movwf	127
  4040  0927  0822               	movf	printToLCD@str,w
  4041  0928  0084               	movwf	4
  4042  0929  120A  158A  2000  120A  158A  	fcall	stringtab
  4043  092E  160A  118A  26C4  120A  158A  	fcall	_dataCTRL
  4044                           
  4045                           ;lcd_functions.h: 53: str++;
  4046  0933  3001               	movlw	1
  4047  0934  1283               	bcf	3,5	;RP0=0, select bank0
  4048  0935  1303               	bcf	3,6	;RP1=0, select bank0
  4049  0936  07A2               	addwf	printToLCD@str,f
  4050  0937  1803               	skipnc
  4051  0938  0AA3               	incf	printToLCD@str+1,f
  4052  0939  2915               	goto	l2591
  4053  093A                     __end_of_printToLCD:	
  4054                           
  4055                           	psect	text16
  4056  16C4                     __ptext16:	
  4057 ;; *************** function _dataCTRL *****************
  4058 ;; Defined at:
  4059 ;;		line 27 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;  DAT             1    wreg     unsigned char 
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  DAT             1    1[BANK0 ] unsigned char 
  4064 ;; Return value:  Size  Location     Type
  4065 ;;		None               void
  4066 ;; Registers used:
  4067 ;;		wreg
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4073 ;;      Params:         0       0       0       0       0
  4074 ;;      Locals:         0       1       0       0       0
  4075 ;;      Temps:          0       1       0       0       0
  4076 ;;      Totals:         0       2       0       0       0
  4077 ;;Total ram usage:        2 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    2
  4080 ;; This function calls:
  4081 ;;		Nothing
  4082 ;; This function is called by:
  4083 ;;		_printToLCD
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           
  4088                           ;psect for function _dataCTRL
  4089  16C4                     _dataCTRL:	
  4090                           
  4091                           ;incstack = 0
  4092                           ; Regs used in _dataCTRL: [wreg]
  4093                           ;dataCTRL@DAT stored from wreg
  4094  16C4  1283               	bcf	3,5	;RP0=0, select bank0
  4095  16C5  1303               	bcf	3,6	;RP1=0, select bank0
  4096  16C6  00A1               	movwf	dataCTRL@DAT
  4097                           
  4098                           ;lcd_functions.h: 29: PORTD = DAT;
  4099  16C7  0821               	movf	dataCTRL@DAT,w
  4100  16C8  0088               	movwf	8	;volatile
  4101                           
  4102                           ;lcd_functions.h: 30: RC0 = 1;
  4103  16C9  1407               	bsf	7,0	;volatile
  4104                           
  4105                           ;lcd_functions.h: 31: RC1 = 0;
  4106  16CA  1087               	bcf	7,1	;volatile
  4107                           
  4108                           ;lcd_functions.h: 32: RC2 = 1;
  4109  16CB  1507               	bsf	7,2	;volatile
  4110                           
  4111                           ;lcd_functions.h: 33: _delay((unsigned long)((1)*(4000000/4000.0)));
  4112  16CC  30F9               	movlw	249
  4113  16CD  00A0               	movwf	??_dataCTRL
  4114  16CE                     u4057:	
  4115  16CE  0000               	nop
  4116  16CF  0BA0               	decfsz	??_dataCTRL,f
  4117  16D0  2ECE               	goto	u4057
  4118  16D1  2ED2               	nop2	;nop
  4119  16D2  0000               	nop
  4120                           
  4121                           ;lcd_functions.h: 34: RC2 = 0;
  4122  16D3  1283               	bcf	3,5	;RP0=0, select bank0
  4123  16D4  1303               	bcf	3,6	;RP1=0, select bank0
  4124  16D5  1107               	bcf	7,2	;volatile
  4125  16D6  0008               	return
  4126  16D7                     __end_of_dataCTRL:	
  4127                           
  4128                           	psect	text17
  4129  176E                     __ptext17:	
  4130 ;; *************** function _initLCD *****************
  4131 ;; Defined at:
  4132 ;;		line 37 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;		None
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;		None
  4137 ;; Return value:  Size  Location     Type
  4138 ;;		None               void
  4139 ;; Registers used:
  4140 ;;		wreg, status,2, status,0, pclath, cstack
  4141 ;; Tracked objects:
  4142 ;;		On entry : 0/0
  4143 ;;		On exit  : 0/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4146 ;;      Params:         0       0       0       0       0
  4147 ;;      Locals:         0       0       0       0       0
  4148 ;;      Temps:          0       1       0       0       0
  4149 ;;      Totals:         0       1       0       0       0
  4150 ;;Total ram usage:        1 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    3
  4153 ;; This function calls:
  4154 ;;		_instCTRL
  4155 ;; This function is called by:
  4156 ;;		_startUpLCD
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           
  4161                           ;psect for function _initLCD
  4162  176E                     _initLCD:	
  4163                           
  4164                           ;lcd_functions.h: 39: instCTRL(0x38);
  4165                           
  4166                           ;incstack = 0
  4167                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  4168  176E  3038               	movlw	56
  4169  176F  160A  118A  26B1  160A  118A  	fcall	_instCTRL
  4170                           
  4171                           ;lcd_functions.h: 40: _delay((unsigned long)((50)*(4000000/4000000.0)));
  4172  1774  3010               	movlw	16
  4173  1775  1283               	bcf	3,5	;RP0=0, select bank0
  4174  1776  1303               	bcf	3,6	;RP1=0, select bank0
  4175  1777  00A2               	movwf	??_initLCD
  4176  1778                     u4067:	
  4177  1778  0BA2               	decfsz	??_initLCD,f
  4178  1779  2F78               	goto	u4067
  4179  177A  0000               	nop
  4180                           
  4181                           ;lcd_functions.h: 41: instCTRL(0x0C);
  4182  177B  300C               	movlw	12
  4183  177C  160A  118A  26B1  160A  118A  	fcall	_instCTRL
  4184                           
  4185                           ;lcd_functions.h: 42: instCTRL(0x01);
  4186  1781  3001               	movlw	1
  4187  1782  160A  118A  26B1  160A  118A  	fcall	_instCTRL
  4188                           
  4189                           ;lcd_functions.h: 43: instCTRL(0x06);
  4190  1787  3006               	movlw	6
  4191  1788  160A  118A  26B1  160A  118A  	fcall	_instCTRL
  4192                           
  4193                           ;lcd_functions.h: 44: instCTRL(0x0F);
  4194  178D  300F               	movlw	15
  4195  178E  160A  118A  26B1   	fcall	_instCTRL
  4196  1791  0008               	return
  4197  1792                     __end_of_initLCD:	
  4198                           
  4199                           	psect	text18
  4200  167F                     __ptext18:	
  4201 ;; *************** function _setPortDirections *****************
  4202 ;; Defined at:
  4203 ;;		line 49 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;		None               void
  4210 ;; Registers used:
  4211 ;;		wreg, status,2
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4217 ;;      Params:         0       0       0       0       0
  4218 ;;      Locals:         0       0       0       0       0
  4219 ;;      Temps:          0       0       0       0       0
  4220 ;;      Totals:         0       0       0       0       0
  4221 ;;Total ram usage:        0 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    2
  4224 ;; This function calls:
  4225 ;;		Nothing
  4226 ;; This function is called by:
  4227 ;;		_main
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           
  4232                           ;psect for function _setPortDirections
  4233  167F                     _setPortDirections:	
  4234                           
  4235                           ;main.c: 51: TRISA = 0xFF;
  4236                           
  4237                           ;incstack = 0
  4238                           ; Regs used in _setPortDirections: [wreg+status,2]
  4239  167F  30FF               	movlw	255
  4240  1680  1683               	bsf	3,5	;RP0=1, select bank1
  4241  1681  1303               	bcf	3,6	;RP1=0, select bank1
  4242  1682  0085               	movwf	5	;volatile
  4243                           
  4244                           ;main.c: 52: TRISB = 0xFF;
  4245  1683  30FF               	movlw	255
  4246  1684  0086               	movwf	6	;volatile
  4247                           
  4248                           ;main.c: 53: TRISC = 0x00;
  4249  1685  0187               	clrf	7	;volatile
  4250                           
  4251                           ;main.c: 54: TRISD = 0x00;
  4252  1686  0188               	clrf	8	;volatile
  4253                           
  4254                           ;main.c: 55: PORTA = 0x00;
  4255  1687  1283               	bcf	3,5	;RP0=0, select bank0
  4256  1688  1303               	bcf	3,6	;RP1=0, select bank0
  4257  1689  0185               	clrf	5	;volatile
  4258                           
  4259                           ;main.c: 56: PORTB = 0x00;
  4260  168A  0186               	clrf	6	;volatile
  4261                           
  4262                           ;main.c: 57: PORTC = 0x00;
  4263  168B  0187               	clrf	7	;volatile
  4264                           
  4265                           ;main.c: 58: PORTD = 0x00;
  4266  168C  0188               	clrf	8	;volatile
  4267  168D  0008               	return
  4268  168E                     __end_of_setPortDirections:	
  4269                           
  4270                           	psect	text19
  4271  16F2                     __ptext19:	
  4272 ;; *************** function _runClock *****************
  4273 ;; Defined at:
  4274 ;;		line 21 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedul
      +er.h"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;		None
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;		None
  4279 ;; Return value:  Size  Location     Type
  4280 ;;		None               void
  4281 ;; Registers used:
  4282 ;;		wreg, status,2, status,0
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4288 ;;      Params:         0       0       0       0       0
  4289 ;;      Locals:         0       0       0       0       0
  4290 ;;      Temps:          0       2       0       0       0
  4291 ;;      Totals:         0       2       0       0       0
  4292 ;;Total ram usage:        2 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:    2
  4295 ;; This function calls:
  4296 ;;		Nothing
  4297 ;; This function is called by:
  4298 ;;		_main
  4299 ;; This function uses a non-reentrant model
  4300 ;;
  4301                           
  4302                           
  4303                           ;psect for function _runClock
  4304  16F2                     _runClock:	
  4305                           
  4306                           ;time_scheduler.h: 23: minutes++;
  4307                           
  4308                           ;incstack = 0
  4309                           ; Regs used in _runClock: [wreg+status,2+status,0]
  4310  16F2  3001               	movlw	1
  4311  16F3  1283               	bcf	3,5	;RP0=0, select bank0
  4312  16F4  1303               	bcf	3,6	;RP1=0, select bank0
  4313  16F5  00A0               	movwf	??_runClock
  4314  16F6  0820               	movf	??_runClock,w
  4315  16F7  07E7               	addwf	_minutes,f	;volatile
  4316                           
  4317                           ;time_scheduler.h: 24: if (minutes >= 60)
  4318  16F8  303C               	movlw	60
  4319  16F9  0267               	subwf	_minutes,w	;volatile
  4320  16FA  1C03               	skipc
  4321  16FB  2F05               	goto	l2371
  4322                           
  4323                           ;time_scheduler.h: 25: {
  4324                           ;time_scheduler.h: 26: minutes = 0;
  4325  16FC  01E7               	clrf	_minutes	;volatile
  4326                           
  4327                           ;time_scheduler.h: 27: hours++;
  4328  16FD  3001               	movlw	1
  4329  16FE  00A0               	movwf	??_runClock
  4330  16FF  0820               	movf	??_runClock,w
  4331  1700  07EA               	addwf	_hours,f	;volatile
  4332                           
  4333                           ;time_scheduler.h: 28: if (hours >= 24)
  4334  1701  3018               	movlw	24
  4335  1702  026A               	subwf	_hours,w	;volatile
  4336  1703  1803               	btfsc	3,0
  4337                           
  4338                           ;time_scheduler.h: 29: {
  4339                           ;time_scheduler.h: 30: hours = 0;
  4340  1704  01EA               	clrf	_hours	;volatile
  4341  1705                     l2371:	
  4342                           
  4343                           ;time_scheduler.h: 31: }
  4344                           ;time_scheduler.h: 32: }
  4345                           ;time_scheduler.h: 33: _delay((unsigned long)((50)*(4000000/4000.0)));
  4346  1705  3041               	movlw	65
  4347  1706  00A1               	movwf	??_runClock+1
  4348  1707  30EE               	movlw	238
  4349  1708  00A0               	movwf	??_runClock
  4350  1709                     u4077:	
  4351  1709  0BA0               	decfsz	??_runClock,f
  4352  170A  2F09               	goto	u4077
  4353  170B  0BA1               	decfsz	??_runClock+1,f
  4354  170C  2F09               	goto	u4077
  4355  170D  0000               	nop
  4356  170E  0008               	return
  4357  170F                     __end_of_runClock:	
  4358                           
  4359                           	psect	text20
  4360  165D                     __ptext20:	
  4361 ;; *************** function _initInterrupt *****************
  4362 ;; Defined at:
  4363 ;;		line 74 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;		None
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;		None
  4368 ;; Return value:  Size  Location     Type
  4369 ;;		None               void
  4370 ;; Registers used:
  4371 ;;		None
  4372 ;; Tracked objects:
  4373 ;;		On entry : 0/0
  4374 ;;		On exit  : 0/0
  4375 ;;		Unchanged: 0/0
  4376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4377 ;;      Params:         0       0       0       0       0
  4378 ;;      Locals:         0       0       0       0       0
  4379 ;;      Temps:          0       0       0       0       0
  4380 ;;      Totals:         0       0       0       0       0
  4381 ;;Total ram usage:        0 bytes
  4382 ;; Hardware stack levels used:    1
  4383 ;; Hardware stack levels required when called:    2
  4384 ;; This function calls:
  4385 ;;		Nothing
  4386 ;; This function is called by:
  4387 ;;		_main
  4388 ;; This function uses a non-reentrant model
  4389 ;;
  4390                           
  4391                           
  4392                           ;psect for function _initInterrupt
  4393  165D                     _initInterrupt:	
  4394                           
  4395                           ;main.c: 76: GIE = 1;
  4396                           
  4397                           ;incstack = 0
  4398                           ; Regs used in _initInterrupt: []
  4399  165D  178B               	bsf	11,7	;volatile
  4400                           
  4401                           ;main.c: 77: INTE = 1;
  4402  165E  160B               	bsf	11,4	;volatile
  4403                           
  4404                           ;main.c: 78: INTF = 0;
  4405  165F  108B               	bcf	11,1	;volatile
  4406                           
  4407                           ;main.c: 79: INTEDG = 0;
  4408  1660  1683               	bsf	3,5	;RP0=1, select bank1
  4409  1661  1303               	bcf	3,6	;RP1=0, select bank1
  4410  1662  1301               	bcf	1,6	;volatile
  4411  1663  0008               	return
  4412  1664                     __end_of_initInterrupt:	
  4413                           
  4414                           	psect	text21
  4415  166C                     __ptext21:	
  4416 ;; *************** function _initADC *****************
  4417 ;; Defined at:
  4418 ;;		line 61 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;		None
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;		None
  4423 ;; Return value:  Size  Location     Type
  4424 ;;		None               void
  4425 ;; Registers used:
  4426 ;;		wreg
  4427 ;; Tracked objects:
  4428 ;;		On entry : 0/0
  4429 ;;		On exit  : 0/0
  4430 ;;		Unchanged: 0/0
  4431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4432 ;;      Params:         0       0       0       0       0
  4433 ;;      Locals:         0       0       0       0       0
  4434 ;;      Temps:          0       0       0       0       0
  4435 ;;      Totals:         0       0       0       0       0
  4436 ;;Total ram usage:        0 bytes
  4437 ;; Hardware stack levels used:    1
  4438 ;; Hardware stack levels required when called:    2
  4439 ;; This function calls:
  4440 ;;		Nothing
  4441 ;; This function is called by:
  4442 ;;		_main
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           
  4447                           ;psect for function _initADC
  4448  166C                     _initADC:	
  4449                           
  4450                           ;main.c: 63: ADCON1 = 0x80;
  4451                           
  4452                           ;incstack = 0
  4453                           ; Regs used in _initADC: [wreg]
  4454  166C  3080               	movlw	128
  4455  166D  1683               	bsf	3,5	;RP0=1, select bank1
  4456  166E  1303               	bcf	3,6	;RP1=0, select bank1
  4457  166F  009F               	movwf	31	;volatile
  4458                           
  4459                           ;main.c: 64: ADCON0 = 0x01;
  4460  1670  3001               	movlw	1
  4461  1671  1283               	bcf	3,5	;RP0=0, select bank0
  4462  1672  1303               	bcf	3,6	;RP1=0, select bank0
  4463  1673  009F               	movwf	31	;volatile
  4464  1674  0008               	return
  4465  1675                     __end_of_initADC:	
  4466                           
  4467                           	psect	text22
  4468  174B                     __ptext22:	
  4469 ;; *************** function _handlePPM *****************
  4470 ;; Defined at:
  4471 ;;		line 86 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;		None
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;		None
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  2   12[BANK0 ] int 
  4478 ;; Registers used:
  4479 ;;		wreg, status,2, status,0, pclath, cstack
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4485 ;;      Params:         0       2       0       0       0
  4486 ;;      Locals:         0       0       0       0       0
  4487 ;;      Temps:          0       0       0       0       0
  4488 ;;      Totals:         0       2       0       0       0
  4489 ;;Total ram usage:        2 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:    3
  4492 ;; This function calls:
  4493 ;;		___ftge
  4494 ;; This function is called by:
  4495 ;;		_main
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499                           
  4500                           ;psect for function _handlePPM
  4501  174B                     _handlePPM:	
  4502                           
  4503                           ;mq135_module.h: 88: if(PPM > 9)
  4504                           
  4505                           ;incstack = 0
  4506                           ; Regs used in _handlePPM: [wreg+status,2+status,0+pclath+cstack]
  4507  174B  3000               	movlw	0
  4508  174C  1283               	bcf	3,5	;RP0=0, select bank0
  4509  174D  1303               	bcf	3,6	;RP1=0, select bank0
  4510  174E  00A0               	movwf	___ftge@ff1
  4511  174F  3010               	movlw	16
  4512  1750  00A1               	movwf	___ftge@ff1+1
  4513  1751  3041               	movlw	65
  4514  1752  00A2               	movwf	___ftge@ff1+2
  4515  1753  0864               	movf	_PPM,w	;volatile
  4516  1754  00A3               	movwf	___ftge@ff2
  4517  1755  0865               	movf	_PPM+1,w	;volatile
  4518  1756  00A4               	movwf	___ftge@ff2+1
  4519  1757  0866               	movf	_PPM+2,w	;volatile
  4520  1758  00A5               	movwf	___ftge@ff2+2
  4521  1759  120A  158A  2257  160A  118A  	fcall	___ftge
  4522  175E  1803               	btfsc	3,0
  4523  175F  2F68               	goto	l101
  4524                           
  4525                           ;mq135_module.h: 89: {
  4526                           ;mq135_module.h: 90: RC3 = 1;
  4527  1760  1283               	bcf	3,5	;RP0=0, select bank0
  4528  1761  1303               	bcf	3,6	;RP1=0, select bank0
  4529  1762  1587               	bsf	7,3	;volatile
  4530                           
  4531                           ;mq135_module.h: 91: return 1;
  4532  1763  3001               	movlw	1
  4533  1764  00AC               	movwf	?_handlePPM
  4534  1765  3000               	movlw	0
  4535  1766  00AD               	movwf	?_handlePPM+1
  4536                           
  4537                           ;mq135_module.h: 92: }
  4538  1767  0008               	return
  4539  1768                     l101:	
  4540                           
  4541                           ;mq135_module.h: 93: else
  4542                           ;mq135_module.h: 94: {
  4543                           ;mq135_module.h: 95: RC3 = 0;
  4544  1768  1283               	bcf	3,5	;RP0=0, select bank0
  4545  1769  1303               	bcf	3,6	;RP1=0, select bank0
  4546  176A  1187               	bcf	7,3	;volatile
  4547                           
  4548                           ;mq135_module.h: 96: return 0;
  4549  176B  01AC               	clrf	?_handlePPM
  4550  176C  01AD               	clrf	?_handlePPM+1
  4551  176D  0008               	return
  4552  176E                     __end_of_handlePPM:	
  4553                           
  4554                           	psect	text23
  4555  0A57                     __ptext23:	
  4556 ;; *************** function ___ftge *****************
  4557 ;; Defined at:
  4558 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;  ff1             3    0[BANK0 ] float 
  4561 ;;  ff2             3    3[BANK0 ] float 
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;		None
  4564 ;; Return value:  Size  Location     Type
  4565 ;;		None               void
  4566 ;; Registers used:
  4567 ;;		wreg, status,2, status,0
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4573 ;;      Params:         0       6       0       0       0
  4574 ;;      Locals:         0       0       0       0       0
  4575 ;;      Temps:          0       6       0       0       0
  4576 ;;      Totals:         0      12       0       0       0
  4577 ;;Total ram usage:       12 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    2
  4580 ;; This function calls:
  4581 ;;		Nothing
  4582 ;; This function is called by:
  4583 ;;		_handlePPM
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           
  4588                           ;psect for function ___ftge
  4589  0A57                     ___ftge:	
  4590                           
  4591                           ;incstack = 0
  4592                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4593  0A57  1283               	bcf	3,5	;RP0=0, select bank0
  4594  0A58  1303               	bcf	3,6	;RP1=0, select bank0
  4595  0A59  1FA2               	btfss	___ftge@ff1+2,7
  4596  0A5A  2A80               	goto	l2315
  4597  0A5B  3000               	movlw	0
  4598  0A5C  00A6               	movwf	??___ftge
  4599  0A5D  3000               	movlw	0
  4600  0A5E  00A7               	movwf	??___ftge+1
  4601  0A5F  3080               	movlw	128
  4602  0A60  00A8               	movwf	??___ftge+2
  4603  0A61  0920               	comf	___ftge@ff1,w
  4604  0A62  00A9               	movwf	??___ftge+3
  4605  0A63  0921               	comf	___ftge@ff1+1,w
  4606  0A64  00AA               	movwf	??___ftge+4
  4607  0A65  0922               	comf	___ftge@ff1+2,w
  4608  0A66  00AB               	movwf	??___ftge+5
  4609  0A67  0AA9               	incf	??___ftge+3,f
  4610  0A68  1903               	skipnz
  4611  0A69  0AAA               	incf	??___ftge+4,f
  4612  0A6A  1903               	skipnz
  4613  0A6B  0AAB               	incf	??___ftge+5,f
  4614  0A6C  0829               	movf	??___ftge+3,w
  4615  0A6D  07A6               	addwf	??___ftge,f
  4616  0A6E  082A               	movf	??___ftge+4,w
  4617  0A6F  1803               	skipnc
  4618  0A70  0F2A               	incfsz	??___ftge+4,w
  4619  0A71  2A73               	goto	u3051
  4620  0A72  2A74               	goto	u3052
  4621  0A73                     u3051:	
  4622  0A73  07A7               	addwf	??___ftge+1,f
  4623  0A74                     u3052:	
  4624  0A74  082B               	movf	??___ftge+5,w
  4625  0A75  1803               	skipnc
  4626  0A76  0F2B               	incfsz	??___ftge+5,w
  4627  0A77  2A79               	goto	u3053
  4628  0A78  2A7A               	goto	u3054
  4629  0A79                     u3053:	
  4630  0A79  07A8               	addwf	??___ftge+2,f
  4631  0A7A                     u3054:	
  4632  0A7A  0826               	movf	??___ftge,w
  4633  0A7B  00A0               	movwf	___ftge@ff1
  4634  0A7C  0827               	movf	??___ftge+1,w
  4635  0A7D  00A1               	movwf	___ftge@ff1+1
  4636  0A7E  0828               	movf	??___ftge+2,w
  4637  0A7F  00A2               	movwf	___ftge@ff1+2
  4638  0A80                     l2315:	
  4639  0A80  1FA5               	btfss	___ftge@ff2+2,7
  4640  0A81  2AA7               	goto	l2319
  4641  0A82  3000               	movlw	0
  4642  0A83  00A6               	movwf	??___ftge
  4643  0A84  3000               	movlw	0
  4644  0A85  00A7               	movwf	??___ftge+1
  4645  0A86  3080               	movlw	128
  4646  0A87  00A8               	movwf	??___ftge+2
  4647  0A88  0923               	comf	___ftge@ff2,w
  4648  0A89  00A9               	movwf	??___ftge+3
  4649  0A8A  0924               	comf	___ftge@ff2+1,w
  4650  0A8B  00AA               	movwf	??___ftge+4
  4651  0A8C  0925               	comf	___ftge@ff2+2,w
  4652  0A8D  00AB               	movwf	??___ftge+5
  4653  0A8E  0AA9               	incf	??___ftge+3,f
  4654  0A8F  1903               	skipnz
  4655  0A90  0AAA               	incf	??___ftge+4,f
  4656  0A91  1903               	skipnz
  4657  0A92  0AAB               	incf	??___ftge+5,f
  4658  0A93  0829               	movf	??___ftge+3,w
  4659  0A94  07A6               	addwf	??___ftge,f
  4660  0A95  082A               	movf	??___ftge+4,w
  4661  0A96  1803               	skipnc
  4662  0A97  0F2A               	incfsz	??___ftge+4,w
  4663  0A98  2A9A               	goto	u3071
  4664  0A99  2A9B               	goto	u3072
  4665  0A9A                     u3071:	
  4666  0A9A  07A7               	addwf	??___ftge+1,f
  4667  0A9B                     u3072:	
  4668  0A9B  082B               	movf	??___ftge+5,w
  4669  0A9C  1803               	skipnc
  4670  0A9D  0F2B               	incfsz	??___ftge+5,w
  4671  0A9E  2AA0               	goto	u3073
  4672  0A9F  2AA1               	goto	u3074
  4673  0AA0                     u3073:	
  4674  0AA0  07A8               	addwf	??___ftge+2,f
  4675  0AA1                     u3074:	
  4676  0AA1  0826               	movf	??___ftge,w
  4677  0AA2  00A3               	movwf	___ftge@ff2
  4678  0AA3  0827               	movf	??___ftge+1,w
  4679  0AA4  00A4               	movwf	___ftge@ff2+1
  4680  0AA5  0828               	movf	??___ftge+2,w
  4681  0AA6  00A5               	movwf	___ftge@ff2+2
  4682  0AA7                     l2319:	
  4683  0AA7  3080               	movlw	128
  4684  0AA8  06A2               	xorwf	___ftge@ff1+2,f
  4685  0AA9  3080               	movlw	128
  4686  0AAA  06A5               	xorwf	___ftge@ff2+2,f
  4687  0AAB  0825               	movf	___ftge@ff2+2,w
  4688  0AAC  0222               	subwf	___ftge@ff1+2,w
  4689  0AAD  1D03               	skipz
  4690  0AAE  0008               	return
  4691  0AAF  0824               	movf	___ftge@ff2+1,w
  4692  0AB0  0221               	subwf	___ftge@ff1+1,w
  4693  0AB1  1D03               	skipz
  4694  0AB2  0008               	return
  4695  0AB3  0823               	movf	___ftge@ff2,w
  4696  0AB4  0220               	subwf	___ftge@ff1,w
  4697  0AB5  0008               	return
  4698  0AB6                     __end_of___ftge:	
  4699                           
  4700                           	psect	text24
  4701  09FF                     __ptext24:	
  4702 ;; *************** function _checkTime *****************
  4703 ;; Defined at:
  4704 ;;		line 126 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedu
      +ler.h"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;		None
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;		None
  4709 ;; Return value:  Size  Location     Type
  4710 ;;		None               void
  4711 ;; Registers used:
  4712 ;;		wreg
  4713 ;; Tracked objects:
  4714 ;;		On entry : 0/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4718 ;;      Params:         0       0       0       0       0
  4719 ;;      Locals:         0       0       0       0       0
  4720 ;;      Temps:          0       0       0       0       0
  4721 ;;      Totals:         0       0       0       0       0
  4722 ;;Total ram usage:        0 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; Hardware stack levels required when called:    2
  4725 ;; This function calls:
  4726 ;;		Nothing
  4727 ;; This function is called by:
  4728 ;;		_main
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           
  4733                           ;psect for function _checkTime
  4734  09FF                     _checkTime:	
  4735                           
  4736                           ;time_scheduler.h: 128: if (hours == savedHoursEnd && minutes == savedMinutesEnd)
  4737                           
  4738                           ;incstack = 0
  4739                           ; Regs used in _checkTime: [wreg]
  4740  09FF  1283               	bcf	3,5	;RP0=0, select bank0
  4741  0A00  1303               	bcf	3,6	;RP1=0, select bank0
  4742  0A01  086A               	movf	_hours,w	;volatile
  4743  0A02  066B               	xorwf	_savedHoursEnd,w	;volatile
  4744  0A03  1D03               	skipz
  4745  0A04  2A0B               	goto	l2865
  4746  0A05  0867               	movf	_minutes,w	;volatile
  4747  0A06  067A               	xorwf	_savedMinutesEnd,w	;volatile
  4748  0A07  1D03               	skipz
  4749  0A08  2A0B               	goto	l2865
  4750                           
  4751                           ;time_scheduler.h: 129: {
  4752                           ;time_scheduler.h: 130: RC4 = 1;
  4753  0A09  1607               	bsf	7,4	;volatile
  4754                           
  4755                           ;time_scheduler.h: 131: }
  4756  0A0A  0008               	return
  4757  0A0B                     l2865:	
  4758                           
  4759                           ;time_scheduler.h: 132: else if (savedHoursEnd > savedHoursStart)
  4760  0A0B  086B               	movf	_savedHoursEnd,w	;volatile
  4761  0A0C  026C               	subwf	_savedHoursStart,w	;volatile
  4762  0A0D  1803               	skipnc
  4763  0A0E  2A2B               	goto	l2879
  4764                           
  4765                           ;time_scheduler.h: 133: {
  4766                           ;time_scheduler.h: 135: if ((hours > savedHoursStart || (hours == savedHoursStart && min
      +                          utes >= savedMinutesStart)) &&
  4767                           ;time_scheduler.h: 136: (hours < savedHoursEnd || (hours == savedHoursEnd && minutes < s
      +                          avedMinutesEnd)))
  4768  0A0F  086A               	movf	_hours,w	;volatile
  4769  0A10  026C               	subwf	_savedHoursStart,w	;volatile
  4770  0A11  1C03               	skipc
  4771  0A12  2A1B               	goto	l2873
  4772  0A13  086A               	movf	_hours,w	;volatile
  4773  0A14  066C               	xorwf	_savedHoursStart,w	;volatile
  4774  0A15  1D03               	skipz
  4775  0A16  2A29               	goto	l165
  4776  0A17  086D               	movf	_savedMinutesStart,w	;volatile
  4777  0A18  0267               	subwf	_minutes,w	;volatile
  4778  0A19  1C03               	skipc
  4779  0A1A  2A29               	goto	l165
  4780  0A1B                     l2873:	
  4781  0A1B  086B               	movf	_savedHoursEnd,w	;volatile
  4782  0A1C  026A               	subwf	_hours,w	;volatile
  4783  0A1D  1C03               	skipc
  4784  0A1E  2A27               	goto	l169
  4785  0A1F  086A               	movf	_hours,w	;volatile
  4786  0A20  066B               	xorwf	_savedHoursEnd,w	;volatile
  4787  0A21  1D03               	skipz
  4788  0A22  2A29               	goto	l165
  4789  0A23  087A               	movf	_savedMinutesEnd,w	;volatile
  4790  0A24  0267               	subwf	_minutes,w	;volatile
  4791  0A25  1803               	skipnc
  4792  0A26  2A29               	goto	l165
  4793  0A27                     l169:	
  4794                           
  4795                           ;time_scheduler.h: 137: {
  4796                           ;time_scheduler.h: 138: RC4 = 1;
  4797  0A27  1607               	bsf	7,4	;volatile
  4798                           
  4799                           ;time_scheduler.h: 139: }
  4800  0A28  0008               	return
  4801  0A29                     l165:	
  4802                           
  4803                           ;time_scheduler.h: 140: else
  4804                           ;time_scheduler.h: 141: {
  4805                           ;time_scheduler.h: 142: RC4 = 0;
  4806  0A29  1207               	bcf	7,4	;volatile
  4807                           
  4808                           ;time_scheduler.h: 143: }
  4809                           ;time_scheduler.h: 144: }
  4810  0A2A  0008               	return
  4811  0A2B                     l2879:	
  4812                           
  4813                           ;time_scheduler.h: 145: else if (savedHoursEnd < savedHoursStart)
  4814  0A2B  086C               	movf	_savedHoursStart,w	;volatile
  4815  0A2C  026B               	subwf	_savedHoursEnd,w	;volatile
  4816  0A2D  1803               	skipnc
  4817  0A2E  2A4B               	goto	l2893
  4818                           
  4819                           ;time_scheduler.h: 146: {
  4820                           ;time_scheduler.h: 148: if ((hours > savedHoursStart || (hours == savedHoursStart && min
      +                          utes >= savedMinutesStart)) ||
  4821                           ;time_scheduler.h: 149: (hours < savedHoursEnd || (hours == savedHoursEnd && minutes < s
      +                          avedMinutesEnd)))
  4822  0A2F  086A               	movf	_hours,w	;volatile
  4823  0A30  026C               	subwf	_savedHoursStart,w	;volatile
  4824  0A31  1C03               	skipc
  4825  0A32  2A47               	goto	l175
  4826  0A33  086A               	movf	_hours,w	;volatile
  4827  0A34  066C               	xorwf	_savedHoursStart,w	;volatile
  4828  0A35  1D03               	skipz
  4829  0A36  2A3B               	goto	l2887
  4830  0A37  086D               	movf	_savedMinutesStart,w	;volatile
  4831  0A38  0267               	subwf	_minutes,w	;volatile
  4832  0A39  1803               	skipnc
  4833  0A3A  2A47               	goto	l175
  4834  0A3B                     l2887:	
  4835  0A3B  086B               	movf	_savedHoursEnd,w	;volatile
  4836  0A3C  026A               	subwf	_hours,w	;volatile
  4837  0A3D  1C03               	skipc
  4838  0A3E  2A47               	goto	l175
  4839  0A3F  086A               	movf	_hours,w	;volatile
  4840  0A40  066B               	xorwf	_savedHoursEnd,w	;volatile
  4841  0A41  1D03               	skipz
  4842  0A42  2A49               	goto	l173
  4843  0A43  087A               	movf	_savedMinutesEnd,w	;volatile
  4844  0A44  0267               	subwf	_minutes,w	;volatile
  4845  0A45  1803               	skipnc
  4846  0A46  2A49               	goto	l173
  4847  0A47                     l175:	
  4848                           
  4849                           ;time_scheduler.h: 150: {
  4850                           ;time_scheduler.h: 151: RC4 = 1;
  4851  0A47  1607               	bsf	7,4	;volatile
  4852                           
  4853                           ;time_scheduler.h: 152: }
  4854  0A48  0008               	return
  4855  0A49                     l173:	
  4856                           
  4857                           ;time_scheduler.h: 153: else
  4858                           ;time_scheduler.h: 154: {
  4859                           ;time_scheduler.h: 155: RC4 = 0;
  4860  0A49  1207               	bcf	7,4	;volatile
  4861                           
  4862                           ;time_scheduler.h: 156: }
  4863                           ;time_scheduler.h: 157: }
  4864  0A4A  0008               	return
  4865  0A4B                     l2893:	
  4866                           
  4867                           ;time_scheduler.h: 158: else
  4868                           ;time_scheduler.h: 159: {
  4869                           ;time_scheduler.h: 160: if (minutes >= savedMinutesStart && minutes < savedMinutesEnd)
  4870  0A4B  086D               	movf	_savedMinutesStart,w	;volatile
  4871  0A4C  0267               	subwf	_minutes,w	;volatile
  4872  0A4D  1C03               	skipc
  4873  0A4E  2A55               	goto	l182
  4874  0A4F  087A               	movf	_savedMinutesEnd,w	;volatile
  4875  0A50  0267               	subwf	_minutes,w	;volatile
  4876  0A51  1803               	skipnc
  4877  0A52  2A55               	goto	l182
  4878                           
  4879                           ;time_scheduler.h: 161: {
  4880                           ;time_scheduler.h: 162: RC4 = 1;
  4881  0A53  1607               	bsf	7,4	;volatile
  4882                           
  4883                           ;time_scheduler.h: 163: }
  4884  0A54  0008               	return
  4885  0A55                     l182:	
  4886                           
  4887                           ;time_scheduler.h: 164: else
  4888                           ;time_scheduler.h: 165: {
  4889                           ;time_scheduler.h: 166: RC4 = 0;
  4890  0A55  1207               	bcf	7,4	;volatile
  4891  0A56  0008               	return
  4892  0A57                     __end_of_checkTime:	
  4893                           
  4894                           	psect	text25
  4895  08E7                     __ptext25:	
  4896 ;; *************** function _checkSelect *****************
  4897 ;; Defined at:
  4898 ;;		line 153 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  4899 ;; Parameters:    Size  Location     Type
  4900 ;;		None
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;  currentRB1St    2    4[BANK0 ] int 
  4903 ;; Return value:  Size  Location     Type
  4904 ;;		None               void
  4905 ;; Registers used:
  4906 ;;		wreg, status,2, status,0, pclath, cstack
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4912 ;;      Params:         0       0       0       0       0
  4913 ;;      Locals:         0       2       0       0       0
  4914 ;;      Temps:          0       2       0       0       0
  4915 ;;      Totals:         0       4       0       0       0
  4916 ;;Total ram usage:        4 bytes
  4917 ;; Hardware stack levels used:    1
  4918 ;; Hardware stack levels required when called:    3
  4919 ;; This function calls:
  4920 ;;		_instCTRL
  4921 ;; This function is called by:
  4922 ;;		_main
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           
  4927                           ;psect for function _checkSelect
  4928  08E7                     _checkSelect:	
  4929                           
  4930                           ;main.c: 155: static int lastRB1State = 0;
  4931                           ;main.c: 156: int currentRB1State = RB1;
  4932                           
  4933                           ;incstack = 0
  4934                           ; Regs used in _checkSelect: [wreg+status,2+status,0+pclath+cstack]
  4935  08E7  1003               	clrc
  4936  08E8  1283               	bcf	3,5	;RP0=0, select bank0
  4937  08E9  1303               	bcf	3,6	;RP1=0, select bank0
  4938  08EA  1886               	btfsc	6,1	;volatile
  4939  08EB  1403               	setc
  4940  08EC  3000               	movlw	0
  4941  08ED  1803               	skipnc
  4942  08EE  3001               	movlw	1
  4943  08EF  00A2               	movwf	??_checkSelect
  4944  08F0  01A3               	clrf	??_checkSelect+1
  4945  08F1  0822               	movf	??_checkSelect,w
  4946  08F2  00A4               	movwf	checkSelect@currentRB1State
  4947  08F3  0823               	movf	??_checkSelect+1,w
  4948  08F4  00A5               	movwf	checkSelect@currentRB1State+1
  4949                           
  4950                           ;main.c: 157: if (currentRB1State == 1 && lastRB1State == 0)
  4951  08F5  3001               	movlw	1
  4952  08F6  0624               	xorwf	checkSelect@currentRB1State,w
  4953  08F7  0425               	iorwf	checkSelect@currentRB1State+1,w
  4954  08F8  1D03               	skipz
  4955  08F9  2906               	goto	l2445
  4956  08FA  0878               	movf	checkSelect@lastRB1State+1,w
  4957  08FB  0477               	iorwf	checkSelect@lastRB1State,w
  4958  08FC  1D03               	skipz
  4959  08FD  2906               	goto	l2445
  4960                           
  4961                           ;main.c: 158: {
  4962                           ;main.c: 159: select ^= 1;
  4963  08FE  3001               	movlw	1
  4964  08FF  00A2               	movwf	??_checkSelect
  4965  0900  0822               	movf	??_checkSelect,w
  4966  0901  06E9               	xorwf	_select,f	;volatile
  4967                           
  4968                           ;main.c: 161: instCTRL(0x01);
  4969  0902  3001               	movlw	1
  4970  0903  160A  118A  26B1   	fcall	_instCTRL
  4971  0906                     l2445:	
  4972                           
  4973                           ;main.c: 162: }
  4974                           ;main.c: 163: lastRB1State = currentRB1State;
  4975  0906  1283               	bcf	3,5	;RP0=0, select bank0
  4976  0907  1303               	bcf	3,6	;RP1=0, select bank0
  4977  0908  0825               	movf	checkSelect@currentRB1State+1,w
  4978  0909  01F8               	clrf	checkSelect@lastRB1State+1
  4979  090A  07F8               	addwf	checkSelect@lastRB1State+1,f
  4980  090B  0824               	movf	checkSelect@currentRB1State,w
  4981  090C  01F7               	clrf	checkSelect@lastRB1State
  4982  090D  07F7               	addwf	checkSelect@lastRB1State,f
  4983  090E  0008               	return
  4984  090F                     __end_of_checkSelect:	
  4985                           
  4986                           	psect	text26
  4987  172D                     __ptext26:	
  4988 ;; *************** function _checkMode *****************
  4989 ;; Defined at:
  4990 ;;		line 142 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;		None
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;		None
  4995 ;; Return value:  Size  Location     Type
  4996 ;;		None               void
  4997 ;; Registers used:
  4998 ;;		wreg, status,2, status,0, pclath, cstack
  4999 ;; Tracked objects:
  5000 ;;		On entry : 0/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5004 ;;      Params:         0       0       0       0       0
  5005 ;;      Locals:         0       0       0       0       0
  5006 ;;      Temps:          0       2       0       0       0
  5007 ;;      Totals:         0       2       0       0       0
  5008 ;;Total ram usage:        2 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; Hardware stack levels required when called:    3
  5011 ;; This function calls:
  5012 ;;		_instCTRL
  5013 ;; This function is called by:
  5014 ;;		_main
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           
  5019                           ;psect for function _checkMode
  5020  172D                     _checkMode:	
  5021                           
  5022                           ;main.c: 144: if (lastMode != mode)
  5023                           
  5024                           ;incstack = 0
  5025                           ; Regs used in _checkMode: [wreg+status,2+status,0+pclath+cstack]
  5026  172D  0879               	movf	_lastMode,w
  5027  172E  1283               	bcf	3,5	;RP0=0, select bank0
  5028  172F  1303               	bcf	3,6	;RP1=0, select bank0
  5029  1730  0668               	xorwf	_mode,w
  5030  1731  1903               	skipnz
  5031  1732  0008               	return
  5032                           
  5033                           ;main.c: 145: {
  5034                           ;main.c: 147: instCTRL(0x01);
  5035  1733  3001               	movlw	1
  5036  1734  160A  118A  26B1  160A  118A  	fcall	_instCTRL
  5037                           
  5038                           ;main.c: 148: _delay((unsigned long)((50)*(4000000/4000.0)));
  5039  1739  3041               	movlw	65
  5040  173A  1283               	bcf	3,5	;RP0=0, select bank0
  5041  173B  1303               	bcf	3,6	;RP1=0, select bank0
  5042  173C  00A3               	movwf	??_checkMode+1
  5043  173D  30EE               	movlw	238
  5044  173E  00A2               	movwf	??_checkMode
  5045  173F                     u4087:	
  5046  173F  0BA2               	decfsz	??_checkMode,f
  5047  1740  2F3F               	goto	u4087
  5048  1741  0BA3               	decfsz	??_checkMode+1,f
  5049  1742  2F3F               	goto	u4087
  5050  1743  0000               	nop
  5051                           
  5052                           ;main.c: 149: lastMode = mode;
  5053  1744  1283               	bcf	3,5	;RP0=0, select bank0
  5054  1745  1303               	bcf	3,6	;RP1=0, select bank0
  5055  1746  0868               	movf	_mode,w
  5056  1747  00A2               	movwf	??_checkMode
  5057  1748  0822               	movf	??_checkMode,w
  5058  1749  00F9               	movwf	_lastMode
  5059  174A  0008               	return
  5060  174B                     __end_of_checkMode:	
  5061                           
  5062                           	psect	text27
  5063  16B1                     __ptext27:	
  5064 ;; *************** function _instCTRL *****************
  5065 ;; Defined at:
  5066 ;;		line 17 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;  CMD             1    wreg     unsigned char 
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;  CMD             1    1[BANK0 ] unsigned char 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;		None               void
  5073 ;; Registers used:
  5074 ;;		wreg
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5080 ;;      Params:         0       0       0       0       0
  5081 ;;      Locals:         0       1       0       0       0
  5082 ;;      Temps:          0       1       0       0       0
  5083 ;;      Totals:         0       2       0       0       0
  5084 ;;Total ram usage:        2 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    2
  5087 ;; This function calls:
  5088 ;;		Nothing
  5089 ;; This function is called by:
  5090 ;;		_initLCD
  5091 ;;		_printToLCD
  5092 ;;		_displayPPM
  5093 ;;		_startUpLCD
  5094 ;;		_updateState
  5095 ;;		_checkMode
  5096 ;;		_checkSelect
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           
  5101                           ;psect for function _instCTRL
  5102  16B1                     _instCTRL:	
  5103                           
  5104                           ;incstack = 0
  5105                           ; Regs used in _instCTRL: [wreg]
  5106                           ;instCTRL@CMD stored from wreg
  5107  16B1  1283               	bcf	3,5	;RP0=0, select bank0
  5108  16B2  1303               	bcf	3,6	;RP1=0, select bank0
  5109  16B3  00A1               	movwf	instCTRL@CMD
  5110                           
  5111                           ;lcd_functions.h: 19: PORTD = CMD;
  5112  16B4  0821               	movf	instCTRL@CMD,w
  5113  16B5  0088               	movwf	8	;volatile
  5114                           
  5115                           ;lcd_functions.h: 20: RC0 = 0;
  5116  16B6  1007               	bcf	7,0	;volatile
  5117                           
  5118                           ;lcd_functions.h: 21: RC1 = 0;
  5119  16B7  1087               	bcf	7,1	;volatile
  5120                           
  5121                           ;lcd_functions.h: 22: RC2 = 1;
  5122  16B8  1507               	bsf	7,2	;volatile
  5123                           
  5124                           ;lcd_functions.h: 23: _delay((unsigned long)((1)*(4000000/4000.0)));
  5125  16B9  30F9               	movlw	249
  5126  16BA  00A0               	movwf	??_instCTRL
  5127  16BB                     u4097:	
  5128  16BB  0000               	nop
  5129  16BC  0BA0               	decfsz	??_instCTRL,f
  5130  16BD  2EBB               	goto	u4097
  5131  16BE  2EBF               	nop2	;nop
  5132  16BF  0000               	nop
  5133                           
  5134                           ;lcd_functions.h: 24: RC2 = 0;
  5135  16C0  1283               	bcf	3,5	;RP0=0, select bank0
  5136  16C1  1303               	bcf	3,6	;RP1=0, select bank0
  5137  16C2  1107               	bcf	7,2	;volatile
  5138  16C3  0008               	return
  5139  16C4                     __end_of_instCTRL:	
  5140                           
  5141                           	psect	text28
  5142  16D7                     __ptext28:	
  5143 ;; *************** function _Read_ADC_MQ135 *****************
  5144 ;; Defined at:
  5145 ;;		line 28 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  5146 ;; Parameters:    Size  Location     Type
  5147 ;;		None
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;		None
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  2    0[BANK0 ] int 
  5152 ;; Registers used:
  5153 ;;		wreg, status,2, status,0
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5159 ;;      Params:         0       2       0       0       0
  5160 ;;      Locals:         0       0       0       0       0
  5161 ;;      Temps:          0       2       0       0       0
  5162 ;;      Totals:         0       4       0       0       0
  5163 ;;Total ram usage:        4 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; Hardware stack levels required when called:    2
  5166 ;; This function calls:
  5167 ;;		Nothing
  5168 ;; This function is called by:
  5169 ;;		_main
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           
  5174                           ;psect for function _Read_ADC_MQ135
  5175  16D7                     _Read_ADC_MQ135:	
  5176                           
  5177                           ;mq135_module.h: 30: _delay((unsigned long)((100)*(4000000/4000.0)));
  5178                           
  5179                           ;incstack = 0
  5180                           ; Regs used in _Read_ADC_MQ135: [wreg+status,2+status,0]
  5181  16D7  3082               	movlw	130
  5182  16D8  1283               	bcf	3,5	;RP0=0, select bank0
  5183  16D9  1303               	bcf	3,6	;RP1=0, select bank0
  5184  16DA  00A3               	movwf	??_Read_ADC_MQ135+1
  5185  16DB  30DD               	movlw	221
  5186  16DC  00A2               	movwf	??_Read_ADC_MQ135
  5187  16DD                     u4107:	
  5188  16DD  0BA2               	decfsz	??_Read_ADC_MQ135,f
  5189  16DE  2EDD               	goto	u4107
  5190  16DF  0BA3               	decfsz	??_Read_ADC_MQ135+1,f
  5191  16E0  2EDD               	goto	u4107
  5192  16E1  2EE2               	nop2
  5193                           
  5194                           ;mq135_module.h: 31: GO_DONE = 1;
  5195  16E2  1283               	bcf	3,5	;RP0=0, select bank0
  5196  16E3  1303               	bcf	3,6	;RP1=0, select bank0
  5197  16E4  151F               	bsf	31,2	;volatile
  5198  16E5                     l84:	
  5199                           ;mq135_module.h: 33: ;
  5200                           
  5201                           ;mq135_module.h: 32: while (GO_DONE)
  5202                           
  5203  16E5  191F               	btfsc	31,2	;volatile
  5204  16E6  2EE5               	goto	l84
  5205                           
  5206                           ;mq135_module.h: 34: return ((ADRESH << 8) + ADRESL);
  5207  16E7  081E               	movf	30,w	;volatile
  5208  16E8  01A1               	clrf	?_Read_ADC_MQ135+1
  5209  16E9  07A1               	addwf	?_Read_ADC_MQ135+1,f
  5210  16EA  1683               	bsf	3,5	;RP0=1, select bank1
  5211  16EB  1303               	bcf	3,6	;RP1=0, select bank1
  5212  16EC  081E               	movf	30,w	;volatile
  5213  16ED  1283               	bcf	3,5	;RP0=0, select bank0
  5214  16EE  1303               	bcf	3,6	;RP1=0, select bank0
  5215  16EF  01A0               	clrf	?_Read_ADC_MQ135
  5216  16F0  07A0               	addwf	?_Read_ADC_MQ135,f
  5217  16F1  0008               	return
  5218  16F2                     __end_of_Read_ADC_MQ135:	
  5219                           
  5220                           	psect	text29
  5221  0058                     __ptext29:	
  5222 ;; *************** function _CalcMQ135 *****************
  5223 ;; Defined at:
  5224 ;;		line 37 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;  RAW_ADC         2   62[BANK0 ] int 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  ratio           3   36[BANK1 ] float 
  5229 ;;  co2             3   33[BANK1 ] float 
  5230 ;;  ratio5          3   30[BANK1 ] float 
  5231 ;;  ratio4          3   27[BANK1 ] float 
  5232 ;;  ratio3          3   24[BANK1 ] float 
  5233 ;;  ratio2          3   21[BANK1 ] float 
  5234 ;;  ratio6          3    3[BANK1 ] float 
  5235 ;;  voltage         3    0[BANK1 ] float 
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  3   62[BANK0 ] float 
  5238 ;; Registers used:
  5239 ;;		wreg, status,2, status,0, pclath, cstack
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5245 ;;      Params:         0       3       0       0       0
  5246 ;;      Locals:         0       0      39       0       0
  5247 ;;      Temps:          0       0       0       0       0
  5248 ;;      Totals:         0       3      39       0       0
  5249 ;;Total ram usage:       42 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:    4
  5252 ;; This function calls:
  5253 ;;		___awtoft
  5254 ;;		___ftadd
  5255 ;;		___ftdiv
  5256 ;;		___ftmul
  5257 ;; This function is called by:
  5258 ;;		_main
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           
  5263                           ;psect for function _CalcMQ135
  5264  0058                     _CalcMQ135:	
  5265                           
  5266                           ;mq135_module.h: 39: float voltage = (RAW_ADC * 5.0) / 1023.0;
  5267                           
  5268                           ;incstack = 0
  5269                           ; Regs used in _CalcMQ135: [wreg+status,2+status,0+pclath+cstack]
  5270  0058  30C0               	movlw	192
  5271  0059  1283               	bcf	3,5	;RP0=0, select bank0
  5272  005A  1303               	bcf	3,6	;RP1=0, select bank0
  5273  005B  00CE               	movwf	___ftdiv@f2
  5274  005C  307F               	movlw	127
  5275  005D  00CF               	movwf	___ftdiv@f2+1
  5276  005E  3044               	movlw	68
  5277  005F  00D0               	movwf	___ftdiv@f2+2
  5278  0060  3000               	movlw	0
  5279  0061  00BE               	movwf	___ftmul@f1
  5280  0062  30A0               	movlw	160
  5281  0063  00BF               	movwf	___ftmul@f1+1
  5282  0064  3040               	movlw	64
  5283  0065  00C0               	movwf	___ftmul@f1+2
  5284  0066  085F               	movf	CalcMQ135@RAW_ADC+1,w
  5285  0067  01A9               	clrf	___awtoft@c+1
  5286  0068  07A9               	addwf	___awtoft@c+1,f
  5287  0069  085E               	movf	CalcMQ135@RAW_ADC,w
  5288  006A  01A8               	clrf	___awtoft@c
  5289  006B  07A8               	addwf	___awtoft@c,f
  5290  006C  160A  118A  27B6  120A  118A  	fcall	___awtoft
  5291  0071  1283               	bcf	3,5	;RP0=0, select bank0
  5292  0072  1303               	bcf	3,6	;RP1=0, select bank0
  5293  0073  0828               	movf	?___awtoft,w
  5294  0074  00C1               	movwf	___ftmul@f2
  5295  0075  0829               	movf	?___awtoft+1,w
  5296  0076  00C2               	movwf	___ftmul@f2+1
  5297  0077  082A               	movf	?___awtoft+2,w
  5298  0078  00C3               	movwf	___ftmul@f2+2
  5299  0079  120A  118A  2727  120A  118A  	fcall	___ftmul
  5300  007E  1283               	bcf	3,5	;RP0=0, select bank0
  5301  007F  1303               	bcf	3,6	;RP1=0, select bank0
  5302  0080  083E               	movf	?___ftmul,w
  5303  0081  00D1               	movwf	___ftdiv@f1
  5304  0082  083F               	movf	?___ftmul+1,w
  5305  0083  00D2               	movwf	___ftdiv@f1+1
  5306  0084  0840               	movf	?___ftmul+2,w
  5307  0085  00D3               	movwf	___ftdiv@f1+2
  5308  0086  120A  158A  2572  120A  118A  	fcall	___ftdiv
  5309  008B  1283               	bcf	3,5	;RP0=0, select bank0
  5310  008C  1303               	bcf	3,6	;RP1=0, select bank0
  5311  008D  084E               	movf	?___ftdiv,w
  5312  008E  1683               	bsf	3,5	;RP0=1, select bank1
  5313  008F  1303               	bcf	3,6	;RP1=0, select bank1
  5314  0090  00A0               	movwf	CalcMQ135@voltage^(0+128)
  5315  0091  1283               	bcf	3,5	;RP0=0, select bank0
  5316  0092  1303               	bcf	3,6	;RP1=0, select bank0
  5317  0093  084F               	movf	?___ftdiv+1,w
  5318  0094  1683               	bsf	3,5	;RP0=1, select bank1
  5319  0095  1303               	bcf	3,6	;RP1=0, select bank1
  5320  0096  00A1               	movwf	(CalcMQ135@voltage+1)^(0+128)
  5321  0097  1283               	bcf	3,5	;RP0=0, select bank0
  5322  0098  1303               	bcf	3,6	;RP1=0, select bank0
  5323  0099  0850               	movf	?___ftdiv+2,w
  5324  009A  1683               	bsf	3,5	;RP0=1, select bank1
  5325  009B  1303               	bcf	3,6	;RP1=0, select bank1
  5326  009C  00A2               	movwf	(CalcMQ135@voltage+2)^(0+128)
  5327                           
  5328                           ;mq135_module.h: 40: float ratio = voltage / 5.0;
  5329  009D  3000               	movlw	0
  5330  009E  1283               	bcf	3,5	;RP0=0, select bank0
  5331  009F  1303               	bcf	3,6	;RP1=0, select bank0
  5332  00A0  00CE               	movwf	___ftdiv@f2
  5333  00A1  30A0               	movlw	160
  5334  00A2  00CF               	movwf	___ftdiv@f2+1
  5335  00A3  3040               	movlw	64
  5336  00A4  00D0               	movwf	___ftdiv@f2+2
  5337  00A5  1683               	bsf	3,5	;RP0=1, select bank1
  5338  00A6  1303               	bcf	3,6	;RP1=0, select bank1
  5339  00A7  0820               	movf	CalcMQ135@voltage^(0+128),w
  5340  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  5341  00A9  1303               	bcf	3,6	;RP1=0, select bank0
  5342  00AA  00D1               	movwf	___ftdiv@f1
  5343  00AB  1683               	bsf	3,5	;RP0=1, select bank1
  5344  00AC  1303               	bcf	3,6	;RP1=0, select bank1
  5345  00AD  0821               	movf	(CalcMQ135@voltage+1)^(0+128),w
  5346  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  5347  00AF  1303               	bcf	3,6	;RP1=0, select bank0
  5348  00B0  00D2               	movwf	___ftdiv@f1+1
  5349  00B1  1683               	bsf	3,5	;RP0=1, select bank1
  5350  00B2  1303               	bcf	3,6	;RP1=0, select bank1
  5351  00B3  0822               	movf	(CalcMQ135@voltage+2)^(0+128),w
  5352  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  5353  00B5  1303               	bcf	3,6	;RP1=0, select bank0
  5354  00B6  00D3               	movwf	___ftdiv@f1+2
  5355  00B7  120A  158A  2572  120A  118A  	fcall	___ftdiv
  5356  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  5357  00BD  1303               	bcf	3,6	;RP1=0, select bank0
  5358  00BE  084E               	movf	?___ftdiv,w
  5359  00BF  1683               	bsf	3,5	;RP0=1, select bank1
  5360  00C0  1303               	bcf	3,6	;RP1=0, select bank1
  5361  00C1  00C4               	movwf	CalcMQ135@ratio^(0+128)
  5362  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  5363  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  5364  00C4  084F               	movf	?___ftdiv+1,w
  5365  00C5  1683               	bsf	3,5	;RP0=1, select bank1
  5366  00C6  1303               	bcf	3,6	;RP1=0, select bank1
  5367  00C7  00C5               	movwf	(CalcMQ135@ratio+1)^(0+128)
  5368  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  5369  00C9  1303               	bcf	3,6	;RP1=0, select bank0
  5370  00CA  0850               	movf	?___ftdiv+2,w
  5371  00CB  1683               	bsf	3,5	;RP0=1, select bank1
  5372  00CC  1303               	bcf	3,6	;RP1=0, select bank1
  5373  00CD  00C6               	movwf	(CalcMQ135@ratio+2)^(0+128)
  5374                           
  5375                           ;mq135_module.h: 43: float ratio2 = ratio * ratio;
  5376  00CE  0844               	movf	CalcMQ135@ratio^(0+128),w
  5377  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  5378  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  5379  00D1  00BE               	movwf	___ftmul@f1
  5380  00D2  1683               	bsf	3,5	;RP0=1, select bank1
  5381  00D3  1303               	bcf	3,6	;RP1=0, select bank1
  5382  00D4  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5383  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  5384  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  5385  00D7  00BF               	movwf	___ftmul@f1+1
  5386  00D8  1683               	bsf	3,5	;RP0=1, select bank1
  5387  00D9  1303               	bcf	3,6	;RP1=0, select bank1
  5388  00DA  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5389  00DB  1283               	bcf	3,5	;RP0=0, select bank0
  5390  00DC  1303               	bcf	3,6	;RP1=0, select bank0
  5391  00DD  00C0               	movwf	___ftmul@f1+2
  5392  00DE  1683               	bsf	3,5	;RP0=1, select bank1
  5393  00DF  1303               	bcf	3,6	;RP1=0, select bank1
  5394  00E0  0844               	movf	CalcMQ135@ratio^(0+128),w
  5395  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  5396  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  5397  00E3  00C1               	movwf	___ftmul@f2
  5398  00E4  1683               	bsf	3,5	;RP0=1, select bank1
  5399  00E5  1303               	bcf	3,6	;RP1=0, select bank1
  5400  00E6  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5401  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  5402  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  5403  00E9  00C2               	movwf	___ftmul@f2+1
  5404  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  5405  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  5406  00EC  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5407  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  5408  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  5409  00EF  00C3               	movwf	___ftmul@f2+2
  5410  00F0  120A  118A  2727  120A  118A  	fcall	___ftmul
  5411  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  5412  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  5413  00F7  083E               	movf	?___ftmul,w
  5414  00F8  1683               	bsf	3,5	;RP0=1, select bank1
  5415  00F9  1303               	bcf	3,6	;RP1=0, select bank1
  5416  00FA  00B5               	movwf	CalcMQ135@ratio2^(0+128)
  5417  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  5418  00FC  1303               	bcf	3,6	;RP1=0, select bank0
  5419  00FD  083F               	movf	?___ftmul+1,w
  5420  00FE  1683               	bsf	3,5	;RP0=1, select bank1
  5421  00FF  1303               	bcf	3,6	;RP1=0, select bank1
  5422  0100  00B6               	movwf	(CalcMQ135@ratio2+1)^(0+128)
  5423  0101  1283               	bcf	3,5	;RP0=0, select bank0
  5424  0102  1303               	bcf	3,6	;RP1=0, select bank0
  5425  0103  0840               	movf	?___ftmul+2,w
  5426  0104  1683               	bsf	3,5	;RP0=1, select bank1
  5427  0105  1303               	bcf	3,6	;RP1=0, select bank1
  5428  0106  00B7               	movwf	(CalcMQ135@ratio2+2)^(0+128)
  5429                           
  5430                           ;mq135_module.h: 44: float ratio3 = ratio2 * ratio;
  5431  0107  0844               	movf	CalcMQ135@ratio^(0+128),w
  5432  0108  1283               	bcf	3,5	;RP0=0, select bank0
  5433  0109  1303               	bcf	3,6	;RP1=0, select bank0
  5434  010A  00BE               	movwf	___ftmul@f1
  5435  010B  1683               	bsf	3,5	;RP0=1, select bank1
  5436  010C  1303               	bcf	3,6	;RP1=0, select bank1
  5437  010D  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5438  010E  1283               	bcf	3,5	;RP0=0, select bank0
  5439  010F  1303               	bcf	3,6	;RP1=0, select bank0
  5440  0110  00BF               	movwf	___ftmul@f1+1
  5441  0111  1683               	bsf	3,5	;RP0=1, select bank1
  5442  0112  1303               	bcf	3,6	;RP1=0, select bank1
  5443  0113  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5444  0114  1283               	bcf	3,5	;RP0=0, select bank0
  5445  0115  1303               	bcf	3,6	;RP1=0, select bank0
  5446  0116  00C0               	movwf	___ftmul@f1+2
  5447  0117  1683               	bsf	3,5	;RP0=1, select bank1
  5448  0118  1303               	bcf	3,6	;RP1=0, select bank1
  5449  0119  0835               	movf	CalcMQ135@ratio2^(0+128),w
  5450  011A  1283               	bcf	3,5	;RP0=0, select bank0
  5451  011B  1303               	bcf	3,6	;RP1=0, select bank0
  5452  011C  00C1               	movwf	___ftmul@f2
  5453  011D  1683               	bsf	3,5	;RP0=1, select bank1
  5454  011E  1303               	bcf	3,6	;RP1=0, select bank1
  5455  011F  0836               	movf	(CalcMQ135@ratio2+1)^(0+128),w
  5456  0120  1283               	bcf	3,5	;RP0=0, select bank0
  5457  0121  1303               	bcf	3,6	;RP1=0, select bank0
  5458  0122  00C2               	movwf	___ftmul@f2+1
  5459  0123  1683               	bsf	3,5	;RP0=1, select bank1
  5460  0124  1303               	bcf	3,6	;RP1=0, select bank1
  5461  0125  0837               	movf	(CalcMQ135@ratio2+2)^(0+128),w
  5462  0126  1283               	bcf	3,5	;RP0=0, select bank0
  5463  0127  1303               	bcf	3,6	;RP1=0, select bank0
  5464  0128  00C3               	movwf	___ftmul@f2+2
  5465  0129  120A  118A  2727  120A  118A  	fcall	___ftmul
  5466  012E  1283               	bcf	3,5	;RP0=0, select bank0
  5467  012F  1303               	bcf	3,6	;RP1=0, select bank0
  5468  0130  083E               	movf	?___ftmul,w
  5469  0131  1683               	bsf	3,5	;RP0=1, select bank1
  5470  0132  1303               	bcf	3,6	;RP1=0, select bank1
  5471  0133  00B8               	movwf	CalcMQ135@ratio3^(0+128)
  5472  0134  1283               	bcf	3,5	;RP0=0, select bank0
  5473  0135  1303               	bcf	3,6	;RP1=0, select bank0
  5474  0136  083F               	movf	?___ftmul+1,w
  5475  0137  1683               	bsf	3,5	;RP0=1, select bank1
  5476  0138  1303               	bcf	3,6	;RP1=0, select bank1
  5477  0139  00B9               	movwf	(CalcMQ135@ratio3+1)^(0+128)
  5478  013A  1283               	bcf	3,5	;RP0=0, select bank0
  5479  013B  1303               	bcf	3,6	;RP1=0, select bank0
  5480  013C  0840               	movf	?___ftmul+2,w
  5481  013D  1683               	bsf	3,5	;RP0=1, select bank1
  5482  013E  1303               	bcf	3,6	;RP1=0, select bank1
  5483  013F  00BA               	movwf	(CalcMQ135@ratio3+2)^(0+128)
  5484                           
  5485                           ;mq135_module.h: 45: float ratio4 = ratio3 * ratio;
  5486  0140  0844               	movf	CalcMQ135@ratio^(0+128),w
  5487  0141  1283               	bcf	3,5	;RP0=0, select bank0
  5488  0142  1303               	bcf	3,6	;RP1=0, select bank0
  5489  0143  00BE               	movwf	___ftmul@f1
  5490  0144  1683               	bsf	3,5	;RP0=1, select bank1
  5491  0145  1303               	bcf	3,6	;RP1=0, select bank1
  5492  0146  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5493  0147  1283               	bcf	3,5	;RP0=0, select bank0
  5494  0148  1303               	bcf	3,6	;RP1=0, select bank0
  5495  0149  00BF               	movwf	___ftmul@f1+1
  5496  014A  1683               	bsf	3,5	;RP0=1, select bank1
  5497  014B  1303               	bcf	3,6	;RP1=0, select bank1
  5498  014C  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5499  014D  1283               	bcf	3,5	;RP0=0, select bank0
  5500  014E  1303               	bcf	3,6	;RP1=0, select bank0
  5501  014F  00C0               	movwf	___ftmul@f1+2
  5502  0150  1683               	bsf	3,5	;RP0=1, select bank1
  5503  0151  1303               	bcf	3,6	;RP1=0, select bank1
  5504  0152  0838               	movf	CalcMQ135@ratio3^(0+128),w
  5505  0153  1283               	bcf	3,5	;RP0=0, select bank0
  5506  0154  1303               	bcf	3,6	;RP1=0, select bank0
  5507  0155  00C1               	movwf	___ftmul@f2
  5508  0156  1683               	bsf	3,5	;RP0=1, select bank1
  5509  0157  1303               	bcf	3,6	;RP1=0, select bank1
  5510  0158  0839               	movf	(CalcMQ135@ratio3+1)^(0+128),w
  5511  0159  1283               	bcf	3,5	;RP0=0, select bank0
  5512  015A  1303               	bcf	3,6	;RP1=0, select bank0
  5513  015B  00C2               	movwf	___ftmul@f2+1
  5514  015C  1683               	bsf	3,5	;RP0=1, select bank1
  5515  015D  1303               	bcf	3,6	;RP1=0, select bank1
  5516  015E  083A               	movf	(CalcMQ135@ratio3+2)^(0+128),w
  5517  015F  1283               	bcf	3,5	;RP0=0, select bank0
  5518  0160  1303               	bcf	3,6	;RP1=0, select bank0
  5519  0161  00C3               	movwf	___ftmul@f2+2
  5520  0162  120A  118A  2727  120A  118A  	fcall	___ftmul
  5521  0167  1283               	bcf	3,5	;RP0=0, select bank0
  5522  0168  1303               	bcf	3,6	;RP1=0, select bank0
  5523  0169  083E               	movf	?___ftmul,w
  5524  016A  1683               	bsf	3,5	;RP0=1, select bank1
  5525  016B  1303               	bcf	3,6	;RP1=0, select bank1
  5526  016C  00BB               	movwf	CalcMQ135@ratio4^(0+128)
  5527  016D  1283               	bcf	3,5	;RP0=0, select bank0
  5528  016E  1303               	bcf	3,6	;RP1=0, select bank0
  5529  016F  083F               	movf	?___ftmul+1,w
  5530  0170  1683               	bsf	3,5	;RP0=1, select bank1
  5531  0171  1303               	bcf	3,6	;RP1=0, select bank1
  5532  0172  00BC               	movwf	(CalcMQ135@ratio4+1)^(0+128)
  5533  0173  1283               	bcf	3,5	;RP0=0, select bank0
  5534  0174  1303               	bcf	3,6	;RP1=0, select bank0
  5535  0175  0840               	movf	?___ftmul+2,w
  5536  0176  1683               	bsf	3,5	;RP0=1, select bank1
  5537  0177  1303               	bcf	3,6	;RP1=0, select bank1
  5538  0178  00BD               	movwf	(CalcMQ135@ratio4+2)^(0+128)
  5539                           
  5540                           ;mq135_module.h: 46: float ratio5 = ratio4 * ratio;
  5541  0179  0844               	movf	CalcMQ135@ratio^(0+128),w
  5542  017A  1283               	bcf	3,5	;RP0=0, select bank0
  5543  017B  1303               	bcf	3,6	;RP1=0, select bank0
  5544  017C  00BE               	movwf	___ftmul@f1
  5545  017D  1683               	bsf	3,5	;RP0=1, select bank1
  5546  017E  1303               	bcf	3,6	;RP1=0, select bank1
  5547  017F  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5548  0180  1283               	bcf	3,5	;RP0=0, select bank0
  5549  0181  1303               	bcf	3,6	;RP1=0, select bank0
  5550  0182  00BF               	movwf	___ftmul@f1+1
  5551  0183  1683               	bsf	3,5	;RP0=1, select bank1
  5552  0184  1303               	bcf	3,6	;RP1=0, select bank1
  5553  0185  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5554  0186  1283               	bcf	3,5	;RP0=0, select bank0
  5555  0187  1303               	bcf	3,6	;RP1=0, select bank0
  5556  0188  00C0               	movwf	___ftmul@f1+2
  5557  0189  1683               	bsf	3,5	;RP0=1, select bank1
  5558  018A  1303               	bcf	3,6	;RP1=0, select bank1
  5559  018B  083B               	movf	CalcMQ135@ratio4^(0+128),w
  5560  018C  1283               	bcf	3,5	;RP0=0, select bank0
  5561  018D  1303               	bcf	3,6	;RP1=0, select bank0
  5562  018E  00C1               	movwf	___ftmul@f2
  5563  018F  1683               	bsf	3,5	;RP0=1, select bank1
  5564  0190  1303               	bcf	3,6	;RP1=0, select bank1
  5565  0191  083C               	movf	(CalcMQ135@ratio4+1)^(0+128),w
  5566  0192  1283               	bcf	3,5	;RP0=0, select bank0
  5567  0193  1303               	bcf	3,6	;RP1=0, select bank0
  5568  0194  00C2               	movwf	___ftmul@f2+1
  5569  0195  1683               	bsf	3,5	;RP0=1, select bank1
  5570  0196  1303               	bcf	3,6	;RP1=0, select bank1
  5571  0197  083D               	movf	(CalcMQ135@ratio4+2)^(0+128),w
  5572  0198  1283               	bcf	3,5	;RP0=0, select bank0
  5573  0199  1303               	bcf	3,6	;RP1=0, select bank0
  5574  019A  00C3               	movwf	___ftmul@f2+2
  5575  019B  120A  118A  2727  120A  118A  	fcall	___ftmul
  5576  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  5577  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  5578  01A2  083E               	movf	?___ftmul,w
  5579  01A3  1683               	bsf	3,5	;RP0=1, select bank1
  5580  01A4  1303               	bcf	3,6	;RP1=0, select bank1
  5581  01A5  00BE               	movwf	CalcMQ135@ratio5^(0+128)
  5582  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  5583  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  5584  01A8  083F               	movf	?___ftmul+1,w
  5585  01A9  1683               	bsf	3,5	;RP0=1, select bank1
  5586  01AA  1303               	bcf	3,6	;RP1=0, select bank1
  5587  01AB  00BF               	movwf	(CalcMQ135@ratio5+1)^(0+128)
  5588  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  5589  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  5590  01AE  0840               	movf	?___ftmul+2,w
  5591  01AF  1683               	bsf	3,5	;RP0=1, select bank1
  5592  01B0  1303               	bcf	3,6	;RP1=0, select bank1
  5593  01B1  00C0               	movwf	(CalcMQ135@ratio5+2)^(0+128)
  5594                           
  5595                           ;mq135_module.h: 47: float ratio6 = ratio5 * ratio;
  5596  01B2  0844               	movf	CalcMQ135@ratio^(0+128),w
  5597  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  5598  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  5599  01B5  00BE               	movwf	___ftmul@f1
  5600  01B6  1683               	bsf	3,5	;RP0=1, select bank1
  5601  01B7  1303               	bcf	3,6	;RP1=0, select bank1
  5602  01B8  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5603  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  5604  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  5605  01BB  00BF               	movwf	___ftmul@f1+1
  5606  01BC  1683               	bsf	3,5	;RP0=1, select bank1
  5607  01BD  1303               	bcf	3,6	;RP1=0, select bank1
  5608  01BE  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5609  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  5610  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  5611  01C1  00C0               	movwf	___ftmul@f1+2
  5612  01C2  1683               	bsf	3,5	;RP0=1, select bank1
  5613  01C3  1303               	bcf	3,6	;RP1=0, select bank1
  5614  01C4  083E               	movf	CalcMQ135@ratio5^(0+128),w
  5615  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  5616  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  5617  01C7  00C1               	movwf	___ftmul@f2
  5618  01C8  1683               	bsf	3,5	;RP0=1, select bank1
  5619  01C9  1303               	bcf	3,6	;RP1=0, select bank1
  5620  01CA  083F               	movf	(CalcMQ135@ratio5+1)^(0+128),w
  5621  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  5622  01CC  1303               	bcf	3,6	;RP1=0, select bank0
  5623  01CD  00C2               	movwf	___ftmul@f2+1
  5624  01CE  1683               	bsf	3,5	;RP0=1, select bank1
  5625  01CF  1303               	bcf	3,6	;RP1=0, select bank1
  5626  01D0  0840               	movf	(CalcMQ135@ratio5+2)^(0+128),w
  5627  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  5628  01D2  1303               	bcf	3,6	;RP1=0, select bank0
  5629  01D3  00C3               	movwf	___ftmul@f2+2
  5630  01D4  120A  118A  2727  120A  118A  	fcall	___ftmul
  5631  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  5632  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  5633  01DB  083E               	movf	?___ftmul,w
  5634  01DC  1683               	bsf	3,5	;RP0=1, select bank1
  5635  01DD  1303               	bcf	3,6	;RP1=0, select bank1
  5636  01DE  00A3               	movwf	CalcMQ135@ratio6^(0+128)
  5637  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  5638  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  5639  01E1  083F               	movf	?___ftmul+1,w
  5640  01E2  1683               	bsf	3,5	;RP0=1, select bank1
  5641  01E3  1303               	bcf	3,6	;RP1=0, select bank1
  5642  01E4  00A4               	movwf	(CalcMQ135@ratio6+1)^(0+128)
  5643  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  5644  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  5645  01E7  0840               	movf	?___ftmul+2,w
  5646  01E8  1683               	bsf	3,5	;RP0=1, select bank1
  5647  01E9  1303               	bcf	3,6	;RP1=0, select bank1
  5648  01EA  00A5               	movwf	(CalcMQ135@ratio6+2)^(0+128)
  5649                           
  5650                           ;mq135_module.h: 50: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.0
      +                          018 * ratio3) +
  5651                           ;mq135_module.h: 51: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 * 
      +                          ratio6);
  5652  01EB  309C               	movlw	156
  5653  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  5654  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  5655  01EE  00BE               	movwf	___ftmul@f1
  5656  01EF  30B2               	movlw	178
  5657  01F0  00BF               	movwf	___ftmul@f1+1
  5658  01F1  303F               	movlw	63
  5659  01F2  00C0               	movwf	___ftmul@f1+2
  5660  01F3  1683               	bsf	3,5	;RP0=1, select bank1
  5661  01F4  1303               	bcf	3,6	;RP1=0, select bank1
  5662  01F5  0835               	movf	CalcMQ135@ratio2^(0+128),w
  5663  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  5664  01F7  1303               	bcf	3,6	;RP1=0, select bank0
  5665  01F8  00C1               	movwf	___ftmul@f2
  5666  01F9  1683               	bsf	3,5	;RP0=1, select bank1
  5667  01FA  1303               	bcf	3,6	;RP1=0, select bank1
  5668  01FB  0836               	movf	(CalcMQ135@ratio2+1)^(0+128),w
  5669  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  5670  01FD  1303               	bcf	3,6	;RP1=0, select bank0
  5671  01FE  00C2               	movwf	___ftmul@f2+1
  5672  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  5673  0200  1303               	bcf	3,6	;RP1=0, select bank1
  5674  0201  0837               	movf	(CalcMQ135@ratio2+2)^(0+128),w
  5675  0202  1283               	bcf	3,5	;RP0=0, select bank0
  5676  0203  1303               	bcf	3,6	;RP1=0, select bank0
  5677  0204  00C3               	movwf	___ftmul@f2+2
  5678  0205  120A  118A  2727  120A  118A  	fcall	___ftmul
  5679  020A  1283               	bcf	3,5	;RP0=0, select bank0
  5680  020B  1303               	bcf	3,6	;RP1=0, select bank0
  5681  020C  083E               	movf	?___ftmul,w
  5682  020D  00B1               	movwf	___ftadd@f1
  5683  020E  083F               	movf	?___ftmul+1,w
  5684  020F  00B2               	movwf	___ftadd@f1+1
  5685  0210  0840               	movf	?___ftmul+2,w
  5686  0211  00B3               	movwf	___ftadd@f1+2
  5687  0212  30A9               	movlw	169
  5688  0213  00BE               	movwf	___ftmul@f1
  5689  0214  30DE               	movlw	222
  5690  0215  00BF               	movwf	___ftmul@f1+1
  5691  0216  303C               	movlw	60
  5692  0217  00C0               	movwf	___ftmul@f1+2
  5693  0218  1683               	bsf	3,5	;RP0=1, select bank1
  5694  0219  1303               	bcf	3,6	;RP1=0, select bank1
  5695  021A  0844               	movf	CalcMQ135@ratio^(0+128),w
  5696  021B  1283               	bcf	3,5	;RP0=0, select bank0
  5697  021C  1303               	bcf	3,6	;RP1=0, select bank0
  5698  021D  00C1               	movwf	___ftmul@f2
  5699  021E  1683               	bsf	3,5	;RP0=1, select bank1
  5700  021F  1303               	bcf	3,6	;RP1=0, select bank1
  5701  0220  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5702  0221  1283               	bcf	3,5	;RP0=0, select bank0
  5703  0222  1303               	bcf	3,6	;RP1=0, select bank0
  5704  0223  00C2               	movwf	___ftmul@f2+1
  5705  0224  1683               	bsf	3,5	;RP0=1, select bank1
  5706  0225  1303               	bcf	3,6	;RP1=0, select bank1
  5707  0226  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5708  0227  1283               	bcf	3,5	;RP0=0, select bank0
  5709  0228  1303               	bcf	3,6	;RP1=0, select bank0
  5710  0229  00C3               	movwf	___ftmul@f2+2
  5711  022A  120A  118A  2727  120A  118A  	fcall	___ftmul
  5712  022F  1283               	bcf	3,5	;RP0=0, select bank0
  5713  0230  1303               	bcf	3,6	;RP1=0, select bank0
  5714  0231  083E               	movf	?___ftmul,w
  5715  0232  00B4               	movwf	___ftadd@f2
  5716  0233  083F               	movf	?___ftmul+1,w
  5717  0234  00B5               	movwf	___ftadd@f2+1
  5718  0235  0840               	movf	?___ftmul+2,w
  5719  0236  00B6               	movwf	___ftadd@f2+2
  5720  0237  120A  158A  26F7  120A  118A  	fcall	___ftadd
  5721  023C  1283               	bcf	3,5	;RP0=0, select bank0
  5722  023D  1303               	bcf	3,6	;RP1=0, select bank0
  5723  023E  0831               	movf	?___ftadd,w
  5724  023F  1683               	bsf	3,5	;RP0=1, select bank1
  5725  0240  1303               	bcf	3,6	;RP1=0, select bank1
  5726  0241  00A6               	movwf	_CalcMQ135$629^(0+128)
  5727  0242  1283               	bcf	3,5	;RP0=0, select bank0
  5728  0243  1303               	bcf	3,6	;RP1=0, select bank0
  5729  0244  0832               	movf	?___ftadd+1,w
  5730  0245  1683               	bsf	3,5	;RP0=1, select bank1
  5731  0246  1303               	bcf	3,6	;RP1=0, select bank1
  5732  0247  00A7               	movwf	(_CalcMQ135$629+1)^(0+128)
  5733  0248  1283               	bcf	3,5	;RP0=0, select bank0
  5734  0249  1303               	bcf	3,6	;RP1=0, select bank0
  5735  024A  0833               	movf	?___ftadd+2,w
  5736  024B  1683               	bsf	3,5	;RP0=1, select bank1
  5737  024C  1303               	bcf	3,6	;RP1=0, select bank1
  5738  024D  00A8               	movwf	(_CalcMQ135$629+2)^(0+128)
  5739                           
  5740                           ;mq135_module.h: 50: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.0
      +                          018 * ratio3) +
  5741                           ;mq135_module.h: 51: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 * 
      +                          ratio6);
  5742  024E  30EE               	movlw	238
  5743  024F  1283               	bcf	3,5	;RP0=0, select bank0
  5744  0250  1303               	bcf	3,6	;RP1=0, select bank0
  5745  0251  00BE               	movwf	___ftmul@f1
  5746  0252  30EB               	movlw	235
  5747  0253  00BF               	movwf	___ftmul@f1+1
  5748  0254  303A               	movlw	58
  5749  0255  00C0               	movwf	___ftmul@f1+2
  5750  0256  1683               	bsf	3,5	;RP0=1, select bank1
  5751  0257  1303               	bcf	3,6	;RP1=0, select bank1
  5752  0258  0838               	movf	CalcMQ135@ratio3^(0+128),w
  5753  0259  1283               	bcf	3,5	;RP0=0, select bank0
  5754  025A  1303               	bcf	3,6	;RP1=0, select bank0
  5755  025B  00C1               	movwf	___ftmul@f2
  5756  025C  1683               	bsf	3,5	;RP0=1, select bank1
  5757  025D  1303               	bcf	3,6	;RP1=0, select bank1
  5758  025E  0839               	movf	(CalcMQ135@ratio3+1)^(0+128),w
  5759  025F  1283               	bcf	3,5	;RP0=0, select bank0
  5760  0260  1303               	bcf	3,6	;RP1=0, select bank0
  5761  0261  00C2               	movwf	___ftmul@f2+1
  5762  0262  1683               	bsf	3,5	;RP0=1, select bank1
  5763  0263  1303               	bcf	3,6	;RP1=0, select bank1
  5764  0264  083A               	movf	(CalcMQ135@ratio3+2)^(0+128),w
  5765  0265  1283               	bcf	3,5	;RP0=0, select bank0
  5766  0266  1303               	bcf	3,6	;RP1=0, select bank0
  5767  0267  00C3               	movwf	___ftmul@f2+2
  5768  0268  120A  118A  2727  120A  118A  	fcall	___ftmul
  5769  026D  1283               	bcf	3,5	;RP0=0, select bank0
  5770  026E  1303               	bcf	3,6	;RP1=0, select bank0
  5771  026F  083E               	movf	?___ftmul,w
  5772  0270  00B1               	movwf	___ftadd@f1
  5773  0271  083F               	movf	?___ftmul+1,w
  5774  0272  00B2               	movwf	___ftadd@f1+1
  5775  0273  0840               	movf	?___ftmul+2,w
  5776  0274  00B3               	movwf	___ftadd@f1+2
  5777  0275  1683               	bsf	3,5	;RP0=1, select bank1
  5778  0276  1303               	bcf	3,6	;RP1=0, select bank1
  5779  0277  0826               	movf	_CalcMQ135$629^(0+128),w
  5780  0278  1283               	bcf	3,5	;RP0=0, select bank0
  5781  0279  1303               	bcf	3,6	;RP1=0, select bank0
  5782  027A  00B4               	movwf	___ftadd@f2
  5783  027B  1683               	bsf	3,5	;RP0=1, select bank1
  5784  027C  1303               	bcf	3,6	;RP1=0, select bank1
  5785  027D  0827               	movf	(_CalcMQ135$629+1)^(0+128),w
  5786  027E  1283               	bcf	3,5	;RP0=0, select bank0
  5787  027F  1303               	bcf	3,6	;RP1=0, select bank0
  5788  0280  00B5               	movwf	___ftadd@f2+1
  5789  0281  1683               	bsf	3,5	;RP0=1, select bank1
  5790  0282  1303               	bcf	3,6	;RP1=0, select bank1
  5791  0283  0828               	movf	(_CalcMQ135$629+2)^(0+128),w
  5792  0284  1283               	bcf	3,5	;RP0=0, select bank0
  5793  0285  1303               	bcf	3,6	;RP1=0, select bank0
  5794  0286  00B6               	movwf	___ftadd@f2+2
  5795  0287  120A  158A  26F7  120A  118A  	fcall	___ftadd
  5796  028C  1283               	bcf	3,5	;RP0=0, select bank0
  5797  028D  1303               	bcf	3,6	;RP1=0, select bank0
  5798  028E  0831               	movf	?___ftadd,w
  5799  028F  1683               	bsf	3,5	;RP0=1, select bank1
  5800  0290  1303               	bcf	3,6	;RP1=0, select bank1
  5801  0291  00A9               	movwf	_CalcMQ135$630^(0+128)
  5802  0292  1283               	bcf	3,5	;RP0=0, select bank0
  5803  0293  1303               	bcf	3,6	;RP1=0, select bank0
  5804  0294  0832               	movf	?___ftadd+1,w
  5805  0295  1683               	bsf	3,5	;RP0=1, select bank1
  5806  0296  1303               	bcf	3,6	;RP1=0, select bank1
  5807  0297  00AA               	movwf	(_CalcMQ135$630+1)^(0+128)
  5808  0298  1283               	bcf	3,5	;RP0=0, select bank0
  5809  0299  1303               	bcf	3,6	;RP1=0, select bank0
  5810  029A  0833               	movf	?___ftadd+2,w
  5811  029B  1683               	bsf	3,5	;RP0=1, select bank1
  5812  029C  1303               	bcf	3,6	;RP1=0, select bank1
  5813  029D  00AB               	movwf	(_CalcMQ135$630+2)^(0+128)
  5814                           
  5815                           ;mq135_module.h: 50: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.0
      +                          018 * ratio3) +
  5816                           ;mq135_module.h: 51: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 * 
      +                          ratio6);
  5817  029E  3074               	movlw	116
  5818  029F  1283               	bcf	3,5	;RP0=0, select bank0
  5819  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  5820  02A1  00BE               	movwf	___ftmul@f1
  5821  02A2  305A               	movlw	90
  5822  02A3  00BF               	movwf	___ftmul@f1+1
  5823  02A4  30BB               	movlw	187
  5824  02A5  00C0               	movwf	___ftmul@f1+2
  5825  02A6  1683               	bsf	3,5	;RP0=1, select bank1
  5826  02A7  1303               	bcf	3,6	;RP1=0, select bank1
  5827  02A8  083B               	movf	CalcMQ135@ratio4^(0+128),w
  5828  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  5829  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  5830  02AB  00C1               	movwf	___ftmul@f2
  5831  02AC  1683               	bsf	3,5	;RP0=1, select bank1
  5832  02AD  1303               	bcf	3,6	;RP1=0, select bank1
  5833  02AE  083C               	movf	(CalcMQ135@ratio4+1)^(0+128),w
  5834  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  5835  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  5836  02B1  00C2               	movwf	___ftmul@f2+1
  5837  02B2  1683               	bsf	3,5	;RP0=1, select bank1
  5838  02B3  1303               	bcf	3,6	;RP1=0, select bank1
  5839  02B4  083D               	movf	(CalcMQ135@ratio4+2)^(0+128),w
  5840  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  5841  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  5842  02B7  00C3               	movwf	___ftmul@f2+2
  5843  02B8  120A  118A  2727  120A  118A  	fcall	___ftmul
  5844  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  5845  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  5846  02BF  083E               	movf	?___ftmul,w
  5847  02C0  00B1               	movwf	___ftadd@f1
  5848  02C1  083F               	movf	?___ftmul+1,w
  5849  02C2  00B2               	movwf	___ftadd@f1+1
  5850  02C3  0840               	movf	?___ftmul+2,w
  5851  02C4  00B3               	movwf	___ftadd@f1+2
  5852  02C5  1683               	bsf	3,5	;RP0=1, select bank1
  5853  02C6  1303               	bcf	3,6	;RP1=0, select bank1
  5854  02C7  0829               	movf	_CalcMQ135$630^(0+128),w
  5855  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  5856  02C9  1303               	bcf	3,6	;RP1=0, select bank0
  5857  02CA  00B4               	movwf	___ftadd@f2
  5858  02CB  1683               	bsf	3,5	;RP0=1, select bank1
  5859  02CC  1303               	bcf	3,6	;RP1=0, select bank1
  5860  02CD  082A               	movf	(_CalcMQ135$630+1)^(0+128),w
  5861  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  5862  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  5863  02D0  00B5               	movwf	___ftadd@f2+1
  5864  02D1  1683               	bsf	3,5	;RP0=1, select bank1
  5865  02D2  1303               	bcf	3,6	;RP1=0, select bank1
  5866  02D3  082B               	movf	(_CalcMQ135$630+2)^(0+128),w
  5867  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  5868  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  5869  02D6  00B6               	movwf	___ftadd@f2+2
  5870  02D7  120A  158A  26F7  120A  118A  	fcall	___ftadd
  5871  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  5872  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  5873  02DE  0831               	movf	?___ftadd,w
  5874  02DF  1683               	bsf	3,5	;RP0=1, select bank1
  5875  02E0  1303               	bcf	3,6	;RP1=0, select bank1
  5876  02E1  00AC               	movwf	_CalcMQ135$631^(0+128)
  5877  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  5878  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  5879  02E4  0832               	movf	?___ftadd+1,w
  5880  02E5  1683               	bsf	3,5	;RP0=1, select bank1
  5881  02E6  1303               	bcf	3,6	;RP1=0, select bank1
  5882  02E7  00AD               	movwf	(_CalcMQ135$631+1)^(0+128)
  5883  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  5884  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  5885  02EA  0833               	movf	?___ftadd+2,w
  5886  02EB  1683               	bsf	3,5	;RP0=1, select bank1
  5887  02EC  1303               	bcf	3,6	;RP1=0, select bank1
  5888  02ED  00AE               	movwf	(_CalcMQ135$631+2)^(0+128)
  5889                           
  5890                           ;mq135_module.h: 50: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.0
      +                          018 * ratio3) +
  5891                           ;mq135_module.h: 51: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 * 
      +                          ratio6);
  5892  02EE  3010               	movlw	16
  5893  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  5894  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  5895  02F1  00BE               	movwf	___ftmul@f1
  5896  02F2  30FC               	movlw	252
  5897  02F3  00BF               	movwf	___ftmul@f1+1
  5898  02F4  30BA               	movlw	186
  5899  02F5  00C0               	movwf	___ftmul@f1+2
  5900  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  5901  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  5902  02F8  083E               	movf	CalcMQ135@ratio5^(0+128),w
  5903  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  5904  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  5905  02FB  00C1               	movwf	___ftmul@f2
  5906  02FC  1683               	bsf	3,5	;RP0=1, select bank1
  5907  02FD  1303               	bcf	3,6	;RP1=0, select bank1
  5908  02FE  083F               	movf	(CalcMQ135@ratio5+1)^(0+128),w
  5909  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  5910  0300  1303               	bcf	3,6	;RP1=0, select bank0
  5911  0301  00C2               	movwf	___ftmul@f2+1
  5912  0302  1683               	bsf	3,5	;RP0=1, select bank1
  5913  0303  1303               	bcf	3,6	;RP1=0, select bank1
  5914  0304  0840               	movf	(CalcMQ135@ratio5+2)^(0+128),w
  5915  0305  1283               	bcf	3,5	;RP0=0, select bank0
  5916  0306  1303               	bcf	3,6	;RP1=0, select bank0
  5917  0307  00C3               	movwf	___ftmul@f2+2
  5918  0308  120A  118A  2727  120A  118A  	fcall	___ftmul
  5919  030D  1283               	bcf	3,5	;RP0=0, select bank0
  5920  030E  1303               	bcf	3,6	;RP1=0, select bank0
  5921  030F  083E               	movf	?___ftmul,w
  5922  0310  00B1               	movwf	___ftadd@f1
  5923  0311  083F               	movf	?___ftmul+1,w
  5924  0312  00B2               	movwf	___ftadd@f1+1
  5925  0313  0840               	movf	?___ftmul+2,w
  5926  0314  00B3               	movwf	___ftadd@f1+2
  5927  0315  1683               	bsf	3,5	;RP0=1, select bank1
  5928  0316  1303               	bcf	3,6	;RP1=0, select bank1
  5929  0317  082C               	movf	_CalcMQ135$631^(0+128),w
  5930  0318  1283               	bcf	3,5	;RP0=0, select bank0
  5931  0319  1303               	bcf	3,6	;RP1=0, select bank0
  5932  031A  00B4               	movwf	___ftadd@f2
  5933  031B  1683               	bsf	3,5	;RP0=1, select bank1
  5934  031C  1303               	bcf	3,6	;RP1=0, select bank1
  5935  031D  082D               	movf	(_CalcMQ135$631+1)^(0+128),w
  5936  031E  1283               	bcf	3,5	;RP0=0, select bank0
  5937  031F  1303               	bcf	3,6	;RP1=0, select bank0
  5938  0320  00B5               	movwf	___ftadd@f2+1
  5939  0321  1683               	bsf	3,5	;RP0=1, select bank1
  5940  0322  1303               	bcf	3,6	;RP1=0, select bank1
  5941  0323  082E               	movf	(_CalcMQ135$631+2)^(0+128),w
  5942  0324  1283               	bcf	3,5	;RP0=0, select bank0
  5943  0325  1303               	bcf	3,6	;RP1=0, select bank0
  5944  0326  00B6               	movwf	___ftadd@f2+2
  5945  0327  120A  158A  26F7  120A  118A  	fcall	___ftadd
  5946  032C  1283               	bcf	3,5	;RP0=0, select bank0
  5947  032D  1303               	bcf	3,6	;RP1=0, select bank0
  5948  032E  0831               	movf	?___ftadd,w
  5949  032F  1683               	bsf	3,5	;RP0=1, select bank1
  5950  0330  1303               	bcf	3,6	;RP1=0, select bank1
  5951  0331  00AF               	movwf	_CalcMQ135$632^(0+128)
  5952  0332  1283               	bcf	3,5	;RP0=0, select bank0
  5953  0333  1303               	bcf	3,6	;RP1=0, select bank0
  5954  0334  0832               	movf	?___ftadd+1,w
  5955  0335  1683               	bsf	3,5	;RP0=1, select bank1
  5956  0336  1303               	bcf	3,6	;RP1=0, select bank1
  5957  0337  00B0               	movwf	(_CalcMQ135$632+1)^(0+128)
  5958  0338  1283               	bcf	3,5	;RP0=0, select bank0
  5959  0339  1303               	bcf	3,6	;RP1=0, select bank0
  5960  033A  0833               	movf	?___ftadd+2,w
  5961  033B  1683               	bsf	3,5	;RP0=1, select bank1
  5962  033C  1303               	bcf	3,6	;RP1=0, select bank1
  5963  033D  00B1               	movwf	(_CalcMQ135$632+2)^(0+128)
  5964                           
  5965                           ;mq135_module.h: 50: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.0
      +                          018 * ratio3) +
  5966                           ;mq135_module.h: 51: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 * 
      +                          ratio6);
  5967  033E  30A8               	movlw	168
  5968  033F  1283               	bcf	3,5	;RP0=0, select bank0
  5969  0340  1303               	bcf	3,6	;RP1=0, select bank0
  5970  0341  00BE               	movwf	___ftmul@f1
  5971  0342  3090               	movlw	144
  5972  0343  00BF               	movwf	___ftmul@f1+1
  5973  0344  303F               	movlw	63
  5974  0345  00C0               	movwf	___ftmul@f1+2
  5975  0346  1683               	bsf	3,5	;RP0=1, select bank1
  5976  0347  1303               	bcf	3,6	;RP1=0, select bank1
  5977  0348  0823               	movf	CalcMQ135@ratio6^(0+128),w
  5978  0349  1283               	bcf	3,5	;RP0=0, select bank0
  5979  034A  1303               	bcf	3,6	;RP1=0, select bank0
  5980  034B  00C1               	movwf	___ftmul@f2
  5981  034C  1683               	bsf	3,5	;RP0=1, select bank1
  5982  034D  1303               	bcf	3,6	;RP1=0, select bank1
  5983  034E  0824               	movf	(CalcMQ135@ratio6+1)^(0+128),w
  5984  034F  1283               	bcf	3,5	;RP0=0, select bank0
  5985  0350  1303               	bcf	3,6	;RP1=0, select bank0
  5986  0351  00C2               	movwf	___ftmul@f2+1
  5987  0352  1683               	bsf	3,5	;RP0=1, select bank1
  5988  0353  1303               	bcf	3,6	;RP1=0, select bank1
  5989  0354  0825               	movf	(CalcMQ135@ratio6+2)^(0+128),w
  5990  0355  1283               	bcf	3,5	;RP0=0, select bank0
  5991  0356  1303               	bcf	3,6	;RP1=0, select bank0
  5992  0357  00C3               	movwf	___ftmul@f2+2
  5993  0358  120A  118A  2727  120A  118A  	fcall	___ftmul
  5994  035D  1283               	bcf	3,5	;RP0=0, select bank0
  5995  035E  1303               	bcf	3,6	;RP1=0, select bank0
  5996  035F  083E               	movf	?___ftmul,w
  5997  0360  00B1               	movwf	___ftadd@f1
  5998  0361  083F               	movf	?___ftmul+1,w
  5999  0362  00B2               	movwf	___ftadd@f1+1
  6000  0363  0840               	movf	?___ftmul+2,w
  6001  0364  00B3               	movwf	___ftadd@f1+2
  6002  0365  1683               	bsf	3,5	;RP0=1, select bank1
  6003  0366  1303               	bcf	3,6	;RP1=0, select bank1
  6004  0367  082F               	movf	_CalcMQ135$632^(0+128),w
  6005  0368  1283               	bcf	3,5	;RP0=0, select bank0
  6006  0369  1303               	bcf	3,6	;RP1=0, select bank0
  6007  036A  00B4               	movwf	___ftadd@f2
  6008  036B  1683               	bsf	3,5	;RP0=1, select bank1
  6009  036C  1303               	bcf	3,6	;RP1=0, select bank1
  6010  036D  0830               	movf	(_CalcMQ135$632+1)^(0+128),w
  6011  036E  1283               	bcf	3,5	;RP0=0, select bank0
  6012  036F  1303               	bcf	3,6	;RP1=0, select bank0
  6013  0370  00B5               	movwf	___ftadd@f2+1
  6014  0371  1683               	bsf	3,5	;RP0=1, select bank1
  6015  0372  1303               	bcf	3,6	;RP1=0, select bank1
  6016  0373  0831               	movf	(_CalcMQ135$632+2)^(0+128),w
  6017  0374  1283               	bcf	3,5	;RP0=0, select bank0
  6018  0375  1303               	bcf	3,6	;RP1=0, select bank0
  6019  0376  00B6               	movwf	___ftadd@f2+2
  6020  0377  120A  158A  26F7  120A  118A  	fcall	___ftadd
  6021  037C  1283               	bcf	3,5	;RP0=0, select bank0
  6022  037D  1303               	bcf	3,6	;RP1=0, select bank0
  6023  037E  0831               	movf	?___ftadd,w
  6024  037F  1683               	bsf	3,5	;RP0=1, select bank1
  6025  0380  1303               	bcf	3,6	;RP1=0, select bank1
  6026  0381  00B2               	movwf	_CalcMQ135$633^(0+128)
  6027  0382  1283               	bcf	3,5	;RP0=0, select bank0
  6028  0383  1303               	bcf	3,6	;RP1=0, select bank0
  6029  0384  0832               	movf	?___ftadd+1,w
  6030  0385  1683               	bsf	3,5	;RP0=1, select bank1
  6031  0386  1303               	bcf	3,6	;RP1=0, select bank1
  6032  0387  00B3               	movwf	(_CalcMQ135$633+1)^(0+128)
  6033  0388  1283               	bcf	3,5	;RP0=0, select bank0
  6034  0389  1303               	bcf	3,6	;RP1=0, select bank0
  6035  038A  0833               	movf	?___ftadd+2,w
  6036  038B  1683               	bsf	3,5	;RP0=1, select bank1
  6037  038C  1303               	bcf	3,6	;RP1=0, select bank1
  6038  038D  00B4               	movwf	(_CalcMQ135$633+2)^(0+128)
  6039                           
  6040                           ;mq135_module.h: 50: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.0
      +                          018 * ratio3) +
  6041                           ;mq135_module.h: 51: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 * 
      +                          ratio6);
  6042  038E  3080               	movlw	128
  6043  038F  1283               	bcf	3,5	;RP0=0, select bank0
  6044  0390  1303               	bcf	3,6	;RP1=0, select bank0
  6045  0391  00B1               	movwf	___ftadd@f1
  6046  0392  30B7               	movlw	183
  6047  0393  00B2               	movwf	___ftadd@f1+1
  6048  0394  3039               	movlw	57
  6049  0395  00B3               	movwf	___ftadd@f1+2
  6050  0396  1683               	bsf	3,5	;RP0=1, select bank1
  6051  0397  1303               	bcf	3,6	;RP1=0, select bank1
  6052  0398  0832               	movf	_CalcMQ135$633^(0+128),w
  6053  0399  1283               	bcf	3,5	;RP0=0, select bank0
  6054  039A  1303               	bcf	3,6	;RP1=0, select bank0
  6055  039B  00B4               	movwf	___ftadd@f2
  6056  039C  1683               	bsf	3,5	;RP0=1, select bank1
  6057  039D  1303               	bcf	3,6	;RP1=0, select bank1
  6058  039E  0833               	movf	(_CalcMQ135$633+1)^(0+128),w
  6059  039F  1283               	bcf	3,5	;RP0=0, select bank0
  6060  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  6061  03A1  00B5               	movwf	___ftadd@f2+1
  6062  03A2  1683               	bsf	3,5	;RP0=1, select bank1
  6063  03A3  1303               	bcf	3,6	;RP1=0, select bank1
  6064  03A4  0834               	movf	(_CalcMQ135$633+2)^(0+128),w
  6065  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  6066  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  6067  03A7  00B6               	movwf	___ftadd@f2+2
  6068  03A8  120A  158A  26F7  120A  118A  	fcall	___ftadd
  6069  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  6070  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  6071  03AF  0831               	movf	?___ftadd,w
  6072  03B0  1683               	bsf	3,5	;RP0=1, select bank1
  6073  03B1  1303               	bcf	3,6	;RP1=0, select bank1
  6074  03B2  00C1               	movwf	CalcMQ135@co2^(0+128)
  6075  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  6076  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  6077  03B5  0832               	movf	?___ftadd+1,w
  6078  03B6  1683               	bsf	3,5	;RP0=1, select bank1
  6079  03B7  1303               	bcf	3,6	;RP1=0, select bank1
  6080  03B8  00C2               	movwf	(CalcMQ135@co2+1)^(0+128)
  6081  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  6082  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  6083  03BB  0833               	movf	?___ftadd+2,w
  6084  03BC  1683               	bsf	3,5	;RP0=1, select bank1
  6085  03BD  1303               	bcf	3,6	;RP1=0, select bank1
  6086  03BE  00C3               	movwf	(CalcMQ135@co2+2)^(0+128)
  6087                           
  6088                           ;mq135_module.h: 53: co2 *= 415.58;
  6089  03BF  30CA               	movlw	202
  6090  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  6091  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  6092  03C2  00BE               	movwf	___ftmul@f1
  6093  03C3  30CF               	movlw	207
  6094  03C4  00BF               	movwf	___ftmul@f1+1
  6095  03C5  3043               	movlw	67
  6096  03C6  00C0               	movwf	___ftmul@f1+2
  6097  03C7  1683               	bsf	3,5	;RP0=1, select bank1
  6098  03C8  1303               	bcf	3,6	;RP1=0, select bank1
  6099  03C9  0841               	movf	CalcMQ135@co2^(0+128),w
  6100  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  6101  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  6102  03CC  00C1               	movwf	___ftmul@f2
  6103  03CD  1683               	bsf	3,5	;RP0=1, select bank1
  6104  03CE  1303               	bcf	3,6	;RP1=0, select bank1
  6105  03CF  0842               	movf	(CalcMQ135@co2+1)^(0+128),w
  6106  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  6107  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  6108  03D2  00C2               	movwf	___ftmul@f2+1
  6109  03D3  1683               	bsf	3,5	;RP0=1, select bank1
  6110  03D4  1303               	bcf	3,6	;RP1=0, select bank1
  6111  03D5  0843               	movf	(CalcMQ135@co2+2)^(0+128),w
  6112  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  6113  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  6114  03D8  00C3               	movwf	___ftmul@f2+2
  6115  03D9  120A  118A  2727   	fcall	___ftmul
  6116  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  6117  03DD  1303               	bcf	3,6	;RP1=0, select bank0
  6118  03DE  083E               	movf	?___ftmul,w
  6119  03DF  1683               	bsf	3,5	;RP0=1, select bank1
  6120  03E0  1303               	bcf	3,6	;RP1=0, select bank1
  6121  03E1  00C1               	movwf	CalcMQ135@co2^(0+128)
  6122  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  6123  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  6124  03E4  083F               	movf	?___ftmul+1,w
  6125  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  6126  03E6  1303               	bcf	3,6	;RP1=0, select bank1
  6127  03E7  00C2               	movwf	(CalcMQ135@co2+1)^(0+128)
  6128  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  6129  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  6130  03EA  0840               	movf	?___ftmul+2,w
  6131  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  6132  03EC  1303               	bcf	3,6	;RP1=0, select bank1
  6133  03ED  00C3               	movwf	(CalcMQ135@co2+2)^(0+128)
  6134                           
  6135                           ;mq135_module.h: 54: return co2;
  6136  03EE  0841               	movf	CalcMQ135@co2^(0+128),w
  6137  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  6138  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  6139  03F1  00DE               	movwf	?_CalcMQ135
  6140  03F2  1683               	bsf	3,5	;RP0=1, select bank1
  6141  03F3  1303               	bcf	3,6	;RP1=0, select bank1
  6142  03F4  0842               	movf	(CalcMQ135@co2+1)^(0+128),w
  6143  03F5  1283               	bcf	3,5	;RP0=0, select bank0
  6144  03F6  1303               	bcf	3,6	;RP1=0, select bank0
  6145  03F7  00DF               	movwf	?_CalcMQ135+1
  6146  03F8  1683               	bsf	3,5	;RP0=1, select bank1
  6147  03F9  1303               	bcf	3,6	;RP1=0, select bank1
  6148  03FA  0843               	movf	(CalcMQ135@co2+2)^(0+128),w
  6149  03FB  1283               	bcf	3,5	;RP0=0, select bank0
  6150  03FC  1303               	bcf	3,6	;RP1=0, select bank0
  6151  03FD  00E0               	movwf	?_CalcMQ135+2
  6152  03FE  0008               	return
  6153  03FF                     __end_of_CalcMQ135:	
  6154                           
  6155                           	psect	text30
  6156  0727                     __ptext30:	
  6157 ;; *************** function ___ftmul *****************
  6158 ;; Defined at:
  6159 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;  f1              3   30[BANK0 ] float 
  6162 ;;  f2              3   33[BANK0 ] float 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  f3_as_produc    3   41[BANK0 ] unsigned um
  6165 ;;  sign            1   45[BANK0 ] unsigned char 
  6166 ;;  cntr            1   44[BANK0 ] unsigned char 
  6167 ;;  exp             1   40[BANK0 ] unsigned char 
  6168 ;; Return value:  Size  Location     Type
  6169 ;;                  3   30[BANK0 ] float 
  6170 ;; Registers used:
  6171 ;;		wreg, status,2, status,0, pclath, cstack
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6177 ;;      Params:         0       6       0       0       0
  6178 ;;      Locals:         0       6       0       0       0
  6179 ;;      Temps:          0       4       0       0       0
  6180 ;;      Totals:         0      16       0       0       0
  6181 ;;Total ram usage:       16 bytes
  6182 ;; Hardware stack levels used:    1
  6183 ;; Hardware stack levels required when called:    3
  6184 ;; This function calls:
  6185 ;;		___ftpack
  6186 ;; This function is called by:
  6187 ;;		_CalcMQ135
  6188 ;;		_displayPPM
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           
  6193                           ;psect for function ___ftmul
  6194  0727                     ___ftmul:	
  6195                           
  6196                           ;incstack = 0
  6197                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6198  0727  1283               	bcf	3,5	;RP0=0, select bank0
  6199  0728  1303               	bcf	3,6	;RP1=0, select bank0
  6200  0729  083E               	movf	___ftmul@f1,w
  6201  072A  00C4               	movwf	??___ftmul
  6202  072B  083F               	movf	___ftmul@f1+1,w
  6203  072C  00C5               	movwf	??___ftmul+1
  6204  072D  0840               	movf	___ftmul@f1+2,w
  6205  072E  00C6               	movwf	??___ftmul+2
  6206  072F  1003               	clrc
  6207  0730  0D45               	rlf	??___ftmul+1,w
  6208  0731  0D46               	rlf	??___ftmul+2,w
  6209  0732  00C7               	movwf	??___ftmul+3
  6210  0733  0847               	movf	??___ftmul+3,w
  6211  0734  00C8               	movwf	___ftmul@exp
  6212  0735  08C8               	movf	___ftmul@exp,f
  6213  0736  1D03               	skipz
  6214  0737  2F3F               	goto	l2049
  6215  0738  3000               	movlw	0
  6216  0739  00BE               	movwf	?___ftmul
  6217  073A  3000               	movlw	0
  6218  073B  00BF               	movwf	?___ftmul+1
  6219  073C  3000               	movlw	0
  6220  073D  00C0               	movwf	?___ftmul+2
  6221  073E  0008               	return
  6222  073F                     l2049:	
  6223  073F  0841               	movf	___ftmul@f2,w
  6224  0740  00C4               	movwf	??___ftmul
  6225  0741  0842               	movf	___ftmul@f2+1,w
  6226  0742  00C5               	movwf	??___ftmul+1
  6227  0743  0843               	movf	___ftmul@f2+2,w
  6228  0744  00C6               	movwf	??___ftmul+2
  6229  0745  1003               	clrc
  6230  0746  0D45               	rlf	??___ftmul+1,w
  6231  0747  0D46               	rlf	??___ftmul+2,w
  6232  0748  00C7               	movwf	??___ftmul+3
  6233  0749  0847               	movf	??___ftmul+3,w
  6234  074A  00CD               	movwf	___ftmul@sign
  6235  074B  08CD               	movf	___ftmul@sign,f
  6236  074C  1D03               	skipz
  6237  074D  2F55               	goto	l2055
  6238  074E  3000               	movlw	0
  6239  074F  00BE               	movwf	?___ftmul
  6240  0750  3000               	movlw	0
  6241  0751  00BF               	movwf	?___ftmul+1
  6242  0752  3000               	movlw	0
  6243  0753  00C0               	movwf	?___ftmul+2
  6244  0754  0008               	return
  6245  0755                     l2055:	
  6246  0755  084D               	movf	___ftmul@sign,w
  6247  0756  3E7B               	addlw	123
  6248  0757  00C4               	movwf	??___ftmul
  6249  0758  0844               	movf	??___ftmul,w
  6250  0759  07C8               	addwf	___ftmul@exp,f
  6251  075A  083E               	movf	___ftmul@f1,w
  6252  075B  00C4               	movwf	??___ftmul
  6253  075C  083F               	movf	___ftmul@f1+1,w
  6254  075D  00C5               	movwf	??___ftmul+1
  6255  075E  0840               	movf	___ftmul@f1+2,w
  6256  075F  00C6               	movwf	??___ftmul+2
  6257  0760  3010               	movlw	16
  6258  0761                     u2545:	
  6259  0761  1003               	clrc
  6260  0762  0CC6               	rrf	??___ftmul+2,f
  6261  0763  0CC5               	rrf	??___ftmul+1,f
  6262  0764  0CC4               	rrf	??___ftmul,f
  6263  0765  3EFF               	addlw	-1
  6264  0766  1D03               	skipz
  6265  0767  2F61               	goto	u2545
  6266  0768  0844               	movf	??___ftmul,w
  6267  0769  00C7               	movwf	??___ftmul+3
  6268  076A  0847               	movf	??___ftmul+3,w
  6269  076B  00CD               	movwf	___ftmul@sign
  6270  076C  0841               	movf	___ftmul@f2,w
  6271  076D  00C4               	movwf	??___ftmul
  6272  076E  0842               	movf	___ftmul@f2+1,w
  6273  076F  00C5               	movwf	??___ftmul+1
  6274  0770  0843               	movf	___ftmul@f2+2,w
  6275  0771  00C6               	movwf	??___ftmul+2
  6276  0772  3010               	movlw	16
  6277  0773                     u2555:	
  6278  0773  1003               	clrc
  6279  0774  0CC6               	rrf	??___ftmul+2,f
  6280  0775  0CC5               	rrf	??___ftmul+1,f
  6281  0776  0CC4               	rrf	??___ftmul,f
  6282  0777  3EFF               	addlw	-1
  6283  0778  1D03               	skipz
  6284  0779  2F73               	goto	u2555
  6285  077A  0844               	movf	??___ftmul,w
  6286  077B  00C7               	movwf	??___ftmul+3
  6287  077C  0847               	movf	??___ftmul+3,w
  6288  077D  06CD               	xorwf	___ftmul@sign,f
  6289  077E  3080               	movlw	128
  6290  077F  00C4               	movwf	??___ftmul
  6291  0780  0844               	movf	??___ftmul,w
  6292  0781  05CD               	andwf	___ftmul@sign,f
  6293  0782  17BF               	bsf	___ftmul@f1+1,7
  6294  0783  17C2               	bsf	___ftmul@f2+1,7
  6295  0784  30FF               	movlw	255
  6296  0785  05C1               	andwf	___ftmul@f2,f
  6297  0786  30FF               	movlw	255
  6298  0787  05C2               	andwf	___ftmul@f2+1,f
  6299  0788  3000               	movlw	0
  6300  0789  05C3               	andwf	___ftmul@f2+2,f
  6301  078A  3000               	movlw	0
  6302  078B  00C9               	movwf	___ftmul@f3_as_product
  6303  078C  3000               	movlw	0
  6304  078D  00CA               	movwf	___ftmul@f3_as_product+1
  6305  078E  3000               	movlw	0
  6306  078F  00CB               	movwf	___ftmul@f3_as_product+2
  6307  0790  3007               	movlw	7
  6308  0791  00C4               	movwf	??___ftmul
  6309  0792  0844               	movf	??___ftmul,w
  6310  0793  00CC               	movwf	___ftmul@cntr
  6311  0794                     l2067:	
  6312  0794  1C3E               	btfss	___ftmul@f1,0
  6313  0795  2FA4               	goto	l2071
  6314  0796  0841               	movf	___ftmul@f2,w
  6315  0797  07C9               	addwf	___ftmul@f3_as_product,f
  6316  0798  0842               	movf	___ftmul@f2+1,w
  6317  0799  1103               	clrz
  6318  079A  1803               	skipnc
  6319  079B  0A42               	incf	___ftmul@f2+1,w
  6320  079C  1D03               	btfss	3,2
  6321  079D  07CA               	addwf	___ftmul@f3_as_product+1,f
  6322  079E  0843               	movf	___ftmul@f2+2,w
  6323  079F  1103               	clrz
  6324  07A0  1803               	skipnc
  6325  07A1  0A43               	incf	___ftmul@f2+2,w
  6326  07A2  1D03               	btfss	3,2
  6327  07A3  07CB               	addwf	___ftmul@f3_as_product+2,f
  6328  07A4                     l2071:	
  6329  07A4  3001               	movlw	1
  6330  07A5                     u2585:	
  6331  07A5  1003               	clrc
  6332  07A6  0CC0               	rrf	___ftmul@f1+2,f
  6333  07A7  0CBF               	rrf	___ftmul@f1+1,f
  6334  07A8  0CBE               	rrf	___ftmul@f1,f
  6335  07A9  3EFF               	addlw	-1
  6336  07AA  1D03               	skipz
  6337  07AB  2FA5               	goto	u2585
  6338  07AC  3001               	movlw	1
  6339  07AD                     u2595:	
  6340  07AD  1003               	clrc
  6341  07AE  0DC1               	rlf	___ftmul@f2,f
  6342  07AF  0DC2               	rlf	___ftmul@f2+1,f
  6343  07B0  0DC3               	rlf	___ftmul@f2+2,f
  6344  07B1  3EFF               	addlw	-1
  6345  07B2  1D03               	skipz
  6346  07B3  2FAD               	goto	u2595
  6347  07B4  3001               	movlw	1
  6348  07B5  02CC               	subwf	___ftmul@cntr,f
  6349  07B6  1D03               	btfss	3,2
  6350  07B7  2F94               	goto	l2067
  6351  07B8  3009               	movlw	9
  6352  07B9  00C4               	movwf	??___ftmul
  6353  07BA  0844               	movf	??___ftmul,w
  6354  07BB  00CC               	movwf	___ftmul@cntr
  6355  07BC                     l2079:	
  6356  07BC  1C3E               	btfss	___ftmul@f1,0
  6357  07BD  2FCC               	goto	l2083
  6358  07BE  0841               	movf	___ftmul@f2,w
  6359  07BF  07C9               	addwf	___ftmul@f3_as_product,f
  6360  07C0  0842               	movf	___ftmul@f2+1,w
  6361  07C1  1103               	clrz
  6362  07C2  1803               	skipnc
  6363  07C3  0A42               	incf	___ftmul@f2+1,w
  6364  07C4  1D03               	btfss	3,2
  6365  07C5  07CA               	addwf	___ftmul@f3_as_product+1,f
  6366  07C6  0843               	movf	___ftmul@f2+2,w
  6367  07C7  1103               	clrz
  6368  07C8  1803               	skipnc
  6369  07C9  0A43               	incf	___ftmul@f2+2,w
  6370  07CA  1D03               	btfss	3,2
  6371  07CB  07CB               	addwf	___ftmul@f3_as_product+2,f
  6372  07CC                     l2083:	
  6373  07CC  3001               	movlw	1
  6374  07CD                     u2635:	
  6375  07CD  1003               	clrc
  6376  07CE  0CC0               	rrf	___ftmul@f1+2,f
  6377  07CF  0CBF               	rrf	___ftmul@f1+1,f
  6378  07D0  0CBE               	rrf	___ftmul@f1,f
  6379  07D1  3EFF               	addlw	-1
  6380  07D2  1D03               	skipz
  6381  07D3  2FCD               	goto	u2635
  6382  07D4  3001               	movlw	1
  6383  07D5                     u2645:	
  6384  07D5  1003               	clrc
  6385  07D6  0CCB               	rrf	___ftmul@f3_as_product+2,f
  6386  07D7  0CCA               	rrf	___ftmul@f3_as_product+1,f
  6387  07D8  0CC9               	rrf	___ftmul@f3_as_product,f
  6388  07D9  3EFF               	addlw	-1
  6389  07DA  1D03               	skipz
  6390  07DB  2FD5               	goto	u2645
  6391  07DC  3001               	movlw	1
  6392  07DD  02CC               	subwf	___ftmul@cntr,f
  6393  07DE  1D03               	btfss	3,2
  6394  07DF  2FBC               	goto	l2079
  6395  07E0  0849               	movf	___ftmul@f3_as_product,w
  6396  07E1  00A0               	movwf	___ftpack@arg
  6397  07E2  084A               	movf	___ftmul@f3_as_product+1,w
  6398  07E3  00A1               	movwf	___ftpack@arg+1
  6399  07E4  084B               	movf	___ftmul@f3_as_product+2,w
  6400  07E5  00A2               	movwf	___ftpack@arg+2
  6401  07E6  0848               	movf	___ftmul@exp,w
  6402  07E7  00C4               	movwf	??___ftmul
  6403  07E8  0844               	movf	??___ftmul,w
  6404  07E9  00A3               	movwf	___ftpack@exp
  6405  07EA  084D               	movf	___ftmul@sign,w
  6406  07EB  00C5               	movwf	??___ftmul+1
  6407  07EC  0845               	movf	??___ftmul+1,w
  6408  07ED  00A4               	movwf	___ftpack@sign
  6409  07EE  120A  158A  22B6   	fcall	___ftpack
  6410  07F1  1283               	bcf	3,5	;RP0=0, select bank0
  6411  07F2  1303               	bcf	3,6	;RP1=0, select bank0
  6412  07F3  0820               	movf	?___ftpack,w
  6413  07F4  00BE               	movwf	?___ftmul
  6414  07F5  0821               	movf	?___ftpack+1,w
  6415  07F6  00BF               	movwf	?___ftmul+1
  6416  07F7  0822               	movf	?___ftpack+2,w
  6417  07F8  00C0               	movwf	?___ftmul+2
  6418  07F9  0008               	return
  6419  07FA                     __end_of___ftmul:	
  6420                           
  6421                           	psect	text31
  6422  0D72                     __ptext31:	
  6423 ;; *************** function ___ftdiv *****************
  6424 ;; Defined at:
  6425 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;  f2              3   46[BANK0 ] float 
  6428 ;;  f1              3   49[BANK0 ] float 
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;  f3              3   57[BANK0 ] float 
  6431 ;;  sign            1   61[BANK0 ] unsigned char 
  6432 ;;  exp             1   60[BANK0 ] unsigned char 
  6433 ;;  cntr            1   56[BANK0 ] unsigned char 
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  3   46[BANK0 ] float 
  6436 ;; Registers used:
  6437 ;;		wreg, status,2, status,0, pclath, cstack
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6443 ;;      Params:         0       6       0       0       0
  6444 ;;      Locals:         0       6       0       0       0
  6445 ;;      Temps:          0       4       0       0       0
  6446 ;;      Totals:         0      16       0       0       0
  6447 ;;Total ram usage:       16 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    3
  6450 ;; This function calls:
  6451 ;;		___ftpack
  6452 ;; This function is called by:
  6453 ;;		_CalcMQ135
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           
  6458                           ;psect for function ___ftdiv
  6459  0D72                     ___ftdiv:	
  6460                           
  6461                           ;incstack = 0
  6462                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6463  0D72  1283               	bcf	3,5	;RP0=0, select bank0
  6464  0D73  1303               	bcf	3,6	;RP1=0, select bank0
  6465  0D74  0851               	movf	___ftdiv@f1,w
  6466  0D75  00D4               	movwf	??___ftdiv
  6467  0D76  0852               	movf	___ftdiv@f1+1,w
  6468  0D77  00D5               	movwf	??___ftdiv+1
  6469  0D78  0853               	movf	___ftdiv@f1+2,w
  6470  0D79  00D6               	movwf	??___ftdiv+2
  6471  0D7A  1003               	clrc
  6472  0D7B  0D55               	rlf	??___ftdiv+1,w
  6473  0D7C  0D56               	rlf	??___ftdiv+2,w
  6474  0D7D  00D7               	movwf	??___ftdiv+3
  6475  0D7E  0857               	movf	??___ftdiv+3,w
  6476  0D7F  00DC               	movwf	___ftdiv@exp
  6477  0D80  08DC               	movf	___ftdiv@exp,f
  6478  0D81  1D03               	skipz
  6479  0D82  2D8A               	goto	l2275
  6480  0D83  3000               	movlw	0
  6481  0D84  00CE               	movwf	?___ftdiv
  6482  0D85  3000               	movlw	0
  6483  0D86  00CF               	movwf	?___ftdiv+1
  6484  0D87  3000               	movlw	0
  6485  0D88  00D0               	movwf	?___ftdiv+2
  6486  0D89  0008               	return
  6487  0D8A                     l2275:	
  6488  0D8A  084E               	movf	___ftdiv@f2,w
  6489  0D8B  00D4               	movwf	??___ftdiv
  6490  0D8C  084F               	movf	___ftdiv@f2+1,w
  6491  0D8D  00D5               	movwf	??___ftdiv+1
  6492  0D8E  0850               	movf	___ftdiv@f2+2,w
  6493  0D8F  00D6               	movwf	??___ftdiv+2
  6494  0D90  1003               	clrc
  6495  0D91  0D55               	rlf	??___ftdiv+1,w
  6496  0D92  0D56               	rlf	??___ftdiv+2,w
  6497  0D93  00D7               	movwf	??___ftdiv+3
  6498  0D94  0857               	movf	??___ftdiv+3,w
  6499  0D95  00DD               	movwf	___ftdiv@sign
  6500  0D96  08DD               	movf	___ftdiv@sign,f
  6501  0D97  1D03               	skipz
  6502  0D98  2DA0               	goto	l2281
  6503  0D99  3000               	movlw	0
  6504  0D9A  00CE               	movwf	?___ftdiv
  6505  0D9B  3000               	movlw	0
  6506  0D9C  00CF               	movwf	?___ftdiv+1
  6507  0D9D  3000               	movlw	0
  6508  0D9E  00D0               	movwf	?___ftdiv+2
  6509  0D9F  0008               	return
  6510  0DA0                     l2281:	
  6511  0DA0  3000               	movlw	0
  6512  0DA1  00D9               	movwf	___ftdiv@f3
  6513  0DA2  3000               	movlw	0
  6514  0DA3  00DA               	movwf	___ftdiv@f3+1
  6515  0DA4  3000               	movlw	0
  6516  0DA5  00DB               	movwf	___ftdiv@f3+2
  6517  0DA6  3089               	movlw	137
  6518  0DA7  075D               	addwf	___ftdiv@sign,w
  6519  0DA8  00D4               	movwf	??___ftdiv
  6520  0DA9  0854               	movf	??___ftdiv,w
  6521  0DAA  02DC               	subwf	___ftdiv@exp,f
  6522  0DAB  0851               	movf	___ftdiv@f1,w
  6523  0DAC  00D4               	movwf	??___ftdiv
  6524  0DAD  0852               	movf	___ftdiv@f1+1,w
  6525  0DAE  00D5               	movwf	??___ftdiv+1
  6526  0DAF  0853               	movf	___ftdiv@f1+2,w
  6527  0DB0  00D6               	movwf	??___ftdiv+2
  6528  0DB1  3010               	movlw	16
  6529  0DB2                     u2985:	
  6530  0DB2  1003               	clrc
  6531  0DB3  0CD6               	rrf	??___ftdiv+2,f
  6532  0DB4  0CD5               	rrf	??___ftdiv+1,f
  6533  0DB5  0CD4               	rrf	??___ftdiv,f
  6534  0DB6  3EFF               	addlw	-1
  6535  0DB7  1D03               	skipz
  6536  0DB8  2DB2               	goto	u2985
  6537  0DB9  0854               	movf	??___ftdiv,w
  6538  0DBA  00D7               	movwf	??___ftdiv+3
  6539  0DBB  0857               	movf	??___ftdiv+3,w
  6540  0DBC  00DD               	movwf	___ftdiv@sign
  6541  0DBD  084E               	movf	___ftdiv@f2,w
  6542  0DBE  00D4               	movwf	??___ftdiv
  6543  0DBF  084F               	movf	___ftdiv@f2+1,w
  6544  0DC0  00D5               	movwf	??___ftdiv+1
  6545  0DC1  0850               	movf	___ftdiv@f2+2,w
  6546  0DC2  00D6               	movwf	??___ftdiv+2
  6547  0DC3  3010               	movlw	16
  6548  0DC4                     u2995:	
  6549  0DC4  1003               	clrc
  6550  0DC5  0CD6               	rrf	??___ftdiv+2,f
  6551  0DC6  0CD5               	rrf	??___ftdiv+1,f
  6552  0DC7  0CD4               	rrf	??___ftdiv,f
  6553  0DC8  3EFF               	addlw	-1
  6554  0DC9  1D03               	skipz
  6555  0DCA  2DC4               	goto	u2995
  6556  0DCB  0854               	movf	??___ftdiv,w
  6557  0DCC  00D7               	movwf	??___ftdiv+3
  6558  0DCD  0857               	movf	??___ftdiv+3,w
  6559  0DCE  06DD               	xorwf	___ftdiv@sign,f
  6560  0DCF  3080               	movlw	128
  6561  0DD0  00D4               	movwf	??___ftdiv
  6562  0DD1  0854               	movf	??___ftdiv,w
  6563  0DD2  05DD               	andwf	___ftdiv@sign,f
  6564  0DD3  17D2               	bsf	___ftdiv@f1+1,7
  6565  0DD4  30FF               	movlw	255
  6566  0DD5  05D1               	andwf	___ftdiv@f1,f
  6567  0DD6  30FF               	movlw	255
  6568  0DD7  05D2               	andwf	___ftdiv@f1+1,f
  6569  0DD8  3000               	movlw	0
  6570  0DD9  05D3               	andwf	___ftdiv@f1+2,f
  6571  0DDA  17CF               	bsf	___ftdiv@f2+1,7
  6572  0DDB  30FF               	movlw	255
  6573  0DDC  05CE               	andwf	___ftdiv@f2,f
  6574  0DDD  30FF               	movlw	255
  6575  0DDE  05CF               	andwf	___ftdiv@f2+1,f
  6576  0DDF  3000               	movlw	0
  6577  0DE0  05D0               	andwf	___ftdiv@f2+2,f
  6578  0DE1  3018               	movlw	24
  6579  0DE2  00D4               	movwf	??___ftdiv
  6580  0DE3  0854               	movf	??___ftdiv,w
  6581  0DE4  00D8               	movwf	___ftdiv@cntr
  6582  0DE5                     l2295:	
  6583  0DE5  3001               	movlw	1
  6584  0DE6                     u3005:	
  6585  0DE6  1003               	clrc
  6586  0DE7  0DD9               	rlf	___ftdiv@f3,f
  6587  0DE8  0DDA               	rlf	___ftdiv@f3+1,f
  6588  0DE9  0DDB               	rlf	___ftdiv@f3+2,f
  6589  0DEA  3EFF               	addlw	-1
  6590  0DEB  1D03               	skipz
  6591  0DEC  2DE6               	goto	u3005
  6592  0DED  0850               	movf	___ftdiv@f2+2,w
  6593  0DEE  0253               	subwf	___ftdiv@f1+2,w
  6594  0DEF  1D03               	skipz
  6595  0DF0  2DF7               	goto	u3015
  6596  0DF1  084F               	movf	___ftdiv@f2+1,w
  6597  0DF2  0252               	subwf	___ftdiv@f1+1,w
  6598  0DF3  1D03               	skipz
  6599  0DF4  2DF7               	goto	u3015
  6600  0DF5  084E               	movf	___ftdiv@f2,w
  6601  0DF6  0251               	subwf	___ftdiv@f1,w
  6602  0DF7                     u3015:	
  6603  0DF7  1C03               	skipc
  6604  0DF8  2E04               	goto	l2303
  6605  0DF9  084E               	movf	___ftdiv@f2,w
  6606  0DFA  02D1               	subwf	___ftdiv@f1,f
  6607  0DFB  084F               	movf	___ftdiv@f2+1,w
  6608  0DFC  1C03               	skipc
  6609  0DFD  0F4F               	incfsz	___ftdiv@f2+1,w
  6610  0DFE  02D2               	subwf	___ftdiv@f1+1,f
  6611  0DFF  0850               	movf	___ftdiv@f2+2,w
  6612  0E00  1C03               	skipc
  6613  0E01  0A50               	incf	___ftdiv@f2+2,w
  6614  0E02  02D3               	subwf	___ftdiv@f1+2,f
  6615  0E03  1459               	bsf	___ftdiv@f3,0
  6616  0E04                     l2303:	
  6617  0E04  3001               	movlw	1
  6618  0E05                     u3025:	
  6619  0E05  1003               	clrc
  6620  0E06  0DD1               	rlf	___ftdiv@f1,f
  6621  0E07  0DD2               	rlf	___ftdiv@f1+1,f
  6622  0E08  0DD3               	rlf	___ftdiv@f1+2,f
  6623  0E09  3EFF               	addlw	-1
  6624  0E0A  1D03               	skipz
  6625  0E0B  2E05               	goto	u3025
  6626  0E0C  3001               	movlw	1
  6627  0E0D  02D8               	subwf	___ftdiv@cntr,f
  6628  0E0E  1D03               	btfss	3,2
  6629  0E0F  2DE5               	goto	l2295
  6630  0E10  0859               	movf	___ftdiv@f3,w
  6631  0E11  00A0               	movwf	___ftpack@arg
  6632  0E12  085A               	movf	___ftdiv@f3+1,w
  6633  0E13  00A1               	movwf	___ftpack@arg+1
  6634  0E14  085B               	movf	___ftdiv@f3+2,w
  6635  0E15  00A2               	movwf	___ftpack@arg+2
  6636  0E16  085C               	movf	___ftdiv@exp,w
  6637  0E17  00D4               	movwf	??___ftdiv
  6638  0E18  0854               	movf	??___ftdiv,w
  6639  0E19  00A3               	movwf	___ftpack@exp
  6640  0E1A  085D               	movf	___ftdiv@sign,w
  6641  0E1B  00D5               	movwf	??___ftdiv+1
  6642  0E1C  0855               	movf	??___ftdiv+1,w
  6643  0E1D  00A4               	movwf	___ftpack@sign
  6644  0E1E  120A  158A  22B6   	fcall	___ftpack
  6645  0E21  1283               	bcf	3,5	;RP0=0, select bank0
  6646  0E22  1303               	bcf	3,6	;RP1=0, select bank0
  6647  0E23  0820               	movf	?___ftpack,w
  6648  0E24  00CE               	movwf	?___ftdiv
  6649  0E25  0821               	movf	?___ftpack+1,w
  6650  0E26  00CF               	movwf	?___ftdiv+1
  6651  0E27  0822               	movf	?___ftpack+2,w
  6652  0E28  00D0               	movwf	?___ftdiv+2
  6653  0E29  0008               	return
  6654  0E2A                     __end_of___ftdiv:	
  6655                           
  6656                           	psect	text32
  6657  0EF7                     __ptext32:	
  6658 ;; *************** function ___ftadd *****************
  6659 ;; Defined at:
  6660 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;  f1              3   17[BANK0 ] float 
  6663 ;;  f2              3   20[BANK0 ] float 
  6664 ;; Auto vars:     Size  Location     Type
  6665 ;;  exp1            1   29[BANK0 ] unsigned char 
  6666 ;;  exp2            1   28[BANK0 ] unsigned char 
  6667 ;;  sign            1   27[BANK0 ] unsigned char 
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  3   17[BANK0 ] float 
  6670 ;; Registers used:
  6671 ;;		wreg, status,2, status,0, pclath, cstack
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6677 ;;      Params:         0       6       0       0       0
  6678 ;;      Locals:         0       3       0       0       0
  6679 ;;      Temps:          0       4       0       0       0
  6680 ;;      Totals:         0      13       0       0       0
  6681 ;;Total ram usage:       13 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    3
  6684 ;; This function calls:
  6685 ;;		___ftpack
  6686 ;; This function is called by:
  6687 ;;		_CalcMQ135
  6688 ;;		_displayPPM
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           
  6693                           ;psect for function ___ftadd
  6694  0EF7                     ___ftadd:	
  6695                           
  6696                           ;incstack = 0
  6697                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6698  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  6699  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  6700  0EF9  0831               	movf	___ftadd@f1,w
  6701  0EFA  00B7               	movwf	??___ftadd
  6702  0EFB  0832               	movf	___ftadd@f1+1,w
  6703  0EFC  00B8               	movwf	??___ftadd+1
  6704  0EFD  0833               	movf	___ftadd@f1+2,w
  6705  0EFE  00B9               	movwf	??___ftadd+2
  6706  0EFF  1003               	clrc
  6707  0F00  0D38               	rlf	??___ftadd+1,w
  6708  0F01  0D39               	rlf	??___ftadd+2,w
  6709  0F02  00BA               	movwf	??___ftadd+3
  6710  0F03  083A               	movf	??___ftadd+3,w
  6711  0F04  00BD               	movwf	___ftadd@exp1
  6712  0F05  0834               	movf	___ftadd@f2,w
  6713  0F06  00B7               	movwf	??___ftadd
  6714  0F07  0835               	movf	___ftadd@f2+1,w
  6715  0F08  00B8               	movwf	??___ftadd+1
  6716  0F09  0836               	movf	___ftadd@f2+2,w
  6717  0F0A  00B9               	movwf	??___ftadd+2
  6718  0F0B  1003               	clrc
  6719  0F0C  0D38               	rlf	??___ftadd+1,w
  6720  0F0D  0D39               	rlf	??___ftadd+2,w
  6721  0F0E  00BA               	movwf	??___ftadd+3
  6722  0F0F  083A               	movf	??___ftadd+3,w
  6723  0F10  00BC               	movwf	___ftadd@exp2
  6724  0F11  083D               	movf	___ftadd@exp1,w
  6725  0F12  1903               	btfsc	3,2
  6726  0F13  2F20               	goto	l1979
  6727  0F14  083C               	movf	___ftadd@exp2,w
  6728  0F15  023D               	subwf	___ftadd@exp1,w
  6729  0F16  1803               	skipnc
  6730  0F17  2F27               	goto	l1983
  6731  0F18  033D               	decf	___ftadd@exp1,w
  6732  0F19  3AFF               	xorlw	255
  6733  0F1A  073C               	addwf	___ftadd@exp2,w
  6734  0F1B  00B7               	movwf	??___ftadd
  6735  0F1C  3019               	movlw	25
  6736  0F1D  0237               	subwf	??___ftadd,w
  6737  0F1E  1C03               	skipc
  6738  0F1F  2F27               	goto	l1983
  6739  0F20                     l1979:	
  6740  0F20  0834               	movf	___ftadd@f2,w
  6741  0F21  00B1               	movwf	?___ftadd
  6742  0F22  0835               	movf	___ftadd@f2+1,w
  6743  0F23  00B2               	movwf	?___ftadd+1
  6744  0F24  0836               	movf	___ftadd@f2+2,w
  6745  0F25  00B3               	movwf	?___ftadd+2
  6746  0F26  0008               	return
  6747  0F27                     l1983:	
  6748  0F27  083C               	movf	___ftadd@exp2,w
  6749  0F28  1903               	btfsc	3,2
  6750  0F29  0008               	return
  6751  0F2A  083D               	movf	___ftadd@exp1,w
  6752  0F2B  023C               	subwf	___ftadd@exp2,w
  6753  0F2C  1803               	skipnc
  6754  0F2D  2F36               	goto	l1989
  6755  0F2E  033C               	decf	___ftadd@exp2,w
  6756  0F2F  3AFF               	xorlw	255
  6757  0F30  073D               	addwf	___ftadd@exp1,w
  6758  0F31  00B7               	movwf	??___ftadd
  6759  0F32  3019               	movlw	25
  6760  0F33  0237               	subwf	??___ftadd,w
  6761  0F34  1803               	btfsc	3,0
  6762  0F35  0008               	return
  6763  0F36                     l1989:	
  6764  0F36  3006               	movlw	6
  6765  0F37  00B7               	movwf	??___ftadd
  6766  0F38  0837               	movf	??___ftadd,w
  6767  0F39  00BB               	movwf	___ftadd@sign
  6768  0F3A  1BB3               	btfsc	___ftadd@f1+2,7
  6769  0F3B  17BB               	bsf	___ftadd@sign,7
  6770  0F3C  1BB6               	btfsc	___ftadd@f2+2,7
  6771  0F3D  173B               	bsf	___ftadd@sign,6
  6772  0F3E  17B2               	bsf	___ftadd@f1+1,7
  6773  0F3F  30FF               	movlw	255
  6774  0F40  05B1               	andwf	___ftadd@f1,f
  6775  0F41  30FF               	movlw	255
  6776  0F42  05B2               	andwf	___ftadd@f1+1,f
  6777  0F43  3000               	movlw	0
  6778  0F44  05B3               	andwf	___ftadd@f1+2,f
  6779  0F45  17B5               	bsf	___ftadd@f2+1,7
  6780  0F46  30FF               	movlw	255
  6781  0F47  05B4               	andwf	___ftadd@f2,f
  6782  0F48  30FF               	movlw	255
  6783  0F49  05B5               	andwf	___ftadd@f2+1,f
  6784  0F4A  3000               	movlw	0
  6785  0F4B  05B6               	andwf	___ftadd@f2+2,f
  6786  0F4C  083C               	movf	___ftadd@exp2,w
  6787  0F4D  023D               	subwf	___ftadd@exp1,w
  6788  0F4E  1803               	skipnc
  6789  0F4F  2F76               	goto	l2011
  6790  0F50                     l2001:	
  6791  0F50  3001               	movlw	1
  6792  0F51                     u2375:	
  6793  0F51  1003               	clrc
  6794  0F52  0DB4               	rlf	___ftadd@f2,f
  6795  0F53  0DB5               	rlf	___ftadd@f2+1,f
  6796  0F54  0DB6               	rlf	___ftadd@f2+2,f
  6797  0F55  3EFF               	addlw	-1
  6798  0F56  1D03               	skipz
  6799  0F57  2F51               	goto	u2375
  6800  0F58  3001               	movlw	1
  6801  0F59  02BC               	subwf	___ftadd@exp2,f
  6802  0F5A  083C               	movf	___ftadd@exp2,w
  6803  0F5B  063D               	xorwf	___ftadd@exp1,w
  6804  0F5C  1903               	skipnz
  6805  0F5D  2F71               	goto	l2009
  6806  0F5E  3001               	movlw	1
  6807  0F5F  02BB               	subwf	___ftadd@sign,f
  6808  0F60  083B               	movf	___ftadd@sign,w
  6809  0F61  3907               	andlw	7
  6810  0F62  1903               	btfsc	3,2
  6811  0F63  2F71               	goto	l2009
  6812  0F64  2F50               	goto	l2001
  6813  0F65                     l2007:	
  6814  0F65  3001               	movlw	1
  6815  0F66                     u2405:	
  6816  0F66  1003               	clrc
  6817  0F67  0CB3               	rrf	___ftadd@f1+2,f
  6818  0F68  0CB2               	rrf	___ftadd@f1+1,f
  6819  0F69  0CB1               	rrf	___ftadd@f1,f
  6820  0F6A  3EFF               	addlw	-1
  6821  0F6B  1D03               	skipz
  6822  0F6C  2F66               	goto	u2405
  6823  0F6D  3001               	movlw	1
  6824  0F6E  00B7               	movwf	??___ftadd
  6825  0F6F  0837               	movf	??___ftadd,w
  6826  0F70  07BD               	addwf	___ftadd@exp1,f
  6827  0F71                     l2009:	
  6828  0F71  083D               	movf	___ftadd@exp1,w
  6829  0F72  063C               	xorwf	___ftadd@exp2,w
  6830  0F73  1903               	btfsc	3,2
  6831  0F74  2F9F               	goto	l565
  6832  0F75  2F65               	goto	l2007
  6833  0F76                     l2011:	
  6834  0F76  083D               	movf	___ftadd@exp1,w
  6835  0F77  023C               	subwf	___ftadd@exp2,w
  6836  0F78  1803               	skipnc
  6837  0F79  2F9F               	goto	l565
  6838  0F7A                     l2013:	
  6839  0F7A  3001               	movlw	1
  6840  0F7B                     u2435:	
  6841  0F7B  1003               	clrc
  6842  0F7C  0DB1               	rlf	___ftadd@f1,f
  6843  0F7D  0DB2               	rlf	___ftadd@f1+1,f
  6844  0F7E  0DB3               	rlf	___ftadd@f1+2,f
  6845  0F7F  3EFF               	addlw	-1
  6846  0F80  1D03               	skipz
  6847  0F81  2F7B               	goto	u2435
  6848  0F82  3001               	movlw	1
  6849  0F83  02BD               	subwf	___ftadd@exp1,f
  6850  0F84  083C               	movf	___ftadd@exp2,w
  6851  0F85  063D               	xorwf	___ftadd@exp1,w
  6852  0F86  1903               	skipnz
  6853  0F87  2F9B               	goto	l2021
  6854  0F88  3001               	movlw	1
  6855  0F89  02BB               	subwf	___ftadd@sign,f
  6856  0F8A  083B               	movf	___ftadd@sign,w
  6857  0F8B  3907               	andlw	7
  6858  0F8C  1903               	btfsc	3,2
  6859  0F8D  2F9B               	goto	l2021
  6860  0F8E  2F7A               	goto	l2013
  6861  0F8F                     l2019:	
  6862  0F8F  3001               	movlw	1
  6863  0F90                     u2465:	
  6864  0F90  1003               	clrc
  6865  0F91  0CB6               	rrf	___ftadd@f2+2,f
  6866  0F92  0CB5               	rrf	___ftadd@f2+1,f
  6867  0F93  0CB4               	rrf	___ftadd@f2,f
  6868  0F94  3EFF               	addlw	-1
  6869  0F95  1D03               	skipz
  6870  0F96  2F90               	goto	u2465
  6871  0F97  3001               	movlw	1
  6872  0F98  00B7               	movwf	??___ftadd
  6873  0F99  0837               	movf	??___ftadd,w
  6874  0F9A  07BC               	addwf	___ftadd@exp2,f
  6875  0F9B                     l2021:	
  6876  0F9B  083D               	movf	___ftadd@exp1,w
  6877  0F9C  063C               	xorwf	___ftadd@exp2,w
  6878  0F9D  1D03               	skipz
  6879  0F9E  2F8F               	goto	l2019
  6880  0F9F                     l565:	
  6881  0F9F  1FBB               	btfss	___ftadd@sign,7
  6882  0FA0  2FB1               	goto	l2025
  6883  0FA1  30FF               	movlw	255
  6884  0FA2  06B1               	xorwf	___ftadd@f1,f
  6885  0FA3  30FF               	movlw	255
  6886  0FA4  06B2               	xorwf	___ftadd@f1+1,f
  6887  0FA5  30FF               	movlw	255
  6888  0FA6  06B3               	xorwf	___ftadd@f1+2,f
  6889  0FA7  3001               	movlw	1
  6890  0FA8  07B1               	addwf	___ftadd@f1,f
  6891  0FA9  3000               	movlw	0
  6892  0FAA  1803               	skipnc
  6893  0FAB  3001               	movlw	1
  6894  0FAC  07B2               	addwf	___ftadd@f1+1,f
  6895  0FAD  3000               	movlw	0
  6896  0FAE  1803               	skipnc
  6897  0FAF  3001               	movlw	1
  6898  0FB0  07B3               	addwf	___ftadd@f1+2,f
  6899  0FB1                     l2025:	
  6900  0FB1  1F3B               	btfss	___ftadd@sign,6
  6901  0FB2  2FC3               	goto	l2029
  6902  0FB3  30FF               	movlw	255
  6903  0FB4  06B4               	xorwf	___ftadd@f2,f
  6904  0FB5  30FF               	movlw	255
  6905  0FB6  06B5               	xorwf	___ftadd@f2+1,f
  6906  0FB7  30FF               	movlw	255
  6907  0FB8  06B6               	xorwf	___ftadd@f2+2,f
  6908  0FB9  3001               	movlw	1
  6909  0FBA  07B4               	addwf	___ftadd@f2,f
  6910  0FBB  3000               	movlw	0
  6911  0FBC  1803               	skipnc
  6912  0FBD  3001               	movlw	1
  6913  0FBE  07B5               	addwf	___ftadd@f2+1,f
  6914  0FBF  3000               	movlw	0
  6915  0FC0  1803               	skipnc
  6916  0FC1  3001               	movlw	1
  6917  0FC2  07B6               	addwf	___ftadd@f2+2,f
  6918  0FC3                     l2029:	
  6919  0FC3  01BB               	clrf	___ftadd@sign
  6920  0FC4  0831               	movf	___ftadd@f1,w
  6921  0FC5  07B4               	addwf	___ftadd@f2,f
  6922  0FC6  0832               	movf	___ftadd@f1+1,w
  6923  0FC7  1103               	clrz
  6924  0FC8  1803               	skipnc
  6925  0FC9  0A32               	incf	___ftadd@f1+1,w
  6926  0FCA  1D03               	btfss	3,2
  6927  0FCB  07B5               	addwf	___ftadd@f2+1,f
  6928  0FCC  0833               	movf	___ftadd@f1+2,w
  6929  0FCD  1103               	clrz
  6930  0FCE  1803               	skipnc
  6931  0FCF  0A33               	incf	___ftadd@f1+2,w
  6932  0FD0  1D03               	btfss	3,2
  6933  0FD1  07B6               	addwf	___ftadd@f2+2,f
  6934  0FD2  1FB6               	btfss	___ftadd@f2+2,7
  6935  0FD3  2FE6               	goto	l2039
  6936  0FD4  30FF               	movlw	255
  6937  0FD5  06B4               	xorwf	___ftadd@f2,f
  6938  0FD6  30FF               	movlw	255
  6939  0FD7  06B5               	xorwf	___ftadd@f2+1,f
  6940  0FD8  30FF               	movlw	255
  6941  0FD9  06B6               	xorwf	___ftadd@f2+2,f
  6942  0FDA  3001               	movlw	1
  6943  0FDB  07B4               	addwf	___ftadd@f2,f
  6944  0FDC  3000               	movlw	0
  6945  0FDD  1803               	skipnc
  6946  0FDE  3001               	movlw	1
  6947  0FDF  07B5               	addwf	___ftadd@f2+1,f
  6948  0FE0  3000               	movlw	0
  6949  0FE1  1803               	skipnc
  6950  0FE2  3001               	movlw	1
  6951  0FE3  07B6               	addwf	___ftadd@f2+2,f
  6952  0FE4  01BB               	clrf	___ftadd@sign
  6953  0FE5  0ABB               	incf	___ftadd@sign,f
  6954  0FE6                     l2039:	
  6955  0FE6  0834               	movf	___ftadd@f2,w
  6956  0FE7  00A0               	movwf	___ftpack@arg
  6957  0FE8  0835               	movf	___ftadd@f2+1,w
  6958  0FE9  00A1               	movwf	___ftpack@arg+1
  6959  0FEA  0836               	movf	___ftadd@f2+2,w
  6960  0FEB  00A2               	movwf	___ftpack@arg+2
  6961  0FEC  083D               	movf	___ftadd@exp1,w
  6962  0FED  00B7               	movwf	??___ftadd
  6963  0FEE  0837               	movf	??___ftadd,w
  6964  0FEF  00A3               	movwf	___ftpack@exp
  6965  0FF0  083B               	movf	___ftadd@sign,w
  6966  0FF1  00B8               	movwf	??___ftadd+1
  6967  0FF2  0838               	movf	??___ftadd+1,w
  6968  0FF3  00A4               	movwf	___ftpack@sign
  6969  0FF4  120A  158A  22B6   	fcall	___ftpack
  6970  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  6971  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  6972  0FF9  0820               	movf	?___ftpack,w
  6973  0FFA  00B1               	movwf	?___ftadd
  6974  0FFB  0821               	movf	?___ftpack+1,w
  6975  0FFC  00B2               	movwf	?___ftadd+1
  6976  0FFD  0822               	movf	?___ftpack+2,w
  6977  0FFE  00B3               	movwf	?___ftadd+2
  6978  0FFF  0008               	return
  6979  1000                     __end_of___ftadd:	
  6980                           
  6981                           	psect	text33
  6982  17B6                     __ptext33:	
  6983 ;; *************** function ___awtoft *****************
  6984 ;; Defined at:
  6985 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;  c               2    8[BANK0 ] int 
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;  sign            1   13[BANK0 ] unsigned char 
  6990 ;; Return value:  Size  Location     Type
  6991 ;;                  3    8[BANK0 ] float 
  6992 ;; Registers used:
  6993 ;;		wreg, status,2, status,0, pclath, cstack
  6994 ;; Tracked objects:
  6995 ;;		On entry : 0/0
  6996 ;;		On exit  : 0/0
  6997 ;;		Unchanged: 0/0
  6998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6999 ;;      Params:         0       3       0       0       0
  7000 ;;      Locals:         0       1       0       0       0
  7001 ;;      Temps:          0       2       0       0       0
  7002 ;;      Totals:         0       6       0       0       0
  7003 ;;Total ram usage:        6 bytes
  7004 ;; Hardware stack levels used:    1
  7005 ;; Hardware stack levels required when called:    3
  7006 ;; This function calls:
  7007 ;;		___ftpack
  7008 ;; This function is called by:
  7009 ;;		_CalcMQ135
  7010 ;;		_displayPPM
  7011 ;; This function uses a non-reentrant model
  7012 ;;
  7013                           
  7014                           
  7015                           ;psect for function ___awtoft
  7016  17B6                     ___awtoft:	
  7017                           
  7018                           ;incstack = 0
  7019                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7020  17B6  1283               	bcf	3,5	;RP0=0, select bank0
  7021  17B7  1303               	bcf	3,6	;RP1=0, select bank0
  7022  17B8  01AD               	clrf	___awtoft@sign
  7023  17B9  1FA9               	btfss	___awtoft@c+1,7
  7024  17BA  2FC2               	goto	l1967
  7025  17BB  09A8               	comf	___awtoft@c,f
  7026  17BC  09A9               	comf	___awtoft@c+1,f
  7027  17BD  0AA8               	incf	___awtoft@c,f
  7028  17BE  1903               	skipnz
  7029  17BF  0AA9               	incf	___awtoft@c+1,f
  7030  17C0  01AD               	clrf	___awtoft@sign
  7031  17C1  0AAD               	incf	___awtoft@sign,f
  7032  17C2                     l1967:	
  7033  17C2  0828               	movf	___awtoft@c,w
  7034  17C3  00A0               	movwf	___ftpack@arg
  7035  17C4  0829               	movf	___awtoft@c+1,w
  7036  17C5  00A1               	movwf	___ftpack@arg+1
  7037  17C6  01A2               	clrf	___ftpack@arg+2
  7038  17C7  308E               	movlw	142
  7039  17C8  00AB               	movwf	??___awtoft
  7040  17C9  082B               	movf	??___awtoft,w
  7041  17CA  00A3               	movwf	___ftpack@exp
  7042  17CB  082D               	movf	___awtoft@sign,w
  7043  17CC  00AC               	movwf	??___awtoft+1
  7044  17CD  082C               	movf	??___awtoft+1,w
  7045  17CE  00A4               	movwf	___ftpack@sign
  7046  17CF  120A  158A  22B6   	fcall	___ftpack
  7047  17D2  1283               	bcf	3,5	;RP0=0, select bank0
  7048  17D3  1303               	bcf	3,6	;RP1=0, select bank0
  7049  17D4  0820               	movf	?___ftpack,w
  7050  17D5  00A8               	movwf	?___awtoft
  7051  17D6  0821               	movf	?___ftpack+1,w
  7052  17D7  00A9               	movwf	?___awtoft+1
  7053  17D8  0822               	movf	?___ftpack+2,w
  7054  17D9  00AA               	movwf	?___awtoft+2
  7055  17DA  0008               	return
  7056  17DB                     __end_of___awtoft:	
  7057                           
  7058                           	psect	text34
  7059  0AB6                     __ptext34:	
  7060 ;; *************** function ___ftpack *****************
  7061 ;; Defined at:
  7062 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  7063 ;; Parameters:    Size  Location     Type
  7064 ;;  arg             3    0[BANK0 ] unsigned um
  7065 ;;  exp             1    3[BANK0 ] unsigned char 
  7066 ;;  sign            1    4[BANK0 ] unsigned char 
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;		None
  7069 ;; Return value:  Size  Location     Type
  7070 ;;                  3    0[BANK0 ] float 
  7071 ;; Registers used:
  7072 ;;		wreg, status,2, status,0
  7073 ;; Tracked objects:
  7074 ;;		On entry : 0/0
  7075 ;;		On exit  : 0/0
  7076 ;;		Unchanged: 0/0
  7077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7078 ;;      Params:         0       5       0       0       0
  7079 ;;      Locals:         0       0       0       0       0
  7080 ;;      Temps:          0       3       0       0       0
  7081 ;;      Totals:         0       8       0       0       0
  7082 ;;Total ram usage:        8 bytes
  7083 ;; Hardware stack levels used:    1
  7084 ;; Hardware stack levels required when called:    2
  7085 ;; This function calls:
  7086 ;;		Nothing
  7087 ;; This function is called by:
  7088 ;;		___awtoft
  7089 ;;		___ftadd
  7090 ;;		___ftdiv
  7091 ;;		___ftmul
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           
  7096                           ;psect for function ___ftpack
  7097  0AB6                     ___ftpack:	
  7098                           
  7099                           ;incstack = 0
  7100                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7101  0AB6  1283               	bcf	3,5	;RP0=0, select bank0
  7102  0AB7  1303               	bcf	3,6	;RP1=0, select bank0
  7103  0AB8  0823               	movf	___ftpack@exp,w
  7104  0AB9  1903               	btfsc	3,2
  7105  0ABA  2AC0               	goto	l1713
  7106  0ABB  0822               	movf	___ftpack@arg+2,w
  7107  0ABC  0421               	iorwf	___ftpack@arg+1,w
  7108  0ABD  0420               	iorwf	___ftpack@arg,w
  7109  0ABE  1D03               	skipz
  7110  0ABF  2AD3               	goto	l1719
  7111  0AC0                     l1713:	
  7112  0AC0  3000               	movlw	0
  7113  0AC1  00A0               	movwf	?___ftpack
  7114  0AC2  3000               	movlw	0
  7115  0AC3  00A1               	movwf	?___ftpack+1
  7116  0AC4  3000               	movlw	0
  7117  0AC5  00A2               	movwf	?___ftpack+2
  7118  0AC6  0008               	return
  7119  0AC7                     l1717:	
  7120  0AC7  3001               	movlw	1
  7121  0AC8  00A5               	movwf	??___ftpack
  7122  0AC9  0825               	movf	??___ftpack,w
  7123  0ACA  07A3               	addwf	___ftpack@exp,f
  7124  0ACB  3001               	movlw	1
  7125  0ACC                     u1765:	
  7126  0ACC  1003               	clrc
  7127  0ACD  0CA2               	rrf	___ftpack@arg+2,f
  7128  0ACE  0CA1               	rrf	___ftpack@arg+1,f
  7129  0ACF  0CA0               	rrf	___ftpack@arg,f
  7130  0AD0  3EFF               	addlw	-1
  7131  0AD1  1D03               	skipz
  7132  0AD2  2ACC               	goto	u1765
  7133  0AD3                     l1719:	
  7134  0AD3  30FE               	movlw	254
  7135  0AD4  0522               	andwf	___ftpack@arg+2,w
  7136  0AD5  1903               	btfsc	3,2
  7137  0AD6  2AEE               	goto	l536
  7138  0AD7  2AC7               	goto	l1717
  7139  0AD8                     l1721:	
  7140  0AD8  3001               	movlw	1
  7141  0AD9  00A5               	movwf	??___ftpack
  7142  0ADA  0825               	movf	??___ftpack,w
  7143  0ADB  07A3               	addwf	___ftpack@exp,f
  7144  0ADC  3001               	movlw	1
  7145  0ADD  07A0               	addwf	___ftpack@arg,f
  7146  0ADE  3000               	movlw	0
  7147  0ADF  1803               	skipnc
  7148  0AE0  3001               	movlw	1
  7149  0AE1  07A1               	addwf	___ftpack@arg+1,f
  7150  0AE2  3000               	movlw	0
  7151  0AE3  1803               	skipnc
  7152  0AE4  3001               	movlw	1
  7153  0AE5  07A2               	addwf	___ftpack@arg+2,f
  7154  0AE6  3001               	movlw	1
  7155  0AE7                     u1785:	
  7156  0AE7  1003               	clrc
  7157  0AE8  0CA2               	rrf	___ftpack@arg+2,f
  7158  0AE9  0CA1               	rrf	___ftpack@arg+1,f
  7159  0AEA  0CA0               	rrf	___ftpack@arg,f
  7160  0AEB  3EFF               	addlw	-1
  7161  0AEC  1D03               	skipz
  7162  0AED  2AE7               	goto	u1785
  7163  0AEE                     l536:	
  7164  0AEE  30FF               	movlw	255
  7165  0AEF  0522               	andwf	___ftpack@arg+2,w
  7166  0AF0  1903               	btfsc	3,2
  7167  0AF1  2AFD               	goto	l1729
  7168  0AF2  2AD8               	goto	l1721
  7169  0AF3                     l1727:	
  7170  0AF3  3001               	movlw	1
  7171  0AF4  02A3               	subwf	___ftpack@exp,f
  7172  0AF5  3001               	movlw	1
  7173  0AF6                     u1805:	
  7174  0AF6  1003               	clrc
  7175  0AF7  0DA0               	rlf	___ftpack@arg,f
  7176  0AF8  0DA1               	rlf	___ftpack@arg+1,f
  7177  0AF9  0DA2               	rlf	___ftpack@arg+2,f
  7178  0AFA  3EFF               	addlw	-1
  7179  0AFB  1D03               	skipz
  7180  0AFC  2AF6               	goto	u1805
  7181  0AFD                     l1729:	
  7182  0AFD  1FA1               	btfss	___ftpack@arg+1,7
  7183  0AFE  2AF3               	goto	l1727
  7184  0AFF  1823               	btfsc	___ftpack@exp,0
  7185  0B00  2B07               	goto	l542
  7186  0B01  30FF               	movlw	255
  7187  0B02  05A0               	andwf	___ftpack@arg,f
  7188  0B03  307F               	movlw	127
  7189  0B04  05A1               	andwf	___ftpack@arg+1,f
  7190  0B05  30FF               	movlw	255
  7191  0B06  05A2               	andwf	___ftpack@arg+2,f
  7192  0B07                     l542:	
  7193  0B07  1003               	clrc
  7194  0B08  0CA3               	rrf	___ftpack@exp,f
  7195  0B09  0823               	movf	___ftpack@exp,w
  7196  0B0A  00A5               	movwf	??___ftpack
  7197  0B0B  01A6               	clrf	??___ftpack+1
  7198  0B0C  01A7               	clrf	??___ftpack+2
  7199  0B0D  3010               	movlw	16
  7200  0B0E                     u1835:	
  7201  0B0E  1003               	clrc
  7202  0B0F  0DA5               	rlf	??___ftpack,f
  7203  0B10  0DA6               	rlf	??___ftpack+1,f
  7204  0B11  0DA7               	rlf	??___ftpack+2,f
  7205  0B12  3EFF               	addlw	-1
  7206  0B13  1D03               	skipz
  7207  0B14  2B0E               	goto	u1835
  7208  0B15  0825               	movf	??___ftpack,w
  7209  0B16  04A0               	iorwf	___ftpack@arg,f
  7210  0B17  0826               	movf	??___ftpack+1,w
  7211  0B18  04A1               	iorwf	___ftpack@arg+1,f
  7212  0B19  0827               	movf	??___ftpack+2,w
  7213  0B1A  04A2               	iorwf	___ftpack@arg+2,f
  7214  0B1B  0824               	movf	___ftpack@sign,w
  7215  0B1C  1903               	btfsc	3,2
  7216  0B1D  0008               	return
  7217  0B1E  17A2               	bsf	___ftpack@arg+2,7
  7218  0B1F  0008               	return
  7219  0B20                     __end_of___ftpack:	
  7220                           
  7221                           	psect	text35
  7222  170F                     __ptext35:	
  7223 ;; *************** function _ISR *****************
  7224 ;; Defined at:
  7225 ;;		line 82 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  7226 ;; Parameters:    Size  Location     Type
  7227 ;;		None
  7228 ;; Auto vars:     Size  Location     Type
  7229 ;;		None
  7230 ;; Return value:  Size  Location     Type
  7231 ;;		None               void
  7232 ;; Registers used:
  7233 ;;		wreg, status,2, status,0, pclath, cstack
  7234 ;; Tracked objects:
  7235 ;;		On entry : 0/0
  7236 ;;		On exit  : 0/0
  7237 ;;		Unchanged: 0/0
  7238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7239 ;;      Params:         0       0       0       0       0
  7240 ;;      Locals:         0       0       0       0       0
  7241 ;;      Temps:          5       0       0       0       0
  7242 ;;      Totals:         5       0       0       0       0
  7243 ;;Total ram usage:        5 bytes
  7244 ;; Hardware stack levels used:    1
  7245 ;; Hardware stack levels required when called:    1
  7246 ;; This function calls:
  7247 ;;		i1_instCTRL
  7248 ;; This function is called by:
  7249 ;;		Interrupt level 1
  7250 ;; This function uses a non-reentrant model
  7251 ;;
  7252                           
  7253                           
  7254                           ;psect for function _ISR
  7255  170F                     _ISR:	
  7256                           
  7257                           ;main.c: 84: GIE = 0;
  7258  170F  138B               	bcf	11,7	;volatile
  7259                           
  7260                           ;main.c: 85: if (INTF == 1)
  7261  1710  1C8B               	btfss	11,1	;volatile
  7262  1711  2F19               	goto	i1l2537
  7263                           
  7264                           ;main.c: 86: {
  7265                           ;main.c: 87: INTF = 0;
  7266  1712  108B               	bcf	11,1	;volatile
  7267                           
  7268                           ;main.c: 88: mode = (mode + 1) % 2;
  7269  1713  0868               	movf	_mode,w
  7270  1714  3E01               	addlw	1
  7271  1715  3901               	andlw	1
  7272  1716  00F2               	movwf	??_ISR
  7273  1717  0872               	movf	??_ISR,w
  7274  1718  00E8               	movwf	_mode
  7275  1719                     i1l2537:	
  7276                           
  7277                           ;main.c: 89: }
  7278                           ;main.c: 90: instCTRL(0x01);
  7279  1719  3001               	movlw	1
  7280  171A  160A  118A  269E  160A  118A  	fcall	i1_instCTRL
  7281                           
  7282                           ;main.c: 91: GIE = 1;
  7283  171F  178B               	bsf	11,7	;volatile
  7284  1720  0876               	movf	??_ISR+4,w
  7285  1721  1283               	bcf	3,5	;RP0=0, select bank0
  7286  1722  1303               	bcf	3,6	;RP1=0, select bank0
  7287  1723  00FF               	movwf	127
  7288  1724  0875               	movf	??_ISR+3,w
  7289  1725  008A               	movwf	10
  7290  1726  0874               	movf	??_ISR+2,w
  7291  1727  0084               	movwf	4
  7292  1728  0E73               	swapf	(??_ISR+1)^(0+-128),w
  7293  1729  0083               	movwf	3
  7294  172A  0EFE               	swapf	126,f
  7295  172B  0E7E               	swapf	126,w
  7296  172C  0009               	retfie
  7297  172D                     __end_of_ISR:	
  7298                           
  7299                           	psect	intentry
  7300  0004                     __pintentry:	
  7301                           ;incstack = 0
  7302                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  7303                           
  7304  0004                     interrupt_function:	
  7305  007E                     saved_w	set	btemp
  7306  0004  00FE               	movwf	btemp
  7307  0005  0E03               	swapf	3,w
  7308  0006  00F3               	movwf	??_ISR+1
  7309  0007  0804               	movf	4,w
  7310  0008  00F4               	movwf	??_ISR+2
  7311  0009  080A               	movf	10,w
  7312  000A  00F5               	movwf	??_ISR+3
  7313  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7314  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7315  000D  087F               	movf	btemp+1,w
  7316  000E  00F6               	movwf	??_ISR+4
  7317  000F  160A  118A  2F0F   	ljmp	_ISR
  7318                           
  7319                           	psect	text36
  7320  169E                     __ptext36:	
  7321 ;; *************** function i1_instCTRL *****************
  7322 ;; Defined at:
  7323 ;;		line 17 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  7324 ;; Parameters:    Size  Location     Type
  7325 ;;  CMD             1    wreg     unsigned char 
  7326 ;; Auto vars:     Size  Location     Type
  7327 ;;  CMD             1    1[COMMON] unsigned char 
  7328 ;; Return value:  Size  Location     Type
  7329 ;;		None               void
  7330 ;; Registers used:
  7331 ;;		wreg
  7332 ;; Tracked objects:
  7333 ;;		On entry : 0/0
  7334 ;;		On exit  : 0/0
  7335 ;;		Unchanged: 0/0
  7336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7337 ;;      Params:         0       0       0       0       0
  7338 ;;      Locals:         1       0       0       0       0
  7339 ;;      Temps:          1       0       0       0       0
  7340 ;;      Totals:         2       0       0       0       0
  7341 ;;Total ram usage:        2 bytes
  7342 ;; Hardware stack levels used:    1
  7343 ;; This function calls:
  7344 ;;		Nothing
  7345 ;; This function is called by:
  7346 ;;		_ISR
  7347 ;; This function uses a non-reentrant model
  7348 ;;
  7349                           
  7350                           
  7351                           ;psect for function i1_instCTRL
  7352  169E                     i1_instCTRL:	
  7353                           
  7354                           ;incstack = 0
  7355                           ; Regs used in i1_instCTRL: [wreg]
  7356                           ;i1instCTRL@CMD stored from wreg
  7357  169E  00F1               	movwf	i1instCTRL@CMD
  7358                           
  7359                           ;lcd_functions.h: 19: PORTD = CMD;
  7360  169F  0871               	movf	i1instCTRL@CMD,w
  7361  16A0  1283               	bcf	3,5	;RP0=0, select bank0
  7362  16A1  1303               	bcf	3,6	;RP1=0, select bank0
  7363  16A2  0088               	movwf	8	;volatile
  7364                           
  7365                           ;lcd_functions.h: 20: RC0 = 0;
  7366  16A3  1007               	bcf	7,0	;volatile
  7367                           
  7368                           ;lcd_functions.h: 21: RC1 = 0;
  7369  16A4  1087               	bcf	7,1	;volatile
  7370                           
  7371                           ;lcd_functions.h: 22: RC2 = 1;
  7372  16A5  1507               	bsf	7,2	;volatile
  7373                           
  7374                           ;lcd_functions.h: 23: _delay((unsigned long)((1)*(4000000/4000.0)));
  7375  16A6  30F9               	movlw	249
  7376  16A7  00F0               	movwf	??i1_instCTRL
  7377  16A8                     u411_27:	
  7378  16A8  0000               	nop
  7379  16A9  0BF0               	decfsz	??i1_instCTRL,f
  7380  16AA  2EA8               	goto	u411_27
  7381  16AB  2EAC               	nop2	;nop
  7382  16AC  0000               	nop
  7383                           
  7384                           ;lcd_functions.h: 24: RC2 = 0;
  7385  16AD  1283               	bcf	3,5	;RP0=0, select bank0
  7386  16AE  1303               	bcf	3,6	;RP1=0, select bank0
  7387  16AF  1107               	bcf	7,2	;volatile
  7388  16B0  0008               	return
  7389  16B1                     __end_ofi1_instCTRL:	
  7390  007E                     btemp	set	126	;btemp
  7391  007E                     wtemp	set	126
  7392  007E                     wtemp0	set	126
  7393  0080                     wtemp1	set	128
  7394  0082                     wtemp2	set	130
  7395  0084                     wtemp3	set	132
  7396  0086                     wtemp4	set	134
  7397  0088                     wtemp5	set	136
  7398  007F                     wtemp6	set	127
  7399  007E                     ttemp	set	126
  7400  007E                     ttemp0	set	126
  7401  0081                     ttemp1	set	129
  7402  0084                     ttemp2	set	132
  7403  0087                     ttemp3	set	135
  7404  007F                     ttemp4	set	127
  7405  007E                     ltemp	set	126
  7406  007E                     ltemp0	set	126
  7407  0082                     ltemp1	set	130
  7408  0086                     ltemp2	set	134
  7409  0080                     ltemp3	set	128


Data Sizes:
    Strings     181
    Constant    10
    Data        8
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     68      80
    BANK1            80     55      77
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_12(CODE[10]), STR_11(CODE[10]), STR_10(CODE[10]), STR_9(CODE[10]), 
		 -> STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[16]), STR_3(CODE[9]), 
		 -> STR_2(CODE[3]), STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 50
		 -> setMinutesStart@debugInfo(BANK1[10]), setHoursStart@debugInfo(BANK1[10]), displayTime@timeFormat(BANK0[10]), displayPPM@strBuffer(BANK1[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S206$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    displayPPM@bufPtr	PTR unsigned char  size(1) Largest target is 50
		 -> displayPPM@strBuffer(BANK1[50]), 

    printToLCD@str	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_19(CODE[12]), STR_18(CODE[10]), STR_17(CODE[19]), STR_16(CODE[15]), 
		 -> STR_15(CODE[15]), STR_14(CODE[7]), STR_13(CODE[5]), setMinutesStart@debugInfo(BANK1[10]), 
		 -> setHoursStart@debugInfo(BANK1[10]), displayTime@timeFormat(BANK0[10]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> displayPPM@strBuffer(BANK1[50]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_instCTRL

Critical Paths under _main in BANK0

    _main->_CalcMQ135
    _updateState->_displayPPM
    _setMinutesStart->_sprintf
    _setHoursStart->_sprintf
    _displayTime->_sprintf
    _displayPPM->___fttol
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___fttol->___ftmul
    ___ftneg->___awtoft
    _startUpLCD->_printToLCD
    _printToLCD->_dataCTRL
    _printToLCD->_instCTRL
    _initLCD->_instCTRL
    _handlePPM->___ftge
    _checkSelect->_instCTRL
    _checkMode->_instCTRL
    _CalcMQ135->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    ___awtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _updateState->_displayPPM

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   42548
                                             65 BANK0      3     3      0
                          _CalcMQ135
                     _Read_ADC_MQ135
                          _checkMode
                        _checkSelect
                          _checkTime
                          _handlePPM
                            _initADC
                      _initInterrupt
                           _runClock
                  _setPortDirections
                         _startUpLCD
                        _updateState
 ---------------------------------------------------------------------------------
 (1) _updateState                                         10    10      0   29436
                         _displayPPM
                        _displayTime
                           _instCTRL
                         _printToLCD
                      _setHoursStart
                    _setMinutesStart
 ---------------------------------------------------------------------------------
 (2) _setMinutesStart                                      5     5      0    5121
                                             35 BANK0      5     5      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setHoursStart                                        5     5      0    5121
                                             35 BANK0      5     5      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     720
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _displayTime                                         15    15      0    4288
                                             35 BANK0     15    15      0
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _displayPPM                                          59    57      2   13930
                                             60 BANK0      4     2      2
                                              0 BANK1     55    55      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
                           _instCTRL
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             21    16      5    3224
                                             14 BANK0     21    16      5
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     265
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     268
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     358
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     130
                                             14 BANK0      3     0      3
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _startUpLCD                                           0     0      0     998
                            _initLCD
                           _instCTRL
                         _printToLCD
 ---------------------------------------------------------------------------------
 (3) _printToLCD                                           2     0      2     954
                                              2 BANK0      2     0      2
                           _dataCTRL
                           _instCTRL
 ---------------------------------------------------------------------------------
 (4) _dataCTRL                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0      22
                                              2 BANK0      1     1      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (1) _setPortDirections                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _runClock                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handlePPM                                            2     0      2     242
                                             12 BANK0      2     0      2
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     242
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (1) _checkTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkSelect                                          4     4      0      67
                                              2 BANK0      4     4      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (1) _checkMode                                            2     2      0      22
                                              2 BANK0      2     2      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (4) _instCTRL                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Read_ADC_MQ135                                       4     2      2       0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _CalcMQ135                                           42    39      3   11783
                                             62 BANK0      3     0      3
                                              0 BANK1     39    39      0
                     _Read_ADC_MQ135 (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3495
                                             30 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2177
                                             46 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3347
                                             17 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    1882
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1685
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  5     5      0      22
                                              2 COMMON     5     5      0
                         i1_instCTRL
 ---------------------------------------------------------------------------------
 (6) i1_instCTRL                                           2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CalcMQ135
     _Read_ADC_MQ135 (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
   _Read_ADC_MQ135
   _checkMode
     _instCTRL
   _checkSelect
     _instCTRL
   _checkTime
   _handlePPM
     ___ftge
   _initADC
   _initInterrupt
   _runClock
   _setPortDirections
   _startUpLCD
     _initLCD
       _instCTRL
     _instCTRL
     _printToLCD
       _dataCTRL
       _instCTRL
   _updateState
     _displayPPM
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
       _instCTRL
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _displayTime
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _instCTRL
     _printToLCD
       _dataCTRL
       _instCTRL
     _setHoursStart
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _setMinutesStart
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 _ISR (ROOT)
   i1_instCTRL

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     37      4D       7       96.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     44      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      A8      12        0.0%
ABS                  0      0      A8       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun May 12 06:36:44 2024

                          pc 0002                 ?_displayTime 0070                  __CFG_CP$OFF 0000  
                         l84 16E5                           l98 0726                           fsr 0004  
        ___wmul@multiplicand 0022     __size_of_setMinutesStart 00A6                 ___ftadd@exp1 003D  
               ___ftadd@exp2 003C                 ___ftadd@sign 003B                          l101 1768  
                        l150 0C97                          l230 0D71                          l173 0A49  
                        l165 0A29                          l182 0A55                          l175 0A47  
                        l256 0434                          l169 0A27                          l274 04F9  
                        l542 0B07                          l375 17E7                          l536 0AEE  
                        l565 0F9F                          _GIE 005F                          _RB1 0031  
                        _RC0 0038                          _RC1 0039                          _RC2 003A  
                        _RC3 003B                          _RC4 003C                 __CFG_CPD$OFF 0000  
                        _ISR 170F                          _PPM 0064                          fsr0 0004  
                        indf 0000                 ___awmod@sign 0026                 __CFG_FOSC$HS 0000  
              printToLCD@str 0022               _Read_ADC_MQ135 16D7                 __CFG_LVP$OFF 0000  
     setHoursStart@debugInfo 00D9        setHoursStart@keyValid 0046                         ?_ISR 0070  
               ___ftdiv@cntr 0058                 ___ftdiv@sign 005D                         l2001 0F50  
                       l2011 0F76                         l2021 0F9B                         l2013 0F7A  
                       l2007 0F65                         l2025 0FB1                         l2009 0F71  
                       l2019 0F8F                         l2107 0BA4                         l2029 0FC3  
                       l2141 0C0F                         l2133 0BF3                         l2125 0BD6  
                       l2039 0FE6                         l2303 0E04                         l2071 07A4  
                       l2055 0755                         l2135 0BFE                         l2127 0BE6  
                       l3007 071E                         l2049 073F                         l2137 0C01  
                       l2083 07CC                         l2067 0794                         l2315 0A80  
                       l2079 07BC                         l2319 0AA7                         l1721 0AD8  
                       l1713 0AC0                         l2281 0DA0                         l2275 0D8A  
                       l2371 1705                         l2611 0439                         l1717 0AC7  
                       l2445 0906                         l2613 0444                         l2605 0430  
                       l1727 0AF3                         l1719 0AD3                         l2295 0DE5  
                       l1751 0988                         l2711 0408                         l1729 0AFD  
                       l1761 09A9                         l2713 05D5                         l2617 0456  
                       l2801 0EEF                         l2651 04EB                         l2643 04CA  
                       l2627 0494                         l1757 099E                         l1749 097A  
                       l1773 0942                         l2709 0587                         l2661 051C  
                       l2629 04AB                         l1941 09C9                         l1933 09C3  
                       l2591 0915                         l1775 0950                         l1783 0969  
                       l2575 17DF                         l2671 0533                         l2639 04C4  
                       l1943 09D7                         l1951 09F0                         l2569 169C  
                       l2681 054F                         l2753 0707                         l2745 06CF  
                       l1929 09BC                         l2833 0CA8                         l2825 0C80  
                       l1779 095E                         l2683 0553                         l2691 056E  
                       l2659 0518                         l1955 09F8                         l1947 09E5  
                       l2819 0C62                         l2835 0CB6                         l2923 0CBF  
                       l2749 06F7                         l2781 0E84                         l2933 0CF4  
                       l2941 0D09                         l1967 17C2                         l1983 0F27  
                       l2759 0717                         l2943 0D14                         l2927 0CD1  
                       l2873 0A1B                         l2865 0A0B                         l2793 0ED0  
                       l2953 0D41                         l2961 0D5C                         l1979 0F20  
                       l2699 0583                         l2787 0EB2                         l2947 0D26  
                       l1989 0F36                         l2893 0A4B                         l2965 0D67  
                       l2887 0A3B                         l2879 0A2B                         l2799 0EE1  
                       l2975 0B43                         STR_1 08C1                         STR_2 08CC  
                       STR_3 08B1                         STR_4 083E                         STR_5 082D  
                       STR_6 084F                         STR_7 089D                         STR_8 0893  
                       STR_9 08A7                   i1_instCTRL 169E                         u3005 0DE6  
                       u3015 0DF7                         u2215 09CC                         u3025 0E05  
                       u3051 0A73                         u2235 09DD                         u3052 0A74  
                       u2405 0F66                         u3053 0A79                         u2245 09E6  
                       u3054 0A7A                         u3071 0A9A                         u4007 0B3C  
                       u3072 0A9B                         u3073 0AA0                         u4017 0C38  
                       u3074 0AA1                         u2435 0F7B                         u4107 16DD  
                       u4027 0CB0                         u1805 0AF6                         u4037 0E4A  
                       u2375 0F51                         u4047 0EE9                         u2465 0F90  
                       u2545 0761                         u4057 16CE                         u1905 099F  
                       u1835 0B0E                         u2635 07CD                         u2555 0773  
                       u4067 1778                         u2715 0BD7                         u3515 0508  
                       u1765 0ACC                         u2645 07D5                         u4077 1709  
                       u4087 173F                         u1935 0945                         u1785 0AE7  
                       u2585 07A5                         u4097 16BB                         u2745 0BF5  
                       u1865 097D                         u3385 17E8                         u3625 06BA  
                       u2595 07AD                         u1955 0956                         u3395 17EF  
                       u3475 04E1                         u3635 0E2F                         u2685 0BAB  
                       u1885 0989                         u1965 095F                         u3645 0E3C  
                       u3725 0C1D                         _INTE 005C                         _INTF 0059  
                       u1895 0995                         u3735 0C2A                         u2985 0DB2  
                       u2995 0DC4                 __CFG_WRT$OFF 0000                         _main 0B20  
               ___ftpack@arg 0020                         _mode 0068                 ___ftpack@exp 0023  
                       btemp 007E                __CFG_BOREN$ON 0000                         ltemp 007E  
                       start 0012                         ttemp 007E                         wtemp 007E  
      displayPPM@ppmFraction 00D4                 ___ftmul@cntr 004C                 ___ftmul@sign 004D  
                      ??_ISR 0072                 ___fttol@exp1 005B                 ___fttol@lval 0057  
                      ?_main 0070              __end_of___ftadd 1000                        STR_10 089D  
                      STR_11 0893                        STR_12 08A7                        STR_13 08C7  
                      STR_14 08BA                        STR_15 085F                        STR_16 086E  
                      STR_17 081A                __CFG_WDTE$OFF 0000                        STR_18 0889  
                      STR_19 087D              __end_of___awmod 09FF              __end_of___ftdiv 0E2A  
            __end_of___ftneg 167F              __end_of___ftmul 07FA              __end_of___fttol 0C18  
            __end_of___lwdiv 09B0              __end_of___lwmod 0970       __end_of_Read_ADC_MQ135 16F2  
                      _PORTA 0005                        _PORTB 0006                        _PORTC 0007  
                      _PORTD 0008                        _TRISA 0085                        _TRISB 0086  
                      _TRISC 0087                        _TRISD 0088         __size_of_checkSelect 0028  
               CalcMQ135@co2 00C1  setMinutesStart@lastKeyState 006F              __end_of_initADC 1675  
            __end_of_initLCD 1792                ___awtoft@sign 002D              __end_of_dpowers 081A  
            __end_of_isdigit 169E                        _hours 006A                ___ftpack@sign 0024  
                      pclath 000A                        ltemp0 007E                        ltemp1 0082  
                      ltemp2 0086                        ltemp3 0080           __size_of_CalcMQ135 03A7  
                      ttemp0 007E                        ttemp1 0081                        ttemp2 0084  
                      ttemp3 0087                        ttemp4 007F                        status 0003  
                      wtemp0 007E                        wtemp1 0080                        wtemp2 0082  
                      wtemp3 0084                        wtemp4 0086                        wtemp5 0088  
                      wtemp6 007F              __end_of_sprintf 05E2        __end_of_setHoursStart 0EF7  
            __initialization 0015           displayPPM@ppmWhole 00D2       __size_of_initInterrupt 0007  
               __end_of_main 0B8A   checkSelect@currentRB1State 0024                       ??_main 0061  
              ___fttol@sign1 0056              ?_Read_ADC_MQ135 0020            ??_setMinutesStart 0043  
                     _ADCON0 001F                       _ADCON1 009F                       _ADRESH 001E  
                     _ADRESL 009E             __end_of___awtoft 17DB             __end_of___ftpack 0B20  
                ?i1_instCTRL 0070                       i1l2537 1719                       _INTEDG 040E  
                     u411_27 16A8             __end_of_dataCTRL 16D7                  instCTRL@CMD 0021  
             __CFG_PWRTE$OFF 0000                       ___ftge 0A57            _setPortDirections 167F  
                     ___wmul 17DB                    ??___ftadd 0037                    ??___awmod 0024  
                  ??___ftdiv 0054                    ??___ftneg 0031                    ??___ftmul 0044  
                  ??___fttol 0052                    ??___lwdiv 0024                    ??___lwmod 002C  
           __end_of_instCTRL 16C4        displayTime@timeFormat 0048           ?_setPortDirections 0070  
            ___awmod@divisor 0020                       _select 0069              ___awmod@counter 0025  
          __end_of_CalcMQ135 03FF         __size_of_displayTime 0024    setHoursStart@lastKeyState 006E  
                  ??_initADC 0020        ___ftmul@f3_as_product 0049                    ??_initLCD 0022  
               __pdataCOMMON 0079                    ??_isdigit 0020          ??_setPortDirections 0020  
                     saved_w 007E             __end_of_runClock 170F                _initInterrupt 165D  
                  ??_sprintf 0033           setMinutesStart@key 0047      __end_of__initialization 0054  
                 ___ftadd@f1 0031                   ___ftadd@f2 0034                   ___ftge@ff1 0020  
                 ___ftge@ff2 0023                   ___ftdiv@f1 0051                   ___ftdiv@f2 004E  
                 ___ftdiv@f3 0059                   ___ftneg@f1 002E                   ___awtoft@c 0028  
  __end_of_setPortDirections 168E                   ___ftmul@f1 003E                   ___ftmul@f2 0041  
               ?_updateState 0070                   ___fttol@f1 004E               __pcstackCOMMON 0070  
               __pidataBANK0 07FA           __size_of_checkMode 001E           __size_of_checkTime 0058  
        __size_ofi1_instCTRL 0013           __size_of_handlePPM 0023          displayPPM@strBuffer 00A0  
    checkSelect@lastRB1State 0077               ?_initInterrupt 0070                 sprintf@width 003F  
                 __pbssBANK0 0064                   __pbssBANK1 00D7                   __pmaintext 0B20  
                    ?___ftge 0020                      ?___wmul 0020                   __pintentry 0004  
                  ?___awtoft 0028                    ?___ftpack 0020                    ?_dataCTRL 0070  
                    _GO_DONE 00FA                   _displayPPM 05E2            __end_of_checkMode 174B  
          __end_of_checkTime 0A57                   __stringtab 0800                    ?_instCTRL 0070  
          __end_of_handlePPM 176E   __size_of_setPortDirections 000F               CalcMQ135@ratio 00C4  
            _savedHoursStart 006C                    ?_runClock 0070              __size_of___ftge 005F  
                    ___ftadd 0EF7                      ___awmod 09B0                      ___ftdiv 0D72  
                    ___ftneg 1675              __size_of___wmul 0025                      ___ftmul 0727  
                    ___fttol 0B8A                      ___lwdiv 0970                      ___lwmod 093A  
           ??_Read_ADC_MQ135 0022              _savedMinutesEnd 007A              _setMinutesStart 0C18  
                 ??___awtoft 002B                   ??___ftpack 0025                ??_checkSelect 0022  
                    __ptext1 0CBE                      __ptext2 0C18                      __ptext3 0E2A  
                    __ptext4 09B0                      __ptext5 1792                      __ptext6 05E2  
                    __ptext7 03FF                      __ptext8 168E                      __ptext9 17DB  
                    _initADC 166C                   ??_dataCTRL 0020                      _initLCD 176E  
               __size_of_ISR 001E              ??_initInterrupt 0020                      _dpowers 0810  
                    _isdigit 168E             ___awmod@dividend 0022                      _minutes 0067  
                    _sprintf 03FF                      clrloop0 1665                 ??i1_instCTRL 0070  
       end_of_initialization 0054                   _ppmHandler 00D7                   ??_instCTRL 0020  
                 ??_runClock 0020         __size_of_updateState 00B4                   _printToLCD 090F  
         __end_ofi1_instCTRL 16B1       __size_of_setHoursStart 00CD                    _CalcMQ135 0058  
        __end_of_checkSelect 090F                  ?_displayPPM 005C                   _startUpLCD 08D2  
                ___ftdiv@exp 005C             displayPPM@bufPtr 00D6         displayPPM@ppmHandler 005C  
           CalcMQ135@RAW_ADC 005E      __end_of_setMinutesStart 0CBE                  ___ftmul@exp 0048  
              ??_displayTime 0043               __end_of___ftge 0AB6               __end_of___wmul 1800  
              __pidataCOMMON 08D0          start_initialization 0015                   ?_CalcMQ135 005E  
                __end_of_ISR 172D                _setHoursStart 0E2A                _savedHoursEnd 006B  
           CalcMQ135@voltage 00A0                     ??___ftge 0026                     ??___wmul 0024  
        __size_of_displayPPM 0145                  __pdataBANK0 006A                  ?_printToLCD 0022  
                _checkSelect 08E7            __size_of___awtoft 0025            __size_of___ftpack 006A  
        __end_of_displayTime 17B6                  __pbssCOMMON 0077                    ___latbits 0002  
              __pcstackBANK0 0020                __pcstackBANK1 00A0            __size_of_dataCTRL 0013  
        __end_of__stringdata 08CF                  ?_startUpLCD 0070                  sprintf@ccnt 0038  
                sprintf@_val 003A            _savedMinutesStart 006D                  sprintf@flag 003E  
                sprintf@prec 0037                    _checkMode 172D                    _checkTime 09FF  
             ?_setHoursStart 0070             setHoursStart@key 0047            __size_of_instCTRL 0013  
           ___lwdiv@dividend 0022             ?_setMinutesStart 0070                    _handlePPM 174B  
                   ?___ftadd 0031                     ?___awmod 0020                     ?___ftdiv 004E  
                   ?___ftneg 002E                     ?___ftmul 003E                     ?___fttol 004E  
                   ?___lwdiv 0020                     ?___lwmod 0028            __size_of_runClock 001D  
                  __pstrings 0800                     ?_initADC 0070                     ?_initLCD 0070  
                   ?_isdigit 0070                  ??_CalcMQ135 0061             ___lwdiv@quotient 0025  
                   ?_sprintf 002E            interrupt_function 0004               ___wmul@product 0024  
                 ?_checkMode 0070                   ?_checkTime 0070          __size_of_printToLCD 002B  
                  clear_ram0 1664                i1instCTRL@CMD 0071                  dataCTRL@DAT 0021  
                 ?_handlePPM 002C                  _displayTime 1792          __size_of_startUpLCD 0015  
                __stringbase 080F                  __stringdata 081A            ___wmul@multiplier 0020  
      __end_of_initInterrupt 1664                 ??_displayPPM 005E     setMinutesStart@debugInfo 00E3  
            ??_setHoursStart 0043              CalcMQ135@ratio2 00B5              CalcMQ135@ratio3 00B8  
            CalcMQ135@ratio4 00BB              CalcMQ135@ratio5 00BE              CalcMQ135@ratio6 00A3  
              ??_updateState 0060           __end_of_displayPPM 0727             __size_of___ftadd 0109  
           __size_of___awmod 004F             __size_of___ftdiv 00B8             __size_of___ftneg 000A  
           __size_of___ftmul 00D3             __size_of___fttol 008E             __size_of___lwdiv 0040  
           __size_of___lwmod 0036                     ___awtoft 17B6                     ___ftpack 0AB6  
         __end_of__stringtab 0810                  _isdigit$402 0020                     _dataCTRL 16C4  
           __size_of_initADC 0009             __size_of_initLCD 0024             __size_of_isdigit 0010  
            ___lwdiv@divisor 0020      __size_of_Read_ADC_MQ135 001B              ___lwdiv@counter 0027  
                   __ptext10 093A                     __ptext11 0970                     __ptext20 165D  
                   __ptext12 0B8A                     __ptext21 166C                     __ptext13 1675  
                   __ptext30 0727                     __ptext22 174B                     __ptext14 08D2  
                   __ptext31 0D72                     __ptext23 0A57                     __ptext15 090F  
                   __ptext32 0EF7                     __ptext24 09FF                     __ptext16 16C4  
                   __ptext33 17B6                     __ptext25 08E7                     __ptext17 176E  
                   __ptext34 0AB6                     __ptext26 172D                     __ptext18 167F  
                   __ptext35 170F                     __ptext27 16B1                     __ptext19 16F2  
                   __ptext36 169E                     __ptext28 16D7                     __ptext29 0058  
           __size_of_sprintf 01E3                     _lastMode 0079                     _instCTRL 16B1  
              __size_of_main 006A                  ??_checkMode 0022                  ??_checkTime 0020  
                ??_handlePPM 002E                     _runClock 16F2          __end_of_updateState 0D72  
               ??_printToLCD 0024                 ?_checkSelect 0070                     isdigit@c 0021  
               ??_startUpLCD 0024      setMinutesStart@keyValid 0046                     intlevel1 0000  
                  sprintf@ap 0036                    sprintf@sp 0042             ___lwmod@dividend 002A  
         __end_of_printToLCD 093A                    stringcode 080A           __end_of_startUpLCD 08E7  
              _CalcMQ135$630 00A9                _CalcMQ135$631 00AC                _CalcMQ135$632 00AF  
              _CalcMQ135$633 00B2                _CalcMQ135$629 00A6                     sprintf@c 0041  
                   sprintf@f 002E              ___lwmod@divisor 0028              ___lwmod@counter 002D  
                   stringdir 080A                     stringtab 0800                  _updateState 0CBE  
