

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun May 12 07:59:27 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	intentry,global,class=CODE,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	dabs	1,0x7E,2
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  000E                     	;# 
    74  000E                     	;# 
    75  000F                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001B                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  001D                     	;# 
    92  001E                     	;# 
    93  001F                     	;# 
    94  0081                     	;# 
    95  0085                     	;# 
    96  0086                     	;# 
    97  0087                     	;# 
    98  0088                     	;# 
    99  0089                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  010C                     	;# 
   114  010D                     	;# 
   115  010E                     	;# 
   116  010F                     	;# 
   117  018C                     	;# 
   118  018D                     	;# 
   119                           
   120                           	psect	idataCOMMON
   121  13DA                     __pidataCOMMON:	
   122                           
   123                           ;initializer for _hours
   124  13DA  3404               	retlw	4
   125                           
   126                           ;initializer for _lastKeyState
   127  13DB  34FF               	retlw	255
   128                           
   129                           ;initializer for _lastMode
   130  13DC  34FF               	retlw	255
   131                           
   132                           	psect	idataBANK1
   133  13DD                     __pidataBANK1:	
   134                           
   135                           ;initializer for _savedHoursEnd
   136  13DD  340A               	retlw	10
   137                           
   138                           ;initializer for _savedHoursStart
   139  13DE  3409               	retlw	9
   140                           
   141                           ;initializer for _savedMinutesEnd
   142  13DF  341E               	retlw	30
   143                           
   144                           ;initializer for _savedMinutesStart
   145  13E0  341E               	retlw	30
   146                           
   147                           	psect	strings
   148  0800                     __pstrings:	
   149  0800                     stringtab:	
   150  0800                     __stringtab:	
   151                           
   152                           ;	String table - string pointers are 1 byte each
   153  0800  1BFF               	btfsc	btemp+1,7
   154  0801  280A               	ljmp	stringcode
   155  0802  1383               	bcf	3,7
   156  0803  187F               	btfsc	btemp+1,0
   157  0804  1783               	bsf	3,7
   158  0805  0800               	movf	0,w
   159  0806  0A84               	incf	4,f
   160  0807  1903               	skipnz
   161  0808  0AFF               	incf	btemp+1,f
   162  0809  0008               	return
   163  080A                     stringcode:	
   164  080A                     stringdir:	
   165  080A  3008               	movlw	high stringdir
   166  080B  008A               	movwf	10
   167  080C  0804               	movf	4,w
   168  080D  0A84               	incf	4,f
   169  080E  0782               	addwf	2,f
   170  080F                     __stringbase:	
   171  080F  3400               	retlw	0
   172  0810                     __end_of__stringtab:	
   173  0810                     _dpowers:	
   174  0810  3401               	retlw	1
   175  0811  3400               	retlw	0
   176  0812  340A               	retlw	10
   177  0813  3400               	retlw	0
   178  0814  3464               	retlw	100
   179  0815  3400               	retlw	0
   180  0816  34E8               	retlw	232
   181  0817  3403               	retlw	3
   182  0818  3410               	retlw	16
   183  0819  3427               	retlw	39
   184  081A                     __end_of_dpowers:	
   185  001F                     _ADCON0	set	31
   186  001E                     _ADRESH	set	30
   187  0005                     _PORTA	set	5
   188  0006                     _PORTB	set	6
   189  0007                     _PORTC	set	7
   190  0008                     _PORTD	set	8
   191  005F                     _GIE	set	95
   192  00FA                     _GO_DONE	set	250
   193  005C                     _INTE	set	92
   194  0059                     _INTF	set	89
   195  0031                     _RB1	set	49
   196  0038                     _RC0	set	56
   197  0039                     _RC1	set	57
   198  003A                     _RC2	set	58
   199  003B                     _RC3	set	59
   200  003C                     _RC4	set	60
   201  009F                     _ADCON1	set	159
   202  009E                     _ADRESL	set	158
   203  0085                     _TRISA	set	133
   204  0086                     _TRISB	set	134
   205  0087                     _TRISC	set	135
   206  0088                     _TRISD	set	136
   207  040E                     _INTEDG	set	1038
   208  081A                     __stringdata:	
   209  081A                     STR_25:	
   210  081A  3453               	retlw	83	;'S'
   211  081B  3445               	retlw	69	;'E'
   212  081C  3454               	retlw	84	;'T'
   213  081D  3420               	retlw	32	;' '
   214  081E  3448               	retlw	72	;'H'
   215  081F  3452               	retlw	82	;'R'
   216  0820  3453               	retlw	83	;'S'
   217  0821  3420               	retlw	32	;' '
   218  0822  342D               	retlw	45	;'-'
   219  0823  3420               	retlw	32	;' '
   220  0824  3453               	retlw	83	;'S'
   221  0825  3454               	retlw	84	;'T'
   222  0826  3441               	retlw	65	;'A'
   223  0827  3452               	retlw	82	;'R'
   224  0828  3454               	retlw	84	;'T'
   225  0829  3400               	retlw	0
   226  082A                     STR_6:	
   227  082A  3454               	retlw	84	;'T'
   228  082B  3469               	retlw	105	;'i'
   229  082C  346D               	retlw	109	;'m'
   230  082D  3465               	retlw	101	;'e'
   231  082E  343A               	retlw	58	;':'
   232  082F  3420               	retlw	32	;' '
   233  0830  3425               	retlw	37	;'%'
   234  0831  3430               	retlw	48	;'0'
   235  0832  3432               	retlw	50	;'2'
   236  0833  3464               	retlw	100	;'d'
   237  0834  343A               	retlw	58	;':'
   238  0835  3425               	retlw	37	;'%'
   239  0836  3430               	retlw	48	;'0'
   240  0837  3432               	retlw	50	;'2'
   241  0838  3464               	retlw	100	;'d'
   242  0839  3400               	retlw	0
   243  083A                     STR_21:	
   244  083A  3444               	retlw	68	;'D'
   245  083B  3449               	retlw	73	;'I'
   246  083C  3453               	retlw	83	;'S'
   247  083D  3450               	retlw	80	;'P'
   248  083E  3420               	retlw	32	;' '
   249  083F  3443               	retlw	67	;'C'
   250  0840  344D               	retlw	77	;'M'
   251  0841  344D               	retlw	77	;'M'
   252  0842  344F               	retlw	79	;'O'
   253  0843  344E               	retlw	78	;'N'
   254  0844  3420               	retlw	32	;' '
   255  0845  3450               	retlw	80	;'P'
   256  0846  3447               	retlw	71	;'G'
   257  0847  3431               	retlw	49	;'1'
   258  0848  3400               	retlw	0
   259  0849                     STR_24:	
   260  0849  3444               	retlw	68	;'D'
   261  084A  3449               	retlw	73	;'I'
   262  084B  3453               	retlw	83	;'S'
   263  084C  3450               	retlw	80	;'P'
   264  084D  3420               	retlw	32	;' '
   265  084E  3443               	retlw	67	;'C'
   266  084F  344D               	retlw	77	;'M'
   267  0850  344D               	retlw	77	;'M'
   268  0851  344F               	retlw	79	;'O'
   269  0852  344E               	retlw	78	;'N'
   270  0853  3420               	retlw	32	;' '
   271  0854  3450               	retlw	80	;'P'
   272  0855  3447               	retlw	71	;'G'
   273  0856  3432               	retlw	50	;'2'
   274  0857  3400               	retlw	0
   275  0858                     STR_28:	
   276  0858  3453               	retlw	83	;'S'
   277  0859  3445               	retlw	69	;'E'
   278  085A  3454               	retlw	84	;'T'
   279  085B  3420               	retlw	32	;' '
   280  085C  3448               	retlw	72	;'H'
   281  085D  3452               	retlw	82	;'R'
   282  085E  3453               	retlw	83	;'S'
   283  085F  3420               	retlw	32	;' '
   284  0860  342D               	retlw	45	;'-'
   285  0861  3420               	retlw	32	;' '
   286  0862  3445               	retlw	69	;'E'
   287  0863  344E               	retlw	78	;'N'
   288  0864  3444               	retlw	68	;'D'
   289  0865  3400               	retlw	0
   290  0866                     STR_22:	
   291  0866  3453               	retlw	83	;'S'
   292  0867  3454               	retlw	84	;'T'
   293  0868  3452               	retlw	82	;'R'
   294  0869  3454               	retlw	84	;'T'
   295  086A  343A               	retlw	58	;':'
   296  086B  3420               	retlw	32	;' '
   297  086C  3425               	retlw	37	;'%'
   298  086D  3432               	retlw	50	;'2'
   299  086E  3464               	retlw	100	;'d'
   300  086F  343A               	retlw	58	;':'
   301  0870  3425               	retlw	37	;'%'
   302  0871  3432               	retlw	50	;'2'
   303  0872  3464               	retlw	100	;'d'
   304  0873  3400               	retlw	0
   305  0874                     STR_23:	
   306  0874  3445               	retlw	69	;'E'
   307  0875  344E               	retlw	78	;'N'
   308  0876  3444               	retlw	68	;'D'
   309  0877  343A               	retlw	58	;':'
   310  0878  3420               	retlw	32	;' '
   311  0879  3425               	retlw	37	;'%'
   312  087A  3432               	retlw	50	;'2'
   313  087B  3464               	retlw	100	;'d'
   314  087C  343A               	retlw	58	;':'
   315  087D  3425               	retlw	37	;'%'
   316  087E  3432               	retlw	50	;'2'
   317  087F  3464               	retlw	100	;'d'
   318  0880  3400               	retlw	0
   319  0881                     STR_27:	
   320  0881  3453               	retlw	83	;'S'
   321  0882  3445               	retlw	69	;'E'
   322  0883  3454               	retlw	84	;'T'
   323  0884  3420               	retlw	32	;' '
   324  0885  344D               	retlw	77	;'M'
   325  0886  3449               	retlw	73	;'I'
   326  0887  344E               	retlw	78	;'N'
   327  0888  3455               	retlw	85	;'U'
   328  0889  3454               	retlw	84	;'T'
   329  088A  3445               	retlw	69	;'E'
   330  088B  3453               	retlw	83	;'S'
   331  088C  3400               	retlw	0
   332  088D                     STR_26:	
   333  088D  3453               	retlw	83	;'S'
   334  088E  3445               	retlw	69	;'E'
   335  088F  3454               	retlw	84	;'T'
   336  0890  3420               	retlw	32	;' '
   337  0891  3448               	retlw	72	;'H'
   338  0892  344F               	retlw	79	;'O'
   339  0893  3455               	retlw	85	;'U'
   340  0894  3452               	retlw	82	;'R'
   341  0895  3453               	retlw	83	;'S'
   342  0896  3400               	retlw	0
   343  0897                     STR_8:	
   344  0897  3444               	retlw	68	;'D'
   345  0898  3445               	retlw	69	;'E'
   346  0899  3443               	retlw	67	;'C'
   347  089A  343A               	retlw	58	;':'
   348  089B  3420               	retlw	32	;' '
   349  089C  3425               	retlw	37	;'%'
   350  089D  3430               	retlw	48	;'0'
   351  089E  3432               	retlw	50	;'2'
   352  089F  3464               	retlw	100	;'d'
   353  08A0  3400               	retlw	0
   354  08A1                     STR_7:	
   355  08A1  3449               	retlw	73	;'I'
   356  08A2  344E               	retlw	78	;'N'
   357  08A3  3443               	retlw	67	;'C'
   358  08A4  343A               	retlw	58	;':'
   359  08A5  3420               	retlw	32	;' '
   360  08A6  3425               	retlw	37	;'%'
   361  08A7  3430               	retlw	48	;'0'
   362  08A8  3432               	retlw	50	;'2'
   363  08A9  3464               	retlw	100	;'d'
   364  08AA  3400               	retlw	0
   365  08AB                     STR_9:	
   366  08AB  3453               	retlw	83	;'S'
   367  08AC  3445               	retlw	69	;'E'
   368  08AD  3454               	retlw	84	;'T'
   369  08AE  343A               	retlw	58	;':'
   370  08AF  3420               	retlw	32	;' '
   371  08B0  3425               	retlw	37	;'%'
   372  08B1  3430               	retlw	48	;'0'
   373  08B2  3432               	retlw	50	;'2'
   374  08B3  3464               	retlw	100	;'d'
   375  08B4  3400               	retlw	0
   376  08B5                     STR_3:	
   377  08B5  3425               	retlw	37	;'%'
   378  08B6  3464               	retlw	100	;'d'
   379  08B7  3420               	retlw	32	;' '
   380  08B8  3470               	retlw	112	;'p'
   381  08B9  3470               	retlw	112	;'p'
   382  08BA  346D               	retlw	109	;'m'
   383  08BB  3420               	retlw	32	;' '
   384  08BC  3420               	retlw	32	;' '
   385  08BD  3400               	retlw	0
   386  08BE                     STR_4:	
   387  08BE  3450               	retlw	80	;'P'
   388  08BF  3455               	retlw	85	;'U'
   389  08C0  3452               	retlw	82	;'R'
   390  08C1  3446               	retlw	70	;'F'
   391  08C2  3420               	retlw	32	;' '
   392  08C3  3448               	retlw	72	;'H'
   393  08C4  3449               	retlw	73	;'I'
   394  08C5  3400               	retlw	0
   395  08C6                     STR_31:	
   396  08C6  3443               	retlw	67	;'C'
   397  08C7  3448               	retlw	72	;'H'
   398  08C8  3443               	retlw	67	;'C'
   399  08C9  344B               	retlw	75	;'K'
   400  08CA  3420               	retlw	32	;' '
   401  08CB  3449               	retlw	73	;'I'
   402  08CC  344F               	retlw	79	;'O'
   403  08CD  3400               	retlw	0
   404  08CE                     STR_5:	
   405  08CE  3450               	retlw	80	;'P'
   406  08CF  3455               	retlw	85	;'U'
   407  08D0  3452               	retlw	82	;'R'
   408  08D1  3446               	retlw	70	;'F'
   409  08D2  3420               	retlw	32	;' '
   410  08D3  344C               	retlw	76	;'L'
   411  08D4  344F               	retlw	79	;'O'
   412  08D5  3400               	retlw	0
   413  08D6                     STR_20:	
   414  08D6  344D               	retlw	77	;'M'
   415  08D7  344F               	retlw	79	;'O'
   416  08D8  3444               	retlw	68	;'D'
   417  08D9  3445               	retlw	69	;'E'
   418  08DA  343A               	retlw	58	;':'
   419  08DB  3420               	retlw	32	;' '
   420  08DC  3400               	retlw	0
   421  08DD                     STR_19:	
   422  08DD  3450               	retlw	80	;'P'
   423  08DE  3457               	retlw	87	;'W'
   424  08DF  3452               	retlw	82	;'R'
   425  08E0  3420               	retlw	32	;' '
   426  08E1  344F               	retlw	79	;'O'
   427  08E2  344E               	retlw	78	;'N'
   428  08E3  3400               	retlw	0
   429  08E4                     STR_1:	
   430  08E4  3443               	retlw	67	;'C'
   431  08E5  344F               	retlw	79	;'O'
   432  08E6  3432               	retlw	50	;'2'
   433  08E7  343A               	retlw	58	;':'
   434  08E8  3420               	retlw	32	;' '
   435  08E9  3400               	retlw	0
   436  08EA                     STR_2:	
   437  08EA  3425               	retlw	37	;'%'
   438  08EB  3464               	retlw	100	;'d'
   439  08EC  3400               	retlw	0
   440  08ED                     __end_of__stringdata:	
   441                           
   442                           ; #config settings
   443  0000                     
   444                           	psect	cinit
   445  0015                     start_initialization:	
   446  0015                     __initialization:	
   447                           
   448                           ; Clear objects allocated to COMMON
   449  0015  01F7               	clrf	__pbssCOMMON& (0+127)
   450  0016  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   451  0017  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   452                           
   453                           ; Clear objects allocated to BANK1
   454  0018  1383               	bcf	3,7	;select IRP bank0
   455  0019  30D7               	movlw	low __pbssBANK1
   456  001A  0084               	movwf	4
   457  001B  30E9               	movlw	low (__pbssBANK1+18)
   458  001C  160A  118A  23E8  120A  118A  	fcall	clear_ram0
   459                           
   460                           ; Initialize objects allocated to BANK1
   461  0021  1683               	bsf	3,5	;RP0=1, select bank1
   462  0022  1303               	bcf	3,6	;RP1=0, select bank1
   463  0023  160A  118A  23DD  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   464  0028  00E9               	movwf	__pdataBANK1& (0+127)
   465  0029  160A  118A  23DE  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   466  002E  00EA               	movwf	(__pdataBANK1+1)& (0+127)
   467  002F  160A  118A  23DF  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   468  0034  00EB               	movwf	(__pdataBANK1+2)& (0+127)
   469  0035  160A  118A  23E0  120A  118A  	fcall	__pidataBANK1+3	;fetch initializer
   470  003A  00EC               	movwf	(__pdataBANK1+3)& (0+127)
   471                           
   472                           ; Initialize objects allocated to COMMON
   473  003B  160A  118A  23DA  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   474  0040  00FA               	movwf	__pdataCOMMON& (0+127)
   475  0041  160A  118A  23DB  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   476  0046  00FB               	movwf	(__pdataCOMMON+1)& (0+127)
   477  0047  160A  118A  23DC   	fcall	__pidataCOMMON+2	;fetch initializer
   478  004A  00FC               	movwf	(__pdataCOMMON+2)& (0+127)
   479  004B                     end_of_initialization:	
   480                           ;End of C runtime variable initialization code
   481                           
   482  004B                     __end_of__initialization:	
   483  004B  0183               	clrf	3
   484  004C  160A  118A  2E9A   	ljmp	_main	;jump to C main() function
   485                           
   486                           	psect	bssCOMMON
   487  0077                     __pbssCOMMON:	
   488  0077                     _key:	
   489  0077                     	ds	1
   490  0078                     _keyValid:	
   491  0078                     	ds	1
   492  0079                     _minutes:	
   493  0079                     	ds	1
   494                           
   495                           	psect	dataCOMMON
   496  007A                     __pdataCOMMON:	
   497  007A                     _hours:	
   498  007A                     	ds	1
   499  007B                     _lastKeyState:	
   500  007B                     	ds	1
   501  007C                     _lastMode:	
   502  007C                     	ds	1
   503                           
   504                           	psect	bssBANK1
   505  00D7                     __pbssBANK1:	
   506  00D7                     _PPM:	
   507  00D7                     	ds	3
   508  00DA                     checkSelect@lastRB1State:	
   509  00DA                     	ds	2
   510  00DC                     _mode:	
   511  00DC                     	ds	1
   512  00DD                     _ppmFlag:	
   513  00DD                     	ds	1
   514  00DE                     _select:	
   515  00DE                     	ds	1
   516  00DF                     _debugInfo:	
   517  00DF                     	ds	10
   518                           
   519                           	psect	dataBANK1
   520  00E9                     __pdataBANK1:	
   521  00E9                     _savedHoursEnd:	
   522  00E9                     	ds	1
   523  00EA                     _savedHoursStart:	
   524  00EA                     	ds	1
   525  00EB                     _savedMinutesEnd:	
   526  00EB                     	ds	1
   527  00EC                     _savedMinutesStart:	
   528  00EC                     	ds	1
   529                           
   530                           	psect	clrtext
   531  13E8                     clear_ram0:	
   532                           ;	Called with FSR containing the base address, and
   533                           ;	W with the last address+1
   534                           
   535  13E8  0064               	clrwdt	;clear the watchdog before getting into this loop
   536  13E9                     clrloop0:	
   537  13E9  0180               	clrf	0	;clear RAM location pointed to by FSR
   538  13EA  0A84               	incf	4,f	;increment pointer
   539  13EB  0604               	xorwf	4,w	;XOR with final address
   540  13EC  1903               	btfsc	3,2	;have we reached the end yet?
   541  13ED  3400               	retlw	0	;all done for this memory range, return
   542  13EE  0604               	xorwf	4,w	;XOR again to restore value
   543  13EF  2BE9               	goto	clrloop0	;do the next byte
   544                           
   545                           	psect	cstackBANK1
   546  00A0                     __pcstackBANK1:	
   547  00A0                     CalcMQ135@voltage:	
   548  00A0                     displayPPM@strBuffer:	
   549                           ; 3 bytes @ 0x0
   550                           
   551                           
   552                           ; 50 bytes @ 0x0
   553  00A0                     	ds	3
   554  00A3                     CalcMQ135@ratio6:	
   555                           
   556                           ; 3 bytes @ 0x3
   557  00A3                     	ds	3
   558  00A6                     _CalcMQ135$657:	
   559                           
   560                           ; 3 bytes @ 0x6
   561  00A6                     	ds	3
   562  00A9                     _CalcMQ135$658:	
   563                           
   564                           ; 3 bytes @ 0x9
   565  00A9                     	ds	3
   566  00AC                     _CalcMQ135$659:	
   567                           
   568                           ; 3 bytes @ 0xC
   569  00AC                     	ds	3
   570  00AF                     _CalcMQ135$660:	
   571                           
   572                           ; 3 bytes @ 0xF
   573  00AF                     	ds	3
   574  00B2                     _CalcMQ135$661:	
   575                           
   576                           ; 3 bytes @ 0x12
   577  00B2                     	ds	3
   578  00B5                     CalcMQ135@ratio2:	
   579                           
   580                           ; 3 bytes @ 0x15
   581  00B5                     	ds	3
   582  00B8                     CalcMQ135@ratio3:	
   583                           
   584                           ; 3 bytes @ 0x18
   585  00B8                     	ds	3
   586  00BB                     CalcMQ135@ratio4:	
   587                           
   588                           ; 3 bytes @ 0x1B
   589  00BB                     	ds	3
   590  00BE                     CalcMQ135@ratio5:	
   591                           
   592                           ; 3 bytes @ 0x1E
   593  00BE                     	ds	3
   594  00C1                     CalcMQ135@co2:	
   595                           
   596                           ; 3 bytes @ 0x21
   597  00C1                     	ds	3
   598  00C4                     CalcMQ135@ratio:	
   599                           
   600                           ; 3 bytes @ 0x24
   601  00C4                     	ds	14
   602  00D2                     displayPPM@ppmWhole:	
   603                           
   604                           ; 2 bytes @ 0x32
   605  00D2                     	ds	2
   606  00D4                     displayPPM@ppmFraction:	
   607                           
   608                           ; 2 bytes @ 0x34
   609  00D4                     	ds	2
   610  00D6                     displayPPM@bufPtr:	
   611                           
   612                           ; 1 bytes @ 0x36
   613  00D6                     	ds	1
   614                           
   615                           	psect	cstackCOMMON
   616  0070                     __pcstackCOMMON:	
   617  0070                     ?_setPortDirections:	
   618  0070                     ?_initADC:	
   619                           ; 0 bytes @ 0x0
   620                           
   621  0070                     ?_initInterrupt:	
   622                           ; 0 bytes @ 0x0
   623                           
   624  0070                     ?_startUpLCD:	
   625                           ; 0 bytes @ 0x0
   626                           
   627  0070                     ?_checkSelect:	
   628                           ; 0 bytes @ 0x0
   629                           
   630  0070                     ?_checkMode:	
   631                           ; 0 bytes @ 0x0
   632                           
   633  0070                     ?_updateState:	
   634                           ; 0 bytes @ 0x0
   635                           
   636  0070                     ?_isdigit:	
   637                           ; 0 bytes @ 0x0
   638                           
   639  0070                     ?_instCTRL:	
   640                           ; 1 bit 
   641                           
   642  0070                     ?_dataCTRL:	
   643                           ; 0 bytes @ 0x0
   644                           
   645  0070                     ?_initLCD:	
   646                           ; 0 bytes @ 0x0
   647                           
   648  0070                     ?_runMQ135:	
   649                           ; 0 bytes @ 0x0
   650                           
   651  0070                     ?_displayPPM:	
   652                           ; 0 bytes @ 0x0
   653                           
   654  0070                     ?_printStatusPPM:	
   655                           ; 0 bytes @ 0x0
   656                           
   657  0070                     ?_runClock:	
   658                           ; 0 bytes @ 0x0
   659                           
   660  0070                     ?_displayTime:	
   661                           ; 0 bytes @ 0x0
   662                           
   663  0070                     ?_setHoursStart:	
   664                           ; 0 bytes @ 0x0
   665                           
   666  0070                     ?_setHoursEnd:	
   667                           ; 0 bytes @ 0x0
   668                           
   669  0070                     ?_setMinutesStart:	
   670                           ; 0 bytes @ 0x0
   671                           
   672  0070                     ?_setMinutesEnd:	
   673                           ; 0 bytes @ 0x0
   674                           
   675  0070                     ?_checkTime:	
   676                           ; 0 bytes @ 0x0
   677                           
   678  0070                     ?_main:	
   679                           ; 0 bytes @ 0x0
   680                           
   681  0070                     ?_ISR:	
   682                           ; 0 bytes @ 0x0
   683                           
   684  0070                     ?i1_instCTRL:	
   685                           ; 0 bytes @ 0x0
   686                           
   687  0070                     ??i1_instCTRL:	
   688                           ; 0 bytes @ 0x0
   689                           
   690  0070                     ?_handlePPM:	
   691                           ; 0 bytes @ 0x0
   692                           
   693                           
   694                           ; 1 bytes @ 0x0
   695  0070                     	ds	1
   696  0071                     i1instCTRL@CMD:	
   697                           
   698                           ; 1 bytes @ 0x1
   699  0071                     	ds	1
   700  0072                     ??_ISR:	
   701                           
   702                           ; 0 bytes @ 0x2
   703  0072                     	ds	5
   704                           
   705                           	psect	cstackBANK0
   706  0020                     __pcstackBANK0:	
   707  0020                     ??_setPortDirections:	
   708  0020                     ??_initADC:	
   709                           ; 0 bytes @ 0x0
   710                           
   711  0020                     ??_initInterrupt:	
   712                           ; 0 bytes @ 0x0
   713                           
   714  0020                     ??_isdigit:	
   715                           ; 0 bytes @ 0x0
   716                           
   717  0020                     ??_instCTRL:	
   718                           ; 0 bytes @ 0x0
   719                           
   720  0020                     ??_dataCTRL:	
   721                           ; 0 bytes @ 0x0
   722                           
   723  0020                     ??_runClock:	
   724                           ; 0 bytes @ 0x0
   725                           
   726  0020                     ??_checkTime:	
   727                           ; 0 bytes @ 0x0
   728                           
   729  0020                     ?___ftge:	
   730                           ; 0 bytes @ 0x0
   731                           
   732  0020                     ?_Read_ADC_MQ135:	
   733                           ; 1 bit 
   734                           
   735  0020                     ?___wmul:	
   736                           ; 2 bytes @ 0x0
   737                           
   738  0020                     ?___awmod:	
   739                           ; 2 bytes @ 0x0
   740                           
   741  0020                     ?___lwdiv:	
   742                           ; 2 bytes @ 0x0
   743                           
   744  0020                     ?___ftpack:	
   745                           ; 2 bytes @ 0x0
   746                           
   747  0020                     _isdigit$426:	
   748                           ; 3 bytes @ 0x0
   749                           
   750  0020                     ___wmul@multiplier:	
   751                           ; 1 bytes @ 0x0
   752                           
   753  0020                     ___awmod@divisor:	
   754                           ; 2 bytes @ 0x0
   755                           
   756  0020                     ___lwdiv@divisor:	
   757                           ; 2 bytes @ 0x0
   758                           
   759  0020                     ___ftpack@arg:	
   760                           ; 2 bytes @ 0x0
   761                           
   762  0020                     ___ftge@ff1:	
   763                           ; 3 bytes @ 0x0
   764                           
   765                           
   766                           ; 3 bytes @ 0x0
   767  0020                     	ds	1
   768  0021                     instCTRL@CMD:	
   769  0021                     dataCTRL@DAT:	
   770                           ; 1 bytes @ 0x1
   771                           
   772  0021                     isdigit@c:	
   773                           ; 1 bytes @ 0x1
   774                           
   775                           
   776                           ; 1 bytes @ 0x1
   777  0021                     	ds	1
   778  0022                     ??_Read_ADC_MQ135:	
   779  0022                     ??_checkSelect:	
   780                           ; 0 bytes @ 0x2
   781                           
   782  0022                     ??_checkMode:	
   783                           ; 0 bytes @ 0x2
   784                           
   785  0022                     ??_initLCD:	
   786                           ; 0 bytes @ 0x2
   787                           
   788  0022                     ?_printToLCD:	
   789                           ; 0 bytes @ 0x2
   790                           
   791  0022                     printToLCD@str:	
   792                           ; 0 bytes @ 0x2
   793                           
   794  0022                     ___wmul@multiplicand:	
   795                           ; 2 bytes @ 0x2
   796                           
   797  0022                     ___awmod@dividend:	
   798                           ; 2 bytes @ 0x2
   799                           
   800  0022                     ___lwdiv@dividend:	
   801                           ; 2 bytes @ 0x2
   802                           
   803                           
   804                           ; 2 bytes @ 0x2
   805  0022                     	ds	1
   806  0023                     ___ftpack@exp:	
   807  0023                     ___ftge@ff2:	
   808                           ; 1 bytes @ 0x3
   809                           
   810                           
   811                           ; 3 bytes @ 0x3
   812  0023                     	ds	1
   813  0024                     ??_startUpLCD:	
   814  0024                     ??_printToLCD:	
   815                           ; 0 bytes @ 0x4
   816                           
   817  0024                     ??_printStatusPPM:	
   818                           ; 0 bytes @ 0x4
   819                           
   820  0024                     ??___wmul:	
   821                           ; 0 bytes @ 0x4
   822                           
   823  0024                     ??___awmod:	
   824                           ; 0 bytes @ 0x4
   825                           
   826  0024                     ??___lwdiv:	
   827                           ; 0 bytes @ 0x4
   828                           
   829  0024                     printStatusPPM@handler:	
   830                           ; 0 bytes @ 0x4
   831                           
   832  0024                     ___ftpack@sign:	
   833                           ; 1 bytes @ 0x4
   834                           
   835  0024                     checkSelect@currentRB1State:	
   836                           ; 1 bytes @ 0x4
   837                           
   838  0024                     ___wmul@product:	
   839                           ; 2 bytes @ 0x4
   840                           
   841                           
   842                           ; 2 bytes @ 0x4
   843  0024                     	ds	1
   844  0025                     ??___ftpack:	
   845  0025                     ___awmod@counter:	
   846                           ; 0 bytes @ 0x5
   847                           
   848  0025                     ___lwdiv@quotient:	
   849                           ; 1 bytes @ 0x5
   850                           
   851                           
   852                           ; 2 bytes @ 0x5
   853  0025                     	ds	1
   854  0026                     ??___ftge:	
   855  0026                     ___awmod@sign:	
   856                           ; 0 bytes @ 0x6
   857                           
   858                           
   859                           ; 1 bytes @ 0x6
   860  0026                     	ds	1
   861  0027                     ___lwdiv@counter:	
   862                           
   863                           ; 1 bytes @ 0x7
   864  0027                     	ds	1
   865  0028                     ?___lwmod:	
   866  0028                     ?___awtoft:	
   867                           ; 2 bytes @ 0x8
   868                           
   869  0028                     ___awtoft@c:	
   870                           ; 3 bytes @ 0x8
   871                           
   872  0028                     ___lwmod@divisor:	
   873                           ; 2 bytes @ 0x8
   874                           
   875                           
   876                           ; 2 bytes @ 0x8
   877  0028                     	ds	2
   878  002A                     ___lwmod@dividend:	
   879                           
   880                           ; 2 bytes @ 0xA
   881  002A                     	ds	1
   882  002B                     ??___awtoft:	
   883                           
   884                           ; 0 bytes @ 0xB
   885  002B                     	ds	1
   886  002C                     ??_handlePPM:	
   887  002C                     ??___lwmod:	
   888                           ; 0 bytes @ 0xC
   889                           
   890                           
   891                           ; 0 bytes @ 0xC
   892  002C                     	ds	1
   893  002D                     ___awtoft@sign:	
   894  002D                     ___lwmod@counter:	
   895                           ; 1 bytes @ 0xD
   896                           
   897                           
   898                           ; 1 bytes @ 0xD
   899  002D                     	ds	1
   900  002E                     ?_sprintf:	
   901  002E                     ?___ftneg:	
   902                           ; 2 bytes @ 0xE
   903                           
   904  002E                     sprintf@f:	
   905                           ; 3 bytes @ 0xE
   906                           
   907  002E                     ___ftneg@f1:	
   908                           ; 1 bytes @ 0xE
   909                           
   910                           
   911                           ; 3 bytes @ 0xE
   912  002E                     	ds	3
   913  0031                     ??___ftneg:	
   914  0031                     ?___ftadd:	
   915                           ; 0 bytes @ 0x11
   916                           
   917  0031                     ___ftadd@f1:	
   918                           ; 3 bytes @ 0x11
   919                           
   920                           
   921                           ; 3 bytes @ 0x11
   922  0031                     	ds	2
   923  0033                     ??_sprintf:	
   924                           
   925                           ; 0 bytes @ 0x13
   926  0033                     	ds	1
   927  0034                     ___ftadd@f2:	
   928                           
   929                           ; 3 bytes @ 0x14
   930  0034                     	ds	2
   931  0036                     sprintf@ap:	
   932                           
   933                           ; 1 bytes @ 0x16
   934  0036                     	ds	1
   935  0037                     ??___ftadd:	
   936  0037                     sprintf@prec:	
   937                           ; 0 bytes @ 0x17
   938                           
   939                           
   940                           ; 1 bytes @ 0x17
   941  0037                     	ds	1
   942  0038                     sprintf@ccnt:	
   943                           
   944                           ; 2 bytes @ 0x18
   945  0038                     	ds	2
   946  003A                     sprintf@_val:	
   947                           
   948                           ; 4 bytes @ 0x1A
   949  003A                     	ds	1
   950  003B                     ___ftadd@sign:	
   951                           
   952                           ; 1 bytes @ 0x1B
   953  003B                     	ds	1
   954  003C                     ___ftadd@exp2:	
   955                           
   956                           ; 1 bytes @ 0x1C
   957  003C                     	ds	1
   958  003D                     ___ftadd@exp1:	
   959                           
   960                           ; 1 bytes @ 0x1D
   961  003D                     	ds	1
   962  003E                     ?___ftmul:	
   963  003E                     sprintf@flag:	
   964                           ; 3 bytes @ 0x1E
   965                           
   966  003E                     ___ftmul@f1:	
   967                           ; 1 bytes @ 0x1E
   968                           
   969                           
   970                           ; 3 bytes @ 0x1E
   971  003E                     	ds	1
   972  003F                     sprintf@width:	
   973                           
   974                           ; 2 bytes @ 0x1F
   975  003F                     	ds	2
   976  0041                     sprintf@c:	
   977  0041                     ___ftmul@f2:	
   978                           ; 1 bytes @ 0x21
   979                           
   980                           
   981                           ; 3 bytes @ 0x21
   982  0041                     	ds	1
   983  0042                     sprintf@sp:	
   984                           
   985                           ; 1 bytes @ 0x22
   986  0042                     	ds	1
   987  0043                     ??_displayTime:	
   988  0043                     ??_setHoursStart:	
   989                           ; 0 bytes @ 0x23
   990                           
   991  0043                     ??_setHoursEnd:	
   992                           ; 0 bytes @ 0x23
   993                           
   994  0043                     ??_setMinutesStart:	
   995                           ; 0 bytes @ 0x23
   996                           
   997  0043                     ??_setMinutesEnd:	
   998                           ; 0 bytes @ 0x23
   999                           
  1000                           
  1001                           ; 0 bytes @ 0x23
  1002  0043                     	ds	1
  1003  0044                     ??___ftmul:	
  1004                           
  1005                           ; 0 bytes @ 0x24
  1006  0044                     	ds	4
  1007  0048                     ___ftmul@exp:	
  1008  0048                     displayTime@timeFormat:	
  1009                           ; 1 bytes @ 0x28
  1010                           
  1011                           
  1012                           ; 10 bytes @ 0x28
  1013  0048                     	ds	1
  1014  0049                     ___ftmul@f3_as_product:	
  1015                           
  1016                           ; 3 bytes @ 0x29
  1017  0049                     	ds	3
  1018  004C                     ___ftmul@cntr:	
  1019                           
  1020                           ; 1 bytes @ 0x2C
  1021  004C                     	ds	1
  1022  004D                     ___ftmul@sign:	
  1023                           
  1024                           ; 1 bytes @ 0x2D
  1025  004D                     	ds	1
  1026  004E                     ?___ftdiv:	
  1027  004E                     ?___fttol:	
  1028                           ; 3 bytes @ 0x2E
  1029                           
  1030  004E                     ___ftdiv@f2:	
  1031                           ; 4 bytes @ 0x2E
  1032                           
  1033  004E                     ___fttol@f1:	
  1034                           ; 3 bytes @ 0x2E
  1035                           
  1036                           
  1037                           ; 3 bytes @ 0x2E
  1038  004E                     	ds	3
  1039  0051                     ___ftdiv@f1:	
  1040                           
  1041                           ; 3 bytes @ 0x31
  1042  0051                     	ds	1
  1043  0052                     ??___fttol:	
  1044                           
  1045                           ; 0 bytes @ 0x32
  1046  0052                     	ds	2
  1047  0054                     ??___ftdiv:	
  1048                           
  1049                           ; 0 bytes @ 0x34
  1050  0054                     	ds	2
  1051  0056                     ___fttol@sign1:	
  1052                           
  1053                           ; 1 bytes @ 0x36
  1054  0056                     	ds	1
  1055  0057                     ___fttol@lval:	
  1056                           
  1057                           ; 4 bytes @ 0x37
  1058  0057                     	ds	1
  1059  0058                     ___ftdiv@cntr:	
  1060                           
  1061                           ; 1 bytes @ 0x38
  1062  0058                     	ds	1
  1063  0059                     ___ftdiv@f3:	
  1064                           
  1065                           ; 3 bytes @ 0x39
  1066  0059                     	ds	2
  1067  005B                     ___fttol@exp1:	
  1068                           
  1069                           ; 1 bytes @ 0x3B
  1070  005B                     	ds	1
  1071  005C                     ??_displayPPM:	
  1072  005C                     ___ftdiv@exp:	
  1073                           ; 0 bytes @ 0x3C
  1074                           
  1075                           
  1076                           ; 1 bytes @ 0x3C
  1077  005C                     	ds	1
  1078  005D                     ___ftdiv@sign:	
  1079                           
  1080                           ; 1 bytes @ 0x3D
  1081  005D                     	ds	1
  1082  005E                     ??_updateState:	
  1083  005E                     ?_CalcMQ135:	
  1084                           ; 0 bytes @ 0x3E
  1085                           
  1086  005E                     CalcMQ135@RAW_ADC:	
  1087                           ; 3 bytes @ 0x3E
  1088                           
  1089                           
  1090                           ; 2 bytes @ 0x3E
  1091  005E                     	ds	3
  1092  0061                     ??_CalcMQ135:	
  1093  0061                     ??_runMQ135:	
  1094                           ; 0 bytes @ 0x41
  1095                           
  1096                           
  1097                           ; 0 bytes @ 0x41
  1098  0061                     	ds	2
  1099  0063                     updateState@buffer:	
  1100                           
  1101                           ; 10 bytes @ 0x43
  1102  0063                     	ds	10
  1103  006D                     ??_main:	
  1104                           
  1105                           ; 0 bytes @ 0x4D
  1106  006D                     	ds	3
  1107                           
  1108                           	psect	maintext
  1109  169A                     __pmaintext:	
  1110 ;;
  1111 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1112 ;;
  1113 ;; *************** function _main *****************
  1114 ;; Defined at:
  1115 ;;		line 30 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;		None
  1118 ;; Auto vars:     Size  Location     Type
  1119 ;;		None
  1120 ;; Return value:  Size  Location     Type
  1121 ;;		None               void
  1122 ;; Registers used:
  1123 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1124 ;; Tracked objects:
  1125 ;;		On entry : 17F/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1129 ;;      Params:         0       0       0       0       0
  1130 ;;      Locals:         0       0       0       0       0
  1131 ;;      Temps:          0       3       0       0       0
  1132 ;;      Totals:         0       3       0       0       0
  1133 ;;Total ram usage:        3 bytes
  1134 ;; Hardware stack levels required when called:    6
  1135 ;; This function calls:
  1136 ;;		_checkMode
  1137 ;;		_checkSelect
  1138 ;;		_checkTime
  1139 ;;		_handlePPM
  1140 ;;		_initADC
  1141 ;;		_initInterrupt
  1142 ;;		_runClock
  1143 ;;		_runMQ135
  1144 ;;		_setPortDirections
  1145 ;;		_startUpLCD
  1146 ;;		_updateState
  1147 ;; This function is called by:
  1148 ;;		Startup code after reset
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           
  1153                           ;psect for function _main
  1154  169A                     _main:	
  1155                           
  1156                           ;main.c: 32: setPortDirections();
  1157                           
  1158                           ;incstack = 0
  1159                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1160  169A  160A  118A  23F9  160A  118A  	fcall	_setPortDirections
  1161                           
  1162                           ;main.c: 33: initADC();
  1163  169F  160A  118A  23F0  160A  118A  	fcall	_initADC
  1164                           
  1165                           ;main.c: 34: initInterrupt();
  1166  16A4  160A  118A  23E1  160A  118A  	fcall	_initInterrupt
  1167                           
  1168                           ;main.c: 35: startUpLCD();
  1169  16A9  120A  118A  27EA  160A  118A  	fcall	_startUpLCD
  1170                           
  1171                           ;main.c: 36: _delay((unsigned long)((250)*(4000000/4000.0)));
  1172  16AE  3002               	movlw	2
  1173  16AF  1283               	bcf	3,5	;RP0=0, select bank0
  1174  16B0  1303               	bcf	3,6	;RP1=0, select bank0
  1175  16B1  00EF               	movwf	??_main+2
  1176  16B2  3045               	movlw	69
  1177  16B3  00EE               	movwf	??_main+1
  1178  16B4  30A9               	movlw	169
  1179  16B5  00ED               	movwf	??_main
  1180  16B6                     u4607:	
  1181  16B6  0BED               	decfsz	??_main,f
  1182  16B7  2EB6               	goto	u4607
  1183  16B8  0BEE               	decfsz	??_main+1,f
  1184  16B9  2EB6               	goto	u4607
  1185  16BA  0BEF               	decfsz	??_main+2,f
  1186  16BB  2EB6               	goto	u4607
  1187  16BC  2EBD               	nop2
  1188  16BD                     l3254:	
  1189                           ;main.c: 37: while (1)
  1190                           
  1191                           
  1192                           ;main.c: 38: {
  1193                           ;main.c: 39: runClock();
  1194  16BD  160A  118A  2488  160A  118A  	fcall	_runClock
  1195                           
  1196                           ;main.c: 40: checkTime();
  1197  16C2  120A  158A  20F7  160A  118A  	fcall	_checkTime
  1198                           
  1199                           ;main.c: 41: runMQ135();
  1200  16C7  160A  118A  24E5  160A  118A  	fcall	_runMQ135
  1201                           
  1202                           ;main.c: 42: ppmFlag = handlePPM();
  1203  16CC  160A  118A  259A  160A  118A  	fcall	_handlePPM
  1204  16D1  1283               	bcf	3,5	;RP0=0, select bank0
  1205  16D2  1303               	bcf	3,6	;RP1=0, select bank0
  1206  16D3  00ED               	movwf	??_main
  1207  16D4  086D               	movf	??_main,w
  1208  16D5  1683               	bsf	3,5	;RP0=1, select bank1
  1209  16D6  1303               	bcf	3,6	;RP1=0, select bank1
  1210  16D7  00DD               	movwf	_ppmFlag^(0+128)
  1211                           
  1212                           ;main.c: 43: checkSelect();
  1213  16D8  160A  118A  25F0  160A  118A  	fcall	_checkSelect
  1214                           
  1215                           ;main.c: 44: checkMode();
  1216  16DD  160A  118A  24C5  160A  118A  	fcall	_checkMode
  1217                           
  1218                           ;main.c: 45: updateState();
  1219  16E2  120A  118A  25D9  160A  118A  	fcall	_updateState
  1220  16E7  2EBD               	goto	l3254
  1221  16E8                     __end_of_main:	
  1222                           
  1223                           	psect	text1
  1224  05D9                     __ptext1:	
  1225 ;; *************** function _updateState *****************
  1226 ;; Defined at:
  1227 ;;		line 96 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;		None
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;  buffer         10   67[BANK0 ] unsigned char [10]
  1232 ;; Return value:  Size  Location     Type
  1233 ;;		None               void
  1234 ;; Registers used:
  1235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1241 ;;      Params:         0       0       0       0       0
  1242 ;;      Locals:         0      10       0       0       0
  1243 ;;      Temps:          0       5       0       0       0
  1244 ;;      Totals:         0      15       0       0       0
  1245 ;;Total ram usage:       15 bytes
  1246 ;; Hardware stack levels used:    1
  1247 ;; Hardware stack levels required when called:    5
  1248 ;; This function calls:
  1249 ;;		_displayPPM
  1250 ;;		_displayTime
  1251 ;;		_instCTRL
  1252 ;;		_printStatusPPM
  1253 ;;		_printToLCD
  1254 ;;		_setHoursEnd
  1255 ;;		_setHoursStart
  1256 ;;		_setMinutesEnd
  1257 ;;		_setMinutesStart
  1258 ;;		_sprintf
  1259 ;; This function is called by:
  1260 ;;		_main
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264                           
  1265                           ;psect for function _updateState
  1266  05D9                     _updateState:	
  1267                           
  1268                           ;main.c: 98: char buffer[10];
  1269                           ;main.c: 99: switch (mode)
  1270                           
  1271                           ;incstack = 0
  1272                           ; Regs used in _updateState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1273  05D9  2F4B               	goto	l3244
  1274  05DA                     l3168:	
  1275                           ;main.c: 100: {
  1276                           ;main.c: 101: case DISP_CMN:
  1277                           
  1278                           
  1279                           ;main.c: 102: instCTRL(0x80);
  1280  05DA  3080               	movlw	128
  1281  05DB  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1282                           
  1283                           ;main.c: 103: printToLCD("MODE: ");
  1284  05E0  30C7               	movlw	low (STR_20-__stringbase)
  1285  05E1  1283               	bcf	3,5	;RP0=0, select bank0
  1286  05E2  1303               	bcf	3,6	;RP1=0, select bank0
  1287  05E3  00A2               	movwf	printToLCD@str
  1288  05E4  3080               	movlw	128
  1289  05E5  00A3               	movwf	printToLCD@str+1
  1290  05E6  160A  118A  25C5  120A  118A  	fcall	_printToLCD
  1291                           
  1292                           ;main.c: 104: switch (select)
  1293  05EB  2E7C               	goto	l3194
  1294  05EC                     l3172:	
  1295                           ;main.c: 105: {
  1296                           ;main.c: 106: case 0:
  1297                           
  1298                           
  1299                           ;main.c: 107: printToLCD("DISP CMMON PG1");
  1300  05EC  302B               	movlw	low (STR_21-__stringbase)
  1301  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  1302  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  1303  05EF  00A2               	movwf	printToLCD@str
  1304  05F0  3080               	movlw	128
  1305  05F1  00A3               	movwf	printToLCD@str+1
  1306  05F2  160A  118A  25C5  120A  118A  	fcall	_printToLCD
  1307                           
  1308                           ;main.c: 108: instCTRL(0xC0);
  1309  05F7  30C0               	movlw	192
  1310  05F8  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1311                           
  1312                           ;main.c: 109: displayTime();
  1313  05FD  160A  118A  252C  120A  118A  	fcall	_displayTime
  1314                           
  1315                           ;main.c: 110: instCTRL(0x94);
  1316  0602  3094               	movlw	148
  1317  0603  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1318                           
  1319                           ;main.c: 111: sprintf(buffer, "STRT: %2d:%2d", savedHoursStart, savedMinutesStart);
  1320  0608  3057               	movlw	(STR_22-__stringbase)& (0+255)
  1321  0609  1283               	bcf	3,5	;RP0=0, select bank0
  1322  060A  1303               	bcf	3,6	;RP1=0, select bank0
  1323  060B  00DE               	movwf	??_updateState
  1324  060C  085E               	movf	??_updateState,w
  1325  060D  00AE               	movwf	sprintf@f
  1326  060E  1683               	bsf	3,5	;RP0=1, select bank1
  1327  060F  1303               	bcf	3,6	;RP1=0, select bank1
  1328  0610  086A               	movf	_savedHoursStart^(0+128),w	;volatile
  1329  0611  1283               	bcf	3,5	;RP0=0, select bank0
  1330  0612  1303               	bcf	3,6	;RP1=0, select bank0
  1331  0613  00DF               	movwf	??_updateState+1
  1332  0614  01E0               	clrf	??_updateState+2
  1333  0615  085F               	movf	??_updateState+1,w
  1334  0616  00AF               	movwf	?_sprintf+1
  1335  0617  0860               	movf	??_updateState+2,w
  1336  0618  00B0               	movwf	?_sprintf+2
  1337  0619  1683               	bsf	3,5	;RP0=1, select bank1
  1338  061A  1303               	bcf	3,6	;RP1=0, select bank1
  1339  061B  086C               	movf	_savedMinutesStart^(0+128),w	;volatile
  1340  061C  1283               	bcf	3,5	;RP0=0, select bank0
  1341  061D  1303               	bcf	3,6	;RP1=0, select bank0
  1342  061E  00E1               	movwf	??_updateState+3
  1343  061F  01E2               	clrf	??_updateState+4
  1344  0620  0861               	movf	??_updateState+3,w
  1345  0621  00B1               	movwf	?_sprintf+3
  1346  0622  0862               	movf	??_updateState+4,w
  1347  0623  00B2               	movwf	?_sprintf+4
  1348  0624  3063               	movlw	updateState@buffer& (0+255)
  1349  0625  120A  118A  23F6  120A  118A  	fcall	_sprintf
  1350                           
  1351                           ;main.c: 112: printToLCD(buffer);
  1352  062A  3063               	movlw	updateState@buffer& (0+255)
  1353  062B  1283               	bcf	3,5	;RP0=0, select bank0
  1354  062C  1303               	bcf	3,6	;RP1=0, select bank0
  1355  062D  00A2               	movwf	printToLCD@str
  1356  062E  3000               	movlw	0
  1357  062F  00A3               	movwf	printToLCD@str+1
  1358  0630  160A  118A  25C5  120A  118A  	fcall	_printToLCD
  1359                           
  1360                           ;main.c: 113: instCTRL(0xD4);
  1361  0635  30D4               	movlw	212
  1362  0636  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1363                           
  1364                           ;main.c: 114: sprintf(buffer, "END: %2d:%2d", savedHoursEnd, savedMinutesEnd);
  1365  063B  3065               	movlw	(STR_23-__stringbase)& (0+255)
  1366  063C  1283               	bcf	3,5	;RP0=0, select bank0
  1367  063D  1303               	bcf	3,6	;RP1=0, select bank0
  1368  063E  00DE               	movwf	??_updateState
  1369  063F  085E               	movf	??_updateState,w
  1370  0640  00AE               	movwf	sprintf@f
  1371  0641  1683               	bsf	3,5	;RP0=1, select bank1
  1372  0642  1303               	bcf	3,6	;RP1=0, select bank1
  1373  0643  0869               	movf	_savedHoursEnd^(0+128),w	;volatile
  1374  0644  1283               	bcf	3,5	;RP0=0, select bank0
  1375  0645  1303               	bcf	3,6	;RP1=0, select bank0
  1376  0646  00DF               	movwf	??_updateState+1
  1377  0647  01E0               	clrf	??_updateState+2
  1378  0648  085F               	movf	??_updateState+1,w
  1379  0649  00AF               	movwf	?_sprintf+1
  1380  064A  0860               	movf	??_updateState+2,w
  1381  064B  00B0               	movwf	?_sprintf+2
  1382  064C  1683               	bsf	3,5	;RP0=1, select bank1
  1383  064D  1303               	bcf	3,6	;RP1=0, select bank1
  1384  064E  086B               	movf	_savedMinutesEnd^(0+128),w	;volatile
  1385  064F  1283               	bcf	3,5	;RP0=0, select bank0
  1386  0650  1303               	bcf	3,6	;RP1=0, select bank0
  1387  0651  00E1               	movwf	??_updateState+3
  1388  0652  01E2               	clrf	??_updateState+4
  1389  0653  0861               	movf	??_updateState+3,w
  1390  0654  00B1               	movwf	?_sprintf+3
  1391  0655  0862               	movf	??_updateState+4,w
  1392  0656  00B2               	movwf	?_sprintf+4
  1393  0657  3063               	movlw	updateState@buffer& (0+255)
  1394  0658  120A  118A  23F6  120A  118A  	fcall	_sprintf
  1395                           
  1396                           ;main.c: 115: printToLCD(buffer);
  1397  065D  3063               	movlw	updateState@buffer& (0+255)
  1398  065E  1283               	bcf	3,5	;RP0=0, select bank0
  1399  065F  1303               	bcf	3,6	;RP1=0, select bank0
  1400  0660  00A2               	movwf	printToLCD@str
  1401  0661  3000               	movlw	0
  1402  0662  00A3               	movwf	printToLCD@str+1
  1403  0663  160A  118A  25C5   	fcall	_printToLCD
  1404                           
  1405                           ;main.c: 116: break;
  1406  0666  0008               	return
  1407  0667                     l3186:	
  1408                           ;main.c: 117: case 1:
  1409                           
  1410                           
  1411                           ;main.c: 118: printToLCD("DISP CMMON PG2");
  1412  0667  303A               	movlw	low (STR_24-__stringbase)
  1413  0668  1283               	bcf	3,5	;RP0=0, select bank0
  1414  0669  1303               	bcf	3,6	;RP1=0, select bank0
  1415  066A  00A2               	movwf	printToLCD@str
  1416  066B  3080               	movlw	128
  1417  066C  00A3               	movwf	printToLCD@str+1
  1418  066D  160A  118A  25C5  120A  118A  	fcall	_printToLCD
  1419                           
  1420                           ;main.c: 119: instCTRL(0xC0);
  1421  0672  30C0               	movlw	192
  1422  0673  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1423                           
  1424                           ;main.c: 120: displayPPM();
  1425  0678  120A  158A  26D7   	fcall	_displayPPM
  1426                           
  1427                           ;main.c: 122: }
  1428                           
  1429                           ;main.c: 121: break;
  1430  067B  0008               	return
  1431  067C                     l3194:	
  1432  067C  1683               	bsf	3,5	;RP0=1, select bank1
  1433  067D  1303               	bcf	3,6	;RP1=0, select bank1
  1434  067E  085E               	movf	_select^(0+128),w	;volatile
  1435                           
  1436                           ; Switch size 1, requested type "space"
  1437                           ; Number of cases is 2, Range of values is 0 to 1
  1438                           ; switch strategies available:
  1439                           ; Name         Instructions Cycles
  1440                           ; simple_byte            7     4 (average)
  1441                           ; direct_byte           14     8 (fixed)
  1442                           ; jumptable            260     6 (fixed)
  1443                           ;	Chosen strategy is simple_byte
  1444  067F  3A00               	xorlw	0	; case 0
  1445  0680  1903               	skipnz
  1446  0681  2DEC               	goto	l3172
  1447  0682  3A01               	xorlw	1	; case 1
  1448  0683  1903               	skipnz
  1449  0684  2E67               	goto	l3186
  1450  0685  2F5B               	goto	l273
  1451                           
  1452                           ;main.c: 123: break;
  1453  0686  0008               	return
  1454  0687                     l3196:	
  1455                           ;main.c: 124: case SET_ACTV_START:
  1456                           
  1457                           
  1458                           ;main.c: 125: instCTRL(0x80);
  1459  0687  3080               	movlw	128
  1460  0688  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1461                           
  1462                           ;main.c: 126: printToLCD("SET HRS - START");
  1463  068D  300B               	movlw	low (STR_25-__stringbase)
  1464  068E  1283               	bcf	3,5	;RP0=0, select bank0
  1465  068F  1303               	bcf	3,6	;RP1=0, select bank0
  1466  0690  00A2               	movwf	printToLCD@str
  1467  0691  3080               	movlw	128
  1468  0692  00A3               	movwf	printToLCD@str+1
  1469  0693  160A  118A  25C5  120A  118A  	fcall	_printToLCD
  1470                           
  1471                           ;main.c: 127: switch (select)
  1472  0698  2ECF               	goto	l3214
  1473  0699                     l3200:	
  1474                           ;main.c: 128: {
  1475                           ;main.c: 129: case 0:
  1476                           
  1477                           
  1478                           ;main.c: 130: instCTRL(0xC0);
  1479  0699  30C0               	movlw	192
  1480  069A  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1481                           
  1482                           ;main.c: 131: printToLCD("SET HOURS");
  1483  069F  307E               	movlw	low (STR_26-__stringbase)
  1484  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  1485  06A1  1303               	bcf	3,6	;RP1=0, select bank0
  1486  06A2  00A2               	movwf	printToLCD@str
  1487  06A3  3080               	movlw	128
  1488  06A4  00A3               	movwf	printToLCD@str+1
  1489  06A5  160A  118A  25C5  120A  118A  	fcall	_printToLCD
  1490                           
  1491                           ;main.c: 132: instCTRL(0x94);
  1492  06AA  3094               	movlw	148
  1493  06AB  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1494                           
  1495                           ;main.c: 133: setHoursStart();
  1496  06B0  120A  158A  22D3   	fcall	_setHoursStart
  1497                           
  1498                           ;main.c: 134: break;
  1499  06B3  0008               	return
  1500  06B4                     l3206:	
  1501                           ;main.c: 135: case 1:
  1502                           
  1503                           
  1504                           ;main.c: 136: instCTRL(0xC0);
  1505  06B4  30C0               	movlw	192
  1506  06B5  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1507                           
  1508                           ;main.c: 137: printToLCD("SET MINUTES");
  1509  06BA  3072               	movlw	low (STR_27-__stringbase)
  1510  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  1511  06BC  1303               	bcf	3,6	;RP1=0, select bank0
  1512  06BD  00A2               	movwf	printToLCD@str
  1513  06BE  3080               	movlw	128
  1514  06BF  00A3               	movwf	printToLCD@str+1
  1515  06C0  160A  118A  25C5  120A  118A  	fcall	_printToLCD
  1516                           
  1517                           ;main.c: 138: instCTRL(0x94);
  1518  06C5  3094               	movlw	148
  1519  06C6  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1520                           
  1521                           ;main.c: 139: setMinutesStart();
  1522  06CB  120A  158A  2443   	fcall	_setMinutesStart
  1523                           
  1524                           ;main.c: 141: }
  1525                           
  1526                           ;main.c: 140: break;
  1527  06CE  0008               	return
  1528  06CF                     l3214:	
  1529  06CF  1683               	bsf	3,5	;RP0=1, select bank1
  1530  06D0  1303               	bcf	3,6	;RP1=0, select bank1
  1531  06D1  085E               	movf	_select^(0+128),w	;volatile
  1532                           
  1533                           ; Switch size 1, requested type "space"
  1534                           ; Number of cases is 2, Range of values is 0 to 1
  1535                           ; switch strategies available:
  1536                           ; Name         Instructions Cycles
  1537                           ; simple_byte            7     4 (average)
  1538                           ; direct_byte           14     8 (fixed)
  1539                           ; jumptable            260     6 (fixed)
  1540                           ;	Chosen strategy is simple_byte
  1541  06D2  3A00               	xorlw	0	; case 0
  1542  06D3  1903               	skipnz
  1543  06D4  2E99               	goto	l3200
  1544  06D5  3A01               	xorlw	1	; case 1
  1545  06D6  1903               	skipnz
  1546  06D7  2EB4               	goto	l3206
  1547  06D8  2F5B               	goto	l273
  1548                           
  1549                           ;main.c: 142: break;
  1550  06D9  0008               	return
  1551  06DA                     l3216:	
  1552                           ;main.c: 143: case SET_ACTV_END:
  1553                           
  1554                           
  1555                           ;main.c: 144: instCTRL(0x80);
  1556  06DA  3080               	movlw	128
  1557  06DB  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1558                           
  1559                           ;main.c: 145: printToLCD("SET HRS - END");
  1560  06E0  3049               	movlw	low (STR_28-__stringbase)
  1561  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  1562  06E2  1303               	bcf	3,6	;RP1=0, select bank0
  1563  06E3  00A2               	movwf	printToLCD@str
  1564  06E4  3080               	movlw	128
  1565  06E5  00A3               	movwf	printToLCD@str+1
  1566  06E6  160A  118A  25C5  120A  118A  	fcall	_printToLCD
  1567                           
  1568                           ;main.c: 146: switch (select)
  1569  06EB  2F22               	goto	l3234
  1570  06EC                     l3220:	
  1571                           ;main.c: 147: {
  1572                           ;main.c: 148: case 0:
  1573                           
  1574                           
  1575                           ;main.c: 149: instCTRL(0xC0);
  1576  06EC  30C0               	movlw	192
  1577  06ED  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1578                           
  1579                           ;main.c: 150: printToLCD("SET HOURS");
  1580  06F2  307E               	movlw	low (STR_26-__stringbase)
  1581  06F3  1283               	bcf	3,5	;RP0=0, select bank0
  1582  06F4  1303               	bcf	3,6	;RP1=0, select bank0
  1583  06F5  00A2               	movwf	printToLCD@str
  1584  06F6  3080               	movlw	128
  1585  06F7  00A3               	movwf	printToLCD@str+1
  1586  06F8  160A  118A  25C5  120A  118A  	fcall	_printToLCD
  1587                           
  1588                           ;main.c: 151: instCTRL(0x94);
  1589  06FD  3094               	movlw	148
  1590  06FE  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1591                           
  1592                           ;main.c: 152: setHoursEnd();
  1593  0703  120A  158A  221B   	fcall	_setHoursEnd
  1594                           
  1595                           ;main.c: 153: break;
  1596  0706  0008               	return
  1597  0707                     l3226:	
  1598                           ;main.c: 154: case 1:
  1599                           
  1600                           
  1601                           ;main.c: 155: instCTRL(0xC0);
  1602  0707  30C0               	movlw	192
  1603  0708  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1604                           
  1605                           ;main.c: 156: printToLCD("SET MINUTES");
  1606  070D  3072               	movlw	low (STR_27-__stringbase)
  1607  070E  1283               	bcf	3,5	;RP0=0, select bank0
  1608  070F  1303               	bcf	3,6	;RP1=0, select bank0
  1609  0710  00A2               	movwf	printToLCD@str
  1610  0711  3080               	movlw	128
  1611  0712  00A3               	movwf	printToLCD@str+1
  1612  0713  160A  118A  25C5  120A  118A  	fcall	_printToLCD
  1613                           
  1614                           ;main.c: 157: instCTRL(0x94);
  1615  0718  3094               	movlw	148
  1616  0719  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1617                           
  1618                           ;main.c: 158: setMinutesEnd();
  1619  071E  120A  158A  238B   	fcall	_setMinutesEnd
  1620                           
  1621                           ;main.c: 160: }
  1622                           
  1623                           ;main.c: 159: break;
  1624  0721  0008               	return
  1625  0722                     l3234:	
  1626  0722  1683               	bsf	3,5	;RP0=1, select bank1
  1627  0723  1303               	bcf	3,6	;RP1=0, select bank1
  1628  0724  085E               	movf	_select^(0+128),w	;volatile
  1629                           
  1630                           ; Switch size 1, requested type "space"
  1631                           ; Number of cases is 2, Range of values is 0 to 1
  1632                           ; switch strategies available:
  1633                           ; Name         Instructions Cycles
  1634                           ; simple_byte            7     4 (average)
  1635                           ; direct_byte           14     8 (fixed)
  1636                           ; jumptable            260     6 (fixed)
  1637                           ;	Chosen strategy is simple_byte
  1638  0725  3A00               	xorlw	0	; case 0
  1639  0726  1903               	skipnz
  1640  0727  2EEC               	goto	l3220
  1641  0728  3A01               	xorlw	1	; case 1
  1642  0729  1903               	skipnz
  1643  072A  2F07               	goto	l3226
  1644  072B  2F5B               	goto	l273
  1645                           
  1646                           ;main.c: 161: break;
  1647  072C  0008               	return
  1648  072D                     l3236:	
  1649                           ;main.c: 162: case CHCK_IO:
  1650                           
  1651                           
  1652                           ;main.c: 163: instCTRL(0x80);
  1653  072D  3080               	movlw	128
  1654  072E  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1655                           
  1656                           ;main.c: 164: printToLCD("CHCK IO");
  1657  0733  30B7               	movlw	low (STR_31-__stringbase)
  1658  0734  1283               	bcf	3,5	;RP0=0, select bank0
  1659  0735  1303               	bcf	3,6	;RP1=0, select bank0
  1660  0736  00A2               	movwf	printToLCD@str
  1661  0737  3080               	movlw	128
  1662  0738  00A3               	movwf	printToLCD@str+1
  1663  0739  160A  118A  25C5  120A  118A  	fcall	_printToLCD
  1664                           
  1665                           ;main.c: 165: instCTRL(0xC0);
  1666  073E  30C0               	movlw	192
  1667  073F  160A  118A  242B  120A  118A  	fcall	_instCTRL
  1668                           
  1669                           ;main.c: 166: printStatusPPM(ppmFlag);
  1670  0744  1683               	bsf	3,5	;RP0=1, select bank1
  1671  0745  1303               	bcf	3,6	;RP1=0, select bank1
  1672  0746  085D               	movf	_ppmFlag^(0+128),w
  1673  0747  160A  118A  246C   	fcall	_printStatusPPM
  1674                           
  1675                           ;main.c: 170: }
  1676                           
  1677                           ;main.c: 169: break;
  1678                           
  1679                           ;main.c: 168: default:
  1680                           
  1681                           ;main.c: 167: break;
  1682  074A  0008               	return
  1683  074B                     l3244:	
  1684  074B  1683               	bsf	3,5	;RP0=1, select bank1
  1685  074C  1303               	bcf	3,6	;RP1=0, select bank1
  1686  074D  085C               	movf	_mode^(0+128),w
  1687                           
  1688                           ; Switch size 1, requested type "space"
  1689                           ; Number of cases is 4, Range of values is 0 to 3
  1690                           ; switch strategies available:
  1691                           ; Name         Instructions Cycles
  1692                           ; simple_byte           13     7 (average)
  1693                           ; direct_byte           20     8 (fixed)
  1694                           ; jumptable            260     6 (fixed)
  1695                           ;	Chosen strategy is simple_byte
  1696  074E  3A00               	xorlw	0	; case 0
  1697  074F  1903               	skipnz
  1698  0750  2DDA               	goto	l3168
  1699  0751  3A01               	xorlw	1	; case 1
  1700  0752  1903               	skipnz
  1701  0753  2E87               	goto	l3196
  1702  0754  3A03               	xorlw	3	; case 2
  1703  0755  1903               	skipnz
  1704  0756  2EDA               	goto	l3216
  1705  0757  3A01               	xorlw	1	; case 3
  1706  0758  1903               	skipnz
  1707  0759  2F2D               	goto	l3236
  1708  075A  2F5B               	goto	l273
  1709  075B                     l273:	
  1710  075B  0008               	return
  1711  075C                     __end_of_updateState:	
  1712                           
  1713                           	psect	text2
  1714  0C43                     __ptext2:	
  1715 ;; *************** function _setMinutesStart *****************
  1716 ;; Defined at:
  1717 ;;		line 132 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedu
      +ler.h"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;		None
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;		None
  1722 ;; Return value:  Size  Location     Type
  1723 ;;		None               void
  1724 ;; Registers used:
  1725 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1731 ;;      Params:         0       0       0       0       0
  1732 ;;      Locals:         0       0       0       0       0
  1733 ;;      Temps:          0       3       0       0       0
  1734 ;;      Totals:         0       3       0       0       0
  1735 ;;Total ram usage:        3 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    4
  1738 ;; This function calls:
  1739 ;;		___awmod
  1740 ;;		_printToLCD
  1741 ;;		_sprintf
  1742 ;; This function is called by:
  1743 ;;		_updateState
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           
  1748                           ;psect for function _setMinutesStart
  1749  0C43                     _setMinutesStart:	
  1750                           
  1751                           ;time_scheduler.h: 134: keyValid = (PORTB & 0x08) >> 3;
  1752                           
  1753                           ;incstack = 0
  1754                           ; Regs used in _setMinutesStart: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1755  0C43  1283               	bcf	3,5	;RP0=0, select bank0
  1756  0C44  1303               	bcf	3,6	;RP1=0, select bank0
  1757  0C45  0806               	movf	6,w	;volatile
  1758  0C46  00C3               	movwf	??_setMinutesStart
  1759  0C47  3003               	movlw	3
  1760  0C48                     u4235:	
  1761  0C48  1003               	clrc
  1762  0C49  0CC3               	rrf	??_setMinutesStart,f
  1763  0C4A  3EFF               	addlw	-1
  1764  0C4B  1D03               	skipz
  1765  0C4C  2C48               	goto	u4235
  1766  0C4D  0843               	movf	??_setMinutesStart,w
  1767  0C4E  3901               	andlw	1
  1768  0C4F  00C4               	movwf	??_setMinutesStart+1
  1769  0C50  0844               	movf	??_setMinutesStart+1,w
  1770  0C51  00F8               	movwf	_keyValid
  1771                           
  1772                           ;time_scheduler.h: 135: key = (PORTB & 0xF0) >> 4;
  1773  0C52  0806               	movf	6,w	;volatile
  1774  0C53  00C3               	movwf	??_setMinutesStart
  1775  0C54  3004               	movlw	4
  1776  0C55                     u4245:	
  1777  0C55  1003               	clrc
  1778  0C56  0CC3               	rrf	??_setMinutesStart,f
  1779  0C57  3EFF               	addlw	-1
  1780  0C58  1D03               	skipz
  1781  0C59  2C55               	goto	u4245
  1782  0C5A  0843               	movf	??_setMinutesStart,w
  1783  0C5B  390F               	andlw	15
  1784  0C5C  00C4               	movwf	??_setMinutesStart+1
  1785  0C5D  0844               	movf	??_setMinutesStart+1,w
  1786  0C5E  00F7               	movwf	_key
  1787                           
  1788                           ;time_scheduler.h: 137: _delay((unsigned long)((50)*(4000000/4000.0)));
  1789  0C5F  3041               	movlw	65
  1790  0C60  00C4               	movwf	??_setMinutesStart+1
  1791  0C61  30EE               	movlw	238
  1792  0C62  00C3               	movwf	??_setMinutesStart
  1793  0C63                     u4617:	
  1794  0C63  0BC3               	decfsz	??_setMinutesStart,f
  1795  0C64  2C63               	goto	u4617
  1796  0C65  0BC4               	decfsz	??_setMinutesStart+1,f
  1797  0C66  2C63               	goto	u4617
  1798  0C67  0000               	nop
  1799                           
  1800                           ;time_scheduler.h: 139: if (keyValid && key != lastKeyState)
  1801  0C68  0878               	movf	_keyValid,w
  1802  0C69  1903               	btfsc	3,2
  1803  0C6A  2CF1               	goto	l3050
  1804  0C6B  0877               	movf	_key,w
  1805  0C6C  067B               	xorwf	_lastKeyState,w
  1806  0C6D  1903               	skipnz
  1807  0C6E  2CF1               	goto	l3050
  1808                           
  1809                           ;time_scheduler.h: 140: {
  1810                           ;time_scheduler.h: 141: if (key == 0b00001100)
  1811  0C6F  0877               	movf	_key,w
  1812  0C70  3A0C               	xorlw	12
  1813  0C71  1D03               	skipz
  1814  0C72  2C93               	goto	l3034
  1815                           
  1816                           ;time_scheduler.h: 142: {
  1817                           ;time_scheduler.h: 143: savedMinutesStart = (savedMinutesStart + 5) % 60;
  1818  0C73  303C               	movlw	60
  1819  0C74  1283               	bcf	3,5	;RP0=0, select bank0
  1820  0C75  1303               	bcf	3,6	;RP1=0, select bank0
  1821  0C76  00A0               	movwf	___awmod@divisor
  1822  0C77  3000               	movlw	0
  1823  0C78  00A1               	movwf	___awmod@divisor+1
  1824  0C79  1683               	bsf	3,5	;RP0=1, select bank1
  1825  0C7A  1303               	bcf	3,6	;RP1=0, select bank1
  1826  0C7B  086C               	movf	_savedMinutesStart^(0+128),w	;volatile
  1827  0C7C  3E05               	addlw	5
  1828  0C7D  1283               	bcf	3,5	;RP0=0, select bank0
  1829  0C7E  1303               	bcf	3,6	;RP1=0, select bank0
  1830  0C7F  00A2               	movwf	___awmod@dividend
  1831  0C80  3000               	movlw	0
  1832  0C81  1803               	skipnc
  1833  0C82  3001               	movlw	1
  1834  0C83  00A3               	movwf	___awmod@dividend+1
  1835  0C84  160A  118A  26E8  120A  158A  	fcall	___awmod
  1836  0C89  1283               	bcf	3,5	;RP0=0, select bank0
  1837  0C8A  1303               	bcf	3,6	;RP1=0, select bank0
  1838  0C8B  0820               	movf	?___awmod,w
  1839  0C8C  00C3               	movwf	??_setMinutesStart
  1840  0C8D  0843               	movf	??_setMinutesStart,w
  1841  0C8E  1683               	bsf	3,5	;RP0=1, select bank1
  1842  0C8F  1303               	bcf	3,6	;RP1=0, select bank1
  1843  0C90  00EC               	movwf	_savedMinutesStart^(0+128)	;volatile
  1844                           
  1845                           ;time_scheduler.h: 144: sprintf(debugInfo, "INC: %02d", savedMinutesStart);
  1846  0C91  3092               	movlw	(STR_7-__stringbase)& (0+255)
  1847  0C92  2CBC               	goto	L1
  1848  0C93                     l3034:	
  1849                           ;time_scheduler.h: 145: }
  1850                           
  1851                           
  1852                           ;time_scheduler.h: 146: else if (key == 0b00001110)
  1853  0C93  0877               	movf	_key,w
  1854  0C94  3A0E               	xorlw	14
  1855  0C95  1D03               	skipz
  1856  0C96  2CB7               	goto	l3040
  1857                           
  1858                           ;time_scheduler.h: 147: {
  1859                           ;time_scheduler.h: 148: savedMinutesStart = (savedMinutesStart - 5 + 60) % 60;
  1860  0C97  303C               	movlw	60
  1861  0C98  1283               	bcf	3,5	;RP0=0, select bank0
  1862  0C99  1303               	bcf	3,6	;RP1=0, select bank0
  1863  0C9A  00A0               	movwf	___awmod@divisor
  1864  0C9B  3000               	movlw	0
  1865  0C9C  00A1               	movwf	___awmod@divisor+1
  1866  0C9D  1683               	bsf	3,5	;RP0=1, select bank1
  1867  0C9E  1303               	bcf	3,6	;RP1=0, select bank1
  1868  0C9F  086C               	movf	_savedMinutesStart^(0+128),w	;volatile
  1869  0CA0  3E37               	addlw	55
  1870  0CA1  1283               	bcf	3,5	;RP0=0, select bank0
  1871  0CA2  1303               	bcf	3,6	;RP1=0, select bank0
  1872  0CA3  00A2               	movwf	___awmod@dividend
  1873  0CA4  3000               	movlw	0
  1874  0CA5  1803               	skipnc
  1875  0CA6  3001               	movlw	1
  1876  0CA7  00A3               	movwf	___awmod@dividend+1
  1877  0CA8  160A  118A  26E8  120A  158A  	fcall	___awmod
  1878  0CAD  1283               	bcf	3,5	;RP0=0, select bank0
  1879  0CAE  1303               	bcf	3,6	;RP1=0, select bank0
  1880  0CAF  0820               	movf	?___awmod,w
  1881  0CB0  00C3               	movwf	??_setMinutesStart
  1882  0CB1  0843               	movf	??_setMinutesStart,w
  1883  0CB2  1683               	bsf	3,5	;RP0=1, select bank1
  1884  0CB3  1303               	bcf	3,6	;RP1=0, select bank1
  1885  0CB4  00EC               	movwf	_savedMinutesStart^(0+128)	;volatile
  1886                           
  1887                           ;time_scheduler.h: 149: sprintf(debugInfo, "DEC: %02d", savedMinutesStart);
  1888  0CB5  3088               	movlw	(STR_8-__stringbase)& (0+255)
  1889  0CB6  2CBC               	goto	L1
  1890  0CB7                     l3040:	
  1891                           ;time_scheduler.h: 150: }
  1892                           
  1893                           
  1894                           ;time_scheduler.h: 151: else if (key == 0b00001101)
  1895  0CB7  0877               	movf	_key,w
  1896  0CB8  3A0D               	xorlw	13
  1897  0CB9  1D03               	skipz
  1898  0CBA  2CD2               	goto	l173
  1899                           
  1900                           ;time_scheduler.h: 152: {
  1901                           ;time_scheduler.h: 153: sprintf(debugInfo, "SET: %02d", savedMinutesStart);
  1902  0CBB  309C               	movlw	(STR_9-__stringbase)& (0+255)
  1903  0CBC                     L1:	
  1904  0CBC  1283               	bcf	3,5	;RP0=0, select bank0
  1905  0CBD  1303               	bcf	3,6	;RP1=0, select bank0
  1906  0CBE  00C3               	movwf	??_setMinutesStart
  1907  0CBF  0843               	movf	??_setMinutesStart,w
  1908  0CC0  00AE               	movwf	sprintf@f
  1909  0CC1  1683               	bsf	3,5	;RP0=1, select bank1
  1910  0CC2  1303               	bcf	3,6	;RP1=0, select bank1
  1911  0CC3  086C               	movf	_savedMinutesStart^(0+128),w	;volatile
  1912  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  1913  0CC5  1303               	bcf	3,6	;RP1=0, select bank0
  1914  0CC6  00C4               	movwf	??_setMinutesStart+1
  1915  0CC7  01C5               	clrf	??_setMinutesStart+2
  1916  0CC8  0844               	movf	??_setMinutesStart+1,w
  1917  0CC9  00AF               	movwf	?_sprintf+1
  1918  0CCA  0845               	movf	??_setMinutesStart+2,w
  1919  0CCB  00B0               	movwf	?_sprintf+2
  1920  0CCC  30DF               	movlw	_debugInfo& (0+255)
  1921  0CCD  120A  118A  23F6  120A  158A  	fcall	_sprintf
  1922  0CD2                     l173:	
  1923                           
  1924                           ;time_scheduler.h: 154: }
  1925                           ;time_scheduler.h: 156: printToLCD(debugInfo);
  1926  0CD2  30DF               	movlw	_debugInfo& (0+255)
  1927  0CD3  1283               	bcf	3,5	;RP0=0, select bank0
  1928  0CD4  1303               	bcf	3,6	;RP1=0, select bank0
  1929  0CD5  00A2               	movwf	printToLCD@str
  1930  0CD6  3000               	movlw	0
  1931  0CD7  00A3               	movwf	printToLCD@str+1
  1932  0CD8  160A  118A  25C5  120A  158A  	fcall	_printToLCD
  1933                           
  1934                           ;time_scheduler.h: 157: lastKeyState = key;
  1935  0CDD  0877               	movf	_key,w
  1936  0CDE  1283               	bcf	3,5	;RP0=0, select bank0
  1937  0CDF  1303               	bcf	3,6	;RP1=0, select bank0
  1938  0CE0  00C3               	movwf	??_setMinutesStart
  1939  0CE1  0843               	movf	??_setMinutesStart,w
  1940  0CE2  00FB               	movwf	_lastKeyState
  1941  0CE3                     l3048:	
  1942                           ;time_scheduler.h: 159: while ((PORTB & 0x08) != 0)
  1943                           
  1944  0CE3  1283               	bcf	3,5	;RP0=0, select bank0
  1945  0CE4  1303               	bcf	3,6	;RP1=0, select bank0
  1946  0CE5  1D86               	btfss	6,3	;volatile
  1947  0CE6  0008               	return
  1948                           
  1949                           ;time_scheduler.h: 160: {
  1950                           ;time_scheduler.h: 161: _delay((unsigned long)((10)*(4000000/4000.0)));
  1951  0CE7  300D               	movlw	13
  1952  0CE8  00C4               	movwf	??_setMinutesStart+1
  1953  0CE9  30FB               	movlw	251
  1954  0CEA  00C3               	movwf	??_setMinutesStart
  1955  0CEB                     u4627:	
  1956  0CEB  0BC3               	decfsz	??_setMinutesStart,f
  1957  0CEC  2CEB               	goto	u4627
  1958  0CED  0BC4               	decfsz	??_setMinutesStart+1,f
  1959  0CEE  2CEB               	goto	u4627
  1960  0CEF  2CF0               	nop2
  1961  0CF0  2CE3               	goto	l3048
  1962  0CF1                     l3050:	
  1963                           ;time_scheduler.h: 162: }
  1964                           ;time_scheduler.h: 163: }
  1965                           
  1966                           
  1967                           ;time_scheduler.h: 164: else if (!keyValid)
  1968  0CF1  08F8               	movf	_keyValid,f
  1969  0CF2  1D03               	skipz
  1970  0CF3  0008               	return
  1971                           
  1972                           ;time_scheduler.h: 165: {
  1973                           ;time_scheduler.h: 166: lastKeyState = 0xFF;
  1974  0CF4  30FF               	movlw	255
  1975  0CF5  1283               	bcf	3,5	;RP0=0, select bank0
  1976  0CF6  1303               	bcf	3,6	;RP1=0, select bank0
  1977  0CF7  00C3               	movwf	??_setMinutesStart
  1978  0CF8  0843               	movf	??_setMinutesStart,w
  1979  0CF9  00FB               	movwf	_lastKeyState
  1980  0CFA  0008               	return
  1981  0CFB                     __end_of_setMinutesStart:	
  1982                           
  1983                           	psect	text3
  1984  0B8B                     __ptext3:	
  1985 ;; *************** function _setMinutesEnd *****************
  1986 ;; Defined at:
  1987 ;;		line 170 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedu
      +ler.h"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;		None
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;		None               void
  1994 ;; Registers used:
  1995 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2001 ;;      Params:         0       0       0       0       0
  2002 ;;      Locals:         0       0       0       0       0
  2003 ;;      Temps:          0       3       0       0       0
  2004 ;;      Totals:         0       3       0       0       0
  2005 ;;Total ram usage:        3 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    4
  2008 ;; This function calls:
  2009 ;;		___awmod
  2010 ;;		_printToLCD
  2011 ;;		_sprintf
  2012 ;; This function is called by:
  2013 ;;		_updateState
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017                           
  2018                           ;psect for function _setMinutesEnd
  2019  0B8B                     _setMinutesEnd:	
  2020                           
  2021                           ;time_scheduler.h: 172: keyValid = (PORTB & 0x08) >> 3;
  2022                           
  2023                           ;incstack = 0
  2024                           ; Regs used in _setMinutesEnd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2025  0B8B  1283               	bcf	3,5	;RP0=0, select bank0
  2026  0B8C  1303               	bcf	3,6	;RP1=0, select bank0
  2027  0B8D  0806               	movf	6,w	;volatile
  2028  0B8E  00C3               	movwf	??_setMinutesEnd
  2029  0B8F  3003               	movlw	3
  2030  0B90                     u4325:	
  2031  0B90  1003               	clrc
  2032  0B91  0CC3               	rrf	??_setMinutesEnd,f
  2033  0B92  3EFF               	addlw	-1
  2034  0B93  1D03               	skipz
  2035  0B94  2B90               	goto	u4325
  2036  0B95  0843               	movf	??_setMinutesEnd,w
  2037  0B96  3901               	andlw	1
  2038  0B97  00C4               	movwf	??_setMinutesEnd+1
  2039  0B98  0844               	movf	??_setMinutesEnd+1,w
  2040  0B99  00F8               	movwf	_keyValid
  2041                           
  2042                           ;time_scheduler.h: 173: key = (PORTB & 0xF0) >> 4;
  2043  0B9A  0806               	movf	6,w	;volatile
  2044  0B9B  00C3               	movwf	??_setMinutesEnd
  2045  0B9C  3004               	movlw	4
  2046  0B9D                     u4335:	
  2047  0B9D  1003               	clrc
  2048  0B9E  0CC3               	rrf	??_setMinutesEnd,f
  2049  0B9F  3EFF               	addlw	-1
  2050  0BA0  1D03               	skipz
  2051  0BA1  2B9D               	goto	u4335
  2052  0BA2  0843               	movf	??_setMinutesEnd,w
  2053  0BA3  390F               	andlw	15
  2054  0BA4  00C4               	movwf	??_setMinutesEnd+1
  2055  0BA5  0844               	movf	??_setMinutesEnd+1,w
  2056  0BA6  00F7               	movwf	_key
  2057                           
  2058                           ;time_scheduler.h: 175: _delay((unsigned long)((50)*(4000000/4000.0)));
  2059  0BA7  3041               	movlw	65
  2060  0BA8  00C4               	movwf	??_setMinutesEnd+1
  2061  0BA9  30EE               	movlw	238
  2062  0BAA  00C3               	movwf	??_setMinutesEnd
  2063  0BAB                     u4637:	
  2064  0BAB  0BC3               	decfsz	??_setMinutesEnd,f
  2065  0BAC  2BAB               	goto	u4637
  2066  0BAD  0BC4               	decfsz	??_setMinutesEnd+1,f
  2067  0BAE  2BAB               	goto	u4637
  2068  0BAF  0000               	nop
  2069                           
  2070                           ;time_scheduler.h: 177: if (keyValid && key != lastKeyState)
  2071  0BB0  0878               	movf	_keyValid,w
  2072  0BB1  1903               	btfsc	3,2
  2073  0BB2  2C39               	goto	l3084
  2074  0BB3  0877               	movf	_key,w
  2075  0BB4  067B               	xorwf	_lastKeyState,w
  2076  0BB5  1903               	skipnz
  2077  0BB6  2C39               	goto	l3084
  2078                           
  2079                           ;time_scheduler.h: 178: {
  2080                           ;time_scheduler.h: 179: if (key == 0b00001100)
  2081  0BB7  0877               	movf	_key,w
  2082  0BB8  3A0C               	xorlw	12
  2083  0BB9  1D03               	skipz
  2084  0BBA  2BDB               	goto	l3068
  2085                           
  2086                           ;time_scheduler.h: 180: {
  2087                           ;time_scheduler.h: 181: savedMinutesEnd = (savedMinutesEnd + 5) % 60;
  2088  0BBB  303C               	movlw	60
  2089  0BBC  1283               	bcf	3,5	;RP0=0, select bank0
  2090  0BBD  1303               	bcf	3,6	;RP1=0, select bank0
  2091  0BBE  00A0               	movwf	___awmod@divisor
  2092  0BBF  3000               	movlw	0
  2093  0BC0  00A1               	movwf	___awmod@divisor+1
  2094  0BC1  1683               	bsf	3,5	;RP0=1, select bank1
  2095  0BC2  1303               	bcf	3,6	;RP1=0, select bank1
  2096  0BC3  086B               	movf	_savedMinutesEnd^(0+128),w	;volatile
  2097  0BC4  3E05               	addlw	5
  2098  0BC5  1283               	bcf	3,5	;RP0=0, select bank0
  2099  0BC6  1303               	bcf	3,6	;RP1=0, select bank0
  2100  0BC7  00A2               	movwf	___awmod@dividend
  2101  0BC8  3000               	movlw	0
  2102  0BC9  1803               	skipnc
  2103  0BCA  3001               	movlw	1
  2104  0BCB  00A3               	movwf	___awmod@dividend+1
  2105  0BCC  160A  118A  26E8  120A  158A  	fcall	___awmod
  2106  0BD1  1283               	bcf	3,5	;RP0=0, select bank0
  2107  0BD2  1303               	bcf	3,6	;RP1=0, select bank0
  2108  0BD3  0820               	movf	?___awmod,w
  2109  0BD4  00C3               	movwf	??_setMinutesEnd
  2110  0BD5  0843               	movf	??_setMinutesEnd,w
  2111  0BD6  1683               	bsf	3,5	;RP0=1, select bank1
  2112  0BD7  1303               	bcf	3,6	;RP1=0, select bank1
  2113  0BD8  00EB               	movwf	_savedMinutesEnd^(0+128)	;volatile
  2114                           
  2115                           ;time_scheduler.h: 182: sprintf(debugInfo, "INC: %02d", savedMinutesEnd);
  2116  0BD9  3092               	movlw	(STR_7-__stringbase)& (0+255)
  2117  0BDA  2C04               	goto	L2
  2118  0BDB                     l3068:	
  2119                           ;time_scheduler.h: 183: }
  2120                           
  2121                           
  2122                           ;time_scheduler.h: 184: else if (key == 0b00001110)
  2123  0BDB  0877               	movf	_key,w
  2124  0BDC  3A0E               	xorlw	14
  2125  0BDD  1D03               	skipz
  2126  0BDE  2BFF               	goto	l3074
  2127                           
  2128                           ;time_scheduler.h: 185: {
  2129                           ;time_scheduler.h: 186: savedMinutesEnd = (savedMinutesEnd - 5 + 60) % 60;
  2130  0BDF  303C               	movlw	60
  2131  0BE0  1283               	bcf	3,5	;RP0=0, select bank0
  2132  0BE1  1303               	bcf	3,6	;RP1=0, select bank0
  2133  0BE2  00A0               	movwf	___awmod@divisor
  2134  0BE3  3000               	movlw	0
  2135  0BE4  00A1               	movwf	___awmod@divisor+1
  2136  0BE5  1683               	bsf	3,5	;RP0=1, select bank1
  2137  0BE6  1303               	bcf	3,6	;RP1=0, select bank1
  2138  0BE7  086B               	movf	_savedMinutesEnd^(0+128),w	;volatile
  2139  0BE8  3E37               	addlw	55
  2140  0BE9  1283               	bcf	3,5	;RP0=0, select bank0
  2141  0BEA  1303               	bcf	3,6	;RP1=0, select bank0
  2142  0BEB  00A2               	movwf	___awmod@dividend
  2143  0BEC  3000               	movlw	0
  2144  0BED  1803               	skipnc
  2145  0BEE  3001               	movlw	1
  2146  0BEF  00A3               	movwf	___awmod@dividend+1
  2147  0BF0  160A  118A  26E8  120A  158A  	fcall	___awmod
  2148  0BF5  1283               	bcf	3,5	;RP0=0, select bank0
  2149  0BF6  1303               	bcf	3,6	;RP1=0, select bank0
  2150  0BF7  0820               	movf	?___awmod,w
  2151  0BF8  00C3               	movwf	??_setMinutesEnd
  2152  0BF9  0843               	movf	??_setMinutesEnd,w
  2153  0BFA  1683               	bsf	3,5	;RP0=1, select bank1
  2154  0BFB  1303               	bcf	3,6	;RP1=0, select bank1
  2155  0BFC  00EB               	movwf	_savedMinutesEnd^(0+128)	;volatile
  2156                           
  2157                           ;time_scheduler.h: 187: sprintf(debugInfo, "DEC: %02d", savedMinutesEnd);
  2158  0BFD  3088               	movlw	(STR_8-__stringbase)& (0+255)
  2159  0BFE  2C04               	goto	L2
  2160  0BFF                     l3074:	
  2161                           ;time_scheduler.h: 188: }
  2162                           
  2163                           
  2164                           ;time_scheduler.h: 189: else if (key == 0b00001101)
  2165  0BFF  0877               	movf	_key,w
  2166  0C00  3A0D               	xorlw	13
  2167  0C01  1D03               	skipz
  2168  0C02  2C1A               	goto	l187
  2169                           
  2170                           ;time_scheduler.h: 190: {
  2171                           ;time_scheduler.h: 191: sprintf(debugInfo, "SET: %02d", savedMinutesEnd);
  2172  0C03  309C               	movlw	(STR_9-__stringbase)& (0+255)
  2173  0C04                     L2:	
  2174  0C04  1283               	bcf	3,5	;RP0=0, select bank0
  2175  0C05  1303               	bcf	3,6	;RP1=0, select bank0
  2176  0C06  00C3               	movwf	??_setMinutesEnd
  2177  0C07  0843               	movf	??_setMinutesEnd,w
  2178  0C08  00AE               	movwf	sprintf@f
  2179  0C09  1683               	bsf	3,5	;RP0=1, select bank1
  2180  0C0A  1303               	bcf	3,6	;RP1=0, select bank1
  2181  0C0B  086B               	movf	_savedMinutesEnd^(0+128),w	;volatile
  2182  0C0C  1283               	bcf	3,5	;RP0=0, select bank0
  2183  0C0D  1303               	bcf	3,6	;RP1=0, select bank0
  2184  0C0E  00C4               	movwf	??_setMinutesEnd+1
  2185  0C0F  01C5               	clrf	??_setMinutesEnd+2
  2186  0C10  0844               	movf	??_setMinutesEnd+1,w
  2187  0C11  00AF               	movwf	?_sprintf+1
  2188  0C12  0845               	movf	??_setMinutesEnd+2,w
  2189  0C13  00B0               	movwf	?_sprintf+2
  2190  0C14  30DF               	movlw	_debugInfo& (0+255)
  2191  0C15  120A  118A  23F6  120A  158A  	fcall	_sprintf
  2192  0C1A                     l187:	
  2193                           
  2194                           ;time_scheduler.h: 192: }
  2195                           ;time_scheduler.h: 194: printToLCD(debugInfo);
  2196  0C1A  30DF               	movlw	_debugInfo& (0+255)
  2197  0C1B  1283               	bcf	3,5	;RP0=0, select bank0
  2198  0C1C  1303               	bcf	3,6	;RP1=0, select bank0
  2199  0C1D  00A2               	movwf	printToLCD@str
  2200  0C1E  3000               	movlw	0
  2201  0C1F  00A3               	movwf	printToLCD@str+1
  2202  0C20  160A  118A  25C5  120A  158A  	fcall	_printToLCD
  2203                           
  2204                           ;time_scheduler.h: 195: lastKeyState = key;
  2205  0C25  0877               	movf	_key,w
  2206  0C26  1283               	bcf	3,5	;RP0=0, select bank0
  2207  0C27  1303               	bcf	3,6	;RP1=0, select bank0
  2208  0C28  00C3               	movwf	??_setMinutesEnd
  2209  0C29  0843               	movf	??_setMinutesEnd,w
  2210  0C2A  00FB               	movwf	_lastKeyState
  2211  0C2B                     l3082:	
  2212                           ;time_scheduler.h: 197: while ((PORTB & 0x08) != 0)
  2213                           
  2214  0C2B  1283               	bcf	3,5	;RP0=0, select bank0
  2215  0C2C  1303               	bcf	3,6	;RP1=0, select bank0
  2216  0C2D  1D86               	btfss	6,3	;volatile
  2217  0C2E  0008               	return
  2218                           
  2219                           ;time_scheduler.h: 198: {
  2220                           ;time_scheduler.h: 199: _delay((unsigned long)((10)*(4000000/4000.0)));
  2221  0C2F  300D               	movlw	13
  2222  0C30  00C4               	movwf	??_setMinutesEnd+1
  2223  0C31  30FB               	movlw	251
  2224  0C32  00C3               	movwf	??_setMinutesEnd
  2225  0C33                     u4647:	
  2226  0C33  0BC3               	decfsz	??_setMinutesEnd,f
  2227  0C34  2C33               	goto	u4647
  2228  0C35  0BC4               	decfsz	??_setMinutesEnd+1,f
  2229  0C36  2C33               	goto	u4647
  2230  0C37  2C38               	nop2
  2231  0C38  2C2B               	goto	l3082
  2232  0C39                     l3084:	
  2233                           ;time_scheduler.h: 200: }
  2234                           ;time_scheduler.h: 201: }
  2235                           
  2236                           
  2237                           ;time_scheduler.h: 202: else if (!keyValid)
  2238  0C39  08F8               	movf	_keyValid,f
  2239  0C3A  1D03               	skipz
  2240  0C3B  0008               	return
  2241                           
  2242                           ;time_scheduler.h: 203: {
  2243                           ;time_scheduler.h: 204: lastKeyState = 0xFF;
  2244  0C3C  30FF               	movlw	255
  2245  0C3D  1283               	bcf	3,5	;RP0=0, select bank0
  2246  0C3E  1303               	bcf	3,6	;RP1=0, select bank0
  2247  0C3F  00C3               	movwf	??_setMinutesEnd
  2248  0C40  0843               	movf	??_setMinutesEnd,w
  2249  0C41  00FB               	movwf	_lastKeyState
  2250  0C42  0008               	return
  2251  0C43                     __end_of_setMinutesEnd:	
  2252                           
  2253                           	psect	text4
  2254  0AD3                     __ptext4:	
  2255 ;; *************** function _setHoursStart *****************
  2256 ;; Defined at:
  2257 ;;		line 55 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedul
      +er.h"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;		None
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;		None
  2262 ;; Return value:  Size  Location     Type
  2263 ;;		None               void
  2264 ;; Registers used:
  2265 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2271 ;;      Params:         0       0       0       0       0
  2272 ;;      Locals:         0       0       0       0       0
  2273 ;;      Temps:          0       3       0       0       0
  2274 ;;      Totals:         0       3       0       0       0
  2275 ;;Total ram usage:        3 bytes
  2276 ;; Hardware stack levels used:    1
  2277 ;; Hardware stack levels required when called:    4
  2278 ;; This function calls:
  2279 ;;		___awmod
  2280 ;;		_printToLCD
  2281 ;;		_sprintf
  2282 ;; This function is called by:
  2283 ;;		_updateState
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           
  2288                           ;psect for function _setHoursStart
  2289  0AD3                     _setHoursStart:	
  2290                           
  2291                           ;time_scheduler.h: 57: keyValid = (PORTB & 0x08) >> 3;
  2292                           
  2293                           ;incstack = 0
  2294                           ; Regs used in _setHoursStart: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2295  0AD3  1283               	bcf	3,5	;RP0=0, select bank0
  2296  0AD4  1303               	bcf	3,6	;RP1=0, select bank0
  2297  0AD5  0806               	movf	6,w	;volatile
  2298  0AD6  00C3               	movwf	??_setHoursStart
  2299  0AD7  3003               	movlw	3
  2300  0AD8                     u4055:	
  2301  0AD8  1003               	clrc
  2302  0AD9  0CC3               	rrf	??_setHoursStart,f
  2303  0ADA  3EFF               	addlw	-1
  2304  0ADB  1D03               	skipz
  2305  0ADC  2AD8               	goto	u4055
  2306  0ADD  0843               	movf	??_setHoursStart,w
  2307  0ADE  3901               	andlw	1
  2308  0ADF  00C4               	movwf	??_setHoursStart+1
  2309  0AE0  0844               	movf	??_setHoursStart+1,w
  2310  0AE1  00F8               	movwf	_keyValid
  2311                           
  2312                           ;time_scheduler.h: 58: key = (PORTB & 0xF0) >> 4;
  2313  0AE2  0806               	movf	6,w	;volatile
  2314  0AE3  00C3               	movwf	??_setHoursStart
  2315  0AE4  3004               	movlw	4
  2316  0AE5                     u4065:	
  2317  0AE5  1003               	clrc
  2318  0AE6  0CC3               	rrf	??_setHoursStart,f
  2319  0AE7  3EFF               	addlw	-1
  2320  0AE8  1D03               	skipz
  2321  0AE9  2AE5               	goto	u4065
  2322  0AEA  0843               	movf	??_setHoursStart,w
  2323  0AEB  390F               	andlw	15
  2324  0AEC  00C4               	movwf	??_setHoursStart+1
  2325  0AED  0844               	movf	??_setHoursStart+1,w
  2326  0AEE  00F7               	movwf	_key
  2327                           
  2328                           ;time_scheduler.h: 60: _delay((unsigned long)((50)*(4000000/4000.0)));
  2329  0AEF  3041               	movlw	65
  2330  0AF0  00C4               	movwf	??_setHoursStart+1
  2331  0AF1  30EE               	movlw	238
  2332  0AF2  00C3               	movwf	??_setHoursStart
  2333  0AF3                     u4657:	
  2334  0AF3  0BC3               	decfsz	??_setHoursStart,f
  2335  0AF4  2AF3               	goto	u4657
  2336  0AF5  0BC4               	decfsz	??_setHoursStart+1,f
  2337  0AF6  2AF3               	goto	u4657
  2338  0AF7  0000               	nop
  2339                           
  2340                           ;time_scheduler.h: 62: if (keyValid && key != lastKeyState)
  2341  0AF8  0878               	movf	_keyValid,w
  2342  0AF9  1903               	btfsc	3,2
  2343  0AFA  2B81               	goto	l2982
  2344  0AFB  0877               	movf	_key,w
  2345  0AFC  067B               	xorwf	_lastKeyState,w
  2346  0AFD  1903               	skipnz
  2347  0AFE  2B81               	goto	l2982
  2348                           
  2349                           ;time_scheduler.h: 63: {
  2350                           ;time_scheduler.h: 64: if (key == 0b00001100)
  2351  0AFF  0877               	movf	_key,w
  2352  0B00  3A0C               	xorlw	12
  2353  0B01  1D03               	skipz
  2354  0B02  2B23               	goto	l2966
  2355                           
  2356                           ;time_scheduler.h: 65: {
  2357                           ;time_scheduler.h: 66: savedHoursStart = (savedHoursStart + 1) % 24;
  2358  0B03  3018               	movlw	24
  2359  0B04  1283               	bcf	3,5	;RP0=0, select bank0
  2360  0B05  1303               	bcf	3,6	;RP1=0, select bank0
  2361  0B06  00A0               	movwf	___awmod@divisor
  2362  0B07  3000               	movlw	0
  2363  0B08  00A1               	movwf	___awmod@divisor+1
  2364  0B09  1683               	bsf	3,5	;RP0=1, select bank1
  2365  0B0A  1303               	bcf	3,6	;RP1=0, select bank1
  2366  0B0B  086A               	movf	_savedHoursStart^(0+128),w	;volatile
  2367  0B0C  3E01               	addlw	1
  2368  0B0D  1283               	bcf	3,5	;RP0=0, select bank0
  2369  0B0E  1303               	bcf	3,6	;RP1=0, select bank0
  2370  0B0F  00A2               	movwf	___awmod@dividend
  2371  0B10  3000               	movlw	0
  2372  0B11  1803               	skipnc
  2373  0B12  3001               	movlw	1
  2374  0B13  00A3               	movwf	___awmod@dividend+1
  2375  0B14  160A  118A  26E8  120A  158A  	fcall	___awmod
  2376  0B19  1283               	bcf	3,5	;RP0=0, select bank0
  2377  0B1A  1303               	bcf	3,6	;RP1=0, select bank0
  2378  0B1B  0820               	movf	?___awmod,w
  2379  0B1C  00C3               	movwf	??_setHoursStart
  2380  0B1D  0843               	movf	??_setHoursStart,w
  2381  0B1E  1683               	bsf	3,5	;RP0=1, select bank1
  2382  0B1F  1303               	bcf	3,6	;RP1=0, select bank1
  2383  0B20  00EA               	movwf	_savedHoursStart^(0+128)	;volatile
  2384                           
  2385                           ;time_scheduler.h: 67: sprintf(debugInfo, "INC: %02d", savedHoursStart);
  2386  0B21  3092               	movlw	(STR_7-__stringbase)& (0+255)
  2387  0B22  2B4C               	goto	L3
  2388  0B23                     l2966:	
  2389                           ;time_scheduler.h: 68: }
  2390                           
  2391                           
  2392                           ;time_scheduler.h: 69: else if (key == 0b00001110)
  2393  0B23  0877               	movf	_key,w
  2394  0B24  3A0E               	xorlw	14
  2395  0B25  1D03               	skipz
  2396  0B26  2B47               	goto	l2972
  2397                           
  2398                           ;time_scheduler.h: 70: {
  2399                           ;time_scheduler.h: 71: savedHoursStart = (savedHoursStart - 1 + 24) % 24;
  2400  0B27  3018               	movlw	24
  2401  0B28  1283               	bcf	3,5	;RP0=0, select bank0
  2402  0B29  1303               	bcf	3,6	;RP1=0, select bank0
  2403  0B2A  00A0               	movwf	___awmod@divisor
  2404  0B2B  3000               	movlw	0
  2405  0B2C  00A1               	movwf	___awmod@divisor+1
  2406  0B2D  1683               	bsf	3,5	;RP0=1, select bank1
  2407  0B2E  1303               	bcf	3,6	;RP1=0, select bank1
  2408  0B2F  086A               	movf	_savedHoursStart^(0+128),w	;volatile
  2409  0B30  3E17               	addlw	23
  2410  0B31  1283               	bcf	3,5	;RP0=0, select bank0
  2411  0B32  1303               	bcf	3,6	;RP1=0, select bank0
  2412  0B33  00A2               	movwf	___awmod@dividend
  2413  0B34  3000               	movlw	0
  2414  0B35  1803               	skipnc
  2415  0B36  3001               	movlw	1
  2416  0B37  00A3               	movwf	___awmod@dividend+1
  2417  0B38  160A  118A  26E8  120A  158A  	fcall	___awmod
  2418  0B3D  1283               	bcf	3,5	;RP0=0, select bank0
  2419  0B3E  1303               	bcf	3,6	;RP1=0, select bank0
  2420  0B3F  0820               	movf	?___awmod,w
  2421  0B40  00C3               	movwf	??_setHoursStart
  2422  0B41  0843               	movf	??_setHoursStart,w
  2423  0B42  1683               	bsf	3,5	;RP0=1, select bank1
  2424  0B43  1303               	bcf	3,6	;RP1=0, select bank1
  2425  0B44  00EA               	movwf	_savedHoursStart^(0+128)	;volatile
  2426                           
  2427                           ;time_scheduler.h: 72: sprintf(debugInfo, "DEC: %02d", savedHoursStart);
  2428  0B45  3088               	movlw	(STR_8-__stringbase)& (0+255)
  2429  0B46  2B4C               	goto	L3
  2430  0B47                     l2972:	
  2431                           ;time_scheduler.h: 73: }
  2432                           
  2433                           
  2434                           ;time_scheduler.h: 74: else if (key == 0b00001101)
  2435  0B47  0877               	movf	_key,w
  2436  0B48  3A0D               	xorlw	13
  2437  0B49  1D03               	skipz
  2438  0B4A  2B62               	goto	l145
  2439                           
  2440                           ;time_scheduler.h: 75: {
  2441                           ;time_scheduler.h: 76: sprintf(debugInfo, "SET: %02d", savedHoursStart);
  2442  0B4B  309C               	movlw	(STR_9-__stringbase)& (0+255)
  2443  0B4C                     L3:	
  2444  0B4C  1283               	bcf	3,5	;RP0=0, select bank0
  2445  0B4D  1303               	bcf	3,6	;RP1=0, select bank0
  2446  0B4E  00C3               	movwf	??_setHoursStart
  2447  0B4F  0843               	movf	??_setHoursStart,w
  2448  0B50  00AE               	movwf	sprintf@f
  2449  0B51  1683               	bsf	3,5	;RP0=1, select bank1
  2450  0B52  1303               	bcf	3,6	;RP1=0, select bank1
  2451  0B53  086A               	movf	_savedHoursStart^(0+128),w	;volatile
  2452  0B54  1283               	bcf	3,5	;RP0=0, select bank0
  2453  0B55  1303               	bcf	3,6	;RP1=0, select bank0
  2454  0B56  00C4               	movwf	??_setHoursStart+1
  2455  0B57  01C5               	clrf	??_setHoursStart+2
  2456  0B58  0844               	movf	??_setHoursStart+1,w
  2457  0B59  00AF               	movwf	?_sprintf+1
  2458  0B5A  0845               	movf	??_setHoursStart+2,w
  2459  0B5B  00B0               	movwf	?_sprintf+2
  2460  0B5C  30DF               	movlw	_debugInfo& (0+255)
  2461  0B5D  120A  118A  23F6  120A  158A  	fcall	_sprintf
  2462  0B62                     l145:	
  2463                           
  2464                           ;time_scheduler.h: 78: }
  2465                           ;time_scheduler.h: 80: printToLCD(debugInfo);
  2466  0B62  30DF               	movlw	_debugInfo& (0+255)
  2467  0B63  1283               	bcf	3,5	;RP0=0, select bank0
  2468  0B64  1303               	bcf	3,6	;RP1=0, select bank0
  2469  0B65  00A2               	movwf	printToLCD@str
  2470  0B66  3000               	movlw	0
  2471  0B67  00A3               	movwf	printToLCD@str+1
  2472  0B68  160A  118A  25C5  120A  158A  	fcall	_printToLCD
  2473                           
  2474                           ;time_scheduler.h: 81: lastKeyState = key;
  2475  0B6D  0877               	movf	_key,w
  2476  0B6E  1283               	bcf	3,5	;RP0=0, select bank0
  2477  0B6F  1303               	bcf	3,6	;RP1=0, select bank0
  2478  0B70  00C3               	movwf	??_setHoursStart
  2479  0B71  0843               	movf	??_setHoursStart,w
  2480  0B72  00FB               	movwf	_lastKeyState
  2481  0B73                     l2980:	
  2482                           ;time_scheduler.h: 83: while ((PORTB & 0x08) != 0)
  2483                           
  2484  0B73  1283               	bcf	3,5	;RP0=0, select bank0
  2485  0B74  1303               	bcf	3,6	;RP1=0, select bank0
  2486  0B75  1D86               	btfss	6,3	;volatile
  2487  0B76  0008               	return
  2488                           
  2489                           ;time_scheduler.h: 84: {
  2490                           ;time_scheduler.h: 85: _delay((unsigned long)((10)*(4000000/4000.0)));
  2491  0B77  300D               	movlw	13
  2492  0B78  00C4               	movwf	??_setHoursStart+1
  2493  0B79  30FB               	movlw	251
  2494  0B7A  00C3               	movwf	??_setHoursStart
  2495  0B7B                     u4667:	
  2496  0B7B  0BC3               	decfsz	??_setHoursStart,f
  2497  0B7C  2B7B               	goto	u4667
  2498  0B7D  0BC4               	decfsz	??_setHoursStart+1,f
  2499  0B7E  2B7B               	goto	u4667
  2500  0B7F  2B80               	nop2
  2501  0B80  2B73               	goto	l2980
  2502  0B81                     l2982:	
  2503                           ;time_scheduler.h: 86: }
  2504                           ;time_scheduler.h: 87: }
  2505                           
  2506                           
  2507                           ;time_scheduler.h: 88: else if (!keyValid)
  2508  0B81  08F8               	movf	_keyValid,f
  2509  0B82  1D03               	skipz
  2510  0B83  0008               	return
  2511                           
  2512                           ;time_scheduler.h: 89: {
  2513                           ;time_scheduler.h: 90: lastKeyState = 0xFF;
  2514  0B84  30FF               	movlw	255
  2515  0B85  1283               	bcf	3,5	;RP0=0, select bank0
  2516  0B86  1303               	bcf	3,6	;RP1=0, select bank0
  2517  0B87  00C3               	movwf	??_setHoursStart
  2518  0B88  0843               	movf	??_setHoursStart,w
  2519  0B89  00FB               	movwf	_lastKeyState
  2520  0B8A  0008               	return
  2521  0B8B                     __end_of_setHoursStart:	
  2522                           
  2523                           	psect	text5
  2524  0A1B                     __ptext5:	
  2525 ;; *************** function _setHoursEnd *****************
  2526 ;; Defined at:
  2527 ;;		line 94 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedul
      +er.h"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;		None
  2530 ;; Auto vars:     Size  Location     Type
  2531 ;;		None
  2532 ;; Return value:  Size  Location     Type
  2533 ;;		None               void
  2534 ;; Registers used:
  2535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2541 ;;      Params:         0       0       0       0       0
  2542 ;;      Locals:         0       0       0       0       0
  2543 ;;      Temps:          0       3       0       0       0
  2544 ;;      Totals:         0       3       0       0       0
  2545 ;;Total ram usage:        3 bytes
  2546 ;; Hardware stack levels used:    1
  2547 ;; Hardware stack levels required when called:    4
  2548 ;; This function calls:
  2549 ;;		___awmod
  2550 ;;		_printToLCD
  2551 ;;		_sprintf
  2552 ;; This function is called by:
  2553 ;;		_updateState
  2554 ;; This function uses a non-reentrant model
  2555 ;;
  2556                           
  2557                           
  2558                           ;psect for function _setHoursEnd
  2559  0A1B                     _setHoursEnd:	
  2560                           
  2561                           ;time_scheduler.h: 96: keyValid = (PORTB & 0x08) >> 3;
  2562                           
  2563                           ;incstack = 0
  2564                           ; Regs used in _setHoursEnd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2565  0A1B  1283               	bcf	3,5	;RP0=0, select bank0
  2566  0A1C  1303               	bcf	3,6	;RP1=0, select bank0
  2567  0A1D  0806               	movf	6,w	;volatile
  2568  0A1E  00C3               	movwf	??_setHoursEnd
  2569  0A1F  3003               	movlw	3
  2570  0A20                     u4145:	
  2571  0A20  1003               	clrc
  2572  0A21  0CC3               	rrf	??_setHoursEnd,f
  2573  0A22  3EFF               	addlw	-1
  2574  0A23  1D03               	skipz
  2575  0A24  2A20               	goto	u4145
  2576  0A25  0843               	movf	??_setHoursEnd,w
  2577  0A26  3901               	andlw	1
  2578  0A27  00C4               	movwf	??_setHoursEnd+1
  2579  0A28  0844               	movf	??_setHoursEnd+1,w
  2580  0A29  00F8               	movwf	_keyValid
  2581                           
  2582                           ;time_scheduler.h: 97: key = (PORTB & 0xF0) >> 4;
  2583  0A2A  0806               	movf	6,w	;volatile
  2584  0A2B  00C3               	movwf	??_setHoursEnd
  2585  0A2C  3004               	movlw	4
  2586  0A2D                     u4155:	
  2587  0A2D  1003               	clrc
  2588  0A2E  0CC3               	rrf	??_setHoursEnd,f
  2589  0A2F  3EFF               	addlw	-1
  2590  0A30  1D03               	skipz
  2591  0A31  2A2D               	goto	u4155
  2592  0A32  0843               	movf	??_setHoursEnd,w
  2593  0A33  390F               	andlw	15
  2594  0A34  00C4               	movwf	??_setHoursEnd+1
  2595  0A35  0844               	movf	??_setHoursEnd+1,w
  2596  0A36  00F7               	movwf	_key
  2597                           
  2598                           ;time_scheduler.h: 99: _delay((unsigned long)((50)*(4000000/4000.0)));
  2599  0A37  3041               	movlw	65
  2600  0A38  00C4               	movwf	??_setHoursEnd+1
  2601  0A39  30EE               	movlw	238
  2602  0A3A  00C3               	movwf	??_setHoursEnd
  2603  0A3B                     u4677:	
  2604  0A3B  0BC3               	decfsz	??_setHoursEnd,f
  2605  0A3C  2A3B               	goto	u4677
  2606  0A3D  0BC4               	decfsz	??_setHoursEnd+1,f
  2607  0A3E  2A3B               	goto	u4677
  2608  0A3F  0000               	nop
  2609                           
  2610                           ;time_scheduler.h: 101: if (keyValid && key != lastKeyState)
  2611  0A40  0878               	movf	_keyValid,w
  2612  0A41  1903               	btfsc	3,2
  2613  0A42  2AC9               	goto	l3016
  2614  0A43  0877               	movf	_key,w
  2615  0A44  067B               	xorwf	_lastKeyState,w
  2616  0A45  1903               	skipnz
  2617  0A46  2AC9               	goto	l3016
  2618                           
  2619                           ;time_scheduler.h: 102: {
  2620                           ;time_scheduler.h: 103: if (key == 0b00001100)
  2621  0A47  0877               	movf	_key,w
  2622  0A48  3A0C               	xorlw	12
  2623  0A49  1D03               	skipz
  2624  0A4A  2A6B               	goto	l3000
  2625                           
  2626                           ;time_scheduler.h: 104: {
  2627                           ;time_scheduler.h: 105: savedHoursEnd = (savedHoursEnd + 1) % 24;
  2628  0A4B  3018               	movlw	24
  2629  0A4C  1283               	bcf	3,5	;RP0=0, select bank0
  2630  0A4D  1303               	bcf	3,6	;RP1=0, select bank0
  2631  0A4E  00A0               	movwf	___awmod@divisor
  2632  0A4F  3000               	movlw	0
  2633  0A50  00A1               	movwf	___awmod@divisor+1
  2634  0A51  1683               	bsf	3,5	;RP0=1, select bank1
  2635  0A52  1303               	bcf	3,6	;RP1=0, select bank1
  2636  0A53  0869               	movf	_savedHoursEnd^(0+128),w	;volatile
  2637  0A54  3E01               	addlw	1
  2638  0A55  1283               	bcf	3,5	;RP0=0, select bank0
  2639  0A56  1303               	bcf	3,6	;RP1=0, select bank0
  2640  0A57  00A2               	movwf	___awmod@dividend
  2641  0A58  3000               	movlw	0
  2642  0A59  1803               	skipnc
  2643  0A5A  3001               	movlw	1
  2644  0A5B  00A3               	movwf	___awmod@dividend+1
  2645  0A5C  160A  118A  26E8  120A  158A  	fcall	___awmod
  2646  0A61  1283               	bcf	3,5	;RP0=0, select bank0
  2647  0A62  1303               	bcf	3,6	;RP1=0, select bank0
  2648  0A63  0820               	movf	?___awmod,w
  2649  0A64  00C3               	movwf	??_setHoursEnd
  2650  0A65  0843               	movf	??_setHoursEnd,w
  2651  0A66  1683               	bsf	3,5	;RP0=1, select bank1
  2652  0A67  1303               	bcf	3,6	;RP1=0, select bank1
  2653  0A68  00E9               	movwf	_savedHoursEnd^(0+128)	;volatile
  2654                           
  2655                           ;time_scheduler.h: 106: sprintf(debugInfo, "INC: %02d", savedHoursEnd);
  2656  0A69  3092               	movlw	(STR_7-__stringbase)& (0+255)
  2657  0A6A  2A94               	goto	L4
  2658  0A6B                     l3000:	
  2659                           ;time_scheduler.h: 107: }
  2660                           
  2661                           
  2662                           ;time_scheduler.h: 108: else if (key == 0b00001110)
  2663  0A6B  0877               	movf	_key,w
  2664  0A6C  3A0E               	xorlw	14
  2665  0A6D  1D03               	skipz
  2666  0A6E  2A8F               	goto	l3006
  2667                           
  2668                           ;time_scheduler.h: 109: {
  2669                           ;time_scheduler.h: 110: savedHoursEnd = (savedHoursEnd - 1 + 24) % 24;
  2670  0A6F  3018               	movlw	24
  2671  0A70  1283               	bcf	3,5	;RP0=0, select bank0
  2672  0A71  1303               	bcf	3,6	;RP1=0, select bank0
  2673  0A72  00A0               	movwf	___awmod@divisor
  2674  0A73  3000               	movlw	0
  2675  0A74  00A1               	movwf	___awmod@divisor+1
  2676  0A75  1683               	bsf	3,5	;RP0=1, select bank1
  2677  0A76  1303               	bcf	3,6	;RP1=0, select bank1
  2678  0A77  0869               	movf	_savedHoursEnd^(0+128),w	;volatile
  2679  0A78  3E17               	addlw	23
  2680  0A79  1283               	bcf	3,5	;RP0=0, select bank0
  2681  0A7A  1303               	bcf	3,6	;RP1=0, select bank0
  2682  0A7B  00A2               	movwf	___awmod@dividend
  2683  0A7C  3000               	movlw	0
  2684  0A7D  1803               	skipnc
  2685  0A7E  3001               	movlw	1
  2686  0A7F  00A3               	movwf	___awmod@dividend+1
  2687  0A80  160A  118A  26E8  120A  158A  	fcall	___awmod
  2688  0A85  1283               	bcf	3,5	;RP0=0, select bank0
  2689  0A86  1303               	bcf	3,6	;RP1=0, select bank0
  2690  0A87  0820               	movf	?___awmod,w
  2691  0A88  00C3               	movwf	??_setHoursEnd
  2692  0A89  0843               	movf	??_setHoursEnd,w
  2693  0A8A  1683               	bsf	3,5	;RP0=1, select bank1
  2694  0A8B  1303               	bcf	3,6	;RP1=0, select bank1
  2695  0A8C  00E9               	movwf	_savedHoursEnd^(0+128)	;volatile
  2696                           
  2697                           ;time_scheduler.h: 111: sprintf(debugInfo, "DEC: %02d", savedHoursEnd);
  2698  0A8D  3088               	movlw	(STR_8-__stringbase)& (0+255)
  2699  0A8E  2A94               	goto	L4
  2700  0A8F                     l3006:	
  2701                           ;time_scheduler.h: 112: }
  2702                           
  2703                           
  2704                           ;time_scheduler.h: 113: else if (key == 0b00001101)
  2705  0A8F  0877               	movf	_key,w
  2706  0A90  3A0D               	xorlw	13
  2707  0A91  1D03               	skipz
  2708  0A92  2AAA               	goto	l159
  2709                           
  2710                           ;time_scheduler.h: 114: {
  2711                           ;time_scheduler.h: 115: sprintf(debugInfo, "SET: %02d", savedHoursEnd);
  2712  0A93  309C               	movlw	(STR_9-__stringbase)& (0+255)
  2713  0A94                     L4:	
  2714  0A94  1283               	bcf	3,5	;RP0=0, select bank0
  2715  0A95  1303               	bcf	3,6	;RP1=0, select bank0
  2716  0A96  00C3               	movwf	??_setHoursEnd
  2717  0A97  0843               	movf	??_setHoursEnd,w
  2718  0A98  00AE               	movwf	sprintf@f
  2719  0A99  1683               	bsf	3,5	;RP0=1, select bank1
  2720  0A9A  1303               	bcf	3,6	;RP1=0, select bank1
  2721  0A9B  0869               	movf	_savedHoursEnd^(0+128),w	;volatile
  2722  0A9C  1283               	bcf	3,5	;RP0=0, select bank0
  2723  0A9D  1303               	bcf	3,6	;RP1=0, select bank0
  2724  0A9E  00C4               	movwf	??_setHoursEnd+1
  2725  0A9F  01C5               	clrf	??_setHoursEnd+2
  2726  0AA0  0844               	movf	??_setHoursEnd+1,w
  2727  0AA1  00AF               	movwf	?_sprintf+1
  2728  0AA2  0845               	movf	??_setHoursEnd+2,w
  2729  0AA3  00B0               	movwf	?_sprintf+2
  2730  0AA4  30DF               	movlw	_debugInfo& (0+255)
  2731  0AA5  120A  118A  23F6  120A  158A  	fcall	_sprintf
  2732  0AAA                     l159:	
  2733                           
  2734                           ;time_scheduler.h: 116: }
  2735                           ;time_scheduler.h: 118: printToLCD(debugInfo);
  2736  0AAA  30DF               	movlw	_debugInfo& (0+255)
  2737  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  2738  0AAC  1303               	bcf	3,6	;RP1=0, select bank0
  2739  0AAD  00A2               	movwf	printToLCD@str
  2740  0AAE  3000               	movlw	0
  2741  0AAF  00A3               	movwf	printToLCD@str+1
  2742  0AB0  160A  118A  25C5  120A  158A  	fcall	_printToLCD
  2743                           
  2744                           ;time_scheduler.h: 119: lastKeyState = key;
  2745  0AB5  0877               	movf	_key,w
  2746  0AB6  1283               	bcf	3,5	;RP0=0, select bank0
  2747  0AB7  1303               	bcf	3,6	;RP1=0, select bank0
  2748  0AB8  00C3               	movwf	??_setHoursEnd
  2749  0AB9  0843               	movf	??_setHoursEnd,w
  2750  0ABA  00FB               	movwf	_lastKeyState
  2751  0ABB                     l3014:	
  2752                           ;time_scheduler.h: 121: while ((PORTB & 0x08) != 0)
  2753                           
  2754  0ABB  1283               	bcf	3,5	;RP0=0, select bank0
  2755  0ABC  1303               	bcf	3,6	;RP1=0, select bank0
  2756  0ABD  1D86               	btfss	6,3	;volatile
  2757  0ABE  0008               	return
  2758                           
  2759                           ;time_scheduler.h: 122: {
  2760                           ;time_scheduler.h: 123: _delay((unsigned long)((10)*(4000000/4000.0)));
  2761  0ABF  300D               	movlw	13
  2762  0AC0  00C4               	movwf	??_setHoursEnd+1
  2763  0AC1  30FB               	movlw	251
  2764  0AC2  00C3               	movwf	??_setHoursEnd
  2765  0AC3                     u4687:	
  2766  0AC3  0BC3               	decfsz	??_setHoursEnd,f
  2767  0AC4  2AC3               	goto	u4687
  2768  0AC5  0BC4               	decfsz	??_setHoursEnd+1,f
  2769  0AC6  2AC3               	goto	u4687
  2770  0AC7  2AC8               	nop2
  2771  0AC8  2ABB               	goto	l3014
  2772  0AC9                     l3016:	
  2773                           ;time_scheduler.h: 124: }
  2774                           ;time_scheduler.h: 125: }
  2775                           
  2776                           
  2777                           ;time_scheduler.h: 126: else if (!keyValid)
  2778  0AC9  08F8               	movf	_keyValid,f
  2779  0ACA  1D03               	skipz
  2780  0ACB  0008               	return
  2781                           
  2782                           ;time_scheduler.h: 127: {
  2783                           ;time_scheduler.h: 128: lastKeyState = 0xFF;
  2784  0ACC  30FF               	movlw	255
  2785  0ACD  1283               	bcf	3,5	;RP0=0, select bank0
  2786  0ACE  1303               	bcf	3,6	;RP1=0, select bank0
  2787  0ACF  00C3               	movwf	??_setHoursEnd
  2788  0AD0  0843               	movf	??_setHoursEnd,w
  2789  0AD1  00FB               	movwf	_lastKeyState
  2790  0AD2  0008               	return
  2791  0AD3                     __end_of_setHoursEnd:	
  2792                           
  2793                           	psect	text6
  2794  16E8                     __ptext6:	
  2795 ;; *************** function ___awmod *****************
  2796 ;; Defined at:
  2797 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;  divisor         2    0[BANK0 ] int 
  2800 ;;  dividend        2    2[BANK0 ] int 
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;  sign            1    6[BANK0 ] unsigned char 
  2803 ;;  counter         1    5[BANK0 ] unsigned char 
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  2    0[BANK0 ] int 
  2806 ;; Registers used:
  2807 ;;		wreg, status,2, status,0
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2813 ;;      Params:         0       4       0       0       0
  2814 ;;      Locals:         0       2       0       0       0
  2815 ;;      Temps:          0       1       0       0       0
  2816 ;;      Totals:         0       7       0       0       0
  2817 ;;Total ram usage:        7 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; Hardware stack levels required when called:    2
  2820 ;; This function calls:
  2821 ;;		Nothing
  2822 ;; This function is called by:
  2823 ;;		_setHoursStart
  2824 ;;		_setHoursEnd
  2825 ;;		_setMinutesStart
  2826 ;;		_setMinutesEnd
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830                           
  2831                           ;psect for function ___awmod
  2832  16E8                     ___awmod:	
  2833                           
  2834                           ;incstack = 0
  2835                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2836  16E8  1283               	bcf	3,5	;RP0=0, select bank0
  2837  16E9  1303               	bcf	3,6	;RP1=0, select bank0
  2838  16EA  01A6               	clrf	___awmod@sign
  2839  16EB  1FA3               	btfss	___awmod@dividend+1,7
  2840  16EC  2EF4               	goto	l2044
  2841  16ED  09A2               	comf	___awmod@dividend,f
  2842  16EE  09A3               	comf	___awmod@dividend+1,f
  2843  16EF  0AA2               	incf	___awmod@dividend,f
  2844  16F0  1903               	skipnz
  2845  16F1  0AA3               	incf	___awmod@dividend+1,f
  2846  16F2  01A6               	clrf	___awmod@sign
  2847  16F3  0AA6               	incf	___awmod@sign,f
  2848  16F4                     l2044:	
  2849  16F4  1FA1               	btfss	___awmod@divisor+1,7
  2850  16F5  2EFB               	goto	l2048
  2851  16F6  09A0               	comf	___awmod@divisor,f
  2852  16F7  09A1               	comf	___awmod@divisor+1,f
  2853  16F8  0AA0               	incf	___awmod@divisor,f
  2854  16F9  1903               	skipnz
  2855  16FA  0AA1               	incf	___awmod@divisor+1,f
  2856  16FB                     l2048:	
  2857  16FB  0821               	movf	___awmod@divisor+1,w
  2858  16FC  0420               	iorwf	___awmod@divisor,w
  2859  16FD  1903               	skipnz
  2860  16FE  2F28               	goto	l2066
  2861  16FF  01A5               	clrf	___awmod@counter
  2862  1700  0AA5               	incf	___awmod@counter,f
  2863  1701                     l2056:	
  2864  1701  1BA1               	btfsc	___awmod@divisor+1,7
  2865  1702  2F0F               	goto	l2058
  2866  1703  3001               	movlw	1
  2867  1704                     u2415:	
  2868  1704  1003               	clrc
  2869  1705  0DA0               	rlf	___awmod@divisor,f
  2870  1706  0DA1               	rlf	___awmod@divisor+1,f
  2871  1707  3EFF               	addlw	-1
  2872  1708  1D03               	skipz
  2873  1709  2F04               	goto	u2415
  2874  170A  3001               	movlw	1
  2875  170B  00A4               	movwf	??___awmod
  2876  170C  0824               	movf	??___awmod,w
  2877  170D  07A5               	addwf	___awmod@counter,f
  2878  170E  2F01               	goto	l2056
  2879  170F                     l2058:	
  2880  170F  0821               	movf	___awmod@divisor+1,w
  2881  1710  0223               	subwf	___awmod@dividend+1,w
  2882  1711  1D03               	skipz
  2883  1712  2F15               	goto	u2435
  2884  1713  0820               	movf	___awmod@divisor,w
  2885  1714  0222               	subwf	___awmod@dividend,w
  2886  1715                     u2435:	
  2887  1715  1C03               	skipc
  2888  1716  2F1D               	goto	l2062
  2889  1717  0820               	movf	___awmod@divisor,w
  2890  1718  02A2               	subwf	___awmod@dividend,f
  2891  1719  0821               	movf	___awmod@divisor+1,w
  2892  171A  1C03               	skipc
  2893  171B  03A3               	decf	___awmod@dividend+1,f
  2894  171C  02A3               	subwf	___awmod@dividend+1,f
  2895  171D                     l2062:	
  2896  171D  3001               	movlw	1
  2897  171E                     u2445:	
  2898  171E  1003               	clrc
  2899  171F  0CA1               	rrf	___awmod@divisor+1,f
  2900  1720  0CA0               	rrf	___awmod@divisor,f
  2901  1721  3EFF               	addlw	-1
  2902  1722  1D03               	skipz
  2903  1723  2F1E               	goto	u2445
  2904  1724  3001               	movlw	1
  2905  1725  02A5               	subwf	___awmod@counter,f
  2906  1726  1D03               	btfss	3,2
  2907  1727  2F0F               	goto	l2058
  2908  1728                     l2066:	
  2909  1728  0826               	movf	___awmod@sign,w
  2910  1729  1903               	btfsc	3,2
  2911  172A  2F30               	goto	l2070
  2912  172B  09A2               	comf	___awmod@dividend,f
  2913  172C  09A3               	comf	___awmod@dividend+1,f
  2914  172D  0AA2               	incf	___awmod@dividend,f
  2915  172E  1903               	skipnz
  2916  172F  0AA3               	incf	___awmod@dividend+1,f
  2917  1730                     l2070:	
  2918  1730  0823               	movf	___awmod@dividend+1,w
  2919  1731  01A1               	clrf	?___awmod+1
  2920  1732  07A1               	addwf	?___awmod+1,f
  2921  1733  0822               	movf	___awmod@dividend,w
  2922  1734  01A0               	clrf	?___awmod
  2923  1735  07A0               	addwf	?___awmod,f
  2924  1736  0008               	return
  2925  1737                     __end_of___awmod:	
  2926                           
  2927                           	psect	text7
  2928  146C                     __ptext7:	
  2929 ;; *************** function _printStatusPPM *****************
  2930 ;; Defined at:
  2931 ;;		line 66 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;  handler         1    wreg     unsigned char 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  handler         1    4[BANK0 ] unsigned char 
  2936 ;; Return value:  Size  Location     Type
  2937 ;;		None               void
  2938 ;; Registers used:
  2939 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2945 ;;      Params:         0       0       0       0       0
  2946 ;;      Locals:         0       1       0       0       0
  2947 ;;      Temps:          0       0       0       0       0
  2948 ;;      Totals:         0       1       0       0       0
  2949 ;;Total ram usage:        1 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:    4
  2952 ;; This function calls:
  2953 ;;		_printToLCD
  2954 ;; This function is called by:
  2955 ;;		_updateState
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           
  2960                           ;psect for function _printStatusPPM
  2961  146C                     _printStatusPPM:	
  2962                           
  2963                           ;incstack = 0
  2964                           ; Regs used in _printStatusPPM: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2965                           ;printStatusPPM@handler stored from wreg
  2966  146C  1283               	bcf	3,5	;RP0=0, select bank0
  2967  146D  1303               	bcf	3,6	;RP1=0, select bank0
  2968  146E  00A4               	movwf	printStatusPPM@handler
  2969                           
  2970                           ;mq135_module.h: 68: if (handler == 1)
  2971  146F  0824               	movf	printStatusPPM@handler,w
  2972  1470  3A01               	xorlw	1
  2973  1471  1D03               	skipz
  2974  1472  2C7B               	goto	l2946
  2975                           
  2976                           ;mq135_module.h: 69: {
  2977                           ;mq135_module.h: 70: printToLCD("PURF HI");
  2978  1473  30AF               	movlw	low (STR_4-__stringbase)
  2979  1474  00A2               	movwf	printToLCD@str
  2980  1475  3080               	movlw	128
  2981  1476  00A3               	movwf	printToLCD@str+1
  2982  1477  160A  118A  25C5   	fcall	_printToLCD
  2983                           
  2984                           ;mq135_module.h: 71: }
  2985  147A  0008               	return
  2986  147B                     l2946:	
  2987                           
  2988                           ;mq135_module.h: 72: else if (handler == 0)
  2989  147B  1283               	bcf	3,5	;RP0=0, select bank0
  2990  147C  1303               	bcf	3,6	;RP1=0, select bank0
  2991  147D  08A4               	movf	printStatusPPM@handler,f
  2992  147E  1D03               	skipz
  2993  147F  0008               	return
  2994                           
  2995                           ;mq135_module.h: 73: {
  2996                           ;mq135_module.h: 74: printToLCD("PURF LO");
  2997  1480  30BF               	movlw	low (STR_5-__stringbase)
  2998  1481  00A2               	movwf	printToLCD@str
  2999  1482  3080               	movlw	128
  3000  1483  00A3               	movwf	printToLCD@str+1
  3001  1484  160A  118A  25C5   	fcall	_printToLCD
  3002  1487  0008               	return
  3003  1488                     __end_of_printStatusPPM:	
  3004                           
  3005                           	psect	text8
  3006  152C                     __ptext8:	
  3007 ;; *************** function _displayTime *****************
  3008 ;; Defined at:
  3009 ;;		line 48 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedul
      +er.h"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;		None
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;  timeFormat     10   40[BANK0 ] unsigned char [10]
  3014 ;; Return value:  Size  Location     Type
  3015 ;;		None               void
  3016 ;; Registers used:
  3017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3023 ;;      Params:         0       0       0       0       0
  3024 ;;      Locals:         0      10       0       0       0
  3025 ;;      Temps:          0       5       0       0       0
  3026 ;;      Totals:         0      15       0       0       0
  3027 ;;Total ram usage:       15 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:    4
  3030 ;; This function calls:
  3031 ;;		_printToLCD
  3032 ;;		_sprintf
  3033 ;; This function is called by:
  3034 ;;		_updateState
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           
  3039                           ;psect for function _displayTime
  3040  152C                     _displayTime:	
  3041                           
  3042                           ;time_scheduler.h: 50: char timeFormat[10];
  3043                           ;time_scheduler.h: 51: sprintf(timeFormat, "Time: %02d:%02d", hours, minutes);
  3044                           
  3045                           ;incstack = 0
  3046                           ; Regs used in _displayTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3047  152C  301B               	movlw	(STR_6-__stringbase)& (0+255)
  3048  152D  1283               	bcf	3,5	;RP0=0, select bank0
  3049  152E  1303               	bcf	3,6	;RP1=0, select bank0
  3050  152F  00C3               	movwf	??_displayTime
  3051  1530  0843               	movf	??_displayTime,w
  3052  1531  00AE               	movwf	sprintf@f
  3053  1532  087A               	movf	_hours,w	;volatile
  3054  1533  00C4               	movwf	??_displayTime+1
  3055  1534  01C5               	clrf	??_displayTime+2
  3056  1535  0844               	movf	??_displayTime+1,w
  3057  1536  00AF               	movwf	?_sprintf+1
  3058  1537  0845               	movf	??_displayTime+2,w
  3059  1538  00B0               	movwf	?_sprintf+2
  3060  1539  0879               	movf	_minutes,w	;volatile
  3061  153A  00C6               	movwf	??_displayTime+3
  3062  153B  01C7               	clrf	??_displayTime+4
  3063  153C  0846               	movf	??_displayTime+3,w
  3064  153D  00B1               	movwf	?_sprintf+3
  3065  153E  0847               	movf	??_displayTime+4,w
  3066  153F  00B2               	movwf	?_sprintf+4
  3067  1540  3048               	movlw	displayTime@timeFormat& (0+255)
  3068  1541  120A  118A  23F6  160A  118A  	fcall	_sprintf
  3069                           
  3070                           ;time_scheduler.h: 52: printToLCD(timeFormat);
  3071  1546  3048               	movlw	displayTime@timeFormat& (0+255)
  3072  1547  1283               	bcf	3,5	;RP0=0, select bank0
  3073  1548  1303               	bcf	3,6	;RP1=0, select bank0
  3074  1549  00A2               	movwf	printToLCD@str
  3075  154A  3000               	movlw	0
  3076  154B  00A3               	movwf	printToLCD@str+1
  3077  154C  160A  118A  25C5   	fcall	_printToLCD
  3078  154F  0008               	return
  3079  1550                     __end_of_displayTime:	
  3080                           
  3081                           	psect	text9
  3082  0ED7                     __ptext9:	
  3083 ;; *************** function _displayPPM *****************
  3084 ;; Defined at:
  3085 ;;		line 35 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;		None
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;  strBuffer      50    0[BANK1 ] unsigned char [50]
  3090 ;;  ppmFraction     2   52[BANK1 ] int 
  3091 ;;  ppmWhole        2   50[BANK1 ] int 
  3092 ;;  bufPtr          1   54[BANK1 ] PTR unsigned char 
  3093 ;;		 -> displayPPM@strBuffer(50), 
  3094 ;; Return value:  Size  Location     Type
  3095 ;;		None               void
  3096 ;; Registers used:
  3097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3103 ;;      Params:         0       0       0       0       0
  3104 ;;      Locals:         0       0      55       0       0
  3105 ;;      Temps:          0       2       0       0       0
  3106 ;;      Totals:         0       2      55       0       0
  3107 ;;Total ram usage:       57 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:    4
  3110 ;; This function calls:
  3111 ;;		___awtoft
  3112 ;;		___ftadd
  3113 ;;		___ftmul
  3114 ;;		___ftneg
  3115 ;;		___fttol
  3116 ;;		_printToLCD
  3117 ;;		_sprintf
  3118 ;; This function is called by:
  3119 ;;		_updateState
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           
  3124                           ;psect for function _displayPPM
  3125  0ED7                     _displayPPM:	
  3126                           
  3127                           ;mq135_module.h: 37: char strBuffer[50];
  3128                           ;mq135_module.h: 38: int ppmWhole = (int)PPM;
  3129                           
  3130                           ;incstack = 0
  3131                           ; Regs used in _displayPPM: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3132  0ED7  1683               	bsf	3,5	;RP0=1, select bank1
  3133  0ED8  1303               	bcf	3,6	;RP1=0, select bank1
  3134  0ED9  0857               	movf	_PPM^(0+128),w	;volatile
  3135  0EDA  1283               	bcf	3,5	;RP0=0, select bank0
  3136  0EDB  1303               	bcf	3,6	;RP1=0, select bank0
  3137  0EDC  00CE               	movwf	___fttol@f1
  3138  0EDD  1683               	bsf	3,5	;RP0=1, select bank1
  3139  0EDE  1303               	bcf	3,6	;RP1=0, select bank1
  3140  0EDF  0858               	movf	(_PPM+1)^(0+128),w	;volatile
  3141  0EE0  1283               	bcf	3,5	;RP0=0, select bank0
  3142  0EE1  1303               	bcf	3,6	;RP1=0, select bank0
  3143  0EE2  00CF               	movwf	___fttol@f1+1
  3144  0EE3  1683               	bsf	3,5	;RP0=1, select bank1
  3145  0EE4  1303               	bcf	3,6	;RP1=0, select bank1
  3146  0EE5  0859               	movf	(_PPM+2)^(0+128),w	;volatile
  3147  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  3148  0EE7  1303               	bcf	3,6	;RP1=0, select bank0
  3149  0EE8  00D0               	movwf	___fttol@f1+2
  3150  0EE9  120A  118A  275C  120A  158A  	fcall	___fttol
  3151  0EEE  1283               	bcf	3,5	;RP0=0, select bank0
  3152  0EEF  1303               	bcf	3,6	;RP1=0, select bank0
  3153  0EF0  084F               	movf	?___fttol+1,w
  3154  0EF1  1683               	bsf	3,5	;RP0=1, select bank1
  3155  0EF2  1303               	bcf	3,6	;RP1=0, select bank1
  3156  0EF3  01D3               	clrf	(displayPPM@ppmWhole+1)^(0+128)
  3157  0EF4  07D3               	addwf	(displayPPM@ppmWhole+1)^(0+128),f
  3158  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  3159  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  3160  0EF7  084E               	movf	?___fttol,w
  3161  0EF8  1683               	bsf	3,5	;RP0=1, select bank1
  3162  0EF9  1303               	bcf	3,6	;RP1=0, select bank1
  3163  0EFA  01D2               	clrf	displayPPM@ppmWhole^(0+128)
  3164  0EFB  07D2               	addwf	displayPPM@ppmWhole^(0+128),f
  3165                           
  3166                           ;mq135_module.h: 39: int ppmFraction = (int)((PPM - ppmWhole) * 100);
  3167  0EFC  0853               	movf	(displayPPM@ppmWhole+1)^(0+128),w
  3168  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  3169  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  3170  0EFF  01A9               	clrf	___awtoft@c+1
  3171  0F00  07A9               	addwf	___awtoft@c+1,f
  3172  0F01  1683               	bsf	3,5	;RP0=1, select bank1
  3173  0F02  1303               	bcf	3,6	;RP1=0, select bank1
  3174  0F03  0852               	movf	displayPPM@ppmWhole^(0+128),w
  3175  0F04  1283               	bcf	3,5	;RP0=0, select bank0
  3176  0F05  1303               	bcf	3,6	;RP1=0, select bank0
  3177  0F06  01A8               	clrf	___awtoft@c
  3178  0F07  07A8               	addwf	___awtoft@c,f
  3179  0F08  160A  118A  2550  120A  158A  	fcall	___awtoft
  3180  0F0D  1283               	bcf	3,5	;RP0=0, select bank0
  3181  0F0E  1303               	bcf	3,6	;RP1=0, select bank0
  3182  0F0F  0828               	movf	?___awtoft,w
  3183  0F10  00AE               	movwf	___ftneg@f1
  3184  0F11  0829               	movf	?___awtoft+1,w
  3185  0F12  00AF               	movwf	___ftneg@f1+1
  3186  0F13  082A               	movf	?___awtoft+2,w
  3187  0F14  00B0               	movwf	___ftneg@f1+2
  3188  0F15  120A  158A  20ED  120A  158A  	fcall	___ftneg
  3189  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  3190  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  3191  0F1C  082E               	movf	?___ftneg,w
  3192  0F1D  00B4               	movwf	___ftadd@f2
  3193  0F1E  082F               	movf	?___ftneg+1,w
  3194  0F1F  00B5               	movwf	___ftadd@f2+1
  3195  0F20  0830               	movf	?___ftneg+2,w
  3196  0F21  00B6               	movwf	___ftadd@f2+2
  3197  0F22  1683               	bsf	3,5	;RP0=1, select bank1
  3198  0F23  1303               	bcf	3,6	;RP1=0, select bank1
  3199  0F24  0857               	movf	_PPM^(0+128),w	;volatile
  3200  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  3201  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  3202  0F27  00B1               	movwf	___ftadd@f1
  3203  0F28  1683               	bsf	3,5	;RP0=1, select bank1
  3204  0F29  1303               	bcf	3,6	;RP1=0, select bank1
  3205  0F2A  0858               	movf	(_PPM+1)^(0+128),w	;volatile
  3206  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  3207  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  3208  0F2D  00B2               	movwf	___ftadd@f1+1
  3209  0F2E  1683               	bsf	3,5	;RP0=1, select bank1
  3210  0F2F  1303               	bcf	3,6	;RP1=0, select bank1
  3211  0F30  0859               	movf	(_PPM+2)^(0+128),w	;volatile
  3212  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  3213  0F32  1303               	bcf	3,6	;RP1=0, select bank0
  3214  0F33  00B3               	movwf	___ftadd@f1+2
  3215  0F34  120A  158A  25CE  120A  158A  	fcall	___ftadd
  3216  0F39  1283               	bcf	3,5	;RP0=0, select bank0
  3217  0F3A  1303               	bcf	3,6	;RP1=0, select bank0
  3218  0F3B  0831               	movf	?___ftadd,w
  3219  0F3C  00C1               	movwf	___ftmul@f2
  3220  0F3D  0832               	movf	?___ftadd+1,w
  3221  0F3E  00C2               	movwf	___ftmul@f2+1
  3222  0F3F  0833               	movf	?___ftadd+2,w
  3223  0F40  00C3               	movwf	___ftmul@f2+2
  3224  0F41  3000               	movlw	0
  3225  0F42  00BE               	movwf	___ftmul@f1
  3226  0F43  30C8               	movlw	200
  3227  0F44  00BF               	movwf	___ftmul@f1+1
  3228  0F45  3042               	movlw	66
  3229  0F46  00C0               	movwf	___ftmul@f1+2
  3230  0F47  120A  158A  24FB  120A  158A  	fcall	___ftmul
  3231  0F4C  1283               	bcf	3,5	;RP0=0, select bank0
  3232  0F4D  1303               	bcf	3,6	;RP1=0, select bank0
  3233  0F4E  083E               	movf	?___ftmul,w
  3234  0F4F  00CE               	movwf	___fttol@f1
  3235  0F50  083F               	movf	?___ftmul+1,w
  3236  0F51  00CF               	movwf	___fttol@f1+1
  3237  0F52  0840               	movf	?___ftmul+2,w
  3238  0F53  00D0               	movwf	___fttol@f1+2
  3239  0F54  120A  118A  275C  120A  158A  	fcall	___fttol
  3240  0F59  1283               	bcf	3,5	;RP0=0, select bank0
  3241  0F5A  1303               	bcf	3,6	;RP1=0, select bank0
  3242  0F5B  084F               	movf	?___fttol+1,w
  3243  0F5C  1683               	bsf	3,5	;RP0=1, select bank1
  3244  0F5D  1303               	bcf	3,6	;RP1=0, select bank1
  3245  0F5E  01D5               	clrf	(displayPPM@ppmFraction+1)^(0+128)
  3246  0F5F  07D5               	addwf	(displayPPM@ppmFraction+1)^(0+128),f
  3247  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  3248  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  3249  0F62  084E               	movf	?___fttol,w
  3250  0F63  1683               	bsf	3,5	;RP0=1, select bank1
  3251  0F64  1303               	bcf	3,6	;RP1=0, select bank1
  3252  0F65  01D4               	clrf	displayPPM@ppmFraction^(0+128)
  3253  0F66  07D4               	addwf	displayPPM@ppmFraction^(0+128),f
  3254                           
  3255                           ;mq135_module.h: 42: char *bufPtr = strBuffer;
  3256  0F67  30A0               	movlw	displayPPM@strBuffer& (0+255)
  3257  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  3258  0F69  1303               	bcf	3,6	;RP1=0, select bank0
  3259  0F6A  00DC               	movwf	??_displayPPM
  3260  0F6B  085C               	movf	??_displayPPM,w
  3261  0F6C  1683               	bsf	3,5	;RP0=1, select bank1
  3262  0F6D  1303               	bcf	3,6	;RP1=0, select bank1
  3263  0F6E  00D6               	movwf	displayPPM@bufPtr^(0+128)
  3264                           
  3265                           ;mq135_module.h: 43: bufPtr += sprintf(bufPtr, "CO2: ");
  3266  0F6F  30D5               	movlw	(STR_1-__stringbase)& (0+255)
  3267  0F70  1283               	bcf	3,5	;RP0=0, select bank0
  3268  0F71  1303               	bcf	3,6	;RP1=0, select bank0
  3269  0F72  00DC               	movwf	??_displayPPM
  3270  0F73  085C               	movf	??_displayPPM,w
  3271  0F74  00AE               	movwf	sprintf@f
  3272  0F75  1683               	bsf	3,5	;RP0=1, select bank1
  3273  0F76  1303               	bcf	3,6	;RP1=0, select bank1
  3274  0F77  0856               	movf	displayPPM@bufPtr^(0+128),w
  3275  0F78  120A  118A  23F6  120A  158A  	fcall	_sprintf
  3276  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  3277  0F7E  1303               	bcf	3,6	;RP1=0, select bank0
  3278  0F7F  082E               	movf	?_sprintf,w
  3279  0F80  00DD               	movwf	??_displayPPM+1
  3280  0F81  085D               	movf	??_displayPPM+1,w
  3281  0F82  1683               	bsf	3,5	;RP0=1, select bank1
  3282  0F83  1303               	bcf	3,6	;RP1=0, select bank1
  3283  0F84  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  3284                           
  3285                           ;mq135_module.h: 44: bufPtr += sprintf(bufPtr, "%d", ppmWhole);
  3286  0F85  30DB               	movlw	(STR_2-__stringbase)& (0+255)
  3287  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  3288  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  3289  0F88  00DC               	movwf	??_displayPPM
  3290  0F89  085C               	movf	??_displayPPM,w
  3291  0F8A  00AE               	movwf	sprintf@f
  3292  0F8B  1683               	bsf	3,5	;RP0=1, select bank1
  3293  0F8C  1303               	bcf	3,6	;RP1=0, select bank1
  3294  0F8D  0853               	movf	(displayPPM@ppmWhole+1)^(0+128),w
  3295  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  3296  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  3297  0F90  01B0               	clrf	?_sprintf+2
  3298  0F91  07B0               	addwf	?_sprintf+2,f
  3299  0F92  1683               	bsf	3,5	;RP0=1, select bank1
  3300  0F93  1303               	bcf	3,6	;RP1=0, select bank1
  3301  0F94  0852               	movf	displayPPM@ppmWhole^(0+128),w
  3302  0F95  1283               	bcf	3,5	;RP0=0, select bank0
  3303  0F96  1303               	bcf	3,6	;RP1=0, select bank0
  3304  0F97  01AF               	clrf	?_sprintf+1
  3305  0F98  07AF               	addwf	?_sprintf+1,f
  3306  0F99  1683               	bsf	3,5	;RP0=1, select bank1
  3307  0F9A  1303               	bcf	3,6	;RP1=0, select bank1
  3308  0F9B  0856               	movf	displayPPM@bufPtr^(0+128),w
  3309  0F9C  120A  118A  23F6  120A  158A  	fcall	_sprintf
  3310  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  3311  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  3312  0FA3  082E               	movf	?_sprintf,w
  3313  0FA4  00DD               	movwf	??_displayPPM+1
  3314  0FA5  085D               	movf	??_displayPPM+1,w
  3315  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  3316  0FA7  1303               	bcf	3,6	;RP1=0, select bank1
  3317  0FA8  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  3318                           
  3319                           ;mq135_module.h: 45: *bufPtr++ = '.';
  3320  0FA9  302E               	movlw	46
  3321  0FAA  1283               	bcf	3,5	;RP0=0, select bank0
  3322  0FAB  1303               	bcf	3,6	;RP1=0, select bank0
  3323  0FAC  00DC               	movwf	??_displayPPM
  3324  0FAD  1683               	bsf	3,5	;RP0=1, select bank1
  3325  0FAE  1303               	bcf	3,6	;RP1=0, select bank1
  3326  0FAF  0856               	movf	displayPPM@bufPtr^(0+128),w
  3327  0FB0  0084               	movwf	4
  3328  0FB1  1283               	bcf	3,5	;RP0=0, select bank0
  3329  0FB2  1303               	bcf	3,6	;RP1=0, select bank0
  3330  0FB3  085C               	movf	??_displayPPM,w
  3331  0FB4  1383               	bcf	3,7	;select IRP bank0
  3332  0FB5  0080               	movwf	0
  3333  0FB6  3001               	movlw	1
  3334  0FB7  00DC               	movwf	??_displayPPM
  3335  0FB8  085C               	movf	??_displayPPM,w
  3336  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  3337  0FBA  1303               	bcf	3,6	;RP1=0, select bank1
  3338  0FBB  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  3339                           
  3340                           ;mq135_module.h: 46: if (ppmFraction < 10)
  3341  0FBC  0855               	movf	(displayPPM@ppmFraction+1)^(0+128),w
  3342  0FBD  3A80               	xorlw	128
  3343  0FBE  00FF               	movwf	127
  3344  0FBF  3080               	movlw	128
  3345  0FC0  027F               	subwf	127,w
  3346  0FC1  1D03               	skipz
  3347  0FC2  2FC5               	goto	u4025
  3348  0FC3  300A               	movlw	10
  3349  0FC4  0254               	subwf	displayPPM@ppmFraction^(0+128),w
  3350  0FC5                     u4025:	
  3351  0FC5  1803               	skipnc
  3352  0FC6  2FDA               	goto	l2938
  3353                           
  3354                           ;mq135_module.h: 47: *bufPtr++ = '0';
  3355  0FC7  3030               	movlw	48
  3356  0FC8  1283               	bcf	3,5	;RP0=0, select bank0
  3357  0FC9  1303               	bcf	3,6	;RP1=0, select bank0
  3358  0FCA  00DC               	movwf	??_displayPPM
  3359  0FCB  1683               	bsf	3,5	;RP0=1, select bank1
  3360  0FCC  1303               	bcf	3,6	;RP1=0, select bank1
  3361  0FCD  0856               	movf	displayPPM@bufPtr^(0+128),w
  3362  0FCE  0084               	movwf	4
  3363  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  3364  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  3365  0FD1  085C               	movf	??_displayPPM,w
  3366  0FD2  1383               	bcf	3,7	;select IRP bank0
  3367  0FD3  0080               	movwf	0
  3368  0FD4  3001               	movlw	1
  3369  0FD5  00DC               	movwf	??_displayPPM
  3370  0FD6  085C               	movf	??_displayPPM,w
  3371  0FD7  1683               	bsf	3,5	;RP0=1, select bank1
  3372  0FD8  1303               	bcf	3,6	;RP1=0, select bank1
  3373  0FD9  07D6               	addwf	displayPPM@bufPtr^(0+128),f
  3374  0FDA                     l2938:	
  3375                           
  3376                           ;mq135_module.h: 48: sprintf(bufPtr, "%d ppm  ", ppmFraction);
  3377  0FDA  30A6               	movlw	(STR_3-__stringbase)& (0+255)
  3378  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  3379  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
  3380  0FDD  00DC               	movwf	??_displayPPM
  3381  0FDE  085C               	movf	??_displayPPM,w
  3382  0FDF  00AE               	movwf	sprintf@f
  3383  0FE0  1683               	bsf	3,5	;RP0=1, select bank1
  3384  0FE1  1303               	bcf	3,6	;RP1=0, select bank1
  3385  0FE2  0855               	movf	(displayPPM@ppmFraction+1)^(0+128),w
  3386  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  3387  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  3388  0FE5  01B0               	clrf	?_sprintf+2
  3389  0FE6  07B0               	addwf	?_sprintf+2,f
  3390  0FE7  1683               	bsf	3,5	;RP0=1, select bank1
  3391  0FE8  1303               	bcf	3,6	;RP1=0, select bank1
  3392  0FE9  0854               	movf	displayPPM@ppmFraction^(0+128),w
  3393  0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  3394  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  3395  0FEC  01AF               	clrf	?_sprintf+1
  3396  0FED  07AF               	addwf	?_sprintf+1,f
  3397  0FEE  1683               	bsf	3,5	;RP0=1, select bank1
  3398  0FEF  1303               	bcf	3,6	;RP1=0, select bank1
  3399  0FF0  0856               	movf	displayPPM@bufPtr^(0+128),w
  3400  0FF1  120A  118A  23F6  120A  158A  	fcall	_sprintf
  3401                           
  3402                           ;mq135_module.h: 49: printToLCD(strBuffer);
  3403  0FF6  30A0               	movlw	displayPPM@strBuffer& (0+255)
  3404  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  3405  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  3406  0FF9  00A2               	movwf	printToLCD@str
  3407  0FFA  3000               	movlw	0
  3408  0FFB  00A3               	movwf	printToLCD@str+1
  3409  0FFC  160A  118A  25C5   	fcall	_printToLCD
  3410  0FFF  0008               	return
  3411  1000                     __end_of_displayPPM:	
  3412                           
  3413                           	psect	text10
  3414  03F6                     __ptext10:	
  3415 ;; *************** function _sprintf *****************
  3416 ;; Defined at:
  3417 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;  sp              1    wreg     PTR unsigned char 
  3420 ;;		 -> updateState@buffer(10), debugInfo(10), displayTime@timeFormat(10), displayPPM@strBuffer(50), 
  3421 ;;  f               1   14[BANK0 ] PTR const unsigned char 
  3422 ;;		 -> STR_23(13), STR_22(14), STR_18(10), STR_17(10), 
  3423 ;;		 -> STR_16(10), STR_15(10), STR_14(10), STR_13(10), 
  3424 ;;		 -> STR_12(10), STR_11(10), STR_10(10), STR_9(10), 
  3425 ;;		 -> STR_8(10), STR_7(10), STR_6(16), STR_3(9), 
  3426 ;;		 -> STR_2(3), STR_1(6), 
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;  sp              1   34[BANK0 ] PTR unsigned char 
  3429 ;;		 -> updateState@buffer(10), debugInfo(10), displayTime@timeFormat(10), displayPPM@strBuffer(50), 
  3430 ;;  _val            4   26[BANK0 ] struct .
  3431 ;;  width           2   31[BANK0 ] int 
  3432 ;;  ccnt            2   24[BANK0 ] int 
  3433 ;;  c               1   33[BANK0 ] char 
  3434 ;;  flag            1   30[BANK0 ] unsigned char 
  3435 ;;  prec            1   23[BANK0 ] char 
  3436 ;;  ap              1   22[BANK0 ] PTR void [1]
  3437 ;;		 -> ?_sprintf(2), 
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  2   14[BANK0 ] int 
  3440 ;; Registers used:
  3441 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3447 ;;      Params:         0       5       0       0       0
  3448 ;;      Locals:         0      13       0       0       0
  3449 ;;      Temps:          0       3       0       0       0
  3450 ;;      Totals:         0      21       0       0       0
  3451 ;;Total ram usage:       21 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:    3
  3454 ;; This function calls:
  3455 ;;		___lwdiv
  3456 ;;		___lwmod
  3457 ;;		___wmul
  3458 ;;		_isdigit
  3459 ;; This function is called by:
  3460 ;;		_displayPPM
  3461 ;;		_displayTime
  3462 ;;		_setHoursStart
  3463 ;;		_setHoursEnd
  3464 ;;		_setMinutesStart
  3465 ;;		_setMinutesEnd
  3466 ;;		_updateState
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           
  3471                           ;psect for function _sprintf
  3472  03F6                     _sprintf:	
  3473                           
  3474                           ;incstack = 0
  3475                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3476                           ;sprintf@sp stored from wreg
  3477  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  3478  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  3479  03F8  00C2               	movwf	sprintf@sp
  3480                           
  3481                           ;doprnt.c: 494: va_list ap;
  3482                           ;doprnt.c: 499: signed char c;
  3483                           ;doprnt.c: 501: int width;
  3484                           ;doprnt.c: 506: signed char prec;
  3485                           ;doprnt.c: 508: unsigned char flag;
  3486                           ;doprnt.c: 510: int ccnt = 0;
  3487  03F9  01B8               	clrf	sprintf@ccnt
  3488  03FA  01B9               	clrf	sprintf@ccnt+1
  3489                           
  3490                           ;doprnt.c: 527: union {
  3491                           ;doprnt.c: 528: unsigned int _val;
  3492                           ;doprnt.c: 529: struct {
  3493                           ;doprnt.c: 530: const char * _cp;
  3494                           ;doprnt.c: 531: unsigned _len;
  3495                           ;doprnt.c: 532: } _str;
  3496                           ;doprnt.c: 533: } _val;
  3497                           ;doprnt.c: 542: *ap = __va_start();
  3498  03FB  302F               	movlw	(?_sprintf+1)& (0+255)
  3499  03FC  00B3               	movwf	??_sprintf
  3500  03FD  0833               	movf	??_sprintf,w
  3501  03FE  00B6               	movwf	sprintf@ap
  3502  03FF                     l2898:	
  3503                           ;doprnt.c: 545: while(c = *f++) {
  3504                           
  3505  03FF  3001               	movlw	1
  3506  0400  1283               	bcf	3,5	;RP0=0, select bank0
  3507  0401  1303               	bcf	3,6	;RP1=0, select bank0
  3508  0402  07AE               	addwf	sprintf@f,f
  3509  0403  30FF               	movlw	-1
  3510  0404  072E               	addwf	sprintf@f,w
  3511  0405  0084               	movwf	4
  3512  0406  120A  158A  200A  120A  118A  	fcall	stringdir
  3513  040B  00B3               	movwf	??_sprintf
  3514  040C  0833               	movf	??_sprintf,w
  3515  040D  00C1               	movwf	sprintf@c
  3516  040E  08C1               	movf	sprintf@c,f
  3517  040F  1903               	btfsc	3,2
  3518  0410  2DCC               	goto	l2900
  3519                           
  3520                           ;doprnt.c: 547: if(c != '%')
  3521  0411  0841               	movf	sprintf@c,w
  3522  0412  3A25               	xorlw	37
  3523  0413  1903               	skipnz
  3524  0414  2C27               	goto	l2792
  3525                           
  3526                           ;doprnt.c: 549: {
  3527                           ;doprnt.c: 550: ((*sp++ = (c)),(++ccnt));
  3528  0415  0841               	movf	sprintf@c,w
  3529  0416  00B3               	movwf	??_sprintf
  3530  0417  0842               	movf	sprintf@sp,w
  3531  0418  0084               	movwf	4
  3532  0419  0833               	movf	??_sprintf,w
  3533  041A  1383               	bcf	3,7	;select IRP bank0
  3534  041B  0080               	movwf	0
  3535  041C  3001               	movlw	1
  3536  041D  00B3               	movwf	??_sprintf
  3537  041E  0833               	movf	??_sprintf,w
  3538  041F  07C2               	addwf	sprintf@sp,f
  3539  0420  3001               	movlw	1
  3540  0421  07B8               	addwf	sprintf@ccnt,f
  3541  0422  1803               	skipnc
  3542  0423  0AB9               	incf	sprintf@ccnt+1,f
  3543  0424  3000               	movlw	0
  3544  0425  07B9               	addwf	sprintf@ccnt+1,f
  3545                           
  3546                           ;doprnt.c: 551: continue;
  3547  0426  2BFF               	goto	l2898
  3548  0427                     l2792:	
  3549                           
  3550                           ;doprnt.c: 552: }
  3551                           ;doprnt.c: 555: width = 0;
  3552  0427  01BF               	clrf	sprintf@width
  3553  0428  01C0               	clrf	sprintf@width+1
  3554                           
  3555                           ;doprnt.c: 557: flag = 0;
  3556  0429  01BE               	clrf	sprintf@flag
  3557                           
  3558                           ;doprnt.c: 560: switch(*f) {
  3559                           
  3560                           ;doprnt.c: 559: for(;;) {
  3561  042A  2C30               	goto	l2798
  3562  042B                     l299:	
  3563                           ;doprnt.c: 588: case '0':
  3564                           
  3565                           
  3566                           ;doprnt.c: 589: flag |= 0x04;
  3567  042B  153E               	bsf	sprintf@flag,2
  3568                           
  3569                           ;doprnt.c: 590: f++;
  3570  042C  3001               	movlw	1
  3571  042D  00B3               	movwf	??_sprintf
  3572  042E  0833               	movf	??_sprintf,w
  3573  042F  07AE               	addwf	sprintf@f,f
  3574  0430                     l2798:	
  3575                           ;doprnt.c: 593: }
  3576                           
  3577                           ;doprnt.c: 591: continue;
  3578                           
  3579  0430  082E               	movf	sprintf@f,w
  3580  0431  0084               	movwf	4
  3581  0432  120A  158A  200A  120A  118A  	fcall	stringdir
  3582                           
  3583                           ; Switch size 1, requested type "space"
  3584                           ; Number of cases is 1, Range of values is 48 to 48
  3585                           ; switch strategies available:
  3586                           ; Name         Instructions Cycles
  3587                           ; simple_byte            4     3 (average)
  3588                           ; direct_byte           14    11 (fixed)
  3589                           ; jumptable            263     9 (fixed)
  3590                           ;	Chosen strategy is simple_byte
  3591  0437  3A30               	xorlw	48	; case 48
  3592  0438  1903               	skipnz
  3593  0439  2C2B               	goto	l299
  3594  043A  2C3B               	goto	l2800
  3595  043B                     l2800:	
  3596                           ;doprnt.c: 595: }
  3597                           
  3598                           ;doprnt.c: 594: break;
  3599                           
  3600                           
  3601                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  3602  043B  082E               	movf	sprintf@f,w
  3603  043C  0084               	movwf	4
  3604  043D  120A  158A  200A  120A  118A  	fcall	stringdir
  3605  0442  160A  118A  2408  120A  118A  	fcall	_isdigit
  3606  0447  1C03               	btfss	3,0
  3607  0448  2C8B               	goto	l2814
  3608                           
  3609                           ;doprnt.c: 607: width = 0;
  3610  0449  1283               	bcf	3,5	;RP0=0, select bank0
  3611  044A  1303               	bcf	3,6	;RP1=0, select bank0
  3612  044B  01BF               	clrf	sprintf@width
  3613  044C  01C0               	clrf	sprintf@width+1
  3614  044D                     l2804:	
  3615                           ;doprnt.c: 608: do {
  3616                           
  3617                           
  3618                           ;doprnt.c: 609: width *= 10;
  3619  044D  300A               	movlw	10
  3620  044E  1283               	bcf	3,5	;RP0=0, select bank0
  3621  044F  1303               	bcf	3,6	;RP1=0, select bank0
  3622  0450  00A0               	movwf	___wmul@multiplier
  3623  0451  3000               	movlw	0
  3624  0452  00A1               	movwf	___wmul@multiplier+1
  3625  0453  0840               	movf	sprintf@width+1,w
  3626  0454  01A3               	clrf	___wmul@multiplicand+1
  3627  0455  07A3               	addwf	___wmul@multiplicand+1,f
  3628  0456  083F               	movf	sprintf@width,w
  3629  0457  01A2               	clrf	___wmul@multiplicand
  3630  0458  07A2               	addwf	___wmul@multiplicand,f
  3631  0459  160A  118A  2575  120A  118A  	fcall	___wmul
  3632  045E  1283               	bcf	3,5	;RP0=0, select bank0
  3633  045F  1303               	bcf	3,6	;RP1=0, select bank0
  3634  0460  0821               	movf	?___wmul+1,w
  3635  0461  01C0               	clrf	sprintf@width+1
  3636  0462  07C0               	addwf	sprintf@width+1,f
  3637  0463  0820               	movf	?___wmul,w
  3638  0464  01BF               	clrf	sprintf@width
  3639  0465  07BF               	addwf	sprintf@width,f
  3640                           
  3641                           ;doprnt.c: 610: width += *f++ - '0';
  3642  0466  082E               	movf	sprintf@f,w
  3643  0467  0084               	movwf	4
  3644  0468  120A  158A  200A  120A  118A  	fcall	stringdir
  3645  046D  3ED0               	addlw	208
  3646  046E  00B3               	movwf	??_sprintf
  3647  046F  30FF               	movlw	255
  3648  0470  1803               	skipnc
  3649  0471  3000               	movlw	0
  3650  0472  00B4               	movwf	??_sprintf+1
  3651  0473  0833               	movf	??_sprintf,w
  3652  0474  07BF               	addwf	sprintf@width,f
  3653  0475  1803               	skipnc
  3654  0476  0AC0               	incf	sprintf@width+1,f
  3655  0477  0834               	movf	??_sprintf+1,w
  3656  0478  07C0               	addwf	sprintf@width+1,f
  3657  0479  3001               	movlw	1
  3658  047A  00B3               	movwf	??_sprintf
  3659  047B  0833               	movf	??_sprintf,w
  3660  047C  07AE               	addwf	sprintf@f,f
  3661                           
  3662                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  3663  047D  082E               	movf	sprintf@f,w
  3664  047E  0084               	movwf	4
  3665  047F  120A  158A  200A  120A  118A  	fcall	stringdir
  3666  0484  160A  118A  2408  120A  118A  	fcall	_isdigit
  3667  0489  1803               	btfsc	3,0
  3668  048A  2C4D               	goto	l2804
  3669  048B                     l2814:	
  3670                           ;doprnt.c: 831: }
  3671                           
  3672                           ;doprnt.c: 822: continue;
  3673                           
  3674                           ;doprnt.c: 811: default:
  3675                           
  3676                           ;doprnt.c: 707: case 'i':
  3677                           ;doprnt.c: 708: break;
  3678                           
  3679                           ;doprnt.c: 706: case 'd':
  3680                           
  3681                           ;doprnt.c: 647: goto alldone;
  3682                           
  3683                           ;doprnt.c: 646: case 0:
  3684                           
  3685                           ;doprnt.c: 617: }
  3686                           ;doprnt.c: 644: switch(c = *f++) {
  3687                           
  3688  048B  3001               	movlw	1
  3689  048C  1283               	bcf	3,5	;RP0=0, select bank0
  3690  048D  1303               	bcf	3,6	;RP1=0, select bank0
  3691  048E  07AE               	addwf	sprintf@f,f
  3692  048F  30FF               	movlw	-1
  3693  0490  072E               	addwf	sprintf@f,w
  3694  0491  0084               	movwf	4
  3695  0492  120A  158A  200A  120A  118A  	fcall	stringdir
  3696  0497  00C1               	movwf	sprintf@c
  3697                           
  3698                           ; Switch size 1, requested type "space"
  3699                           ; Number of cases is 3, Range of values is 0 to 105
  3700                           ; switch strategies available:
  3701                           ; Name         Instructions Cycles
  3702                           ; simple_byte           10     6 (average)
  3703                           ; jumptable            260     6 (fixed)
  3704                           ;	Chosen strategy is simple_byte
  3705  0498  3A00               	xorlw	0	; case 0
  3706  0499  1903               	skipnz
  3707  049A  2DCC               	goto	l2900
  3708  049B  3A64               	xorlw	100	; case 100
  3709  049C  1903               	skipnz
  3710  049D  2CA2               	goto	l2816
  3711  049E  3A0D               	xorlw	13	; case 105
  3712  049F  1903               	skipnz
  3713  04A0  2CA2               	goto	l2816
  3714  04A1  2BFF               	goto	l2898
  3715  04A2                     l2816:	
  3716                           
  3717                           ;doprnt.c: 1262: {
  3718                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3719  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  3720  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  3721  04A4  0836               	movf	sprintf@ap,w
  3722  04A5  0084               	movwf	4
  3723  04A6  1383               	bcf	3,7	;select IRP bank0
  3724  04A7  0800               	movf	0,w
  3725  04A8  00BA               	movwf	sprintf@_val
  3726  04A9  0A84               	incf	4,f
  3727  04AA  0800               	movf	0,w
  3728  04AB  00BB               	movwf	sprintf@_val+1
  3729  04AC  3002               	movlw	2
  3730  04AD  00B3               	movwf	??_sprintf
  3731  04AE  0833               	movf	??_sprintf,w
  3732  04AF  07B6               	addwf	sprintf@ap,f
  3733                           
  3734                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  3735  04B0  1FBB               	btfss	sprintf@_val+1,7
  3736  04B1  2CBB               	goto	l2826
  3737                           
  3738                           ;doprnt.c: 1271: flag |= 0x03;
  3739  04B2  3003               	movlw	3
  3740  04B3  00B3               	movwf	??_sprintf
  3741  04B4  0833               	movf	??_sprintf,w
  3742  04B5  04BE               	iorwf	sprintf@flag,f
  3743                           
  3744                           ;doprnt.c: 1272: _val._val = -_val._val;
  3745  04B6  09BA               	comf	sprintf@_val,f
  3746  04B7  09BB               	comf	sprintf@_val+1,f
  3747  04B8  0ABA               	incf	sprintf@_val,f
  3748  04B9  1903               	skipnz
  3749  04BA  0ABB               	incf	sprintf@_val+1,f
  3750  04BB                     l2826:	
  3751                           
  3752                           ;doprnt.c: 1273: }
  3753                           ;doprnt.c: 1275: }
  3754                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3755  04BB  01C1               	clrf	sprintf@c
  3756  04BC  0AC1               	incf	sprintf@c,f
  3757  04BD  0841               	movf	sprintf@c,w
  3758  04BE  3A05               	xorlw	5
  3759  04BF  1903               	btfsc	3,2
  3760  04C0  2CE2               	goto	l2838
  3761  04C1                     l2830:	
  3762                           
  3763                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  3764  04C1  0841               	movf	sprintf@c,w
  3765  04C2  00B3               	movwf	??_sprintf
  3766  04C3  0733               	addwf	??_sprintf,w
  3767  04C4  3E01               	addlw	low (_dpowers-__stringbase)
  3768  04C5  0084               	movwf	4
  3769  04C6  120A  158A  200A  120A  118A  	fcall	stringdir
  3770  04CB  00B4               	movwf	??_sprintf+1
  3771  04CC  120A  158A  200A  120A  118A  	fcall	stringdir
  3772  04D1  00B5               	movwf	??_sprintf+2
  3773  04D2  0835               	movf	??_sprintf+2,w
  3774  04D3  023B               	subwf	sprintf@_val+1,w
  3775  04D4  1D03               	skipz
  3776  04D5  2CD8               	goto	u3875
  3777  04D6  0834               	movf	??_sprintf+1,w
  3778  04D7  023A               	subwf	sprintf@_val,w
  3779  04D8                     u3875:	
  3780  04D8  1C03               	btfss	3,0
  3781  04D9  2CE2               	goto	l2838
  3782                           
  3783                           ;doprnt.c: 1316: break;
  3784  04DA  3001               	movlw	1
  3785  04DB  00B3               	movwf	??_sprintf
  3786  04DC  0833               	movf	??_sprintf,w
  3787  04DD  07C1               	addwf	sprintf@c,f
  3788  04DE  0841               	movf	sprintf@c,w
  3789  04DF  3A05               	xorlw	5
  3790  04E0  1D03               	skipz
  3791  04E1  2CC1               	goto	l2830
  3792  04E2                     l2838:	
  3793                           
  3794                           ;doprnt.c: 1354: if(width && flag & 0x03)
  3795  04E2  0840               	movf	sprintf@width+1,w
  3796  04E3  043F               	iorwf	sprintf@width,w
  3797  04E4  1903               	skipnz
  3798  04E5  2CF0               	goto	l317
  3799  04E6  083E               	movf	sprintf@flag,w
  3800  04E7  3903               	andlw	3
  3801  04E8  1903               	btfsc	3,2
  3802  04E9  2CF0               	goto	l317
  3803                           
  3804                           ;doprnt.c: 1355: width--;
  3805  04EA  30FF               	movlw	255
  3806  04EB  07BF               	addwf	sprintf@width,f
  3807  04EC  1803               	skipnc
  3808  04ED  0AC0               	incf	sprintf@width+1,f
  3809  04EE  30FF               	movlw	255
  3810  04EF  07C0               	addwf	sprintf@width+1,f
  3811  04F0                     l317:	
  3812                           
  3813                           ;doprnt.c: 1390: if(width > c)
  3814  04F0  0841               	movf	sprintf@c,w
  3815  04F1  00B3               	movwf	??_sprintf
  3816  04F2  01B4               	clrf	??_sprintf+1
  3817  04F3  1BB3               	btfsc	??_sprintf,7
  3818  04F4  03B4               	decf	??_sprintf+1,f
  3819  04F5  0834               	movf	??_sprintf+1,w
  3820  04F6  3A80               	xorlw	128
  3821  04F7  00B5               	movwf	??_sprintf+2
  3822  04F8  0840               	movf	sprintf@width+1,w
  3823  04F9  3A80               	xorlw	128
  3824  04FA  0235               	subwf	??_sprintf+2,w
  3825  04FB  1D03               	skipz
  3826  04FC  2CFF               	goto	u3915
  3827  04FD  083F               	movf	sprintf@width,w
  3828  04FE  0233               	subwf	??_sprintf,w
  3829  04FF                     u3915:	
  3830  04FF  1803               	skipnc
  3831  0500  2D0F               	goto	l2846
  3832                           
  3833                           ;doprnt.c: 1391: width -= c;
  3834  0501  1283               	bcf	3,5	;RP0=0, select bank0
  3835  0502  1303               	bcf	3,6	;RP1=0, select bank0
  3836  0503  0841               	movf	sprintf@c,w
  3837  0504  00B3               	movwf	??_sprintf
  3838  0505  01B4               	clrf	??_sprintf+1
  3839  0506  1BB3               	btfsc	??_sprintf,7
  3840  0507  03B4               	decf	??_sprintf+1,f
  3841  0508  0833               	movf	??_sprintf,w
  3842  0509  02BF               	subwf	sprintf@width,f
  3843  050A  0834               	movf	??_sprintf+1,w
  3844  050B  1C03               	skipc
  3845  050C  03C0               	decf	sprintf@width+1,f
  3846  050D  02C0               	subwf	sprintf@width+1,f
  3847  050E  2D13               	goto	l2848
  3848  050F                     l2846:	
  3849                           
  3850                           ;doprnt.c: 1392: else
  3851                           ;doprnt.c: 1393: width = 0;
  3852  050F  1283               	bcf	3,5	;RP0=0, select bank0
  3853  0510  1303               	bcf	3,6	;RP1=0, select bank0
  3854  0511  01BF               	clrf	sprintf@width
  3855  0512  01C0               	clrf	sprintf@width+1
  3856  0513                     l2848:	
  3857                           
  3858                           ;doprnt.c: 1396: if(flag & 0x04) {
  3859  0513  1D3E               	btfss	sprintf@flag,2
  3860  0514  2D46               	goto	l2868
  3861                           
  3862                           ;doprnt.c: 1401: if(flag & 0x03)
  3863  0515  083E               	movf	sprintf@flag,w
  3864  0516  3903               	andlw	3
  3865  0517  1903               	btfsc	3,2
  3866  0518  2D2A               	goto	l2858
  3867                           
  3868                           ;doprnt.c: 1402: ((*sp++ = ('-')),(++ccnt));
  3869  0519  302D               	movlw	45
  3870  051A  00B3               	movwf	??_sprintf
  3871  051B  0842               	movf	sprintf@sp,w
  3872  051C  0084               	movwf	4
  3873  051D  0833               	movf	??_sprintf,w
  3874  051E  1383               	bcf	3,7	;select IRP bank0
  3875  051F  0080               	movwf	0
  3876  0520  3001               	movlw	1
  3877  0521  00B3               	movwf	??_sprintf
  3878  0522  0833               	movf	??_sprintf,w
  3879  0523  07C2               	addwf	sprintf@sp,f
  3880  0524  3001               	movlw	1
  3881  0525  07B8               	addwf	sprintf@ccnt,f
  3882  0526  1803               	skipnc
  3883  0527  0AB9               	incf	sprintf@ccnt+1,f
  3884  0528  3000               	movlw	0
  3885  0529  07B9               	addwf	sprintf@ccnt+1,f
  3886  052A                     l2858:	
  3887                           
  3888                           ;doprnt.c: 1424: if(width)
  3889  052A  0840               	movf	sprintf@width+1,w
  3890  052B  043F               	iorwf	sprintf@width,w
  3891  052C  1903               	skipnz
  3892  052D  2D7A               	goto	l2886
  3893                           
  3894                           ;doprnt.c: 1426: ((*sp++ = ('0')),(++ccnt));
  3895                           
  3896                           ;doprnt.c: 1425: do
  3897  052E  3030               	movlw	48
  3898  052F  00B3               	movwf	??_sprintf
  3899  0530  0842               	movf	sprintf@sp,w
  3900  0531  0084               	movwf	4
  3901  0532  0833               	movf	??_sprintf,w
  3902  0533  1383               	bcf	3,7	;select IRP bank0
  3903  0534  0080               	movwf	0
  3904  0535  3001               	movlw	1
  3905  0536  00B3               	movwf	??_sprintf
  3906  0537  0833               	movf	??_sprintf,w
  3907  0538  07C2               	addwf	sprintf@sp,f
  3908  0539  3001               	movlw	1
  3909  053A  07B8               	addwf	sprintf@ccnt,f
  3910  053B  1803               	skipnc
  3911  053C  0AB9               	incf	sprintf@ccnt+1,f
  3912  053D  3000               	movlw	0
  3913  053E  07B9               	addwf	sprintf@ccnt+1,f
  3914                           
  3915                           ;doprnt.c: 1427: while(--width);
  3916  053F  30FF               	movlw	255
  3917  0540  07BF               	addwf	sprintf@width,f
  3918  0541  1803               	skipnc
  3919  0542  0AC0               	incf	sprintf@width+1,f
  3920  0543  30FF               	movlw	255
  3921  0544  07C0               	addwf	sprintf@width+1,f
  3922  0545  2D2A               	goto	l2858
  3923  0546                     l2868:	
  3924                           ;doprnt.c: 1429: } else
  3925                           
  3926                           
  3927                           ;doprnt.c: 1431: {
  3928                           ;doprnt.c: 1433: if(width
  3929                           ;doprnt.c: 1437: )
  3930  0546  0840               	movf	sprintf@width+1,w
  3931  0547  043F               	iorwf	sprintf@width,w
  3932  0548  1903               	skipnz
  3933  0549  2D65               	goto	l2878
  3934  054A                     l2870:	
  3935                           ;doprnt.c: 1438: do
  3936                           
  3937                           
  3938                           ;doprnt.c: 1439: ((*sp++ = (' ')),(++ccnt));
  3939  054A  3020               	movlw	32
  3940  054B  00B3               	movwf	??_sprintf
  3941  054C  0842               	movf	sprintf@sp,w
  3942  054D  0084               	movwf	4
  3943  054E  0833               	movf	??_sprintf,w
  3944  054F  1383               	bcf	3,7	;select IRP bank0
  3945  0550  0080               	movwf	0
  3946  0551  3001               	movlw	1
  3947  0552  00B3               	movwf	??_sprintf
  3948  0553  0833               	movf	??_sprintf,w
  3949  0554  07C2               	addwf	sprintf@sp,f
  3950  0555  3001               	movlw	1
  3951  0556  07B8               	addwf	sprintf@ccnt,f
  3952  0557  1803               	skipnc
  3953  0558  0AB9               	incf	sprintf@ccnt+1,f
  3954  0559  3000               	movlw	0
  3955  055A  07B9               	addwf	sprintf@ccnt+1,f
  3956                           
  3957                           ;doprnt.c: 1440: while(--width);
  3958  055B  30FF               	movlw	255
  3959  055C  07BF               	addwf	sprintf@width,f
  3960  055D  1803               	skipnc
  3961  055E  0AC0               	incf	sprintf@width+1,f
  3962  055F  30FF               	movlw	255
  3963  0560  07C0               	addwf	sprintf@width+1,f
  3964  0561  0840               	movf	sprintf@width+1,w
  3965  0562  043F               	iorwf	sprintf@width,w
  3966  0563  1D03               	skipz
  3967  0564  2D4A               	goto	l2870
  3968  0565                     l2878:	
  3969                           
  3970                           ;doprnt.c: 1447: if(flag & 0x03)
  3971  0565  083E               	movf	sprintf@flag,w
  3972  0566  3903               	andlw	3
  3973  0567  1903               	btfsc	3,2
  3974  0568  2D7A               	goto	l2886
  3975                           
  3976                           ;doprnt.c: 1448: ((*sp++ = ('-')),(++ccnt));
  3977  0569  302D               	movlw	45
  3978  056A  00B3               	movwf	??_sprintf
  3979  056B  0842               	movf	sprintf@sp,w
  3980  056C  0084               	movwf	4
  3981  056D  0833               	movf	??_sprintf,w
  3982  056E  1383               	bcf	3,7	;select IRP bank0
  3983  056F  0080               	movwf	0
  3984  0570  3001               	movlw	1
  3985  0571  00B3               	movwf	??_sprintf
  3986  0572  0833               	movf	??_sprintf,w
  3987  0573  07C2               	addwf	sprintf@sp,f
  3988  0574  3001               	movlw	1
  3989  0575  07B8               	addwf	sprintf@ccnt,f
  3990  0576  1803               	skipnc
  3991  0577  0AB9               	incf	sprintf@ccnt+1,f
  3992  0578  3000               	movlw	0
  3993  0579  07B9               	addwf	sprintf@ccnt+1,f
  3994  057A                     l2886:	
  3995                           
  3996                           ;doprnt.c: 1478: }
  3997                           ;doprnt.c: 1481: prec = c;
  3998  057A  0841               	movf	sprintf@c,w
  3999  057B  00B3               	movwf	??_sprintf
  4000  057C  0833               	movf	??_sprintf,w
  4001  057D  00B7               	movwf	sprintf@prec
  4002  057E                     l2896:	
  4003                           ;doprnt.c: 1483: while(prec--) {
  4004                           
  4005  057E  30FF               	movlw	-1
  4006  057F  00B3               	movwf	??_sprintf
  4007  0580  0833               	movf	??_sprintf,w
  4008  0581  07B7               	addwf	sprintf@prec,f
  4009  0582  0837               	movf	sprintf@prec,w
  4010  0583  3AFF               	xorlw	-1
  4011  0584  1903               	btfsc	3,2
  4012  0585  2BFF               	goto	l2898
  4013                           
  4014                           ;doprnt.c: 1487: {
  4015                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4016  0586  300A               	movlw	10
  4017  0587  00A8               	movwf	___lwmod@divisor
  4018  0588  3000               	movlw	0
  4019  0589  00A9               	movwf	___lwmod@divisor+1
  4020  058A  0837               	movf	sprintf@prec,w
  4021  058B  00B3               	movwf	??_sprintf
  4022  058C  0733               	addwf	??_sprintf,w
  4023  058D  3E01               	addlw	low (_dpowers-__stringbase)
  4024  058E  0084               	movwf	4
  4025  058F  120A  158A  200A  120A  118A  	fcall	stringdir
  4026  0594  00A0               	movwf	___lwdiv@divisor
  4027  0595  120A  158A  200A  120A  118A  	fcall	stringdir
  4028  059A  00A1               	movwf	___lwdiv@divisor+1
  4029  059B  083B               	movf	sprintf@_val+1,w
  4030  059C  01A3               	clrf	___lwdiv@dividend+1
  4031  059D  07A3               	addwf	___lwdiv@dividend+1,f
  4032  059E  083A               	movf	sprintf@_val,w
  4033  059F  01A2               	clrf	___lwdiv@dividend
  4034  05A0  07A2               	addwf	___lwdiv@dividend,f
  4035  05A1  160A  118A  265A  120A  118A  	fcall	___lwdiv
  4036  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  4037  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  4038  05A8  0821               	movf	?___lwdiv+1,w
  4039  05A9  01AB               	clrf	___lwmod@dividend+1
  4040  05AA  07AB               	addwf	___lwmod@dividend+1,f
  4041  05AB  0820               	movf	?___lwdiv,w
  4042  05AC  01AA               	clrf	___lwmod@dividend
  4043  05AD  07AA               	addwf	___lwmod@dividend,f
  4044  05AE  160A  118A  2624  120A  118A  	fcall	___lwmod
  4045  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  4046  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  4047  05B5  0828               	movf	?___lwmod,w
  4048  05B6  3E30               	addlw	48
  4049  05B7  00B4               	movwf	??_sprintf+1
  4050  05B8  0834               	movf	??_sprintf+1,w
  4051  05B9  00C1               	movwf	sprintf@c
  4052                           
  4053                           ;doprnt.c: 1532: }
  4054                           ;doprnt.c: 1533: ((*sp++ = (c)),(++ccnt));
  4055  05BA  0841               	movf	sprintf@c,w
  4056  05BB  00B3               	movwf	??_sprintf
  4057  05BC  0842               	movf	sprintf@sp,w
  4058  05BD  0084               	movwf	4
  4059  05BE  0833               	movf	??_sprintf,w
  4060  05BF  1383               	bcf	3,7	;select IRP bank0
  4061  05C0  0080               	movwf	0
  4062  05C1  3001               	movlw	1
  4063  05C2  00B3               	movwf	??_sprintf
  4064  05C3  0833               	movf	??_sprintf,w
  4065  05C4  07C2               	addwf	sprintf@sp,f
  4066  05C5  3001               	movlw	1
  4067  05C6  07B8               	addwf	sprintf@ccnt,f
  4068  05C7  1803               	skipnc
  4069  05C8  0AB9               	incf	sprintf@ccnt+1,f
  4070  05C9  3000               	movlw	0
  4071  05CA  07B9               	addwf	sprintf@ccnt+1,f
  4072  05CB  2D7E               	goto	l2896
  4073  05CC                     l2900:	
  4074                           ;doprnt.c: 1534: }
  4075                           ;doprnt.c: 1542: }
  4076                           ;doprnt.c: 1544: alldone:
  4077                           
  4078                           
  4079                           ;doprnt.c: 1547: *sp = 0;
  4080  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  4081  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  4082  05CE  0842               	movf	sprintf@sp,w
  4083  05CF  0084               	movwf	4
  4084  05D0  1383               	bcf	3,7	;select IRP bank0
  4085  05D1  0180               	clrf	0
  4086                           
  4087                           ;doprnt.c: 1549: return ccnt;
  4088  05D2  0839               	movf	sprintf@ccnt+1,w
  4089  05D3  01AF               	clrf	?_sprintf+1
  4090  05D4  07AF               	addwf	?_sprintf+1,f
  4091  05D5  0838               	movf	sprintf@ccnt,w
  4092  05D6  01AE               	clrf	?_sprintf
  4093  05D7  07AE               	addwf	?_sprintf,f
  4094  05D8  0008               	return
  4095  05D9                     __end_of_sprintf:	
  4096                           
  4097                           	psect	text11
  4098  1408                     __ptext11:	
  4099 ;; *************** function _isdigit *****************
  4100 ;; Defined at:
  4101 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;  c               1    wreg     unsigned char 
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;  c               1    1[BANK0 ] unsigned char 
  4106 ;; Return value:  Size  Location     Type
  4107 ;;		None               void
  4108 ;; Registers used:
  4109 ;;		wreg, status,2, status,0
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4115 ;;      Params:         0       0       0       0       0
  4116 ;;      Locals:         0       2       0       0       0
  4117 ;;      Temps:          0       0       0       0       0
  4118 ;;      Totals:         0       2       0       0       0
  4119 ;;Total ram usage:        2 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    2
  4122 ;; This function calls:
  4123 ;;		Nothing
  4124 ;; This function is called by:
  4125 ;;		_sprintf
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           
  4130                           ;psect for function _isdigit
  4131  1408                     _isdigit:	
  4132                           
  4133                           ;incstack = 0
  4134                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4135                           ;isdigit@c stored from wreg
  4136  1408  1283               	bcf	3,5	;RP0=0, select bank0
  4137  1409  1303               	bcf	3,6	;RP1=0, select bank0
  4138  140A  00A1               	movwf	isdigit@c
  4139  140B  01A0               	clrf	_isdigit$426
  4140  140C  303A               	movlw	58
  4141  140D  0221               	subwf	isdigit@c,w
  4142  140E  1803               	skipnc
  4143  140F  2C16               	goto	l2756
  4144  1410  3030               	movlw	48
  4145  1411  0221               	subwf	isdigit@c,w
  4146  1412  1C03               	skipc
  4147  1413  2C16               	goto	l2756
  4148  1414  01A0               	clrf	_isdigit$426
  4149  1415  0AA0               	incf	_isdigit$426,f
  4150  1416                     l2756:	
  4151  1416  0C20               	rrf	_isdigit$426,w
  4152  1417  0008               	return
  4153  1418                     __end_of_isdigit:	
  4154                           
  4155                           	psect	text12
  4156  1575                     __ptext12:	
  4157 ;; *************** function ___wmul *****************
  4158 ;; Defined at:
  4159 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4162 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;  product         2    4[BANK0 ] unsigned int 
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  2    0[BANK0 ] unsigned int 
  4167 ;; Registers used:
  4168 ;;		wreg, status,2, status,0
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4174 ;;      Params:         0       4       0       0       0
  4175 ;;      Locals:         0       2       0       0       0
  4176 ;;      Temps:          0       0       0       0       0
  4177 ;;      Totals:         0       6       0       0       0
  4178 ;;Total ram usage:        6 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    2
  4181 ;; This function calls:
  4182 ;;		Nothing
  4183 ;; This function is called by:
  4184 ;;		_sprintf
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           
  4189                           ;psect for function ___wmul
  4190  1575                     ___wmul:	
  4191                           
  4192                           ;incstack = 0
  4193                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4194  1575  1283               	bcf	3,5	;RP0=0, select bank0
  4195  1576  1303               	bcf	3,6	;RP1=0, select bank0
  4196  1577  01A4               	clrf	___wmul@product
  4197  1578  01A5               	clrf	___wmul@product+1
  4198  1579                     l2762:	
  4199  1579  1C20               	btfss	___wmul@multiplier,0
  4200  157A  2D81               	goto	l418
  4201  157B  0822               	movf	___wmul@multiplicand,w
  4202  157C  07A4               	addwf	___wmul@product,f
  4203  157D  1803               	skipnc
  4204  157E  0AA5               	incf	___wmul@product+1,f
  4205  157F  0823               	movf	___wmul@multiplicand+1,w
  4206  1580  07A5               	addwf	___wmul@product+1,f
  4207  1581                     l418:	
  4208  1581  3001               	movlw	1
  4209  1582                     u3785:	
  4210  1582  1003               	clrc
  4211  1583  0DA2               	rlf	___wmul@multiplicand,f
  4212  1584  0DA3               	rlf	___wmul@multiplicand+1,f
  4213  1585  3EFF               	addlw	-1
  4214  1586  1D03               	skipz
  4215  1587  2D82               	goto	u3785
  4216  1588  3001               	movlw	1
  4217  1589                     u3795:	
  4218  1589  1003               	clrc
  4219  158A  0CA1               	rrf	___wmul@multiplier+1,f
  4220  158B  0CA0               	rrf	___wmul@multiplier,f
  4221  158C  3EFF               	addlw	-1
  4222  158D  1D03               	skipz
  4223  158E  2D89               	goto	u3795
  4224  158F  0821               	movf	___wmul@multiplier+1,w
  4225  1590  0420               	iorwf	___wmul@multiplier,w
  4226  1591  1D03               	skipz
  4227  1592  2D79               	goto	l2762
  4228  1593  0825               	movf	___wmul@product+1,w
  4229  1594  01A1               	clrf	?___wmul+1
  4230  1595  07A1               	addwf	?___wmul+1,f
  4231  1596  0824               	movf	___wmul@product,w
  4232  1597  01A0               	clrf	?___wmul
  4233  1598  07A0               	addwf	?___wmul,f
  4234  1599  0008               	return
  4235  159A                     __end_of___wmul:	
  4236                           
  4237                           	psect	text13
  4238  1624                     __ptext13:	
  4239 ;; *************** function ___lwmod *****************
  4240 ;; Defined at:
  4241 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;  divisor         2    8[BANK0 ] unsigned int 
  4244 ;;  dividend        2   10[BANK0 ] unsigned int 
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;  counter         1   13[BANK0 ] unsigned char 
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  2    8[BANK0 ] unsigned int 
  4249 ;; Registers used:
  4250 ;;		wreg, status,2, status,0
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4256 ;;      Params:         0       4       0       0       0
  4257 ;;      Locals:         0       1       0       0       0
  4258 ;;      Temps:          0       1       0       0       0
  4259 ;;      Totals:         0       6       0       0       0
  4260 ;;Total ram usage:        6 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:    2
  4263 ;; This function calls:
  4264 ;;		Nothing
  4265 ;; This function is called by:
  4266 ;;		_sprintf
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           
  4271                           ;psect for function ___lwmod
  4272  1624                     ___lwmod:	
  4273                           
  4274                           ;incstack = 0
  4275                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4276  1624  1283               	bcf	3,5	;RP0=0, select bank0
  4277  1625  1303               	bcf	3,6	;RP1=0, select bank0
  4278  1626  0829               	movf	___lwmod@divisor+1,w
  4279  1627  0428               	iorwf	___lwmod@divisor,w
  4280  1628  1903               	skipnz
  4281  1629  2E53               	goto	l1898
  4282  162A  01AD               	clrf	___lwmod@counter
  4283  162B  0AAD               	incf	___lwmod@counter,f
  4284  162C                     l1888:	
  4285  162C  1BA9               	btfsc	___lwmod@divisor+1,7
  4286  162D  2E3A               	goto	l1890
  4287  162E  3001               	movlw	1
  4288  162F                     u2135:	
  4289  162F  1003               	clrc
  4290  1630  0DA8               	rlf	___lwmod@divisor,f
  4291  1631  0DA9               	rlf	___lwmod@divisor+1,f
  4292  1632  3EFF               	addlw	-1
  4293  1633  1D03               	skipz
  4294  1634  2E2F               	goto	u2135
  4295  1635  3001               	movlw	1
  4296  1636  00AC               	movwf	??___lwmod
  4297  1637  082C               	movf	??___lwmod,w
  4298  1638  07AD               	addwf	___lwmod@counter,f
  4299  1639  2E2C               	goto	l1888
  4300  163A                     l1890:	
  4301  163A  0829               	movf	___lwmod@divisor+1,w
  4302  163B  022B               	subwf	___lwmod@dividend+1,w
  4303  163C  1D03               	skipz
  4304  163D  2E40               	goto	u2155
  4305  163E  0828               	movf	___lwmod@divisor,w
  4306  163F  022A               	subwf	___lwmod@dividend,w
  4307  1640                     u2155:	
  4308  1640  1C03               	skipc
  4309  1641  2E48               	goto	l1894
  4310  1642  0828               	movf	___lwmod@divisor,w
  4311  1643  02AA               	subwf	___lwmod@dividend,f
  4312  1644  0829               	movf	___lwmod@divisor+1,w
  4313  1645  1C03               	skipc
  4314  1646  03AB               	decf	___lwmod@dividend+1,f
  4315  1647  02AB               	subwf	___lwmod@dividend+1,f
  4316  1648                     l1894:	
  4317  1648  3001               	movlw	1
  4318  1649                     u2165:	
  4319  1649  1003               	clrc
  4320  164A  0CA9               	rrf	___lwmod@divisor+1,f
  4321  164B  0CA8               	rrf	___lwmod@divisor,f
  4322  164C  3EFF               	addlw	-1
  4323  164D  1D03               	skipz
  4324  164E  2E49               	goto	u2165
  4325  164F  3001               	movlw	1
  4326  1650  02AD               	subwf	___lwmod@counter,f
  4327  1651  1D03               	btfss	3,2
  4328  1652  2E3A               	goto	l1890
  4329  1653                     l1898:	
  4330  1653  082B               	movf	___lwmod@dividend+1,w
  4331  1654  01A9               	clrf	?___lwmod+1
  4332  1655  07A9               	addwf	?___lwmod+1,f
  4333  1656  082A               	movf	___lwmod@dividend,w
  4334  1657  01A8               	clrf	?___lwmod
  4335  1658  07A8               	addwf	?___lwmod,f
  4336  1659  0008               	return
  4337  165A                     __end_of___lwmod:	
  4338                           
  4339                           	psect	text14
  4340  165A                     __ptext14:	
  4341 ;; *************** function ___lwdiv *****************
  4342 ;; Defined at:
  4343 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;  divisor         2    0[BANK0 ] unsigned int 
  4346 ;;  dividend        2    2[BANK0 ] unsigned int 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  quotient        2    5[BANK0 ] unsigned int 
  4349 ;;  counter         1    7[BANK0 ] unsigned char 
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  2    0[BANK0 ] unsigned int 
  4352 ;; Registers used:
  4353 ;;		wreg, status,2, status,0
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4359 ;;      Params:         0       4       0       0       0
  4360 ;;      Locals:         0       3       0       0       0
  4361 ;;      Temps:          0       1       0       0       0
  4362 ;;      Totals:         0       8       0       0       0
  4363 ;;Total ram usage:        8 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; Hardware stack levels required when called:    2
  4366 ;; This function calls:
  4367 ;;		Nothing
  4368 ;; This function is called by:
  4369 ;;		_sprintf
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           
  4374                           ;psect for function ___lwdiv
  4375  165A                     ___lwdiv:	
  4376                           
  4377                           ;incstack = 0
  4378                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4379  165A  1283               	bcf	3,5	;RP0=0, select bank0
  4380  165B  1303               	bcf	3,6	;RP1=0, select bank0
  4381  165C  01A5               	clrf	___lwdiv@quotient
  4382  165D  01A6               	clrf	___lwdiv@quotient+1
  4383  165E  0821               	movf	___lwdiv@divisor+1,w
  4384  165F  0420               	iorwf	___lwdiv@divisor,w
  4385  1660  1903               	skipnz
  4386  1661  2E93               	goto	l1876
  4387  1662  01A7               	clrf	___lwdiv@counter
  4388  1663  0AA7               	incf	___lwdiv@counter,f
  4389  1664                     l1864:	
  4390  1664  1BA1               	btfsc	___lwdiv@divisor+1,7
  4391  1665  2E72               	goto	l1866
  4392  1666  3001               	movlw	1
  4393  1667                     u2065:	
  4394  1667  1003               	clrc
  4395  1668  0DA0               	rlf	___lwdiv@divisor,f
  4396  1669  0DA1               	rlf	___lwdiv@divisor+1,f
  4397  166A  3EFF               	addlw	-1
  4398  166B  1D03               	skipz
  4399  166C  2E67               	goto	u2065
  4400  166D  3001               	movlw	1
  4401  166E  00A4               	movwf	??___lwdiv
  4402  166F  0824               	movf	??___lwdiv,w
  4403  1670  07A7               	addwf	___lwdiv@counter,f
  4404  1671  2E64               	goto	l1864
  4405  1672                     l1866:	
  4406  1672  3001               	movlw	1
  4407  1673                     u2085:	
  4408  1673  1003               	clrc
  4409  1674  0DA5               	rlf	___lwdiv@quotient,f
  4410  1675  0DA6               	rlf	___lwdiv@quotient+1,f
  4411  1676  3EFF               	addlw	-1
  4412  1677  1D03               	skipz
  4413  1678  2E73               	goto	u2085
  4414  1679  0821               	movf	___lwdiv@divisor+1,w
  4415  167A  0223               	subwf	___lwdiv@dividend+1,w
  4416  167B  1D03               	skipz
  4417  167C  2E7F               	goto	u2095
  4418  167D  0820               	movf	___lwdiv@divisor,w
  4419  167E  0222               	subwf	___lwdiv@dividend,w
  4420  167F                     u2095:	
  4421  167F  1C03               	skipc
  4422  1680  2E88               	goto	l1872
  4423  1681  0820               	movf	___lwdiv@divisor,w
  4424  1682  02A2               	subwf	___lwdiv@dividend,f
  4425  1683  0821               	movf	___lwdiv@divisor+1,w
  4426  1684  1C03               	skipc
  4427  1685  03A3               	decf	___lwdiv@dividend+1,f
  4428  1686  02A3               	subwf	___lwdiv@dividend+1,f
  4429  1687  1425               	bsf	___lwdiv@quotient,0
  4430  1688                     l1872:	
  4431  1688  3001               	movlw	1
  4432  1689                     u2105:	
  4433  1689  1003               	clrc
  4434  168A  0CA1               	rrf	___lwdiv@divisor+1,f
  4435  168B  0CA0               	rrf	___lwdiv@divisor,f
  4436  168C  3EFF               	addlw	-1
  4437  168D  1D03               	skipz
  4438  168E  2E89               	goto	u2105
  4439  168F  3001               	movlw	1
  4440  1690  02A7               	subwf	___lwdiv@counter,f
  4441  1691  1D03               	btfss	3,2
  4442  1692  2E72               	goto	l1866
  4443  1693                     l1876:	
  4444  1693  0826               	movf	___lwdiv@quotient+1,w
  4445  1694  01A1               	clrf	?___lwdiv+1
  4446  1695  07A1               	addwf	?___lwdiv+1,f
  4447  1696  0825               	movf	___lwdiv@quotient,w
  4448  1697  01A0               	clrf	?___lwdiv
  4449  1698  07A0               	addwf	?___lwdiv,f
  4450  1699  0008               	return
  4451  169A                     __end_of___lwdiv:	
  4452                           
  4453                           	psect	text15
  4454  075C                     __ptext15:	
  4455 ;; *************** function ___fttol *****************
  4456 ;; Defined at:
  4457 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  f1              3   46[BANK0 ] float 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  lval            4   55[BANK0 ] unsigned long 
  4462 ;;  exp1            1   59[BANK0 ] unsigned char 
  4463 ;;  sign1           1   54[BANK0 ] unsigned char 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  4   46[BANK0 ] long 
  4466 ;; Registers used:
  4467 ;;		wreg, status,2, status,0
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4473 ;;      Params:         0       4       0       0       0
  4474 ;;      Locals:         0       6       0       0       0
  4475 ;;      Temps:          0       4       0       0       0
  4476 ;;      Totals:         0      14       0       0       0
  4477 ;;Total ram usage:       14 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; Hardware stack levels required when called:    2
  4480 ;; This function calls:
  4481 ;;		Nothing
  4482 ;; This function is called by:
  4483 ;;		_displayPPM
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           
  4488                           ;psect for function ___fttol
  4489  075C                     ___fttol:	
  4490                           
  4491                           ;incstack = 0
  4492                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4493  075C  1283               	bcf	3,5	;RP0=0, select bank0
  4494  075D  1303               	bcf	3,6	;RP1=0, select bank0
  4495  075E  084E               	movf	___fttol@f1,w
  4496  075F  00D2               	movwf	??___fttol
  4497  0760  084F               	movf	___fttol@f1+1,w
  4498  0761  00D3               	movwf	??___fttol+1
  4499  0762  0850               	movf	___fttol@f1+2,w
  4500  0763  00D4               	movwf	??___fttol+2
  4501  0764  1003               	clrc
  4502  0765  0D53               	rlf	??___fttol+1,w
  4503  0766  0D54               	rlf	??___fttol+2,w
  4504  0767  00D5               	movwf	??___fttol+3
  4505  0768  0855               	movf	??___fttol+3,w
  4506  0769  00DB               	movwf	___fttol@exp1
  4507  076A  08DB               	movf	___fttol@exp1,f
  4508  076B  1D03               	skipz
  4509  076C  2F76               	goto	l2264
  4510  076D  3000               	movlw	0
  4511  076E  00D1               	movwf	?___fttol+3
  4512  076F  3000               	movlw	0
  4513  0770  00D0               	movwf	?___fttol+2
  4514  0771  3000               	movlw	0
  4515  0772  00CF               	movwf	?___fttol+1
  4516  0773  3000               	movlw	0
  4517  0774  00CE               	movwf	?___fttol
  4518  0775  0008               	return
  4519  0776                     l2264:	
  4520  0776  084E               	movf	___fttol@f1,w
  4521  0777  00D2               	movwf	??___fttol
  4522  0778  084F               	movf	___fttol@f1+1,w
  4523  0779  00D3               	movwf	??___fttol+1
  4524  077A  0850               	movf	___fttol@f1+2,w
  4525  077B  00D4               	movwf	??___fttol+2
  4526  077C  3017               	movlw	23
  4527  077D                     u2965:	
  4528  077D  1003               	clrc
  4529  077E  0CD4               	rrf	??___fttol+2,f
  4530  077F  0CD3               	rrf	??___fttol+1,f
  4531  0780  0CD2               	rrf	??___fttol,f
  4532  0781  3EFF               	addlw	-1
  4533  0782  1D03               	skipz
  4534  0783  2F7D               	goto	u2965
  4535  0784  0852               	movf	??___fttol,w
  4536  0785  00D5               	movwf	??___fttol+3
  4537  0786  0855               	movf	??___fttol+3,w
  4538  0787  00D6               	movwf	___fttol@sign1
  4539  0788  17CF               	bsf	___fttol@f1+1,7
  4540  0789  30FF               	movlw	255
  4541  078A  05CE               	andwf	___fttol@f1,f
  4542  078B  30FF               	movlw	255
  4543  078C  05CF               	andwf	___fttol@f1+1,f
  4544  078D  3000               	movlw	0
  4545  078E  05D0               	andwf	___fttol@f1+2,f
  4546  078F  084E               	movf	___fttol@f1,w
  4547  0790  00D7               	movwf	___fttol@lval
  4548  0791  084F               	movf	___fttol@f1+1,w
  4549  0792  00D8               	movwf	___fttol@lval+1
  4550  0793  0850               	movf	___fttol@f1+2,w
  4551  0794  00D9               	movwf	___fttol@lval+2
  4552  0795  01DA               	clrf	___fttol@lval+3
  4553  0796  308E               	movlw	142
  4554  0797  02DB               	subwf	___fttol@exp1,f
  4555  0798  1FDB               	btfss	___fttol@exp1,7
  4556  0799  2FB8               	goto	l2284
  4557  079A  085B               	movf	___fttol@exp1,w
  4558  079B  3A80               	xorlw	128
  4559  079C  3E8F               	addlw	143
  4560  079D  1803               	skipnc
  4561  079E  2FA8               	goto	l2282
  4562  079F  3000               	movlw	0
  4563  07A0  00D1               	movwf	?___fttol+3
  4564  07A1  3000               	movlw	0
  4565  07A2  00D0               	movwf	?___fttol+2
  4566  07A3  3000               	movlw	0
  4567  07A4  00CF               	movwf	?___fttol+1
  4568  07A5  3000               	movlw	0
  4569  07A6  00CE               	movwf	?___fttol
  4570  07A7  0008               	return
  4571  07A8                     l2282:	
  4572  07A8  3001               	movlw	1
  4573  07A9                     u2995:	
  4574  07A9  1003               	clrc
  4575  07AA  0CDA               	rrf	___fttol@lval+3,f
  4576  07AB  0CD9               	rrf	___fttol@lval+2,f
  4577  07AC  0CD8               	rrf	___fttol@lval+1,f
  4578  07AD  0CD7               	rrf	___fttol@lval,f
  4579  07AE  3EFF               	addlw	-1
  4580  07AF  1D03               	skipz
  4581  07B0  2FA9               	goto	u2995
  4582  07B1  3001               	movlw	1
  4583  07B2  00D2               	movwf	??___fttol
  4584  07B3  0852               	movf	??___fttol,w
  4585  07B4  07DB               	addwf	___fttol@exp1,f
  4586  07B5  1903               	btfsc	3,2
  4587  07B6  2FD3               	goto	l2294
  4588  07B7  2FA8               	goto	l2282
  4589  07B8                     l2284:	
  4590  07B8  3018               	movlw	24
  4591  07B9  025B               	subwf	___fttol@exp1,w
  4592  07BA  1C03               	skipc
  4593  07BB  2FD0               	goto	l2292
  4594  07BC  3000               	movlw	0
  4595  07BD  00D1               	movwf	?___fttol+3
  4596  07BE  3000               	movlw	0
  4597  07BF  00D0               	movwf	?___fttol+2
  4598  07C0  3000               	movlw	0
  4599  07C1  00CF               	movwf	?___fttol+1
  4600  07C2  3000               	movlw	0
  4601  07C3  00CE               	movwf	?___fttol
  4602  07C4  0008               	return
  4603  07C5                     l2290:	
  4604  07C5  3001               	movlw	1
  4605  07C6  00D2               	movwf	??___fttol
  4606  07C7                     u3025:	
  4607  07C7  1003               	clrc
  4608  07C8  0DD7               	rlf	___fttol@lval,f
  4609  07C9  0DD8               	rlf	___fttol@lval+1,f
  4610  07CA  0DD9               	rlf	___fttol@lval+2,f
  4611  07CB  0DDA               	rlf	___fttol@lval+3,f
  4612  07CC  0BD2               	decfsz	??___fttol,f
  4613  07CD  2FC7               	goto	u3025
  4614  07CE  3001               	movlw	1
  4615  07CF  02DB               	subwf	___fttol@exp1,f
  4616  07D0                     l2292:	
  4617  07D0  08DB               	movf	___fttol@exp1,f
  4618  07D1  1D03               	skipz
  4619  07D2  2FC5               	goto	l2290
  4620  07D3                     l2294:	
  4621  07D3  0856               	movf	___fttol@sign1,w
  4622  07D4  1903               	btfsc	3,2
  4623  07D5  2FE1               	goto	l2298
  4624  07D6  09D7               	comf	___fttol@lval,f
  4625  07D7  09D8               	comf	___fttol@lval+1,f
  4626  07D8  09D9               	comf	___fttol@lval+2,f
  4627  07D9  09DA               	comf	___fttol@lval+3,f
  4628  07DA  0AD7               	incf	___fttol@lval,f
  4629  07DB  1903               	skipnz
  4630  07DC  0AD8               	incf	___fttol@lval+1,f
  4631  07DD  1903               	skipnz
  4632  07DE  0AD9               	incf	___fttol@lval+2,f
  4633  07DF  1903               	skipnz
  4634  07E0  0ADA               	incf	___fttol@lval+3,f
  4635  07E1                     l2298:	
  4636  07E1  085A               	movf	___fttol@lval+3,w
  4637  07E2  00D1               	movwf	?___fttol+3
  4638  07E3  0859               	movf	___fttol@lval+2,w
  4639  07E4  00D0               	movwf	?___fttol+2
  4640  07E5  0858               	movf	___fttol@lval+1,w
  4641  07E6  00CF               	movwf	?___fttol+1
  4642  07E7  0857               	movf	___fttol@lval,w
  4643  07E8  00CE               	movwf	?___fttol
  4644  07E9  0008               	return
  4645  07EA                     __end_of___fttol:	
  4646                           
  4647                           	psect	text16
  4648  08ED                     __ptext16:	
  4649 ;; *************** function ___ftneg *****************
  4650 ;; Defined at:
  4651 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;  f1              3   14[BANK0 ] float 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;		None
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  3   14[BANK0 ] float 
  4658 ;; Registers used:
  4659 ;;		wreg
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4665 ;;      Params:         0       3       0       0       0
  4666 ;;      Locals:         0       0       0       0       0
  4667 ;;      Temps:          0       0       0       0       0
  4668 ;;      Totals:         0       3       0       0       0
  4669 ;;Total ram usage:        3 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    2
  4672 ;; This function calls:
  4673 ;;		Nothing
  4674 ;; This function is called by:
  4675 ;;		_displayPPM
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           
  4680                           ;psect for function ___ftneg
  4681  08ED                     ___ftneg:	
  4682                           
  4683                           ;incstack = 0
  4684                           ; Regs used in ___ftneg: [wreg]
  4685  08ED  1283               	bcf	3,5	;RP0=0, select bank0
  4686  08EE  1303               	bcf	3,6	;RP1=0, select bank0
  4687  08EF  0830               	movf	___ftneg@f1+2,w
  4688  08F0  042F               	iorwf	___ftneg@f1+1,w
  4689  08F1  042E               	iorwf	___ftneg@f1,w
  4690  08F2  1903               	skipnz
  4691  08F3  0008               	return
  4692  08F4  3080               	movlw	128
  4693  08F5  06B0               	xorwf	___ftneg@f1+2,f
  4694  08F6  0008               	return
  4695  08F7                     __end_of___ftneg:	
  4696                           
  4697                           	psect	text17
  4698  07EA                     __ptext17:	
  4699 ;; *************** function _startUpLCD *****************
  4700 ;; Defined at:
  4701 ;;		line 68 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;		None
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;		None
  4706 ;; Return value:  Size  Location     Type
  4707 ;;		None               void
  4708 ;; Registers used:
  4709 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4715 ;;      Params:         0       0       0       0       0
  4716 ;;      Locals:         0       0       0       0       0
  4717 ;;      Temps:          0       0       0       0       0
  4718 ;;      Totals:         0       0       0       0       0
  4719 ;;Total ram usage:        0 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; Hardware stack levels required when called:    4
  4722 ;; This function calls:
  4723 ;;		_initLCD
  4724 ;;		_instCTRL
  4725 ;;		_printToLCD
  4726 ;; This function is called by:
  4727 ;;		_main
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           
  4732                           ;psect for function _startUpLCD
  4733  07EA                     _startUpLCD:	
  4734                           
  4735                           ;main.c: 70: initLCD();
  4736                           
  4737                           ;incstack = 0
  4738                           ; Regs used in _startUpLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4739  07EA  160A  118A  2508  120A  118A  	fcall	_initLCD
  4740                           
  4741                           ;main.c: 71: instCTRL(0x80);
  4742  07EF  3080               	movlw	128
  4743  07F0  160A  118A  242B  120A  118A  	fcall	_instCTRL
  4744                           
  4745                           ;main.c: 72: printToLCD("PWR ON");
  4746  07F5  30CE               	movlw	low (STR_19-__stringbase)
  4747  07F6  1283               	bcf	3,5	;RP0=0, select bank0
  4748  07F7  1303               	bcf	3,6	;RP1=0, select bank0
  4749  07F8  00A2               	movwf	printToLCD@str
  4750  07F9  3080               	movlw	128
  4751  07FA  00A3               	movwf	printToLCD@str+1
  4752  07FB  160A  118A  25C5   	fcall	_printToLCD
  4753  07FE  0008               	return
  4754  07FF                     __end_of_startUpLCD:	
  4755                           
  4756                           	psect	text18
  4757  15C5                     __ptext18:	
  4758 ;; *************** function _printToLCD *****************
  4759 ;; Defined at:
  4760 ;;		line 47 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;  str             2    2[BANK0 ] PTR const unsigned char 
  4763 ;;		 -> STR_31(8), STR_30(12), STR_29(10), STR_28(14), 
  4764 ;;		 -> STR_27(12), STR_26(10), STR_25(16), STR_24(15), 
  4765 ;;		 -> updateState@buffer(10), STR_21(15), STR_20(7), STR_19(7), 
  4766 ;;		 -> debugInfo(10), displayTime@timeFormat(10), STR_5(8), STR_4(8), 
  4767 ;;		 -> displayPPM@strBuffer(50), 
  4768 ;; Auto vars:     Size  Location     Type
  4769 ;;		None
  4770 ;; Return value:  Size  Location     Type
  4771 ;;		None               void
  4772 ;; Registers used:
  4773 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4774 ;; Tracked objects:
  4775 ;;		On entry : 0/0
  4776 ;;		On exit  : 0/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4779 ;;      Params:         0       2       0       0       0
  4780 ;;      Locals:         0       0       0       0       0
  4781 ;;      Temps:          0       0       0       0       0
  4782 ;;      Totals:         0       2       0       0       0
  4783 ;;Total ram usage:        2 bytes
  4784 ;; Hardware stack levels used:    1
  4785 ;; Hardware stack levels required when called:    3
  4786 ;; This function calls:
  4787 ;;		_dataCTRL
  4788 ;;		_instCTRL
  4789 ;; This function is called by:
  4790 ;;		_displayPPM
  4791 ;;		_printStatusPPM
  4792 ;;		_displayTime
  4793 ;;		_setHoursStart
  4794 ;;		_setHoursEnd
  4795 ;;		_setMinutesStart
  4796 ;;		_setMinutesEnd
  4797 ;;		_startUpLCD
  4798 ;;		_updateState
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           
  4803                           ;psect for function _printToLCD
  4804  15C5                     _printToLCD:	
  4805                           
  4806                           ;lcd_functions.h: 49: instCTRL(0x0C);
  4807                           
  4808                           ;incstack = 0
  4809                           ; Regs used in _printToLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4810  15C5  300C               	movlw	12
  4811  15C6  160A  118A  242B  160A  118A  	fcall	_instCTRL
  4812  15CB                     l2778:	
  4813                           ;lcd_functions.h: 50: while (*str)
  4814                           
  4815  15CB  1283               	bcf	3,5	;RP0=0, select bank0
  4816  15CC  1303               	bcf	3,6	;RP1=0, select bank0
  4817  15CD  0823               	movf	printToLCD@str+1,w
  4818  15CE  00FF               	movwf	127
  4819  15CF  0822               	movf	printToLCD@str,w
  4820  15D0  0084               	movwf	4
  4821  15D1  120A  158A  2000  160A  118A  	fcall	stringtab
  4822  15D6  3800               	iorlw	0
  4823  15D7  1903               	btfsc	3,2
  4824  15D8  0008               	return
  4825                           
  4826                           ;lcd_functions.h: 51: {
  4827                           ;lcd_functions.h: 52: dataCTRL(*str);
  4828  15D9  1283               	bcf	3,5	;RP0=0, select bank0
  4829  15DA  1303               	bcf	3,6	;RP1=0, select bank0
  4830  15DB  0823               	movf	printToLCD@str+1,w
  4831  15DC  00FF               	movwf	127
  4832  15DD  0822               	movf	printToLCD@str,w
  4833  15DE  0084               	movwf	4
  4834  15DF  120A  158A  2000  160A  118A  	fcall	stringtab
  4835  15E4  160A  118A  243E  160A  118A  	fcall	_dataCTRL
  4836                           
  4837                           ;lcd_functions.h: 53: str++;
  4838  15E9  3001               	movlw	1
  4839  15EA  1283               	bcf	3,5	;RP0=0, select bank0
  4840  15EB  1303               	bcf	3,6	;RP1=0, select bank0
  4841  15EC  07A2               	addwf	printToLCD@str,f
  4842  15ED  1803               	skipnc
  4843  15EE  0AA3               	incf	printToLCD@str+1,f
  4844  15EF  2DCB               	goto	l2778
  4845  15F0                     __end_of_printToLCD:	
  4846                           
  4847                           	psect	text19
  4848  143E                     __ptext19:	
  4849 ;; *************** function _dataCTRL *****************
  4850 ;; Defined at:
  4851 ;;		line 27 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;  DAT             1    wreg     unsigned char 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  DAT             1    1[BANK0 ] unsigned char 
  4856 ;; Return value:  Size  Location     Type
  4857 ;;		None               void
  4858 ;; Registers used:
  4859 ;;		wreg
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4865 ;;      Params:         0       0       0       0       0
  4866 ;;      Locals:         0       1       0       0       0
  4867 ;;      Temps:          0       1       0       0       0
  4868 ;;      Totals:         0       2       0       0       0
  4869 ;;Total ram usage:        2 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; Hardware stack levels required when called:    2
  4872 ;; This function calls:
  4873 ;;		Nothing
  4874 ;; This function is called by:
  4875 ;;		_printToLCD
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           
  4880                           ;psect for function _dataCTRL
  4881  143E                     _dataCTRL:	
  4882                           
  4883                           ;incstack = 0
  4884                           ; Regs used in _dataCTRL: [wreg]
  4885                           ;dataCTRL@DAT stored from wreg
  4886  143E  1283               	bcf	3,5	;RP0=0, select bank0
  4887  143F  1303               	bcf	3,6	;RP1=0, select bank0
  4888  1440  00A1               	movwf	dataCTRL@DAT
  4889                           
  4890                           ;lcd_functions.h: 29: PORTD = DAT;
  4891  1441  0821               	movf	dataCTRL@DAT,w
  4892  1442  0088               	movwf	8	;volatile
  4893                           
  4894                           ;lcd_functions.h: 30: RC0 = 1;
  4895  1443  1407               	bsf	7,0	;volatile
  4896                           
  4897                           ;lcd_functions.h: 31: RC1 = 0;
  4898  1444  1087               	bcf	7,1	;volatile
  4899                           
  4900                           ;lcd_functions.h: 32: RC2 = 1;
  4901  1445  1507               	bsf	7,2	;volatile
  4902                           
  4903                           ;lcd_functions.h: 33: _delay((unsigned long)((1)*(4000000/4000.0)));
  4904  1446  30F9               	movlw	249
  4905  1447  00A0               	movwf	??_dataCTRL
  4906  1448                     u4697:	
  4907  1448  0000               	nop
  4908  1449  0BA0               	decfsz	??_dataCTRL,f
  4909  144A  2C48               	goto	u4697
  4910  144B  2C4C               	nop2	;nop
  4911  144C  0000               	nop
  4912                           
  4913                           ;lcd_functions.h: 34: RC2 = 0;
  4914  144D  1283               	bcf	3,5	;RP0=0, select bank0
  4915  144E  1303               	bcf	3,6	;RP1=0, select bank0
  4916  144F  1107               	bcf	7,2	;volatile
  4917  1450  0008               	return
  4918  1451                     __end_of_dataCTRL:	
  4919                           
  4920                           	psect	text20
  4921  1508                     __ptext20:	
  4922 ;; *************** function _initLCD *****************
  4923 ;; Defined at:
  4924 ;;		line 37 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  4925 ;; Parameters:    Size  Location     Type
  4926 ;;		None
  4927 ;; Auto vars:     Size  Location     Type
  4928 ;;		None
  4929 ;; Return value:  Size  Location     Type
  4930 ;;		None               void
  4931 ;; Registers used:
  4932 ;;		wreg, status,2, status,0, pclath, cstack
  4933 ;; Tracked objects:
  4934 ;;		On entry : 0/0
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4938 ;;      Params:         0       0       0       0       0
  4939 ;;      Locals:         0       0       0       0       0
  4940 ;;      Temps:          0       1       0       0       0
  4941 ;;      Totals:         0       1       0       0       0
  4942 ;;Total ram usage:        1 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; Hardware stack levels required when called:    3
  4945 ;; This function calls:
  4946 ;;		_instCTRL
  4947 ;; This function is called by:
  4948 ;;		_startUpLCD
  4949 ;; This function uses a non-reentrant model
  4950 ;;
  4951                           
  4952                           
  4953                           ;psect for function _initLCD
  4954  1508                     _initLCD:	
  4955                           
  4956                           ;lcd_functions.h: 39: instCTRL(0x38);
  4957                           
  4958                           ;incstack = 0
  4959                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  4960  1508  3038               	movlw	56
  4961  1509  160A  118A  242B  160A  118A  	fcall	_instCTRL
  4962                           
  4963                           ;lcd_functions.h: 40: _delay((unsigned long)((50)*(4000000/4000000.0)));
  4964  150E  3010               	movlw	16
  4965  150F  1283               	bcf	3,5	;RP0=0, select bank0
  4966  1510  1303               	bcf	3,6	;RP1=0, select bank0
  4967  1511  00A2               	movwf	??_initLCD
  4968  1512                     u4707:	
  4969  1512  0BA2               	decfsz	??_initLCD,f
  4970  1513  2D12               	goto	u4707
  4971  1514  0000               	nop
  4972                           
  4973                           ;lcd_functions.h: 41: instCTRL(0x0C);
  4974  1515  300C               	movlw	12
  4975  1516  160A  118A  242B  160A  118A  	fcall	_instCTRL
  4976                           
  4977                           ;lcd_functions.h: 42: instCTRL(0x01);
  4978  151B  3001               	movlw	1
  4979  151C  160A  118A  242B  160A  118A  	fcall	_instCTRL
  4980                           
  4981                           ;lcd_functions.h: 43: instCTRL(0x06);
  4982  1521  3006               	movlw	6
  4983  1522  160A  118A  242B  160A  118A  	fcall	_instCTRL
  4984                           
  4985                           ;lcd_functions.h: 44: instCTRL(0x0F);
  4986  1527  300F               	movlw	15
  4987  1528  160A  118A  242B   	fcall	_instCTRL
  4988  152B  0008               	return
  4989  152C                     __end_of_initLCD:	
  4990                           
  4991                           	psect	text21
  4992  13F9                     __ptext21:	
  4993 ;; *************** function _setPortDirections *****************
  4994 ;; Defined at:
  4995 ;;		line 50 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;		None
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;		None
  5000 ;; Return value:  Size  Location     Type
  5001 ;;		None               void
  5002 ;; Registers used:
  5003 ;;		wreg, status,2
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5009 ;;      Params:         0       0       0       0       0
  5010 ;;      Locals:         0       0       0       0       0
  5011 ;;      Temps:          0       0       0       0       0
  5012 ;;      Totals:         0       0       0       0       0
  5013 ;;Total ram usage:        0 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    2
  5016 ;; This function calls:
  5017 ;;		Nothing
  5018 ;; This function is called by:
  5019 ;;		_main
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           
  5024                           ;psect for function _setPortDirections
  5025  13F9                     _setPortDirections:	
  5026                           
  5027                           ;main.c: 52: TRISA = 0xFF;
  5028                           
  5029                           ;incstack = 0
  5030                           ; Regs used in _setPortDirections: [wreg+status,2]
  5031  13F9  30FF               	movlw	255
  5032  13FA  1683               	bsf	3,5	;RP0=1, select bank1
  5033  13FB  1303               	bcf	3,6	;RP1=0, select bank1
  5034  13FC  0085               	movwf	5	;volatile
  5035                           
  5036                           ;main.c: 53: TRISB = 0xFF;
  5037  13FD  30FF               	movlw	255
  5038  13FE  0086               	movwf	6	;volatile
  5039                           
  5040                           ;main.c: 54: TRISC = 0x00;
  5041  13FF  0187               	clrf	7	;volatile
  5042                           
  5043                           ;main.c: 55: TRISD = 0x00;
  5044  1400  0188               	clrf	8	;volatile
  5045                           
  5046                           ;main.c: 56: PORTA = 0x00;
  5047  1401  1283               	bcf	3,5	;RP0=0, select bank0
  5048  1402  1303               	bcf	3,6	;RP1=0, select bank0
  5049  1403  0185               	clrf	5	;volatile
  5050                           
  5051                           ;main.c: 57: PORTB = 0x00;
  5052  1404  0186               	clrf	6	;volatile
  5053                           
  5054                           ;main.c: 58: PORTC = 0x00;
  5055  1405  0187               	clrf	7	;volatile
  5056                           
  5057                           ;main.c: 59: PORTD = 0x00;
  5058  1406  0188               	clrf	8	;volatile
  5059  1407  0008               	return
  5060  1408                     __end_of_setPortDirections:	
  5061                           
  5062                           	psect	text22
  5063  14E5                     __ptext22:	
  5064 ;; *************** function _runMQ135 *****************
  5065 ;; Defined at:
  5066 ;;		line 30 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;		None
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;		None
  5071 ;; Return value:  Size  Location     Type
  5072 ;;		None               void
  5073 ;; Registers used:
  5074 ;;		wreg, status,2, status,0, pclath, cstack
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5080 ;;      Params:         0       0       0       0       0
  5081 ;;      Locals:         0       0       0       0       0
  5082 ;;      Temps:          0       0       0       0       0
  5083 ;;      Totals:         0       0       0       0       0
  5084 ;;Total ram usage:        0 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    5
  5087 ;; This function calls:
  5088 ;;		_CalcMQ135
  5089 ;;		_Read_ADC_MQ135
  5090 ;; This function is called by:
  5091 ;;		_main
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           
  5096                           ;psect for function _runMQ135
  5097  14E5                     _runMQ135:	
  5098                           
  5099                           ;mq135_module.h: 32: PPM = CalcMQ135(Read_ADC_MQ135());
  5100                           
  5101                           ;incstack = 0
  5102                           ; Regs used in _runMQ135: [wreg+status,2+status,0+pclath+cstack]
  5103  14E5  160A  118A  2451  160A  118A  	fcall	_Read_ADC_MQ135
  5104  14EA  1283               	bcf	3,5	;RP0=0, select bank0
  5105  14EB  1303               	bcf	3,6	;RP1=0, select bank0
  5106  14EC  0821               	movf	?_Read_ADC_MQ135+1,w
  5107  14ED  01DF               	clrf	CalcMQ135@RAW_ADC+1
  5108  14EE  07DF               	addwf	CalcMQ135@RAW_ADC+1,f
  5109  14EF  0820               	movf	?_Read_ADC_MQ135,w
  5110  14F0  01DE               	clrf	CalcMQ135@RAW_ADC
  5111  14F1  07DE               	addwf	CalcMQ135@RAW_ADC,f
  5112  14F2  120A  118A  204F   	fcall	_CalcMQ135
  5113  14F5  1283               	bcf	3,5	;RP0=0, select bank0
  5114  14F6  1303               	bcf	3,6	;RP1=0, select bank0
  5115  14F7  085E               	movf	?_CalcMQ135,w
  5116  14F8  1683               	bsf	3,5	;RP0=1, select bank1
  5117  14F9  1303               	bcf	3,6	;RP1=0, select bank1
  5118  14FA  00D7               	movwf	_PPM^(0+128)	;volatile
  5119  14FB  1283               	bcf	3,5	;RP0=0, select bank0
  5120  14FC  1303               	bcf	3,6	;RP1=0, select bank0
  5121  14FD  085F               	movf	?_CalcMQ135+1,w
  5122  14FE  1683               	bsf	3,5	;RP0=1, select bank1
  5123  14FF  1303               	bcf	3,6	;RP1=0, select bank1
  5124  1500  00D8               	movwf	(_PPM+1)^(0+128)	;volatile
  5125  1501  1283               	bcf	3,5	;RP0=0, select bank0
  5126  1502  1303               	bcf	3,6	;RP1=0, select bank0
  5127  1503  0860               	movf	?_CalcMQ135+2,w
  5128  1504  1683               	bsf	3,5	;RP0=1, select bank1
  5129  1505  1303               	bcf	3,6	;RP1=0, select bank1
  5130  1506  00D9               	movwf	(_PPM+2)^(0+128)	;volatile
  5131  1507  0008               	return
  5132  1508                     __end_of_runMQ135:	
  5133                           
  5134                           	psect	text23
  5135  1451                     __ptext23:	
  5136 ;; *************** function _Read_ADC_MQ135 *****************
  5137 ;; Defined at:
  5138 ;;		line 78 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  5139 ;; Parameters:    Size  Location     Type
  5140 ;;		None
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;		None
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  2    0[BANK0 ] int 
  5145 ;; Registers used:
  5146 ;;		wreg, status,2, status,0
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5152 ;;      Params:         0       2       0       0       0
  5153 ;;      Locals:         0       0       0       0       0
  5154 ;;      Temps:          0       2       0       0       0
  5155 ;;      Totals:         0       4       0       0       0
  5156 ;;Total ram usage:        4 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; Hardware stack levels required when called:    2
  5159 ;; This function calls:
  5160 ;;		Nothing
  5161 ;; This function is called by:
  5162 ;;		_runMQ135
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           
  5167                           ;psect for function _Read_ADC_MQ135
  5168  1451                     _Read_ADC_MQ135:	
  5169                           
  5170                           ;mq135_module.h: 80: _delay((unsigned long)((100)*(4000000/4000.0)));
  5171                           
  5172                           ;incstack = 0
  5173                           ; Regs used in _Read_ADC_MQ135: [wreg+status,2+status,0]
  5174  1451  3082               	movlw	130
  5175  1452  1283               	bcf	3,5	;RP0=0, select bank0
  5176  1453  1303               	bcf	3,6	;RP1=0, select bank0
  5177  1454  00A3               	movwf	??_Read_ADC_MQ135+1
  5178  1455  30DD               	movlw	221
  5179  1456  00A2               	movwf	??_Read_ADC_MQ135
  5180  1457                     u4717:	
  5181  1457  0BA2               	decfsz	??_Read_ADC_MQ135,f
  5182  1458  2C57               	goto	u4717
  5183  1459  0BA3               	decfsz	??_Read_ADC_MQ135+1,f
  5184  145A  2C57               	goto	u4717
  5185  145B  2C5C               	nop2
  5186                           
  5187                           ;mq135_module.h: 81: GO_DONE = 1;
  5188  145C  1283               	bcf	3,5	;RP0=0, select bank0
  5189  145D  1303               	bcf	3,6	;RP1=0, select bank0
  5190  145E  151F               	bsf	31,2	;volatile
  5191  145F                     l106:	
  5192                           ;mq135_module.h: 83: ;
  5193                           
  5194                           ;mq135_module.h: 82: while (GO_DONE)
  5195                           
  5196  145F  191F               	btfsc	31,2	;volatile
  5197  1460  2C5F               	goto	l106
  5198                           
  5199                           ;mq135_module.h: 84: return ((ADRESH << 8) + ADRESL);
  5200  1461  081E               	movf	30,w	;volatile
  5201  1462  01A1               	clrf	?_Read_ADC_MQ135+1
  5202  1463  07A1               	addwf	?_Read_ADC_MQ135+1,f
  5203  1464  1683               	bsf	3,5	;RP0=1, select bank1
  5204  1465  1303               	bcf	3,6	;RP1=0, select bank1
  5205  1466  081E               	movf	30,w	;volatile
  5206  1467  1283               	bcf	3,5	;RP0=0, select bank0
  5207  1468  1303               	bcf	3,6	;RP1=0, select bank0
  5208  1469  01A0               	clrf	?_Read_ADC_MQ135
  5209  146A  07A0               	addwf	?_Read_ADC_MQ135,f
  5210  146B  0008               	return
  5211  146C                     __end_of_Read_ADC_MQ135:	
  5212                           
  5213                           	psect	text24
  5214  004F                     __ptext24:	
  5215 ;; *************** function _CalcMQ135 *****************
  5216 ;; Defined at:
  5217 ;;		line 87 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  RAW_ADC         2   62[BANK0 ] int 
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;  ratio           3   36[BANK1 ] float 
  5222 ;;  co2             3   33[BANK1 ] float 
  5223 ;;  ratio5          3   30[BANK1 ] float 
  5224 ;;  ratio4          3   27[BANK1 ] float 
  5225 ;;  ratio3          3   24[BANK1 ] float 
  5226 ;;  ratio2          3   21[BANK1 ] float 
  5227 ;;  ratio6          3    3[BANK1 ] float 
  5228 ;;  voltage         3    0[BANK1 ] float 
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  3   62[BANK0 ] float 
  5231 ;; Registers used:
  5232 ;;		wreg, status,2, status,0, pclath, cstack
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5238 ;;      Params:         0       3       0       0       0
  5239 ;;      Locals:         0       0      39       0       0
  5240 ;;      Temps:          0       0       0       0       0
  5241 ;;      Totals:         0       3      39       0       0
  5242 ;;Total ram usage:       42 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; Hardware stack levels required when called:    4
  5245 ;; This function calls:
  5246 ;;		___awtoft
  5247 ;;		___ftadd
  5248 ;;		___ftdiv
  5249 ;;		___ftmul
  5250 ;; This function is called by:
  5251 ;;		_runMQ135
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           
  5256                           ;psect for function _CalcMQ135
  5257  004F                     _CalcMQ135:	
  5258                           
  5259                           ;mq135_module.h: 89: float voltage = (RAW_ADC * 5.0) / 1023.0;
  5260                           
  5261                           ;incstack = 0
  5262                           ; Regs used in _CalcMQ135: [wreg+status,2+status,0+pclath+cstack]
  5263  004F  30C0               	movlw	192
  5264  0050  1283               	bcf	3,5	;RP0=0, select bank0
  5265  0051  1303               	bcf	3,6	;RP1=0, select bank0
  5266  0052  00CE               	movwf	___ftdiv@f2
  5267  0053  307F               	movlw	127
  5268  0054  00CF               	movwf	___ftdiv@f2+1
  5269  0055  3044               	movlw	68
  5270  0056  00D0               	movwf	___ftdiv@f2+2
  5271  0057  3000               	movlw	0
  5272  0058  00BE               	movwf	___ftmul@f1
  5273  0059  30A0               	movlw	160
  5274  005A  00BF               	movwf	___ftmul@f1+1
  5275  005B  3040               	movlw	64
  5276  005C  00C0               	movwf	___ftmul@f1+2
  5277  005D  085F               	movf	CalcMQ135@RAW_ADC+1,w
  5278  005E  01A9               	clrf	___awtoft@c+1
  5279  005F  07A9               	addwf	___awtoft@c+1,f
  5280  0060  085E               	movf	CalcMQ135@RAW_ADC,w
  5281  0061  01A8               	clrf	___awtoft@c
  5282  0062  07A8               	addwf	___awtoft@c,f
  5283  0063  160A  118A  2550  120A  118A  	fcall	___awtoft
  5284  0068  1283               	bcf	3,5	;RP0=0, select bank0
  5285  0069  1303               	bcf	3,6	;RP1=0, select bank0
  5286  006A  0828               	movf	?___awtoft,w
  5287  006B  00C1               	movwf	___ftmul@f2
  5288  006C  0829               	movf	?___awtoft+1,w
  5289  006D  00C2               	movwf	___ftmul@f2+1
  5290  006E  082A               	movf	?___awtoft+2,w
  5291  006F  00C3               	movwf	___ftmul@f2+2
  5292  0070  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5293  0075  1283               	bcf	3,5	;RP0=0, select bank0
  5294  0076  1303               	bcf	3,6	;RP1=0, select bank0
  5295  0077  083E               	movf	?___ftmul,w
  5296  0078  00D1               	movwf	___ftdiv@f1
  5297  0079  083F               	movf	?___ftmul+1,w
  5298  007A  00D2               	movwf	___ftdiv@f1+1
  5299  007B  0840               	movf	?___ftmul+2,w
  5300  007C  00D3               	movwf	___ftdiv@f1+2
  5301  007D  120A  158A  2163  120A  118A  	fcall	___ftdiv
  5302  0082  1283               	bcf	3,5	;RP0=0, select bank0
  5303  0083  1303               	bcf	3,6	;RP1=0, select bank0
  5304  0084  084E               	movf	?___ftdiv,w
  5305  0085  1683               	bsf	3,5	;RP0=1, select bank1
  5306  0086  1303               	bcf	3,6	;RP1=0, select bank1
  5307  0087  00A0               	movwf	CalcMQ135@voltage^(0+128)
  5308  0088  1283               	bcf	3,5	;RP0=0, select bank0
  5309  0089  1303               	bcf	3,6	;RP1=0, select bank0
  5310  008A  084F               	movf	?___ftdiv+1,w
  5311  008B  1683               	bsf	3,5	;RP0=1, select bank1
  5312  008C  1303               	bcf	3,6	;RP1=0, select bank1
  5313  008D  00A1               	movwf	(CalcMQ135@voltage+1)^(0+128)
  5314  008E  1283               	bcf	3,5	;RP0=0, select bank0
  5315  008F  1303               	bcf	3,6	;RP1=0, select bank0
  5316  0090  0850               	movf	?___ftdiv+2,w
  5317  0091  1683               	bsf	3,5	;RP0=1, select bank1
  5318  0092  1303               	bcf	3,6	;RP1=0, select bank1
  5319  0093  00A2               	movwf	(CalcMQ135@voltage+2)^(0+128)
  5320                           
  5321                           ;mq135_module.h: 90: float ratio = voltage / 5.0;
  5322  0094  3000               	movlw	0
  5323  0095  1283               	bcf	3,5	;RP0=0, select bank0
  5324  0096  1303               	bcf	3,6	;RP1=0, select bank0
  5325  0097  00CE               	movwf	___ftdiv@f2
  5326  0098  30A0               	movlw	160
  5327  0099  00CF               	movwf	___ftdiv@f2+1
  5328  009A  3040               	movlw	64
  5329  009B  00D0               	movwf	___ftdiv@f2+2
  5330  009C  1683               	bsf	3,5	;RP0=1, select bank1
  5331  009D  1303               	bcf	3,6	;RP1=0, select bank1
  5332  009E  0820               	movf	CalcMQ135@voltage^(0+128),w
  5333  009F  1283               	bcf	3,5	;RP0=0, select bank0
  5334  00A0  1303               	bcf	3,6	;RP1=0, select bank0
  5335  00A1  00D1               	movwf	___ftdiv@f1
  5336  00A2  1683               	bsf	3,5	;RP0=1, select bank1
  5337  00A3  1303               	bcf	3,6	;RP1=0, select bank1
  5338  00A4  0821               	movf	(CalcMQ135@voltage+1)^(0+128),w
  5339  00A5  1283               	bcf	3,5	;RP0=0, select bank0
  5340  00A6  1303               	bcf	3,6	;RP1=0, select bank0
  5341  00A7  00D2               	movwf	___ftdiv@f1+1
  5342  00A8  1683               	bsf	3,5	;RP0=1, select bank1
  5343  00A9  1303               	bcf	3,6	;RP1=0, select bank1
  5344  00AA  0822               	movf	(CalcMQ135@voltage+2)^(0+128),w
  5345  00AB  1283               	bcf	3,5	;RP0=0, select bank0
  5346  00AC  1303               	bcf	3,6	;RP1=0, select bank0
  5347  00AD  00D3               	movwf	___ftdiv@f1+2
  5348  00AE  120A  158A  2163  120A  118A  	fcall	___ftdiv
  5349  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  5350  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  5351  00B5  084E               	movf	?___ftdiv,w
  5352  00B6  1683               	bsf	3,5	;RP0=1, select bank1
  5353  00B7  1303               	bcf	3,6	;RP1=0, select bank1
  5354  00B8  00C4               	movwf	CalcMQ135@ratio^(0+128)
  5355  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  5356  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  5357  00BB  084F               	movf	?___ftdiv+1,w
  5358  00BC  1683               	bsf	3,5	;RP0=1, select bank1
  5359  00BD  1303               	bcf	3,6	;RP1=0, select bank1
  5360  00BE  00C5               	movwf	(CalcMQ135@ratio+1)^(0+128)
  5361  00BF  1283               	bcf	3,5	;RP0=0, select bank0
  5362  00C0  1303               	bcf	3,6	;RP1=0, select bank0
  5363  00C1  0850               	movf	?___ftdiv+2,w
  5364  00C2  1683               	bsf	3,5	;RP0=1, select bank1
  5365  00C3  1303               	bcf	3,6	;RP1=0, select bank1
  5366  00C4  00C6               	movwf	(CalcMQ135@ratio+2)^(0+128)
  5367                           
  5368                           ;mq135_module.h: 93: float ratio2 = ratio * ratio;
  5369  00C5  0844               	movf	CalcMQ135@ratio^(0+128),w
  5370  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  5371  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  5372  00C8  00BE               	movwf	___ftmul@f1
  5373  00C9  1683               	bsf	3,5	;RP0=1, select bank1
  5374  00CA  1303               	bcf	3,6	;RP1=0, select bank1
  5375  00CB  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5376  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  5377  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  5378  00CE  00BF               	movwf	___ftmul@f1+1
  5379  00CF  1683               	bsf	3,5	;RP0=1, select bank1
  5380  00D0  1303               	bcf	3,6	;RP1=0, select bank1
  5381  00D1  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5382  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  5383  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  5384  00D4  00C0               	movwf	___ftmul@f1+2
  5385  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  5386  00D6  1303               	bcf	3,6	;RP1=0, select bank1
  5387  00D7  0844               	movf	CalcMQ135@ratio^(0+128),w
  5388  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  5389  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  5390  00DA  00C1               	movwf	___ftmul@f2
  5391  00DB  1683               	bsf	3,5	;RP0=1, select bank1
  5392  00DC  1303               	bcf	3,6	;RP1=0, select bank1
  5393  00DD  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5394  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  5395  00DF  1303               	bcf	3,6	;RP1=0, select bank0
  5396  00E0  00C2               	movwf	___ftmul@f2+1
  5397  00E1  1683               	bsf	3,5	;RP0=1, select bank1
  5398  00E2  1303               	bcf	3,6	;RP1=0, select bank1
  5399  00E3  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5400  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  5401  00E5  1303               	bcf	3,6	;RP1=0, select bank0
  5402  00E6  00C3               	movwf	___ftmul@f2+2
  5403  00E7  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5404  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  5405  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  5406  00EE  083E               	movf	?___ftmul,w
  5407  00EF  1683               	bsf	3,5	;RP0=1, select bank1
  5408  00F0  1303               	bcf	3,6	;RP1=0, select bank1
  5409  00F1  00B5               	movwf	CalcMQ135@ratio2^(0+128)
  5410  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  5411  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  5412  00F4  083F               	movf	?___ftmul+1,w
  5413  00F5  1683               	bsf	3,5	;RP0=1, select bank1
  5414  00F6  1303               	bcf	3,6	;RP1=0, select bank1
  5415  00F7  00B6               	movwf	(CalcMQ135@ratio2+1)^(0+128)
  5416  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  5417  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  5418  00FA  0840               	movf	?___ftmul+2,w
  5419  00FB  1683               	bsf	3,5	;RP0=1, select bank1
  5420  00FC  1303               	bcf	3,6	;RP1=0, select bank1
  5421  00FD  00B7               	movwf	(CalcMQ135@ratio2+2)^(0+128)
  5422                           
  5423                           ;mq135_module.h: 94: float ratio3 = ratio2 * ratio;
  5424  00FE  0844               	movf	CalcMQ135@ratio^(0+128),w
  5425  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  5426  0100  1303               	bcf	3,6	;RP1=0, select bank0
  5427  0101  00BE               	movwf	___ftmul@f1
  5428  0102  1683               	bsf	3,5	;RP0=1, select bank1
  5429  0103  1303               	bcf	3,6	;RP1=0, select bank1
  5430  0104  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5431  0105  1283               	bcf	3,5	;RP0=0, select bank0
  5432  0106  1303               	bcf	3,6	;RP1=0, select bank0
  5433  0107  00BF               	movwf	___ftmul@f1+1
  5434  0108  1683               	bsf	3,5	;RP0=1, select bank1
  5435  0109  1303               	bcf	3,6	;RP1=0, select bank1
  5436  010A  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5437  010B  1283               	bcf	3,5	;RP0=0, select bank0
  5438  010C  1303               	bcf	3,6	;RP1=0, select bank0
  5439  010D  00C0               	movwf	___ftmul@f1+2
  5440  010E  1683               	bsf	3,5	;RP0=1, select bank1
  5441  010F  1303               	bcf	3,6	;RP1=0, select bank1
  5442  0110  0835               	movf	CalcMQ135@ratio2^(0+128),w
  5443  0111  1283               	bcf	3,5	;RP0=0, select bank0
  5444  0112  1303               	bcf	3,6	;RP1=0, select bank0
  5445  0113  00C1               	movwf	___ftmul@f2
  5446  0114  1683               	bsf	3,5	;RP0=1, select bank1
  5447  0115  1303               	bcf	3,6	;RP1=0, select bank1
  5448  0116  0836               	movf	(CalcMQ135@ratio2+1)^(0+128),w
  5449  0117  1283               	bcf	3,5	;RP0=0, select bank0
  5450  0118  1303               	bcf	3,6	;RP1=0, select bank0
  5451  0119  00C2               	movwf	___ftmul@f2+1
  5452  011A  1683               	bsf	3,5	;RP0=1, select bank1
  5453  011B  1303               	bcf	3,6	;RP1=0, select bank1
  5454  011C  0837               	movf	(CalcMQ135@ratio2+2)^(0+128),w
  5455  011D  1283               	bcf	3,5	;RP0=0, select bank0
  5456  011E  1303               	bcf	3,6	;RP1=0, select bank0
  5457  011F  00C3               	movwf	___ftmul@f2+2
  5458  0120  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5459  0125  1283               	bcf	3,5	;RP0=0, select bank0
  5460  0126  1303               	bcf	3,6	;RP1=0, select bank0
  5461  0127  083E               	movf	?___ftmul,w
  5462  0128  1683               	bsf	3,5	;RP0=1, select bank1
  5463  0129  1303               	bcf	3,6	;RP1=0, select bank1
  5464  012A  00B8               	movwf	CalcMQ135@ratio3^(0+128)
  5465  012B  1283               	bcf	3,5	;RP0=0, select bank0
  5466  012C  1303               	bcf	3,6	;RP1=0, select bank0
  5467  012D  083F               	movf	?___ftmul+1,w
  5468  012E  1683               	bsf	3,5	;RP0=1, select bank1
  5469  012F  1303               	bcf	3,6	;RP1=0, select bank1
  5470  0130  00B9               	movwf	(CalcMQ135@ratio3+1)^(0+128)
  5471  0131  1283               	bcf	3,5	;RP0=0, select bank0
  5472  0132  1303               	bcf	3,6	;RP1=0, select bank0
  5473  0133  0840               	movf	?___ftmul+2,w
  5474  0134  1683               	bsf	3,5	;RP0=1, select bank1
  5475  0135  1303               	bcf	3,6	;RP1=0, select bank1
  5476  0136  00BA               	movwf	(CalcMQ135@ratio3+2)^(0+128)
  5477                           
  5478                           ;mq135_module.h: 95: float ratio4 = ratio3 * ratio;
  5479  0137  0844               	movf	CalcMQ135@ratio^(0+128),w
  5480  0138  1283               	bcf	3,5	;RP0=0, select bank0
  5481  0139  1303               	bcf	3,6	;RP1=0, select bank0
  5482  013A  00BE               	movwf	___ftmul@f1
  5483  013B  1683               	bsf	3,5	;RP0=1, select bank1
  5484  013C  1303               	bcf	3,6	;RP1=0, select bank1
  5485  013D  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5486  013E  1283               	bcf	3,5	;RP0=0, select bank0
  5487  013F  1303               	bcf	3,6	;RP1=0, select bank0
  5488  0140  00BF               	movwf	___ftmul@f1+1
  5489  0141  1683               	bsf	3,5	;RP0=1, select bank1
  5490  0142  1303               	bcf	3,6	;RP1=0, select bank1
  5491  0143  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5492  0144  1283               	bcf	3,5	;RP0=0, select bank0
  5493  0145  1303               	bcf	3,6	;RP1=0, select bank0
  5494  0146  00C0               	movwf	___ftmul@f1+2
  5495  0147  1683               	bsf	3,5	;RP0=1, select bank1
  5496  0148  1303               	bcf	3,6	;RP1=0, select bank1
  5497  0149  0838               	movf	CalcMQ135@ratio3^(0+128),w
  5498  014A  1283               	bcf	3,5	;RP0=0, select bank0
  5499  014B  1303               	bcf	3,6	;RP1=0, select bank0
  5500  014C  00C1               	movwf	___ftmul@f2
  5501  014D  1683               	bsf	3,5	;RP0=1, select bank1
  5502  014E  1303               	bcf	3,6	;RP1=0, select bank1
  5503  014F  0839               	movf	(CalcMQ135@ratio3+1)^(0+128),w
  5504  0150  1283               	bcf	3,5	;RP0=0, select bank0
  5505  0151  1303               	bcf	3,6	;RP1=0, select bank0
  5506  0152  00C2               	movwf	___ftmul@f2+1
  5507  0153  1683               	bsf	3,5	;RP0=1, select bank1
  5508  0154  1303               	bcf	3,6	;RP1=0, select bank1
  5509  0155  083A               	movf	(CalcMQ135@ratio3+2)^(0+128),w
  5510  0156  1283               	bcf	3,5	;RP0=0, select bank0
  5511  0157  1303               	bcf	3,6	;RP1=0, select bank0
  5512  0158  00C3               	movwf	___ftmul@f2+2
  5513  0159  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5514  015E  1283               	bcf	3,5	;RP0=0, select bank0
  5515  015F  1303               	bcf	3,6	;RP1=0, select bank0
  5516  0160  083E               	movf	?___ftmul,w
  5517  0161  1683               	bsf	3,5	;RP0=1, select bank1
  5518  0162  1303               	bcf	3,6	;RP1=0, select bank1
  5519  0163  00BB               	movwf	CalcMQ135@ratio4^(0+128)
  5520  0164  1283               	bcf	3,5	;RP0=0, select bank0
  5521  0165  1303               	bcf	3,6	;RP1=0, select bank0
  5522  0166  083F               	movf	?___ftmul+1,w
  5523  0167  1683               	bsf	3,5	;RP0=1, select bank1
  5524  0168  1303               	bcf	3,6	;RP1=0, select bank1
  5525  0169  00BC               	movwf	(CalcMQ135@ratio4+1)^(0+128)
  5526  016A  1283               	bcf	3,5	;RP0=0, select bank0
  5527  016B  1303               	bcf	3,6	;RP1=0, select bank0
  5528  016C  0840               	movf	?___ftmul+2,w
  5529  016D  1683               	bsf	3,5	;RP0=1, select bank1
  5530  016E  1303               	bcf	3,6	;RP1=0, select bank1
  5531  016F  00BD               	movwf	(CalcMQ135@ratio4+2)^(0+128)
  5532                           
  5533                           ;mq135_module.h: 96: float ratio5 = ratio4 * ratio;
  5534  0170  0844               	movf	CalcMQ135@ratio^(0+128),w
  5535  0171  1283               	bcf	3,5	;RP0=0, select bank0
  5536  0172  1303               	bcf	3,6	;RP1=0, select bank0
  5537  0173  00BE               	movwf	___ftmul@f1
  5538  0174  1683               	bsf	3,5	;RP0=1, select bank1
  5539  0175  1303               	bcf	3,6	;RP1=0, select bank1
  5540  0176  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5541  0177  1283               	bcf	3,5	;RP0=0, select bank0
  5542  0178  1303               	bcf	3,6	;RP1=0, select bank0
  5543  0179  00BF               	movwf	___ftmul@f1+1
  5544  017A  1683               	bsf	3,5	;RP0=1, select bank1
  5545  017B  1303               	bcf	3,6	;RP1=0, select bank1
  5546  017C  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5547  017D  1283               	bcf	3,5	;RP0=0, select bank0
  5548  017E  1303               	bcf	3,6	;RP1=0, select bank0
  5549  017F  00C0               	movwf	___ftmul@f1+2
  5550  0180  1683               	bsf	3,5	;RP0=1, select bank1
  5551  0181  1303               	bcf	3,6	;RP1=0, select bank1
  5552  0182  083B               	movf	CalcMQ135@ratio4^(0+128),w
  5553  0183  1283               	bcf	3,5	;RP0=0, select bank0
  5554  0184  1303               	bcf	3,6	;RP1=0, select bank0
  5555  0185  00C1               	movwf	___ftmul@f2
  5556  0186  1683               	bsf	3,5	;RP0=1, select bank1
  5557  0187  1303               	bcf	3,6	;RP1=0, select bank1
  5558  0188  083C               	movf	(CalcMQ135@ratio4+1)^(0+128),w
  5559  0189  1283               	bcf	3,5	;RP0=0, select bank0
  5560  018A  1303               	bcf	3,6	;RP1=0, select bank0
  5561  018B  00C2               	movwf	___ftmul@f2+1
  5562  018C  1683               	bsf	3,5	;RP0=1, select bank1
  5563  018D  1303               	bcf	3,6	;RP1=0, select bank1
  5564  018E  083D               	movf	(CalcMQ135@ratio4+2)^(0+128),w
  5565  018F  1283               	bcf	3,5	;RP0=0, select bank0
  5566  0190  1303               	bcf	3,6	;RP1=0, select bank0
  5567  0191  00C3               	movwf	___ftmul@f2+2
  5568  0192  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5569  0197  1283               	bcf	3,5	;RP0=0, select bank0
  5570  0198  1303               	bcf	3,6	;RP1=0, select bank0
  5571  0199  083E               	movf	?___ftmul,w
  5572  019A  1683               	bsf	3,5	;RP0=1, select bank1
  5573  019B  1303               	bcf	3,6	;RP1=0, select bank1
  5574  019C  00BE               	movwf	CalcMQ135@ratio5^(0+128)
  5575  019D  1283               	bcf	3,5	;RP0=0, select bank0
  5576  019E  1303               	bcf	3,6	;RP1=0, select bank0
  5577  019F  083F               	movf	?___ftmul+1,w
  5578  01A0  1683               	bsf	3,5	;RP0=1, select bank1
  5579  01A1  1303               	bcf	3,6	;RP1=0, select bank1
  5580  01A2  00BF               	movwf	(CalcMQ135@ratio5+1)^(0+128)
  5581  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  5582  01A4  1303               	bcf	3,6	;RP1=0, select bank0
  5583  01A5  0840               	movf	?___ftmul+2,w
  5584  01A6  1683               	bsf	3,5	;RP0=1, select bank1
  5585  01A7  1303               	bcf	3,6	;RP1=0, select bank1
  5586  01A8  00C0               	movwf	(CalcMQ135@ratio5+2)^(0+128)
  5587                           
  5588                           ;mq135_module.h: 97: float ratio6 = ratio5 * ratio;
  5589  01A9  0844               	movf	CalcMQ135@ratio^(0+128),w
  5590  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  5591  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  5592  01AC  00BE               	movwf	___ftmul@f1
  5593  01AD  1683               	bsf	3,5	;RP0=1, select bank1
  5594  01AE  1303               	bcf	3,6	;RP1=0, select bank1
  5595  01AF  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5596  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  5597  01B1  1303               	bcf	3,6	;RP1=0, select bank0
  5598  01B2  00BF               	movwf	___ftmul@f1+1
  5599  01B3  1683               	bsf	3,5	;RP0=1, select bank1
  5600  01B4  1303               	bcf	3,6	;RP1=0, select bank1
  5601  01B5  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5602  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  5603  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  5604  01B8  00C0               	movwf	___ftmul@f1+2
  5605  01B9  1683               	bsf	3,5	;RP0=1, select bank1
  5606  01BA  1303               	bcf	3,6	;RP1=0, select bank1
  5607  01BB  083E               	movf	CalcMQ135@ratio5^(0+128),w
  5608  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  5609  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  5610  01BE  00C1               	movwf	___ftmul@f2
  5611  01BF  1683               	bsf	3,5	;RP0=1, select bank1
  5612  01C0  1303               	bcf	3,6	;RP1=0, select bank1
  5613  01C1  083F               	movf	(CalcMQ135@ratio5+1)^(0+128),w
  5614  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  5615  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  5616  01C4  00C2               	movwf	___ftmul@f2+1
  5617  01C5  1683               	bsf	3,5	;RP0=1, select bank1
  5618  01C6  1303               	bcf	3,6	;RP1=0, select bank1
  5619  01C7  0840               	movf	(CalcMQ135@ratio5+2)^(0+128),w
  5620  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  5621  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  5622  01CA  00C3               	movwf	___ftmul@f2+2
  5623  01CB  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5624  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  5625  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  5626  01D2  083E               	movf	?___ftmul,w
  5627  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  5628  01D4  1303               	bcf	3,6	;RP1=0, select bank1
  5629  01D5  00A3               	movwf	CalcMQ135@ratio6^(0+128)
  5630  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  5631  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  5632  01D8  083F               	movf	?___ftmul+1,w
  5633  01D9  1683               	bsf	3,5	;RP0=1, select bank1
  5634  01DA  1303               	bcf	3,6	;RP1=0, select bank1
  5635  01DB  00A4               	movwf	(CalcMQ135@ratio6+1)^(0+128)
  5636  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  5637  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  5638  01DE  0840               	movf	?___ftmul+2,w
  5639  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  5640  01E0  1303               	bcf	3,6	;RP1=0, select bank1
  5641  01E1  00A5               	movwf	(CalcMQ135@ratio6+2)^(0+128)
  5642                           
  5643                           ;mq135_module.h: 100: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  5644                           ;mq135_module.h: 101: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  5645  01E2  309C               	movlw	156
  5646  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  5647  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  5648  01E5  00BE               	movwf	___ftmul@f1
  5649  01E6  30B2               	movlw	178
  5650  01E7  00BF               	movwf	___ftmul@f1+1
  5651  01E8  303F               	movlw	63
  5652  01E9  00C0               	movwf	___ftmul@f1+2
  5653  01EA  1683               	bsf	3,5	;RP0=1, select bank1
  5654  01EB  1303               	bcf	3,6	;RP1=0, select bank1
  5655  01EC  0835               	movf	CalcMQ135@ratio2^(0+128),w
  5656  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  5657  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  5658  01EF  00C1               	movwf	___ftmul@f2
  5659  01F0  1683               	bsf	3,5	;RP0=1, select bank1
  5660  01F1  1303               	bcf	3,6	;RP1=0, select bank1
  5661  01F2  0836               	movf	(CalcMQ135@ratio2+1)^(0+128),w
  5662  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  5663  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  5664  01F5  00C2               	movwf	___ftmul@f2+1
  5665  01F6  1683               	bsf	3,5	;RP0=1, select bank1
  5666  01F7  1303               	bcf	3,6	;RP1=0, select bank1
  5667  01F8  0837               	movf	(CalcMQ135@ratio2+2)^(0+128),w
  5668  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  5669  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  5670  01FB  00C3               	movwf	___ftmul@f2+2
  5671  01FC  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5672  0201  1283               	bcf	3,5	;RP0=0, select bank0
  5673  0202  1303               	bcf	3,6	;RP1=0, select bank0
  5674  0203  083E               	movf	?___ftmul,w
  5675  0204  00B1               	movwf	___ftadd@f1
  5676  0205  083F               	movf	?___ftmul+1,w
  5677  0206  00B2               	movwf	___ftadd@f1+1
  5678  0207  0840               	movf	?___ftmul+2,w
  5679  0208  00B3               	movwf	___ftadd@f1+2
  5680  0209  30A9               	movlw	169
  5681  020A  00BE               	movwf	___ftmul@f1
  5682  020B  30DE               	movlw	222
  5683  020C  00BF               	movwf	___ftmul@f1+1
  5684  020D  303C               	movlw	60
  5685  020E  00C0               	movwf	___ftmul@f1+2
  5686  020F  1683               	bsf	3,5	;RP0=1, select bank1
  5687  0210  1303               	bcf	3,6	;RP1=0, select bank1
  5688  0211  0844               	movf	CalcMQ135@ratio^(0+128),w
  5689  0212  1283               	bcf	3,5	;RP0=0, select bank0
  5690  0213  1303               	bcf	3,6	;RP1=0, select bank0
  5691  0214  00C1               	movwf	___ftmul@f2
  5692  0215  1683               	bsf	3,5	;RP0=1, select bank1
  5693  0216  1303               	bcf	3,6	;RP1=0, select bank1
  5694  0217  0845               	movf	(CalcMQ135@ratio+1)^(0+128),w
  5695  0218  1283               	bcf	3,5	;RP0=0, select bank0
  5696  0219  1303               	bcf	3,6	;RP1=0, select bank0
  5697  021A  00C2               	movwf	___ftmul@f2+1
  5698  021B  1683               	bsf	3,5	;RP0=1, select bank1
  5699  021C  1303               	bcf	3,6	;RP1=0, select bank1
  5700  021D  0846               	movf	(CalcMQ135@ratio+2)^(0+128),w
  5701  021E  1283               	bcf	3,5	;RP0=0, select bank0
  5702  021F  1303               	bcf	3,6	;RP1=0, select bank0
  5703  0220  00C3               	movwf	___ftmul@f2+2
  5704  0221  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5705  0226  1283               	bcf	3,5	;RP0=0, select bank0
  5706  0227  1303               	bcf	3,6	;RP1=0, select bank0
  5707  0228  083E               	movf	?___ftmul,w
  5708  0229  00B4               	movwf	___ftadd@f2
  5709  022A  083F               	movf	?___ftmul+1,w
  5710  022B  00B5               	movwf	___ftadd@f2+1
  5711  022C  0840               	movf	?___ftmul+2,w
  5712  022D  00B6               	movwf	___ftadd@f2+2
  5713  022E  120A  158A  25CE  120A  118A  	fcall	___ftadd
  5714  0233  1283               	bcf	3,5	;RP0=0, select bank0
  5715  0234  1303               	bcf	3,6	;RP1=0, select bank0
  5716  0235  0831               	movf	?___ftadd,w
  5717  0236  1683               	bsf	3,5	;RP0=1, select bank1
  5718  0237  1303               	bcf	3,6	;RP1=0, select bank1
  5719  0238  00A6               	movwf	_CalcMQ135$657^(0+128)
  5720  0239  1283               	bcf	3,5	;RP0=0, select bank0
  5721  023A  1303               	bcf	3,6	;RP1=0, select bank0
  5722  023B  0832               	movf	?___ftadd+1,w
  5723  023C  1683               	bsf	3,5	;RP0=1, select bank1
  5724  023D  1303               	bcf	3,6	;RP1=0, select bank1
  5725  023E  00A7               	movwf	(_CalcMQ135$657+1)^(0+128)
  5726  023F  1283               	bcf	3,5	;RP0=0, select bank0
  5727  0240  1303               	bcf	3,6	;RP1=0, select bank0
  5728  0241  0833               	movf	?___ftadd+2,w
  5729  0242  1683               	bsf	3,5	;RP0=1, select bank1
  5730  0243  1303               	bcf	3,6	;RP1=0, select bank1
  5731  0244  00A8               	movwf	(_CalcMQ135$657+2)^(0+128)
  5732                           
  5733                           ;mq135_module.h: 100: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  5734                           ;mq135_module.h: 101: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  5735  0245  30EE               	movlw	238
  5736  0246  1283               	bcf	3,5	;RP0=0, select bank0
  5737  0247  1303               	bcf	3,6	;RP1=0, select bank0
  5738  0248  00BE               	movwf	___ftmul@f1
  5739  0249  30EB               	movlw	235
  5740  024A  00BF               	movwf	___ftmul@f1+1
  5741  024B  303A               	movlw	58
  5742  024C  00C0               	movwf	___ftmul@f1+2
  5743  024D  1683               	bsf	3,5	;RP0=1, select bank1
  5744  024E  1303               	bcf	3,6	;RP1=0, select bank1
  5745  024F  0838               	movf	CalcMQ135@ratio3^(0+128),w
  5746  0250  1283               	bcf	3,5	;RP0=0, select bank0
  5747  0251  1303               	bcf	3,6	;RP1=0, select bank0
  5748  0252  00C1               	movwf	___ftmul@f2
  5749  0253  1683               	bsf	3,5	;RP0=1, select bank1
  5750  0254  1303               	bcf	3,6	;RP1=0, select bank1
  5751  0255  0839               	movf	(CalcMQ135@ratio3+1)^(0+128),w
  5752  0256  1283               	bcf	3,5	;RP0=0, select bank0
  5753  0257  1303               	bcf	3,6	;RP1=0, select bank0
  5754  0258  00C2               	movwf	___ftmul@f2+1
  5755  0259  1683               	bsf	3,5	;RP0=1, select bank1
  5756  025A  1303               	bcf	3,6	;RP1=0, select bank1
  5757  025B  083A               	movf	(CalcMQ135@ratio3+2)^(0+128),w
  5758  025C  1283               	bcf	3,5	;RP0=0, select bank0
  5759  025D  1303               	bcf	3,6	;RP1=0, select bank0
  5760  025E  00C3               	movwf	___ftmul@f2+2
  5761  025F  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5762  0264  1283               	bcf	3,5	;RP0=0, select bank0
  5763  0265  1303               	bcf	3,6	;RP1=0, select bank0
  5764  0266  083E               	movf	?___ftmul,w
  5765  0267  00B1               	movwf	___ftadd@f1
  5766  0268  083F               	movf	?___ftmul+1,w
  5767  0269  00B2               	movwf	___ftadd@f1+1
  5768  026A  0840               	movf	?___ftmul+2,w
  5769  026B  00B3               	movwf	___ftadd@f1+2
  5770  026C  1683               	bsf	3,5	;RP0=1, select bank1
  5771  026D  1303               	bcf	3,6	;RP1=0, select bank1
  5772  026E  0826               	movf	_CalcMQ135$657^(0+128),w
  5773  026F  1283               	bcf	3,5	;RP0=0, select bank0
  5774  0270  1303               	bcf	3,6	;RP1=0, select bank0
  5775  0271  00B4               	movwf	___ftadd@f2
  5776  0272  1683               	bsf	3,5	;RP0=1, select bank1
  5777  0273  1303               	bcf	3,6	;RP1=0, select bank1
  5778  0274  0827               	movf	(_CalcMQ135$657+1)^(0+128),w
  5779  0275  1283               	bcf	3,5	;RP0=0, select bank0
  5780  0276  1303               	bcf	3,6	;RP1=0, select bank0
  5781  0277  00B5               	movwf	___ftadd@f2+1
  5782  0278  1683               	bsf	3,5	;RP0=1, select bank1
  5783  0279  1303               	bcf	3,6	;RP1=0, select bank1
  5784  027A  0828               	movf	(_CalcMQ135$657+2)^(0+128),w
  5785  027B  1283               	bcf	3,5	;RP0=0, select bank0
  5786  027C  1303               	bcf	3,6	;RP1=0, select bank0
  5787  027D  00B6               	movwf	___ftadd@f2+2
  5788  027E  120A  158A  25CE  120A  118A  	fcall	___ftadd
  5789  0283  1283               	bcf	3,5	;RP0=0, select bank0
  5790  0284  1303               	bcf	3,6	;RP1=0, select bank0
  5791  0285  0831               	movf	?___ftadd,w
  5792  0286  1683               	bsf	3,5	;RP0=1, select bank1
  5793  0287  1303               	bcf	3,6	;RP1=0, select bank1
  5794  0288  00A9               	movwf	_CalcMQ135$658^(0+128)
  5795  0289  1283               	bcf	3,5	;RP0=0, select bank0
  5796  028A  1303               	bcf	3,6	;RP1=0, select bank0
  5797  028B  0832               	movf	?___ftadd+1,w
  5798  028C  1683               	bsf	3,5	;RP0=1, select bank1
  5799  028D  1303               	bcf	3,6	;RP1=0, select bank1
  5800  028E  00AA               	movwf	(_CalcMQ135$658+1)^(0+128)
  5801  028F  1283               	bcf	3,5	;RP0=0, select bank0
  5802  0290  1303               	bcf	3,6	;RP1=0, select bank0
  5803  0291  0833               	movf	?___ftadd+2,w
  5804  0292  1683               	bsf	3,5	;RP0=1, select bank1
  5805  0293  1303               	bcf	3,6	;RP1=0, select bank1
  5806  0294  00AB               	movwf	(_CalcMQ135$658+2)^(0+128)
  5807                           
  5808                           ;mq135_module.h: 100: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  5809                           ;mq135_module.h: 101: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  5810  0295  3074               	movlw	116
  5811  0296  1283               	bcf	3,5	;RP0=0, select bank0
  5812  0297  1303               	bcf	3,6	;RP1=0, select bank0
  5813  0298  00BE               	movwf	___ftmul@f1
  5814  0299  305A               	movlw	90
  5815  029A  00BF               	movwf	___ftmul@f1+1
  5816  029B  30BB               	movlw	187
  5817  029C  00C0               	movwf	___ftmul@f1+2
  5818  029D  1683               	bsf	3,5	;RP0=1, select bank1
  5819  029E  1303               	bcf	3,6	;RP1=0, select bank1
  5820  029F  083B               	movf	CalcMQ135@ratio4^(0+128),w
  5821  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  5822  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  5823  02A2  00C1               	movwf	___ftmul@f2
  5824  02A3  1683               	bsf	3,5	;RP0=1, select bank1
  5825  02A4  1303               	bcf	3,6	;RP1=0, select bank1
  5826  02A5  083C               	movf	(CalcMQ135@ratio4+1)^(0+128),w
  5827  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  5828  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  5829  02A8  00C2               	movwf	___ftmul@f2+1
  5830  02A9  1683               	bsf	3,5	;RP0=1, select bank1
  5831  02AA  1303               	bcf	3,6	;RP1=0, select bank1
  5832  02AB  083D               	movf	(CalcMQ135@ratio4+2)^(0+128),w
  5833  02AC  1283               	bcf	3,5	;RP0=0, select bank0
  5834  02AD  1303               	bcf	3,6	;RP1=0, select bank0
  5835  02AE  00C3               	movwf	___ftmul@f2+2
  5836  02AF  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5837  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  5838  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  5839  02B6  083E               	movf	?___ftmul,w
  5840  02B7  00B1               	movwf	___ftadd@f1
  5841  02B8  083F               	movf	?___ftmul+1,w
  5842  02B9  00B2               	movwf	___ftadd@f1+1
  5843  02BA  0840               	movf	?___ftmul+2,w
  5844  02BB  00B3               	movwf	___ftadd@f1+2
  5845  02BC  1683               	bsf	3,5	;RP0=1, select bank1
  5846  02BD  1303               	bcf	3,6	;RP1=0, select bank1
  5847  02BE  0829               	movf	_CalcMQ135$658^(0+128),w
  5848  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  5849  02C0  1303               	bcf	3,6	;RP1=0, select bank0
  5850  02C1  00B4               	movwf	___ftadd@f2
  5851  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  5852  02C3  1303               	bcf	3,6	;RP1=0, select bank1
  5853  02C4  082A               	movf	(_CalcMQ135$658+1)^(0+128),w
  5854  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  5855  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  5856  02C7  00B5               	movwf	___ftadd@f2+1
  5857  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  5858  02C9  1303               	bcf	3,6	;RP1=0, select bank1
  5859  02CA  082B               	movf	(_CalcMQ135$658+2)^(0+128),w
  5860  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  5861  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  5862  02CD  00B6               	movwf	___ftadd@f2+2
  5863  02CE  120A  158A  25CE  120A  118A  	fcall	___ftadd
  5864  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  5865  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  5866  02D5  0831               	movf	?___ftadd,w
  5867  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  5868  02D7  1303               	bcf	3,6	;RP1=0, select bank1
  5869  02D8  00AC               	movwf	_CalcMQ135$659^(0+128)
  5870  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  5871  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  5872  02DB  0832               	movf	?___ftadd+1,w
  5873  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  5874  02DD  1303               	bcf	3,6	;RP1=0, select bank1
  5875  02DE  00AD               	movwf	(_CalcMQ135$659+1)^(0+128)
  5876  02DF  1283               	bcf	3,5	;RP0=0, select bank0
  5877  02E0  1303               	bcf	3,6	;RP1=0, select bank0
  5878  02E1  0833               	movf	?___ftadd+2,w
  5879  02E2  1683               	bsf	3,5	;RP0=1, select bank1
  5880  02E3  1303               	bcf	3,6	;RP1=0, select bank1
  5881  02E4  00AE               	movwf	(_CalcMQ135$659+2)^(0+128)
  5882                           
  5883                           ;mq135_module.h: 100: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  5884                           ;mq135_module.h: 101: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  5885  02E5  3010               	movlw	16
  5886  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  5887  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  5888  02E8  00BE               	movwf	___ftmul@f1
  5889  02E9  30FC               	movlw	252
  5890  02EA  00BF               	movwf	___ftmul@f1+1
  5891  02EB  30BA               	movlw	186
  5892  02EC  00C0               	movwf	___ftmul@f1+2
  5893  02ED  1683               	bsf	3,5	;RP0=1, select bank1
  5894  02EE  1303               	bcf	3,6	;RP1=0, select bank1
  5895  02EF  083E               	movf	CalcMQ135@ratio5^(0+128),w
  5896  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  5897  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  5898  02F2  00C1               	movwf	___ftmul@f2
  5899  02F3  1683               	bsf	3,5	;RP0=1, select bank1
  5900  02F4  1303               	bcf	3,6	;RP1=0, select bank1
  5901  02F5  083F               	movf	(CalcMQ135@ratio5+1)^(0+128),w
  5902  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  5903  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  5904  02F8  00C2               	movwf	___ftmul@f2+1
  5905  02F9  1683               	bsf	3,5	;RP0=1, select bank1
  5906  02FA  1303               	bcf	3,6	;RP1=0, select bank1
  5907  02FB  0840               	movf	(CalcMQ135@ratio5+2)^(0+128),w
  5908  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  5909  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  5910  02FE  00C3               	movwf	___ftmul@f2+2
  5911  02FF  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5912  0304  1283               	bcf	3,5	;RP0=0, select bank0
  5913  0305  1303               	bcf	3,6	;RP1=0, select bank0
  5914  0306  083E               	movf	?___ftmul,w
  5915  0307  00B1               	movwf	___ftadd@f1
  5916  0308  083F               	movf	?___ftmul+1,w
  5917  0309  00B2               	movwf	___ftadd@f1+1
  5918  030A  0840               	movf	?___ftmul+2,w
  5919  030B  00B3               	movwf	___ftadd@f1+2
  5920  030C  1683               	bsf	3,5	;RP0=1, select bank1
  5921  030D  1303               	bcf	3,6	;RP1=0, select bank1
  5922  030E  082C               	movf	_CalcMQ135$659^(0+128),w
  5923  030F  1283               	bcf	3,5	;RP0=0, select bank0
  5924  0310  1303               	bcf	3,6	;RP1=0, select bank0
  5925  0311  00B4               	movwf	___ftadd@f2
  5926  0312  1683               	bsf	3,5	;RP0=1, select bank1
  5927  0313  1303               	bcf	3,6	;RP1=0, select bank1
  5928  0314  082D               	movf	(_CalcMQ135$659+1)^(0+128),w
  5929  0315  1283               	bcf	3,5	;RP0=0, select bank0
  5930  0316  1303               	bcf	3,6	;RP1=0, select bank0
  5931  0317  00B5               	movwf	___ftadd@f2+1
  5932  0318  1683               	bsf	3,5	;RP0=1, select bank1
  5933  0319  1303               	bcf	3,6	;RP1=0, select bank1
  5934  031A  082E               	movf	(_CalcMQ135$659+2)^(0+128),w
  5935  031B  1283               	bcf	3,5	;RP0=0, select bank0
  5936  031C  1303               	bcf	3,6	;RP1=0, select bank0
  5937  031D  00B6               	movwf	___ftadd@f2+2
  5938  031E  120A  158A  25CE  120A  118A  	fcall	___ftadd
  5939  0323  1283               	bcf	3,5	;RP0=0, select bank0
  5940  0324  1303               	bcf	3,6	;RP1=0, select bank0
  5941  0325  0831               	movf	?___ftadd,w
  5942  0326  1683               	bsf	3,5	;RP0=1, select bank1
  5943  0327  1303               	bcf	3,6	;RP1=0, select bank1
  5944  0328  00AF               	movwf	_CalcMQ135$660^(0+128)
  5945  0329  1283               	bcf	3,5	;RP0=0, select bank0
  5946  032A  1303               	bcf	3,6	;RP1=0, select bank0
  5947  032B  0832               	movf	?___ftadd+1,w
  5948  032C  1683               	bsf	3,5	;RP0=1, select bank1
  5949  032D  1303               	bcf	3,6	;RP1=0, select bank1
  5950  032E  00B0               	movwf	(_CalcMQ135$660+1)^(0+128)
  5951  032F  1283               	bcf	3,5	;RP0=0, select bank0
  5952  0330  1303               	bcf	3,6	;RP1=0, select bank0
  5953  0331  0833               	movf	?___ftadd+2,w
  5954  0332  1683               	bsf	3,5	;RP0=1, select bank1
  5955  0333  1303               	bcf	3,6	;RP1=0, select bank1
  5956  0334  00B1               	movwf	(_CalcMQ135$660+2)^(0+128)
  5957                           
  5958                           ;mq135_module.h: 100: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  5959                           ;mq135_module.h: 101: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  5960  0335  30A8               	movlw	168
  5961  0336  1283               	bcf	3,5	;RP0=0, select bank0
  5962  0337  1303               	bcf	3,6	;RP1=0, select bank0
  5963  0338  00BE               	movwf	___ftmul@f1
  5964  0339  3090               	movlw	144
  5965  033A  00BF               	movwf	___ftmul@f1+1
  5966  033B  303F               	movlw	63
  5967  033C  00C0               	movwf	___ftmul@f1+2
  5968  033D  1683               	bsf	3,5	;RP0=1, select bank1
  5969  033E  1303               	bcf	3,6	;RP1=0, select bank1
  5970  033F  0823               	movf	CalcMQ135@ratio6^(0+128),w
  5971  0340  1283               	bcf	3,5	;RP0=0, select bank0
  5972  0341  1303               	bcf	3,6	;RP1=0, select bank0
  5973  0342  00C1               	movwf	___ftmul@f2
  5974  0343  1683               	bsf	3,5	;RP0=1, select bank1
  5975  0344  1303               	bcf	3,6	;RP1=0, select bank1
  5976  0345  0824               	movf	(CalcMQ135@ratio6+1)^(0+128),w
  5977  0346  1283               	bcf	3,5	;RP0=0, select bank0
  5978  0347  1303               	bcf	3,6	;RP1=0, select bank0
  5979  0348  00C2               	movwf	___ftmul@f2+1
  5980  0349  1683               	bsf	3,5	;RP0=1, select bank1
  5981  034A  1303               	bcf	3,6	;RP1=0, select bank1
  5982  034B  0825               	movf	(CalcMQ135@ratio6+2)^(0+128),w
  5983  034C  1283               	bcf	3,5	;RP0=0, select bank0
  5984  034D  1303               	bcf	3,6	;RP1=0, select bank0
  5985  034E  00C3               	movwf	___ftmul@f2+2
  5986  034F  120A  158A  24FB  120A  118A  	fcall	___ftmul
  5987  0354  1283               	bcf	3,5	;RP0=0, select bank0
  5988  0355  1303               	bcf	3,6	;RP1=0, select bank0
  5989  0356  083E               	movf	?___ftmul,w
  5990  0357  00B1               	movwf	___ftadd@f1
  5991  0358  083F               	movf	?___ftmul+1,w
  5992  0359  00B2               	movwf	___ftadd@f1+1
  5993  035A  0840               	movf	?___ftmul+2,w
  5994  035B  00B3               	movwf	___ftadd@f1+2
  5995  035C  1683               	bsf	3,5	;RP0=1, select bank1
  5996  035D  1303               	bcf	3,6	;RP1=0, select bank1
  5997  035E  082F               	movf	_CalcMQ135$660^(0+128),w
  5998  035F  1283               	bcf	3,5	;RP0=0, select bank0
  5999  0360  1303               	bcf	3,6	;RP1=0, select bank0
  6000  0361  00B4               	movwf	___ftadd@f2
  6001  0362  1683               	bsf	3,5	;RP0=1, select bank1
  6002  0363  1303               	bcf	3,6	;RP1=0, select bank1
  6003  0364  0830               	movf	(_CalcMQ135$660+1)^(0+128),w
  6004  0365  1283               	bcf	3,5	;RP0=0, select bank0
  6005  0366  1303               	bcf	3,6	;RP1=0, select bank0
  6006  0367  00B5               	movwf	___ftadd@f2+1
  6007  0368  1683               	bsf	3,5	;RP0=1, select bank1
  6008  0369  1303               	bcf	3,6	;RP1=0, select bank1
  6009  036A  0831               	movf	(_CalcMQ135$660+2)^(0+128),w
  6010  036B  1283               	bcf	3,5	;RP0=0, select bank0
  6011  036C  1303               	bcf	3,6	;RP1=0, select bank0
  6012  036D  00B6               	movwf	___ftadd@f2+2
  6013  036E  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6014  0373  1283               	bcf	3,5	;RP0=0, select bank0
  6015  0374  1303               	bcf	3,6	;RP1=0, select bank0
  6016  0375  0831               	movf	?___ftadd,w
  6017  0376  1683               	bsf	3,5	;RP0=1, select bank1
  6018  0377  1303               	bcf	3,6	;RP1=0, select bank1
  6019  0378  00B2               	movwf	_CalcMQ135$661^(0+128)
  6020  0379  1283               	bcf	3,5	;RP0=0, select bank0
  6021  037A  1303               	bcf	3,6	;RP1=0, select bank0
  6022  037B  0832               	movf	?___ftadd+1,w
  6023  037C  1683               	bsf	3,5	;RP0=1, select bank1
  6024  037D  1303               	bcf	3,6	;RP1=0, select bank1
  6025  037E  00B3               	movwf	(_CalcMQ135$661+1)^(0+128)
  6026  037F  1283               	bcf	3,5	;RP0=0, select bank0
  6027  0380  1303               	bcf	3,6	;RP1=0, select bank0
  6028  0381  0833               	movf	?___ftadd+2,w
  6029  0382  1683               	bsf	3,5	;RP0=1, select bank1
  6030  0383  1303               	bcf	3,6	;RP1=0, select bank1
  6031  0384  00B4               	movwf	(_CalcMQ135$661+2)^(0+128)
  6032                           
  6033                           ;mq135_module.h: 100: float co2 = 0.00035 + (0.02718 * ratio) + (1.39538 * ratio2) + (0.
      +                          0018 * ratio3) +
  6034                           ;mq135_module.h: 101: (-0.003333333 * ratio4) + (-0.001923077 * ratio5) + (1.130128205 *
      +                           ratio6);
  6035  0385  3080               	movlw	128
  6036  0386  1283               	bcf	3,5	;RP0=0, select bank0
  6037  0387  1303               	bcf	3,6	;RP1=0, select bank0
  6038  0388  00B1               	movwf	___ftadd@f1
  6039  0389  30B7               	movlw	183
  6040  038A  00B2               	movwf	___ftadd@f1+1
  6041  038B  3039               	movlw	57
  6042  038C  00B3               	movwf	___ftadd@f1+2
  6043  038D  1683               	bsf	3,5	;RP0=1, select bank1
  6044  038E  1303               	bcf	3,6	;RP1=0, select bank1
  6045  038F  0832               	movf	_CalcMQ135$661^(0+128),w
  6046  0390  1283               	bcf	3,5	;RP0=0, select bank0
  6047  0391  1303               	bcf	3,6	;RP1=0, select bank0
  6048  0392  00B4               	movwf	___ftadd@f2
  6049  0393  1683               	bsf	3,5	;RP0=1, select bank1
  6050  0394  1303               	bcf	3,6	;RP1=0, select bank1
  6051  0395  0833               	movf	(_CalcMQ135$661+1)^(0+128),w
  6052  0396  1283               	bcf	3,5	;RP0=0, select bank0
  6053  0397  1303               	bcf	3,6	;RP1=0, select bank0
  6054  0398  00B5               	movwf	___ftadd@f2+1
  6055  0399  1683               	bsf	3,5	;RP0=1, select bank1
  6056  039A  1303               	bcf	3,6	;RP1=0, select bank1
  6057  039B  0834               	movf	(_CalcMQ135$661+2)^(0+128),w
  6058  039C  1283               	bcf	3,5	;RP0=0, select bank0
  6059  039D  1303               	bcf	3,6	;RP1=0, select bank0
  6060  039E  00B6               	movwf	___ftadd@f2+2
  6061  039F  120A  158A  25CE  120A  118A  	fcall	___ftadd
  6062  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  6063  03A5  1303               	bcf	3,6	;RP1=0, select bank0
  6064  03A6  0831               	movf	?___ftadd,w
  6065  03A7  1683               	bsf	3,5	;RP0=1, select bank1
  6066  03A8  1303               	bcf	3,6	;RP1=0, select bank1
  6067  03A9  00C1               	movwf	CalcMQ135@co2^(0+128)
  6068  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  6069  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  6070  03AC  0832               	movf	?___ftadd+1,w
  6071  03AD  1683               	bsf	3,5	;RP0=1, select bank1
  6072  03AE  1303               	bcf	3,6	;RP1=0, select bank1
  6073  03AF  00C2               	movwf	(CalcMQ135@co2+1)^(0+128)
  6074  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  6075  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  6076  03B2  0833               	movf	?___ftadd+2,w
  6077  03B3  1683               	bsf	3,5	;RP0=1, select bank1
  6078  03B4  1303               	bcf	3,6	;RP1=0, select bank1
  6079  03B5  00C3               	movwf	(CalcMQ135@co2+2)^(0+128)
  6080                           
  6081                           ;mq135_module.h: 103: co2 *= 415.58;
  6082  03B6  30CA               	movlw	202
  6083  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  6084  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  6085  03B9  00BE               	movwf	___ftmul@f1
  6086  03BA  30CF               	movlw	207
  6087  03BB  00BF               	movwf	___ftmul@f1+1
  6088  03BC  3043               	movlw	67
  6089  03BD  00C0               	movwf	___ftmul@f1+2
  6090  03BE  1683               	bsf	3,5	;RP0=1, select bank1
  6091  03BF  1303               	bcf	3,6	;RP1=0, select bank1
  6092  03C0  0841               	movf	CalcMQ135@co2^(0+128),w
  6093  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  6094  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  6095  03C3  00C1               	movwf	___ftmul@f2
  6096  03C4  1683               	bsf	3,5	;RP0=1, select bank1
  6097  03C5  1303               	bcf	3,6	;RP1=0, select bank1
  6098  03C6  0842               	movf	(CalcMQ135@co2+1)^(0+128),w
  6099  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  6100  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  6101  03C9  00C2               	movwf	___ftmul@f2+1
  6102  03CA  1683               	bsf	3,5	;RP0=1, select bank1
  6103  03CB  1303               	bcf	3,6	;RP1=0, select bank1
  6104  03CC  0843               	movf	(CalcMQ135@co2+2)^(0+128),w
  6105  03CD  1283               	bcf	3,5	;RP0=0, select bank0
  6106  03CE  1303               	bcf	3,6	;RP1=0, select bank0
  6107  03CF  00C3               	movwf	___ftmul@f2+2
  6108  03D0  120A  158A  24FB   	fcall	___ftmul
  6109  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  6110  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  6111  03D5  083E               	movf	?___ftmul,w
  6112  03D6  1683               	bsf	3,5	;RP0=1, select bank1
  6113  03D7  1303               	bcf	3,6	;RP1=0, select bank1
  6114  03D8  00C1               	movwf	CalcMQ135@co2^(0+128)
  6115  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  6116  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  6117  03DB  083F               	movf	?___ftmul+1,w
  6118  03DC  1683               	bsf	3,5	;RP0=1, select bank1
  6119  03DD  1303               	bcf	3,6	;RP1=0, select bank1
  6120  03DE  00C2               	movwf	(CalcMQ135@co2+1)^(0+128)
  6121  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  6122  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  6123  03E1  0840               	movf	?___ftmul+2,w
  6124  03E2  1683               	bsf	3,5	;RP0=1, select bank1
  6125  03E3  1303               	bcf	3,6	;RP1=0, select bank1
  6126  03E4  00C3               	movwf	(CalcMQ135@co2+2)^(0+128)
  6127                           
  6128                           ;mq135_module.h: 104: return co2;
  6129  03E5  0841               	movf	CalcMQ135@co2^(0+128),w
  6130  03E6  1283               	bcf	3,5	;RP0=0, select bank0
  6131  03E7  1303               	bcf	3,6	;RP1=0, select bank0
  6132  03E8  00DE               	movwf	?_CalcMQ135
  6133  03E9  1683               	bsf	3,5	;RP0=1, select bank1
  6134  03EA  1303               	bcf	3,6	;RP1=0, select bank1
  6135  03EB  0842               	movf	(CalcMQ135@co2+1)^(0+128),w
  6136  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  6137  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  6138  03EE  00DF               	movwf	?_CalcMQ135+1
  6139  03EF  1683               	bsf	3,5	;RP0=1, select bank1
  6140  03F0  1303               	bcf	3,6	;RP1=0, select bank1
  6141  03F1  0843               	movf	(CalcMQ135@co2+2)^(0+128),w
  6142  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  6143  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  6144  03F4  00E0               	movwf	?_CalcMQ135+2
  6145  03F5  0008               	return
  6146  03F6                     __end_of_CalcMQ135:	
  6147                           
  6148                           	psect	text25
  6149  0CFB                     __ptext25:	
  6150 ;; *************** function ___ftmul *****************
  6151 ;; Defined at:
  6152 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;  f1              3   30[BANK0 ] float 
  6155 ;;  f2              3   33[BANK0 ] float 
  6156 ;; Auto vars:     Size  Location     Type
  6157 ;;  f3_as_produc    3   41[BANK0 ] unsigned um
  6158 ;;  sign            1   45[BANK0 ] unsigned char 
  6159 ;;  cntr            1   44[BANK0 ] unsigned char 
  6160 ;;  exp             1   40[BANK0 ] unsigned char 
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  3   30[BANK0 ] float 
  6163 ;; Registers used:
  6164 ;;		wreg, status,2, status,0, pclath, cstack
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6170 ;;      Params:         0       6       0       0       0
  6171 ;;      Locals:         0       6       0       0       0
  6172 ;;      Temps:          0       4       0       0       0
  6173 ;;      Totals:         0      16       0       0       0
  6174 ;;Total ram usage:       16 bytes
  6175 ;; Hardware stack levels used:    1
  6176 ;; Hardware stack levels required when called:    3
  6177 ;; This function calls:
  6178 ;;		___ftpack
  6179 ;; This function is called by:
  6180 ;;		_displayPPM
  6181 ;;		_CalcMQ135
  6182 ;; This function uses a non-reentrant model
  6183 ;;
  6184                           
  6185                           
  6186                           ;psect for function ___ftmul
  6187  0CFB                     ___ftmul:	
  6188                           
  6189                           ;incstack = 0
  6190                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6191  0CFB  1283               	bcf	3,5	;RP0=0, select bank0
  6192  0CFC  1303               	bcf	3,6	;RP1=0, select bank0
  6193  0CFD  083E               	movf	___ftmul@f1,w
  6194  0CFE  00C4               	movwf	??___ftmul
  6195  0CFF  083F               	movf	___ftmul@f1+1,w
  6196  0D00  00C5               	movwf	??___ftmul+1
  6197  0D01  0840               	movf	___ftmul@f1+2,w
  6198  0D02  00C6               	movwf	??___ftmul+2
  6199  0D03  1003               	clrc
  6200  0D04  0D45               	rlf	??___ftmul+1,w
  6201  0D05  0D46               	rlf	??___ftmul+2,w
  6202  0D06  00C7               	movwf	??___ftmul+3
  6203  0D07  0847               	movf	??___ftmul+3,w
  6204  0D08  00C8               	movwf	___ftmul@exp
  6205  0D09  08C8               	movf	___ftmul@exp,f
  6206  0D0A  1D03               	skipz
  6207  0D0B  2D13               	goto	l2206
  6208  0D0C  3000               	movlw	0
  6209  0D0D  00BE               	movwf	?___ftmul
  6210  0D0E  3000               	movlw	0
  6211  0D0F  00BF               	movwf	?___ftmul+1
  6212  0D10  3000               	movlw	0
  6213  0D11  00C0               	movwf	?___ftmul+2
  6214  0D12  0008               	return
  6215  0D13                     l2206:	
  6216  0D13  0841               	movf	___ftmul@f2,w
  6217  0D14  00C4               	movwf	??___ftmul
  6218  0D15  0842               	movf	___ftmul@f2+1,w
  6219  0D16  00C5               	movwf	??___ftmul+1
  6220  0D17  0843               	movf	___ftmul@f2+2,w
  6221  0D18  00C6               	movwf	??___ftmul+2
  6222  0D19  1003               	clrc
  6223  0D1A  0D45               	rlf	??___ftmul+1,w
  6224  0D1B  0D46               	rlf	??___ftmul+2,w
  6225  0D1C  00C7               	movwf	??___ftmul+3
  6226  0D1D  0847               	movf	??___ftmul+3,w
  6227  0D1E  00CD               	movwf	___ftmul@sign
  6228  0D1F  08CD               	movf	___ftmul@sign,f
  6229  0D20  1D03               	skipz
  6230  0D21  2D29               	goto	l2212
  6231  0D22  3000               	movlw	0
  6232  0D23  00BE               	movwf	?___ftmul
  6233  0D24  3000               	movlw	0
  6234  0D25  00BF               	movwf	?___ftmul+1
  6235  0D26  3000               	movlw	0
  6236  0D27  00C0               	movwf	?___ftmul+2
  6237  0D28  0008               	return
  6238  0D29                     l2212:	
  6239  0D29  084D               	movf	___ftmul@sign,w
  6240  0D2A  3E7B               	addlw	123
  6241  0D2B  00C4               	movwf	??___ftmul
  6242  0D2C  0844               	movf	??___ftmul,w
  6243  0D2D  07C8               	addwf	___ftmul@exp,f
  6244  0D2E  083E               	movf	___ftmul@f1,w
  6245  0D2F  00C4               	movwf	??___ftmul
  6246  0D30  083F               	movf	___ftmul@f1+1,w
  6247  0D31  00C5               	movwf	??___ftmul+1
  6248  0D32  0840               	movf	___ftmul@f1+2,w
  6249  0D33  00C6               	movwf	??___ftmul+2
  6250  0D34  3010               	movlw	16
  6251  0D35                     u2825:	
  6252  0D35  1003               	clrc
  6253  0D36  0CC6               	rrf	??___ftmul+2,f
  6254  0D37  0CC5               	rrf	??___ftmul+1,f
  6255  0D38  0CC4               	rrf	??___ftmul,f
  6256  0D39  3EFF               	addlw	-1
  6257  0D3A  1D03               	skipz
  6258  0D3B  2D35               	goto	u2825
  6259  0D3C  0844               	movf	??___ftmul,w
  6260  0D3D  00C7               	movwf	??___ftmul+3
  6261  0D3E  0847               	movf	??___ftmul+3,w
  6262  0D3F  00CD               	movwf	___ftmul@sign
  6263  0D40  0841               	movf	___ftmul@f2,w
  6264  0D41  00C4               	movwf	??___ftmul
  6265  0D42  0842               	movf	___ftmul@f2+1,w
  6266  0D43  00C5               	movwf	??___ftmul+1
  6267  0D44  0843               	movf	___ftmul@f2+2,w
  6268  0D45  00C6               	movwf	??___ftmul+2
  6269  0D46  3010               	movlw	16
  6270  0D47                     u2835:	
  6271  0D47  1003               	clrc
  6272  0D48  0CC6               	rrf	??___ftmul+2,f
  6273  0D49  0CC5               	rrf	??___ftmul+1,f
  6274  0D4A  0CC4               	rrf	??___ftmul,f
  6275  0D4B  3EFF               	addlw	-1
  6276  0D4C  1D03               	skipz
  6277  0D4D  2D47               	goto	u2835
  6278  0D4E  0844               	movf	??___ftmul,w
  6279  0D4F  00C7               	movwf	??___ftmul+3
  6280  0D50  0847               	movf	??___ftmul+3,w
  6281  0D51  06CD               	xorwf	___ftmul@sign,f
  6282  0D52  3080               	movlw	128
  6283  0D53  00C4               	movwf	??___ftmul
  6284  0D54  0844               	movf	??___ftmul,w
  6285  0D55  05CD               	andwf	___ftmul@sign,f
  6286  0D56  17BF               	bsf	___ftmul@f1+1,7
  6287  0D57  17C2               	bsf	___ftmul@f2+1,7
  6288  0D58  30FF               	movlw	255
  6289  0D59  05C1               	andwf	___ftmul@f2,f
  6290  0D5A  30FF               	movlw	255
  6291  0D5B  05C2               	andwf	___ftmul@f2+1,f
  6292  0D5C  3000               	movlw	0
  6293  0D5D  05C3               	andwf	___ftmul@f2+2,f
  6294  0D5E  3000               	movlw	0
  6295  0D5F  00C9               	movwf	___ftmul@f3_as_product
  6296  0D60  3000               	movlw	0
  6297  0D61  00CA               	movwf	___ftmul@f3_as_product+1
  6298  0D62  3000               	movlw	0
  6299  0D63  00CB               	movwf	___ftmul@f3_as_product+2
  6300  0D64  3007               	movlw	7
  6301  0D65  00C4               	movwf	??___ftmul
  6302  0D66  0844               	movf	??___ftmul,w
  6303  0D67  00CC               	movwf	___ftmul@cntr
  6304  0D68                     l2224:	
  6305  0D68  1C3E               	btfss	___ftmul@f1,0
  6306  0D69  2D78               	goto	l2228
  6307  0D6A  0841               	movf	___ftmul@f2,w
  6308  0D6B  07C9               	addwf	___ftmul@f3_as_product,f
  6309  0D6C  0842               	movf	___ftmul@f2+1,w
  6310  0D6D  1103               	clrz
  6311  0D6E  1803               	skipnc
  6312  0D6F  0A42               	incf	___ftmul@f2+1,w
  6313  0D70  1D03               	btfss	3,2
  6314  0D71  07CA               	addwf	___ftmul@f3_as_product+1,f
  6315  0D72  0843               	movf	___ftmul@f2+2,w
  6316  0D73  1103               	clrz
  6317  0D74  1803               	skipnc
  6318  0D75  0A43               	incf	___ftmul@f2+2,w
  6319  0D76  1D03               	btfss	3,2
  6320  0D77  07CB               	addwf	___ftmul@f3_as_product+2,f
  6321  0D78                     l2228:	
  6322  0D78  3001               	movlw	1
  6323  0D79                     u2865:	
  6324  0D79  1003               	clrc
  6325  0D7A  0CC0               	rrf	___ftmul@f1+2,f
  6326  0D7B  0CBF               	rrf	___ftmul@f1+1,f
  6327  0D7C  0CBE               	rrf	___ftmul@f1,f
  6328  0D7D  3EFF               	addlw	-1
  6329  0D7E  1D03               	skipz
  6330  0D7F  2D79               	goto	u2865
  6331  0D80  3001               	movlw	1
  6332  0D81                     u2875:	
  6333  0D81  1003               	clrc
  6334  0D82  0DC1               	rlf	___ftmul@f2,f
  6335  0D83  0DC2               	rlf	___ftmul@f2+1,f
  6336  0D84  0DC3               	rlf	___ftmul@f2+2,f
  6337  0D85  3EFF               	addlw	-1
  6338  0D86  1D03               	skipz
  6339  0D87  2D81               	goto	u2875
  6340  0D88  3001               	movlw	1
  6341  0D89  02CC               	subwf	___ftmul@cntr,f
  6342  0D8A  1D03               	btfss	3,2
  6343  0D8B  2D68               	goto	l2224
  6344  0D8C  3009               	movlw	9
  6345  0D8D  00C4               	movwf	??___ftmul
  6346  0D8E  0844               	movf	??___ftmul,w
  6347  0D8F  00CC               	movwf	___ftmul@cntr
  6348  0D90                     l2236:	
  6349  0D90  1C3E               	btfss	___ftmul@f1,0
  6350  0D91  2DA0               	goto	l2240
  6351  0D92  0841               	movf	___ftmul@f2,w
  6352  0D93  07C9               	addwf	___ftmul@f3_as_product,f
  6353  0D94  0842               	movf	___ftmul@f2+1,w
  6354  0D95  1103               	clrz
  6355  0D96  1803               	skipnc
  6356  0D97  0A42               	incf	___ftmul@f2+1,w
  6357  0D98  1D03               	btfss	3,2
  6358  0D99  07CA               	addwf	___ftmul@f3_as_product+1,f
  6359  0D9A  0843               	movf	___ftmul@f2+2,w
  6360  0D9B  1103               	clrz
  6361  0D9C  1803               	skipnc
  6362  0D9D  0A43               	incf	___ftmul@f2+2,w
  6363  0D9E  1D03               	btfss	3,2
  6364  0D9F  07CB               	addwf	___ftmul@f3_as_product+2,f
  6365  0DA0                     l2240:	
  6366  0DA0  3001               	movlw	1
  6367  0DA1                     u2915:	
  6368  0DA1  1003               	clrc
  6369  0DA2  0CC0               	rrf	___ftmul@f1+2,f
  6370  0DA3  0CBF               	rrf	___ftmul@f1+1,f
  6371  0DA4  0CBE               	rrf	___ftmul@f1,f
  6372  0DA5  3EFF               	addlw	-1
  6373  0DA6  1D03               	skipz
  6374  0DA7  2DA1               	goto	u2915
  6375  0DA8  3001               	movlw	1
  6376  0DA9                     u2925:	
  6377  0DA9  1003               	clrc
  6378  0DAA  0CCB               	rrf	___ftmul@f3_as_product+2,f
  6379  0DAB  0CCA               	rrf	___ftmul@f3_as_product+1,f
  6380  0DAC  0CC9               	rrf	___ftmul@f3_as_product,f
  6381  0DAD  3EFF               	addlw	-1
  6382  0DAE  1D03               	skipz
  6383  0DAF  2DA9               	goto	u2925
  6384  0DB0  3001               	movlw	1
  6385  0DB1  02CC               	subwf	___ftmul@cntr,f
  6386  0DB2  1D03               	btfss	3,2
  6387  0DB3  2D90               	goto	l2236
  6388  0DB4  0849               	movf	___ftmul@f3_as_product,w
  6389  0DB5  00A0               	movwf	___ftpack@arg
  6390  0DB6  084A               	movf	___ftmul@f3_as_product+1,w
  6391  0DB7  00A1               	movwf	___ftpack@arg+1
  6392  0DB8  084B               	movf	___ftmul@f3_as_product+2,w
  6393  0DB9  00A2               	movwf	___ftpack@arg+2
  6394  0DBA  0848               	movf	___ftmul@exp,w
  6395  0DBB  00C4               	movwf	??___ftmul
  6396  0DBC  0844               	movf	??___ftmul,w
  6397  0DBD  00A3               	movwf	___ftpack@exp
  6398  0DBE  084D               	movf	___ftmul@sign,w
  6399  0DBF  00C5               	movwf	??___ftmul+1
  6400  0DC0  0845               	movf	??___ftmul+1,w
  6401  0DC1  00A4               	movwf	___ftpack@sign
  6402  0DC2  160A  118A  2796   	fcall	___ftpack
  6403  0DC5  1283               	bcf	3,5	;RP0=0, select bank0
  6404  0DC6  1303               	bcf	3,6	;RP1=0, select bank0
  6405  0DC7  0820               	movf	?___ftpack,w
  6406  0DC8  00BE               	movwf	?___ftmul
  6407  0DC9  0821               	movf	?___ftpack+1,w
  6408  0DCA  00BF               	movwf	?___ftmul+1
  6409  0DCB  0822               	movf	?___ftpack+2,w
  6410  0DCC  00C0               	movwf	?___ftmul+2
  6411  0DCD  0008               	return
  6412  0DCE                     __end_of___ftmul:	
  6413                           
  6414                           	psect	text26
  6415  0963                     __ptext26:	
  6416 ;; *************** function ___ftdiv *****************
  6417 ;; Defined at:
  6418 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;  f2              3   46[BANK0 ] float 
  6421 ;;  f1              3   49[BANK0 ] float 
  6422 ;; Auto vars:     Size  Location     Type
  6423 ;;  f3              3   57[BANK0 ] float 
  6424 ;;  sign            1   61[BANK0 ] unsigned char 
  6425 ;;  exp             1   60[BANK0 ] unsigned char 
  6426 ;;  cntr            1   56[BANK0 ] unsigned char 
  6427 ;; Return value:  Size  Location     Type
  6428 ;;                  3   46[BANK0 ] float 
  6429 ;; Registers used:
  6430 ;;		wreg, status,2, status,0, pclath, cstack
  6431 ;; Tracked objects:
  6432 ;;		On entry : 0/0
  6433 ;;		On exit  : 0/0
  6434 ;;		Unchanged: 0/0
  6435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6436 ;;      Params:         0       6       0       0       0
  6437 ;;      Locals:         0       6       0       0       0
  6438 ;;      Temps:          0       4       0       0       0
  6439 ;;      Totals:         0      16       0       0       0
  6440 ;;Total ram usage:       16 bytes
  6441 ;; Hardware stack levels used:    1
  6442 ;; Hardware stack levels required when called:    3
  6443 ;; This function calls:
  6444 ;;		___ftpack
  6445 ;; This function is called by:
  6446 ;;		_CalcMQ135
  6447 ;; This function uses a non-reentrant model
  6448 ;;
  6449                           
  6450                           
  6451                           ;psect for function ___ftdiv
  6452  0963                     ___ftdiv:	
  6453                           
  6454                           ;incstack = 0
  6455                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6456  0963  1283               	bcf	3,5	;RP0=0, select bank0
  6457  0964  1303               	bcf	3,6	;RP1=0, select bank0
  6458  0965  0851               	movf	___ftdiv@f1,w
  6459  0966  00D4               	movwf	??___ftdiv
  6460  0967  0852               	movf	___ftdiv@f1+1,w
  6461  0968  00D5               	movwf	??___ftdiv+1
  6462  0969  0853               	movf	___ftdiv@f1+2,w
  6463  096A  00D6               	movwf	??___ftdiv+2
  6464  096B  1003               	clrc
  6465  096C  0D55               	rlf	??___ftdiv+1,w
  6466  096D  0D56               	rlf	??___ftdiv+2,w
  6467  096E  00D7               	movwf	??___ftdiv+3
  6468  096F  0857               	movf	??___ftdiv+3,w
  6469  0970  00DC               	movwf	___ftdiv@exp
  6470  0971  08DC               	movf	___ftdiv@exp,f
  6471  0972  1D03               	skipz
  6472  0973  297B               	goto	l2164
  6473  0974  3000               	movlw	0
  6474  0975  00CE               	movwf	?___ftdiv
  6475  0976  3000               	movlw	0
  6476  0977  00CF               	movwf	?___ftdiv+1
  6477  0978  3000               	movlw	0
  6478  0979  00D0               	movwf	?___ftdiv+2
  6479  097A  0008               	return
  6480  097B                     l2164:	
  6481  097B  084E               	movf	___ftdiv@f2,w
  6482  097C  00D4               	movwf	??___ftdiv
  6483  097D  084F               	movf	___ftdiv@f2+1,w
  6484  097E  00D5               	movwf	??___ftdiv+1
  6485  097F  0850               	movf	___ftdiv@f2+2,w
  6486  0980  00D6               	movwf	??___ftdiv+2
  6487  0981  1003               	clrc
  6488  0982  0D55               	rlf	??___ftdiv+1,w
  6489  0983  0D56               	rlf	??___ftdiv+2,w
  6490  0984  00D7               	movwf	??___ftdiv+3
  6491  0985  0857               	movf	??___ftdiv+3,w
  6492  0986  00DD               	movwf	___ftdiv@sign
  6493  0987  08DD               	movf	___ftdiv@sign,f
  6494  0988  1D03               	skipz
  6495  0989  2991               	goto	l2170
  6496  098A  3000               	movlw	0
  6497  098B  00CE               	movwf	?___ftdiv
  6498  098C  3000               	movlw	0
  6499  098D  00CF               	movwf	?___ftdiv+1
  6500  098E  3000               	movlw	0
  6501  098F  00D0               	movwf	?___ftdiv+2
  6502  0990  0008               	return
  6503  0991                     l2170:	
  6504  0991  3000               	movlw	0
  6505  0992  00D9               	movwf	___ftdiv@f3
  6506  0993  3000               	movlw	0
  6507  0994  00DA               	movwf	___ftdiv@f3+1
  6508  0995  3000               	movlw	0
  6509  0996  00DB               	movwf	___ftdiv@f3+2
  6510  0997  3089               	movlw	137
  6511  0998  075D               	addwf	___ftdiv@sign,w
  6512  0999  00D4               	movwf	??___ftdiv
  6513  099A  0854               	movf	??___ftdiv,w
  6514  099B  02DC               	subwf	___ftdiv@exp,f
  6515  099C  0851               	movf	___ftdiv@f1,w
  6516  099D  00D4               	movwf	??___ftdiv
  6517  099E  0852               	movf	___ftdiv@f1+1,w
  6518  099F  00D5               	movwf	??___ftdiv+1
  6519  09A0  0853               	movf	___ftdiv@f1+2,w
  6520  09A1  00D6               	movwf	??___ftdiv+2
  6521  09A2  3010               	movlw	16
  6522  09A3                     u2745:	
  6523  09A3  1003               	clrc
  6524  09A4  0CD6               	rrf	??___ftdiv+2,f
  6525  09A5  0CD5               	rrf	??___ftdiv+1,f
  6526  09A6  0CD4               	rrf	??___ftdiv,f
  6527  09A7  3EFF               	addlw	-1
  6528  09A8  1D03               	skipz
  6529  09A9  29A3               	goto	u2745
  6530  09AA  0854               	movf	??___ftdiv,w
  6531  09AB  00D7               	movwf	??___ftdiv+3
  6532  09AC  0857               	movf	??___ftdiv+3,w
  6533  09AD  00DD               	movwf	___ftdiv@sign
  6534  09AE  084E               	movf	___ftdiv@f2,w
  6535  09AF  00D4               	movwf	??___ftdiv
  6536  09B0  084F               	movf	___ftdiv@f2+1,w
  6537  09B1  00D5               	movwf	??___ftdiv+1
  6538  09B2  0850               	movf	___ftdiv@f2+2,w
  6539  09B3  00D6               	movwf	??___ftdiv+2
  6540  09B4  3010               	movlw	16
  6541  09B5                     u2755:	
  6542  09B5  1003               	clrc
  6543  09B6  0CD6               	rrf	??___ftdiv+2,f
  6544  09B7  0CD5               	rrf	??___ftdiv+1,f
  6545  09B8  0CD4               	rrf	??___ftdiv,f
  6546  09B9  3EFF               	addlw	-1
  6547  09BA  1D03               	skipz
  6548  09BB  29B5               	goto	u2755
  6549  09BC  0854               	movf	??___ftdiv,w
  6550  09BD  00D7               	movwf	??___ftdiv+3
  6551  09BE  0857               	movf	??___ftdiv+3,w
  6552  09BF  06DD               	xorwf	___ftdiv@sign,f
  6553  09C0  3080               	movlw	128
  6554  09C1  00D4               	movwf	??___ftdiv
  6555  09C2  0854               	movf	??___ftdiv,w
  6556  09C3  05DD               	andwf	___ftdiv@sign,f
  6557  09C4  17D2               	bsf	___ftdiv@f1+1,7
  6558  09C5  30FF               	movlw	255
  6559  09C6  05D1               	andwf	___ftdiv@f1,f
  6560  09C7  30FF               	movlw	255
  6561  09C8  05D2               	andwf	___ftdiv@f1+1,f
  6562  09C9  3000               	movlw	0
  6563  09CA  05D3               	andwf	___ftdiv@f1+2,f
  6564  09CB  17CF               	bsf	___ftdiv@f2+1,7
  6565  09CC  30FF               	movlw	255
  6566  09CD  05CE               	andwf	___ftdiv@f2,f
  6567  09CE  30FF               	movlw	255
  6568  09CF  05CF               	andwf	___ftdiv@f2+1,f
  6569  09D0  3000               	movlw	0
  6570  09D1  05D0               	andwf	___ftdiv@f2+2,f
  6571  09D2  3018               	movlw	24
  6572  09D3  00D4               	movwf	??___ftdiv
  6573  09D4  0854               	movf	??___ftdiv,w
  6574  09D5  00D8               	movwf	___ftdiv@cntr
  6575  09D6                     l2184:	
  6576  09D6  3001               	movlw	1
  6577  09D7                     u2765:	
  6578  09D7  1003               	clrc
  6579  09D8  0DD9               	rlf	___ftdiv@f3,f
  6580  09D9  0DDA               	rlf	___ftdiv@f3+1,f
  6581  09DA  0DDB               	rlf	___ftdiv@f3+2,f
  6582  09DB  3EFF               	addlw	-1
  6583  09DC  1D03               	skipz
  6584  09DD  29D7               	goto	u2765
  6585  09DE  0850               	movf	___ftdiv@f2+2,w
  6586  09DF  0253               	subwf	___ftdiv@f1+2,w
  6587  09E0  1D03               	skipz
  6588  09E1  29E8               	goto	u2775
  6589  09E2  084F               	movf	___ftdiv@f2+1,w
  6590  09E3  0252               	subwf	___ftdiv@f1+1,w
  6591  09E4  1D03               	skipz
  6592  09E5  29E8               	goto	u2775
  6593  09E6  084E               	movf	___ftdiv@f2,w
  6594  09E7  0251               	subwf	___ftdiv@f1,w
  6595  09E8                     u2775:	
  6596  09E8  1C03               	skipc
  6597  09E9  29F5               	goto	l2192
  6598  09EA  084E               	movf	___ftdiv@f2,w
  6599  09EB  02D1               	subwf	___ftdiv@f1,f
  6600  09EC  084F               	movf	___ftdiv@f2+1,w
  6601  09ED  1C03               	skipc
  6602  09EE  0F4F               	incfsz	___ftdiv@f2+1,w
  6603  09EF  02D2               	subwf	___ftdiv@f1+1,f
  6604  09F0  0850               	movf	___ftdiv@f2+2,w
  6605  09F1  1C03               	skipc
  6606  09F2  0A50               	incf	___ftdiv@f2+2,w
  6607  09F3  02D3               	subwf	___ftdiv@f1+2,f
  6608  09F4  1459               	bsf	___ftdiv@f3,0
  6609  09F5                     l2192:	
  6610  09F5  3001               	movlw	1
  6611  09F6                     u2785:	
  6612  09F6  1003               	clrc
  6613  09F7  0DD1               	rlf	___ftdiv@f1,f
  6614  09F8  0DD2               	rlf	___ftdiv@f1+1,f
  6615  09F9  0DD3               	rlf	___ftdiv@f1+2,f
  6616  09FA  3EFF               	addlw	-1
  6617  09FB  1D03               	skipz
  6618  09FC  29F6               	goto	u2785
  6619  09FD  3001               	movlw	1
  6620  09FE  02D8               	subwf	___ftdiv@cntr,f
  6621  09FF  1D03               	btfss	3,2
  6622  0A00  29D6               	goto	l2184
  6623  0A01  0859               	movf	___ftdiv@f3,w
  6624  0A02  00A0               	movwf	___ftpack@arg
  6625  0A03  085A               	movf	___ftdiv@f3+1,w
  6626  0A04  00A1               	movwf	___ftpack@arg+1
  6627  0A05  085B               	movf	___ftdiv@f3+2,w
  6628  0A06  00A2               	movwf	___ftpack@arg+2
  6629  0A07  085C               	movf	___ftdiv@exp,w
  6630  0A08  00D4               	movwf	??___ftdiv
  6631  0A09  0854               	movf	??___ftdiv,w
  6632  0A0A  00A3               	movwf	___ftpack@exp
  6633  0A0B  085D               	movf	___ftdiv@sign,w
  6634  0A0C  00D5               	movwf	??___ftdiv+1
  6635  0A0D  0855               	movf	??___ftdiv+1,w
  6636  0A0E  00A4               	movwf	___ftpack@sign
  6637  0A0F  160A  118A  2796   	fcall	___ftpack
  6638  0A12  1283               	bcf	3,5	;RP0=0, select bank0
  6639  0A13  1303               	bcf	3,6	;RP1=0, select bank0
  6640  0A14  0820               	movf	?___ftpack,w
  6641  0A15  00CE               	movwf	?___ftdiv
  6642  0A16  0821               	movf	?___ftpack+1,w
  6643  0A17  00CF               	movwf	?___ftdiv+1
  6644  0A18  0822               	movf	?___ftpack+2,w
  6645  0A19  00D0               	movwf	?___ftdiv+2
  6646  0A1A  0008               	return
  6647  0A1B                     __end_of___ftdiv:	
  6648                           
  6649                           	psect	text27
  6650  0DCE                     __ptext27:	
  6651 ;; *************** function ___ftadd *****************
  6652 ;; Defined at:
  6653 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;  f1              3   17[BANK0 ] float 
  6656 ;;  f2              3   20[BANK0 ] float 
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;  exp1            1   29[BANK0 ] unsigned char 
  6659 ;;  exp2            1   28[BANK0 ] unsigned char 
  6660 ;;  sign            1   27[BANK0 ] unsigned char 
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  3   17[BANK0 ] float 
  6663 ;; Registers used:
  6664 ;;		wreg, status,2, status,0, pclath, cstack
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6670 ;;      Params:         0       6       0       0       0
  6671 ;;      Locals:         0       3       0       0       0
  6672 ;;      Temps:          0       4       0       0       0
  6673 ;;      Totals:         0      13       0       0       0
  6674 ;;Total ram usage:       13 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    3
  6677 ;; This function calls:
  6678 ;;		___ftpack
  6679 ;; This function is called by:
  6680 ;;		_displayPPM
  6681 ;;		_CalcMQ135
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           
  6686                           ;psect for function ___ftadd
  6687  0DCE                     ___ftadd:	
  6688                           
  6689                           ;incstack = 0
  6690                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6691  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  6692  0DCF  1303               	bcf	3,6	;RP1=0, select bank0
  6693  0DD0  0831               	movf	___ftadd@f1,w
  6694  0DD1  00B7               	movwf	??___ftadd
  6695  0DD2  0832               	movf	___ftadd@f1+1,w
  6696  0DD3  00B8               	movwf	??___ftadd+1
  6697  0DD4  0833               	movf	___ftadd@f1+2,w
  6698  0DD5  00B9               	movwf	??___ftadd+2
  6699  0DD6  1003               	clrc
  6700  0DD7  0D38               	rlf	??___ftadd+1,w
  6701  0DD8  0D39               	rlf	??___ftadd+2,w
  6702  0DD9  00BA               	movwf	??___ftadd+3
  6703  0DDA  083A               	movf	??___ftadd+3,w
  6704  0DDB  00BD               	movwf	___ftadd@exp1
  6705  0DDC  0834               	movf	___ftadd@f2,w
  6706  0DDD  00B7               	movwf	??___ftadd
  6707  0DDE  0835               	movf	___ftadd@f2+1,w
  6708  0DDF  00B8               	movwf	??___ftadd+1
  6709  0DE0  0836               	movf	___ftadd@f2+2,w
  6710  0DE1  00B9               	movwf	??___ftadd+2
  6711  0DE2  1003               	clrc
  6712  0DE3  0D38               	rlf	??___ftadd+1,w
  6713  0DE4  0D39               	rlf	??___ftadd+2,w
  6714  0DE5  00BA               	movwf	??___ftadd+3
  6715  0DE6  083A               	movf	??___ftadd+3,w
  6716  0DE7  00BC               	movwf	___ftadd@exp2
  6717  0DE8  083D               	movf	___ftadd@exp1,w
  6718  0DE9  1903               	btfsc	3,2
  6719  0DEA  2DF7               	goto	l2094
  6720  0DEB  083C               	movf	___ftadd@exp2,w
  6721  0DEC  023D               	subwf	___ftadd@exp1,w
  6722  0DED  1803               	skipnc
  6723  0DEE  2DFE               	goto	l2098
  6724  0DEF  033D               	decf	___ftadd@exp1,w
  6725  0DF0  3AFF               	xorlw	255
  6726  0DF1  073C               	addwf	___ftadd@exp2,w
  6727  0DF2  00B7               	movwf	??___ftadd
  6728  0DF3  3019               	movlw	25
  6729  0DF4  0237               	subwf	??___ftadd,w
  6730  0DF5  1C03               	skipc
  6731  0DF6  2DFE               	goto	l2098
  6732  0DF7                     l2094:	
  6733  0DF7  0834               	movf	___ftadd@f2,w
  6734  0DF8  00B1               	movwf	?___ftadd
  6735  0DF9  0835               	movf	___ftadd@f2+1,w
  6736  0DFA  00B2               	movwf	?___ftadd+1
  6737  0DFB  0836               	movf	___ftadd@f2+2,w
  6738  0DFC  00B3               	movwf	?___ftadd+2
  6739  0DFD  0008               	return
  6740  0DFE                     l2098:	
  6741  0DFE  083C               	movf	___ftadd@exp2,w
  6742  0DFF  1903               	btfsc	3,2
  6743  0E00  0008               	return
  6744  0E01  083D               	movf	___ftadd@exp1,w
  6745  0E02  023C               	subwf	___ftadd@exp2,w
  6746  0E03  1803               	skipnc
  6747  0E04  2E0D               	goto	l2104
  6748  0E05  033C               	decf	___ftadd@exp2,w
  6749  0E06  3AFF               	xorlw	255
  6750  0E07  073D               	addwf	___ftadd@exp1,w
  6751  0E08  00B7               	movwf	??___ftadd
  6752  0E09  3019               	movlw	25
  6753  0E0A  0237               	subwf	??___ftadd,w
  6754  0E0B  1803               	btfsc	3,0
  6755  0E0C  0008               	return
  6756  0E0D                     l2104:	
  6757  0E0D  3006               	movlw	6
  6758  0E0E  00B7               	movwf	??___ftadd
  6759  0E0F  0837               	movf	??___ftadd,w
  6760  0E10  00BB               	movwf	___ftadd@sign
  6761  0E11  1BB3               	btfsc	___ftadd@f1+2,7
  6762  0E12  17BB               	bsf	___ftadd@sign,7
  6763  0E13  1BB6               	btfsc	___ftadd@f2+2,7
  6764  0E14  173B               	bsf	___ftadd@sign,6
  6765  0E15  17B2               	bsf	___ftadd@f1+1,7
  6766  0E16  30FF               	movlw	255
  6767  0E17  05B1               	andwf	___ftadd@f1,f
  6768  0E18  30FF               	movlw	255
  6769  0E19  05B2               	andwf	___ftadd@f1+1,f
  6770  0E1A  3000               	movlw	0
  6771  0E1B  05B3               	andwf	___ftadd@f1+2,f
  6772  0E1C  17B5               	bsf	___ftadd@f2+1,7
  6773  0E1D  30FF               	movlw	255
  6774  0E1E  05B4               	andwf	___ftadd@f2,f
  6775  0E1F  30FF               	movlw	255
  6776  0E20  05B5               	andwf	___ftadd@f2+1,f
  6777  0E21  3000               	movlw	0
  6778  0E22  05B6               	andwf	___ftadd@f2+2,f
  6779  0E23  083C               	movf	___ftadd@exp2,w
  6780  0E24  023D               	subwf	___ftadd@exp1,w
  6781  0E25  1803               	skipnc
  6782  0E26  2E4D               	goto	l2126
  6783  0E27                     l2116:	
  6784  0E27  3001               	movlw	1
  6785  0E28                     u2575:	
  6786  0E28  1003               	clrc
  6787  0E29  0DB4               	rlf	___ftadd@f2,f
  6788  0E2A  0DB5               	rlf	___ftadd@f2+1,f
  6789  0E2B  0DB6               	rlf	___ftadd@f2+2,f
  6790  0E2C  3EFF               	addlw	-1
  6791  0E2D  1D03               	skipz
  6792  0E2E  2E28               	goto	u2575
  6793  0E2F  3001               	movlw	1
  6794  0E30  02BC               	subwf	___ftadd@exp2,f
  6795  0E31  083C               	movf	___ftadd@exp2,w
  6796  0E32  063D               	xorwf	___ftadd@exp1,w
  6797  0E33  1903               	skipnz
  6798  0E34  2E48               	goto	l2124
  6799  0E35  3001               	movlw	1
  6800  0E36  02BB               	subwf	___ftadd@sign,f
  6801  0E37  083B               	movf	___ftadd@sign,w
  6802  0E38  3907               	andlw	7
  6803  0E39  1903               	btfsc	3,2
  6804  0E3A  2E48               	goto	l2124
  6805  0E3B  2E27               	goto	l2116
  6806  0E3C                     l2122:	
  6807  0E3C  3001               	movlw	1
  6808  0E3D                     u2605:	
  6809  0E3D  1003               	clrc
  6810  0E3E  0CB3               	rrf	___ftadd@f1+2,f
  6811  0E3F  0CB2               	rrf	___ftadd@f1+1,f
  6812  0E40  0CB1               	rrf	___ftadd@f1,f
  6813  0E41  3EFF               	addlw	-1
  6814  0E42  1D03               	skipz
  6815  0E43  2E3D               	goto	u2605
  6816  0E44  3001               	movlw	1
  6817  0E45  00B7               	movwf	??___ftadd
  6818  0E46  0837               	movf	??___ftadd,w
  6819  0E47  07BD               	addwf	___ftadd@exp1,f
  6820  0E48                     l2124:	
  6821  0E48  083D               	movf	___ftadd@exp1,w
  6822  0E49  063C               	xorwf	___ftadd@exp2,w
  6823  0E4A  1903               	btfsc	3,2
  6824  0E4B  2E76               	goto	l608
  6825  0E4C  2E3C               	goto	l2122
  6826  0E4D                     l2126:	
  6827  0E4D  083D               	movf	___ftadd@exp1,w
  6828  0E4E  023C               	subwf	___ftadd@exp2,w
  6829  0E4F  1803               	skipnc
  6830  0E50  2E76               	goto	l608
  6831  0E51                     l2128:	
  6832  0E51  3001               	movlw	1
  6833  0E52                     u2635:	
  6834  0E52  1003               	clrc
  6835  0E53  0DB1               	rlf	___ftadd@f1,f
  6836  0E54  0DB2               	rlf	___ftadd@f1+1,f
  6837  0E55  0DB3               	rlf	___ftadd@f1+2,f
  6838  0E56  3EFF               	addlw	-1
  6839  0E57  1D03               	skipz
  6840  0E58  2E52               	goto	u2635
  6841  0E59  3001               	movlw	1
  6842  0E5A  02BD               	subwf	___ftadd@exp1,f
  6843  0E5B  083C               	movf	___ftadd@exp2,w
  6844  0E5C  063D               	xorwf	___ftadd@exp1,w
  6845  0E5D  1903               	skipnz
  6846  0E5E  2E72               	goto	l2136
  6847  0E5F  3001               	movlw	1
  6848  0E60  02BB               	subwf	___ftadd@sign,f
  6849  0E61  083B               	movf	___ftadd@sign,w
  6850  0E62  3907               	andlw	7
  6851  0E63  1903               	btfsc	3,2
  6852  0E64  2E72               	goto	l2136
  6853  0E65  2E51               	goto	l2128
  6854  0E66                     l2134:	
  6855  0E66  3001               	movlw	1
  6856  0E67                     u2665:	
  6857  0E67  1003               	clrc
  6858  0E68  0CB6               	rrf	___ftadd@f2+2,f
  6859  0E69  0CB5               	rrf	___ftadd@f2+1,f
  6860  0E6A  0CB4               	rrf	___ftadd@f2,f
  6861  0E6B  3EFF               	addlw	-1
  6862  0E6C  1D03               	skipz
  6863  0E6D  2E67               	goto	u2665
  6864  0E6E  3001               	movlw	1
  6865  0E6F  00B7               	movwf	??___ftadd
  6866  0E70  0837               	movf	??___ftadd,w
  6867  0E71  07BC               	addwf	___ftadd@exp2,f
  6868  0E72                     l2136:	
  6869  0E72  083D               	movf	___ftadd@exp1,w
  6870  0E73  063C               	xorwf	___ftadd@exp2,w
  6871  0E74  1D03               	skipz
  6872  0E75  2E66               	goto	l2134
  6873  0E76                     l608:	
  6874  0E76  1FBB               	btfss	___ftadd@sign,7
  6875  0E77  2E88               	goto	l2140
  6876  0E78  30FF               	movlw	255
  6877  0E79  06B1               	xorwf	___ftadd@f1,f
  6878  0E7A  30FF               	movlw	255
  6879  0E7B  06B2               	xorwf	___ftadd@f1+1,f
  6880  0E7C  30FF               	movlw	255
  6881  0E7D  06B3               	xorwf	___ftadd@f1+2,f
  6882  0E7E  3001               	movlw	1
  6883  0E7F  07B1               	addwf	___ftadd@f1,f
  6884  0E80  3000               	movlw	0
  6885  0E81  1803               	skipnc
  6886  0E82  3001               	movlw	1
  6887  0E83  07B2               	addwf	___ftadd@f1+1,f
  6888  0E84  3000               	movlw	0
  6889  0E85  1803               	skipnc
  6890  0E86  3001               	movlw	1
  6891  0E87  07B3               	addwf	___ftadd@f1+2,f
  6892  0E88                     l2140:	
  6893  0E88  1F3B               	btfss	___ftadd@sign,6
  6894  0E89  2E9A               	goto	l2144
  6895  0E8A  30FF               	movlw	255
  6896  0E8B  06B4               	xorwf	___ftadd@f2,f
  6897  0E8C  30FF               	movlw	255
  6898  0E8D  06B5               	xorwf	___ftadd@f2+1,f
  6899  0E8E  30FF               	movlw	255
  6900  0E8F  06B6               	xorwf	___ftadd@f2+2,f
  6901  0E90  3001               	movlw	1
  6902  0E91  07B4               	addwf	___ftadd@f2,f
  6903  0E92  3000               	movlw	0
  6904  0E93  1803               	skipnc
  6905  0E94  3001               	movlw	1
  6906  0E95  07B5               	addwf	___ftadd@f2+1,f
  6907  0E96  3000               	movlw	0
  6908  0E97  1803               	skipnc
  6909  0E98  3001               	movlw	1
  6910  0E99  07B6               	addwf	___ftadd@f2+2,f
  6911  0E9A                     l2144:	
  6912  0E9A  01BB               	clrf	___ftadd@sign
  6913  0E9B  0831               	movf	___ftadd@f1,w
  6914  0E9C  07B4               	addwf	___ftadd@f2,f
  6915  0E9D  0832               	movf	___ftadd@f1+1,w
  6916  0E9E  1103               	clrz
  6917  0E9F  1803               	skipnc
  6918  0EA0  0A32               	incf	___ftadd@f1+1,w
  6919  0EA1  1D03               	btfss	3,2
  6920  0EA2  07B5               	addwf	___ftadd@f2+1,f
  6921  0EA3  0833               	movf	___ftadd@f1+2,w
  6922  0EA4  1103               	clrz
  6923  0EA5  1803               	skipnc
  6924  0EA6  0A33               	incf	___ftadd@f1+2,w
  6925  0EA7  1D03               	btfss	3,2
  6926  0EA8  07B6               	addwf	___ftadd@f2+2,f
  6927  0EA9  1FB6               	btfss	___ftadd@f2+2,7
  6928  0EAA  2EBD               	goto	l2154
  6929  0EAB  30FF               	movlw	255
  6930  0EAC  06B4               	xorwf	___ftadd@f2,f
  6931  0EAD  30FF               	movlw	255
  6932  0EAE  06B5               	xorwf	___ftadd@f2+1,f
  6933  0EAF  30FF               	movlw	255
  6934  0EB0  06B6               	xorwf	___ftadd@f2+2,f
  6935  0EB1  3001               	movlw	1
  6936  0EB2  07B4               	addwf	___ftadd@f2,f
  6937  0EB3  3000               	movlw	0
  6938  0EB4  1803               	skipnc
  6939  0EB5  3001               	movlw	1
  6940  0EB6  07B5               	addwf	___ftadd@f2+1,f
  6941  0EB7  3000               	movlw	0
  6942  0EB8  1803               	skipnc
  6943  0EB9  3001               	movlw	1
  6944  0EBA  07B6               	addwf	___ftadd@f2+2,f
  6945  0EBB  01BB               	clrf	___ftadd@sign
  6946  0EBC  0ABB               	incf	___ftadd@sign,f
  6947  0EBD                     l2154:	
  6948  0EBD  0834               	movf	___ftadd@f2,w
  6949  0EBE  00A0               	movwf	___ftpack@arg
  6950  0EBF  0835               	movf	___ftadd@f2+1,w
  6951  0EC0  00A1               	movwf	___ftpack@arg+1
  6952  0EC1  0836               	movf	___ftadd@f2+2,w
  6953  0EC2  00A2               	movwf	___ftpack@arg+2
  6954  0EC3  083D               	movf	___ftadd@exp1,w
  6955  0EC4  00B7               	movwf	??___ftadd
  6956  0EC5  0837               	movf	??___ftadd,w
  6957  0EC6  00A3               	movwf	___ftpack@exp
  6958  0EC7  083B               	movf	___ftadd@sign,w
  6959  0EC8  00B8               	movwf	??___ftadd+1
  6960  0EC9  0838               	movf	??___ftadd+1,w
  6961  0ECA  00A4               	movwf	___ftpack@sign
  6962  0ECB  160A  118A  2796   	fcall	___ftpack
  6963  0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  6964  0ECF  1303               	bcf	3,6	;RP1=0, select bank0
  6965  0ED0  0820               	movf	?___ftpack,w
  6966  0ED1  00B1               	movwf	?___ftadd
  6967  0ED2  0821               	movf	?___ftpack+1,w
  6968  0ED3  00B2               	movwf	?___ftadd+1
  6969  0ED4  0822               	movf	?___ftpack+2,w
  6970  0ED5  00B3               	movwf	?___ftadd+2
  6971  0ED6  0008               	return
  6972  0ED7                     __end_of___ftadd:	
  6973                           
  6974                           	psect	text28
  6975  1550                     __ptext28:	
  6976 ;; *************** function ___awtoft *****************
  6977 ;; Defined at:
  6978 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;  c               2    8[BANK0 ] int 
  6981 ;; Auto vars:     Size  Location     Type
  6982 ;;  sign            1   13[BANK0 ] unsigned char 
  6983 ;; Return value:  Size  Location     Type
  6984 ;;                  3    8[BANK0 ] float 
  6985 ;; Registers used:
  6986 ;;		wreg, status,2, status,0, pclath, cstack
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6992 ;;      Params:         0       3       0       0       0
  6993 ;;      Locals:         0       1       0       0       0
  6994 ;;      Temps:          0       2       0       0       0
  6995 ;;      Totals:         0       6       0       0       0
  6996 ;;Total ram usage:        6 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; Hardware stack levels required when called:    3
  6999 ;; This function calls:
  7000 ;;		___ftpack
  7001 ;; This function is called by:
  7002 ;;		_displayPPM
  7003 ;;		_CalcMQ135
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           
  7008                           ;psect for function ___awtoft
  7009  1550                     ___awtoft:	
  7010                           
  7011                           ;incstack = 0
  7012                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7013  1550  1283               	bcf	3,5	;RP0=0, select bank0
  7014  1551  1303               	bcf	3,6	;RP1=0, select bank0
  7015  1552  01AD               	clrf	___awtoft@sign
  7016  1553  1FA9               	btfss	___awtoft@c+1,7
  7017  1554  2D5C               	goto	l2082
  7018  1555  09A8               	comf	___awtoft@c,f
  7019  1556  09A9               	comf	___awtoft@c+1,f
  7020  1557  0AA8               	incf	___awtoft@c,f
  7021  1558  1903               	skipnz
  7022  1559  0AA9               	incf	___awtoft@c+1,f
  7023  155A  01AD               	clrf	___awtoft@sign
  7024  155B  0AAD               	incf	___awtoft@sign,f
  7025  155C                     l2082:	
  7026  155C  0828               	movf	___awtoft@c,w
  7027  155D  00A0               	movwf	___ftpack@arg
  7028  155E  0829               	movf	___awtoft@c+1,w
  7029  155F  00A1               	movwf	___ftpack@arg+1
  7030  1560  01A2               	clrf	___ftpack@arg+2
  7031  1561  308E               	movlw	142
  7032  1562  00AB               	movwf	??___awtoft
  7033  1563  082B               	movf	??___awtoft,w
  7034  1564  00A3               	movwf	___ftpack@exp
  7035  1565  082D               	movf	___awtoft@sign,w
  7036  1566  00AC               	movwf	??___awtoft+1
  7037  1567  082C               	movf	??___awtoft+1,w
  7038  1568  00A4               	movwf	___ftpack@sign
  7039  1569  160A  118A  2796   	fcall	___ftpack
  7040  156C  1283               	bcf	3,5	;RP0=0, select bank0
  7041  156D  1303               	bcf	3,6	;RP1=0, select bank0
  7042  156E  0820               	movf	?___ftpack,w
  7043  156F  00A8               	movwf	?___awtoft
  7044  1570  0821               	movf	?___ftpack+1,w
  7045  1571  00A9               	movwf	?___awtoft+1
  7046  1572  0822               	movf	?___ftpack+2,w
  7047  1573  00AA               	movwf	?___awtoft+2
  7048  1574  0008               	return
  7049  1575                     __end_of___awtoft:	
  7050                           
  7051                           	psect	text29
  7052  1796                     __ptext29:	
  7053 ;; *************** function ___ftpack *****************
  7054 ;; Defined at:
  7055 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;  arg             3    0[BANK0 ] unsigned um
  7058 ;;  exp             1    3[BANK0 ] unsigned char 
  7059 ;;  sign            1    4[BANK0 ] unsigned char 
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;		None
  7062 ;; Return value:  Size  Location     Type
  7063 ;;                  3    0[BANK0 ] float 
  7064 ;; Registers used:
  7065 ;;		wreg, status,2, status,0
  7066 ;; Tracked objects:
  7067 ;;		On entry : 0/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7071 ;;      Params:         0       5       0       0       0
  7072 ;;      Locals:         0       0       0       0       0
  7073 ;;      Temps:          0       3       0       0       0
  7074 ;;      Totals:         0       8       0       0       0
  7075 ;;Total ram usage:        8 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; Hardware stack levels required when called:    2
  7078 ;; This function calls:
  7079 ;;		Nothing
  7080 ;; This function is called by:
  7081 ;;		___awtoft
  7082 ;;		___ftadd
  7083 ;;		___ftdiv
  7084 ;;		___ftmul
  7085 ;; This function uses a non-reentrant model
  7086 ;;
  7087                           
  7088                           
  7089                           ;psect for function ___ftpack
  7090  1796                     ___ftpack:	
  7091                           
  7092                           ;incstack = 0
  7093                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7094  1796  1283               	bcf	3,5	;RP0=0, select bank0
  7095  1797  1303               	bcf	3,6	;RP1=0, select bank0
  7096  1798  0823               	movf	___ftpack@exp,w
  7097  1799  1903               	btfsc	3,2
  7098  179A  2FA0               	goto	l1828
  7099  179B  0822               	movf	___ftpack@arg+2,w
  7100  179C  0421               	iorwf	___ftpack@arg+1,w
  7101  179D  0420               	iorwf	___ftpack@arg,w
  7102  179E  1D03               	skipz
  7103  179F  2FB3               	goto	l1834
  7104  17A0                     l1828:	
  7105  17A0  3000               	movlw	0
  7106  17A1  00A0               	movwf	?___ftpack
  7107  17A2  3000               	movlw	0
  7108  17A3  00A1               	movwf	?___ftpack+1
  7109  17A4  3000               	movlw	0
  7110  17A5  00A2               	movwf	?___ftpack+2
  7111  17A6  0008               	return
  7112  17A7                     l1832:	
  7113  17A7  3001               	movlw	1
  7114  17A8  00A5               	movwf	??___ftpack
  7115  17A9  0825               	movf	??___ftpack,w
  7116  17AA  07A3               	addwf	___ftpack@exp,f
  7117  17AB  3001               	movlw	1
  7118  17AC                     u1965:	
  7119  17AC  1003               	clrc
  7120  17AD  0CA2               	rrf	___ftpack@arg+2,f
  7121  17AE  0CA1               	rrf	___ftpack@arg+1,f
  7122  17AF  0CA0               	rrf	___ftpack@arg,f
  7123  17B0  3EFF               	addlw	-1
  7124  17B1  1D03               	skipz
  7125  17B2  2FAC               	goto	u1965
  7126  17B3                     l1834:	
  7127  17B3  30FE               	movlw	254
  7128  17B4  0522               	andwf	___ftpack@arg+2,w
  7129  17B5  1903               	btfsc	3,2
  7130  17B6  2FCE               	goto	l579
  7131  17B7  2FA7               	goto	l1832
  7132  17B8                     l1836:	
  7133  17B8  3001               	movlw	1
  7134  17B9  00A5               	movwf	??___ftpack
  7135  17BA  0825               	movf	??___ftpack,w
  7136  17BB  07A3               	addwf	___ftpack@exp,f
  7137  17BC  3001               	movlw	1
  7138  17BD  07A0               	addwf	___ftpack@arg,f
  7139  17BE  3000               	movlw	0
  7140  17BF  1803               	skipnc
  7141  17C0  3001               	movlw	1
  7142  17C1  07A1               	addwf	___ftpack@arg+1,f
  7143  17C2  3000               	movlw	0
  7144  17C3  1803               	skipnc
  7145  17C4  3001               	movlw	1
  7146  17C5  07A2               	addwf	___ftpack@arg+2,f
  7147  17C6  3001               	movlw	1
  7148  17C7                     u1985:	
  7149  17C7  1003               	clrc
  7150  17C8  0CA2               	rrf	___ftpack@arg+2,f
  7151  17C9  0CA1               	rrf	___ftpack@arg+1,f
  7152  17CA  0CA0               	rrf	___ftpack@arg,f
  7153  17CB  3EFF               	addlw	-1
  7154  17CC  1D03               	skipz
  7155  17CD  2FC7               	goto	u1985
  7156  17CE                     l579:	
  7157  17CE  30FF               	movlw	255
  7158  17CF  0522               	andwf	___ftpack@arg+2,w
  7159  17D0  1903               	btfsc	3,2
  7160  17D1  2FDD               	goto	l1844
  7161  17D2  2FB8               	goto	l1836
  7162  17D3                     l1842:	
  7163  17D3  3001               	movlw	1
  7164  17D4  02A3               	subwf	___ftpack@exp,f
  7165  17D5  3001               	movlw	1
  7166  17D6                     u2005:	
  7167  17D6  1003               	clrc
  7168  17D7  0DA0               	rlf	___ftpack@arg,f
  7169  17D8  0DA1               	rlf	___ftpack@arg+1,f
  7170  17D9  0DA2               	rlf	___ftpack@arg+2,f
  7171  17DA  3EFF               	addlw	-1
  7172  17DB  1D03               	skipz
  7173  17DC  2FD6               	goto	u2005
  7174  17DD                     l1844:	
  7175  17DD  1FA1               	btfss	___ftpack@arg+1,7
  7176  17DE  2FD3               	goto	l1842
  7177  17DF  1823               	btfsc	___ftpack@exp,0
  7178  17E0  2FE7               	goto	l585
  7179  17E1  30FF               	movlw	255
  7180  17E2  05A0               	andwf	___ftpack@arg,f
  7181  17E3  307F               	movlw	127
  7182  17E4  05A1               	andwf	___ftpack@arg+1,f
  7183  17E5  30FF               	movlw	255
  7184  17E6  05A2               	andwf	___ftpack@arg+2,f
  7185  17E7                     l585:	
  7186  17E7  1003               	clrc
  7187  17E8  0CA3               	rrf	___ftpack@exp,f
  7188  17E9  0823               	movf	___ftpack@exp,w
  7189  17EA  00A5               	movwf	??___ftpack
  7190  17EB  01A6               	clrf	??___ftpack+1
  7191  17EC  01A7               	clrf	??___ftpack+2
  7192  17ED  3010               	movlw	16
  7193  17EE                     u2035:	
  7194  17EE  1003               	clrc
  7195  17EF  0DA5               	rlf	??___ftpack,f
  7196  17F0  0DA6               	rlf	??___ftpack+1,f
  7197  17F1  0DA7               	rlf	??___ftpack+2,f
  7198  17F2  3EFF               	addlw	-1
  7199  17F3  1D03               	skipz
  7200  17F4  2FEE               	goto	u2035
  7201  17F5  0825               	movf	??___ftpack,w
  7202  17F6  04A0               	iorwf	___ftpack@arg,f
  7203  17F7  0826               	movf	??___ftpack+1,w
  7204  17F8  04A1               	iorwf	___ftpack@arg+1,f
  7205  17F9  0827               	movf	??___ftpack+2,w
  7206  17FA  04A2               	iorwf	___ftpack@arg+2,f
  7207  17FB  0824               	movf	___ftpack@sign,w
  7208  17FC  1903               	btfsc	3,2
  7209  17FD  0008               	return
  7210  17FE  17A2               	bsf	___ftpack@arg+2,7
  7211  17FF  0008               	return
  7212  1800                     __end_of___ftpack:	
  7213                           
  7214                           	psect	text30
  7215  1488                     __ptext30:	
  7216 ;; *************** function _runClock *****************
  7217 ;; Defined at:
  7218 ;;		line 33 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedul
      +er.h"
  7219 ;; Parameters:    Size  Location     Type
  7220 ;;		None
  7221 ;; Auto vars:     Size  Location     Type
  7222 ;;		None
  7223 ;; Return value:  Size  Location     Type
  7224 ;;		None               void
  7225 ;; Registers used:
  7226 ;;		wreg, status,2, status,0
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7232 ;;      Params:         0       0       0       0       0
  7233 ;;      Locals:         0       0       0       0       0
  7234 ;;      Temps:          0       2       0       0       0
  7235 ;;      Totals:         0       2       0       0       0
  7236 ;;Total ram usage:        2 bytes
  7237 ;; Hardware stack levels used:    1
  7238 ;; Hardware stack levels required when called:    2
  7239 ;; This function calls:
  7240 ;;		Nothing
  7241 ;; This function is called by:
  7242 ;;		_main
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           
  7247                           ;psect for function _runClock
  7248  1488                     _runClock:	
  7249                           
  7250                           ;time_scheduler.h: 35: minutes++;
  7251                           
  7252                           ;incstack = 0
  7253                           ; Regs used in _runClock: [wreg+status,2+status,0]
  7254  1488  3001               	movlw	1
  7255  1489  1283               	bcf	3,5	;RP0=0, select bank0
  7256  148A  1303               	bcf	3,6	;RP1=0, select bank0
  7257  148B  00A0               	movwf	??_runClock
  7258  148C  0820               	movf	??_runClock,w
  7259  148D  07F9               	addwf	_minutes,f	;volatile
  7260                           
  7261                           ;time_scheduler.h: 36: if (minutes >= 60)
  7262  148E  303C               	movlw	60
  7263  148F  0279               	subwf	_minutes,w	;volatile
  7264  1490  1C03               	skipc
  7265  1491  2C9B               	goto	l2544
  7266                           
  7267                           ;time_scheduler.h: 37: {
  7268                           ;time_scheduler.h: 38: minutes = 0;
  7269  1492  01F9               	clrf	_minutes	;volatile
  7270                           
  7271                           ;time_scheduler.h: 39: hours++;
  7272  1493  3001               	movlw	1
  7273  1494  00A0               	movwf	??_runClock
  7274  1495  0820               	movf	??_runClock,w
  7275  1496  07FA               	addwf	_hours,f	;volatile
  7276                           
  7277                           ;time_scheduler.h: 40: if (hours >= 24)
  7278  1497  3018               	movlw	24
  7279  1498  027A               	subwf	_hours,w	;volatile
  7280  1499  1803               	btfsc	3,0
  7281                           
  7282                           ;time_scheduler.h: 41: {
  7283                           ;time_scheduler.h: 42: hours = 0;
  7284  149A  01FA               	clrf	_hours	;volatile
  7285  149B                     l2544:	
  7286                           
  7287                           ;time_scheduler.h: 43: }
  7288                           ;time_scheduler.h: 44: }
  7289                           ;time_scheduler.h: 45: _delay((unsigned long)((50)*(4000000/4000.0)));
  7290  149B  3041               	movlw	65
  7291  149C  00A1               	movwf	??_runClock+1
  7292  149D  30EE               	movlw	238
  7293  149E  00A0               	movwf	??_runClock
  7294  149F                     u4727:	
  7295  149F  0BA0               	decfsz	??_runClock,f
  7296  14A0  2C9F               	goto	u4727
  7297  14A1  0BA1               	decfsz	??_runClock+1,f
  7298  14A2  2C9F               	goto	u4727
  7299  14A3  0000               	nop
  7300  14A4  0008               	return
  7301  14A5                     __end_of_runClock:	
  7302                           
  7303                           	psect	text31
  7304  13E1                     __ptext31:	
  7305 ;; *************** function _initInterrupt *****************
  7306 ;; Defined at:
  7307 ;;		line 75 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;		None
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;		None
  7312 ;; Return value:  Size  Location     Type
  7313 ;;		None               void
  7314 ;; Registers used:
  7315 ;;		None
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7321 ;;      Params:         0       0       0       0       0
  7322 ;;      Locals:         0       0       0       0       0
  7323 ;;      Temps:          0       0       0       0       0
  7324 ;;      Totals:         0       0       0       0       0
  7325 ;;Total ram usage:        0 bytes
  7326 ;; Hardware stack levels used:    1
  7327 ;; Hardware stack levels required when called:    2
  7328 ;; This function calls:
  7329 ;;		Nothing
  7330 ;; This function is called by:
  7331 ;;		_main
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335                           
  7336                           ;psect for function _initInterrupt
  7337  13E1                     _initInterrupt:	
  7338                           
  7339                           ;main.c: 77: GIE = 1;
  7340                           
  7341                           ;incstack = 0
  7342                           ; Regs used in _initInterrupt: []
  7343  13E1  178B               	bsf	11,7	;volatile
  7344                           
  7345                           ;main.c: 78: INTE = 1;
  7346  13E2  160B               	bsf	11,4	;volatile
  7347                           
  7348                           ;main.c: 79: INTF = 0;
  7349  13E3  108B               	bcf	11,1	;volatile
  7350                           
  7351                           ;main.c: 80: INTEDG = 0;
  7352  13E4  1683               	bsf	3,5	;RP0=1, select bank1
  7353  13E5  1303               	bcf	3,6	;RP1=0, select bank1
  7354  13E6  1301               	bcf	1,6	;volatile
  7355  13E7  0008               	return
  7356  13E8                     __end_of_initInterrupt:	
  7357                           
  7358                           	psect	text32
  7359  13F0                     __ptext32:	
  7360 ;; *************** function _initADC *****************
  7361 ;; Defined at:
  7362 ;;		line 62 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  7363 ;; Parameters:    Size  Location     Type
  7364 ;;		None
  7365 ;; Auto vars:     Size  Location     Type
  7366 ;;		None
  7367 ;; Return value:  Size  Location     Type
  7368 ;;		None               void
  7369 ;; Registers used:
  7370 ;;		wreg
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7376 ;;      Params:         0       0       0       0       0
  7377 ;;      Locals:         0       0       0       0       0
  7378 ;;      Temps:          0       0       0       0       0
  7379 ;;      Totals:         0       0       0       0       0
  7380 ;;Total ram usage:        0 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    2
  7383 ;; This function calls:
  7384 ;;		Nothing
  7385 ;; This function is called by:
  7386 ;;		_main
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           
  7391                           ;psect for function _initADC
  7392  13F0                     _initADC:	
  7393                           
  7394                           ;main.c: 64: ADCON1 = 0x80;
  7395                           
  7396                           ;incstack = 0
  7397                           ; Regs used in _initADC: [wreg]
  7398  13F0  3080               	movlw	128
  7399  13F1  1683               	bsf	3,5	;RP0=1, select bank1
  7400  13F2  1303               	bcf	3,6	;RP1=0, select bank1
  7401  13F3  009F               	movwf	31	;volatile
  7402                           
  7403                           ;main.c: 65: ADCON0 = 0x01;
  7404  13F4  3001               	movlw	1
  7405  13F5  1283               	bcf	3,5	;RP0=0, select bank0
  7406  13F6  1303               	bcf	3,6	;RP1=0, select bank0
  7407  13F7  009F               	movwf	31	;volatile
  7408  13F8  0008               	return
  7409  13F9                     __end_of_initADC:	
  7410                           
  7411                           	psect	text33
  7412  159A                     __ptext33:	
  7413 ;; *************** function _handlePPM *****************
  7414 ;; Defined at:
  7415 ;;		line 52 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\mq135_module
      +.h"
  7416 ;; Parameters:    Size  Location     Type
  7417 ;;		None
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;		None
  7420 ;; Return value:  Size  Location     Type
  7421 ;;                  1    wreg      unsigned char 
  7422 ;; Registers used:
  7423 ;;		wreg, status,2, status,0, pclath, cstack
  7424 ;; Tracked objects:
  7425 ;;		On entry : 0/0
  7426 ;;		On exit  : 0/0
  7427 ;;		Unchanged: 0/0
  7428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7429 ;;      Params:         0       0       0       0       0
  7430 ;;      Locals:         0       0       0       0       0
  7431 ;;      Temps:          0       0       0       0       0
  7432 ;;      Totals:         0       0       0       0       0
  7433 ;;Total ram usage:        0 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; Hardware stack levels required when called:    3
  7436 ;; This function calls:
  7437 ;;		___ftge
  7438 ;; This function is called by:
  7439 ;;		_main
  7440 ;; This function uses a non-reentrant model
  7441 ;;
  7442                           
  7443                           
  7444                           ;psect for function _handlePPM
  7445  159A                     _handlePPM:	
  7446                           
  7447                           ;mq135_module.h: 54: if (PPM > 9)
  7448                           
  7449                           ;incstack = 0
  7450                           ; Regs used in _handlePPM: [wreg+status,2+status,0+pclath+cstack]
  7451  159A  3000               	movlw	0
  7452  159B  1283               	bcf	3,5	;RP0=0, select bank0
  7453  159C  1303               	bcf	3,6	;RP1=0, select bank0
  7454  159D  00A0               	movwf	___ftge@ff1
  7455  159E  3010               	movlw	16
  7456  159F  00A1               	movwf	___ftge@ff1+1
  7457  15A0  3041               	movlw	65
  7458  15A1  00A2               	movwf	___ftge@ff1+2
  7459  15A2  1683               	bsf	3,5	;RP0=1, select bank1
  7460  15A3  1303               	bcf	3,6	;RP1=0, select bank1
  7461  15A4  0857               	movf	_PPM^(0+128),w	;volatile
  7462  15A5  1283               	bcf	3,5	;RP0=0, select bank0
  7463  15A6  1303               	bcf	3,6	;RP1=0, select bank0
  7464  15A7  00A3               	movwf	___ftge@ff2
  7465  15A8  1683               	bsf	3,5	;RP0=1, select bank1
  7466  15A9  1303               	bcf	3,6	;RP1=0, select bank1
  7467  15AA  0858               	movf	(_PPM+1)^(0+128),w	;volatile
  7468  15AB  1283               	bcf	3,5	;RP0=0, select bank0
  7469  15AC  1303               	bcf	3,6	;RP1=0, select bank0
  7470  15AD  00A4               	movwf	___ftge@ff2+1
  7471  15AE  1683               	bsf	3,5	;RP0=1, select bank1
  7472  15AF  1303               	bcf	3,6	;RP1=0, select bank1
  7473  15B0  0859               	movf	(_PPM+2)^(0+128),w	;volatile
  7474  15B1  1283               	bcf	3,5	;RP0=0, select bank0
  7475  15B2  1303               	bcf	3,6	;RP1=0, select bank0
  7476  15B3  00A5               	movwf	___ftge@ff2+2
  7477  15B4  160A  118A  2737  160A  118A  	fcall	___ftge
  7478  15B9  1803               	btfsc	3,0
  7479  15BA  2DC0               	goto	l95
  7480                           
  7481                           ;mq135_module.h: 55: {
  7482                           ;mq135_module.h: 56: RC3 = 1;
  7483  15BB  1283               	bcf	3,5	;RP0=0, select bank0
  7484  15BC  1303               	bcf	3,6	;RP1=0, select bank0
  7485  15BD  1587               	bsf	7,3	;volatile
  7486                           
  7487                           ;mq135_module.h: 57: return 1;
  7488  15BE  3001               	movlw	1
  7489                           
  7490                           ;mq135_module.h: 58: }
  7491  15BF  0008               	return
  7492  15C0                     l95:	
  7493                           
  7494                           ;mq135_module.h: 59: else
  7495                           ;mq135_module.h: 60: {
  7496                           ;mq135_module.h: 61: RC3 = 0;
  7497  15C0  1283               	bcf	3,5	;RP0=0, select bank0
  7498  15C1  1303               	bcf	3,6	;RP1=0, select bank0
  7499  15C2  1187               	bcf	7,3	;volatile
  7500                           
  7501                           ;mq135_module.h: 62: return 0;
  7502  15C3  3000               	movlw	0
  7503  15C4  0008               	return
  7504  15C5                     __end_of_handlePPM:	
  7505                           
  7506                           	psect	text34
  7507  1737                     __ptext34:	
  7508 ;; *************** function ___ftge *****************
  7509 ;; Defined at:
  7510 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  7511 ;; Parameters:    Size  Location     Type
  7512 ;;  ff1             3    0[BANK0 ] float 
  7513 ;;  ff2             3    3[BANK0 ] float 
  7514 ;; Auto vars:     Size  Location     Type
  7515 ;;		None
  7516 ;; Return value:  Size  Location     Type
  7517 ;;		None               void
  7518 ;; Registers used:
  7519 ;;		wreg, status,2, status,0
  7520 ;; Tracked objects:
  7521 ;;		On entry : 0/0
  7522 ;;		On exit  : 0/0
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7525 ;;      Params:         0       6       0       0       0
  7526 ;;      Locals:         0       0       0       0       0
  7527 ;;      Temps:          0       6       0       0       0
  7528 ;;      Totals:         0      12       0       0       0
  7529 ;;Total ram usage:       12 bytes
  7530 ;; Hardware stack levels used:    1
  7531 ;; Hardware stack levels required when called:    2
  7532 ;; This function calls:
  7533 ;;		Nothing
  7534 ;; This function is called by:
  7535 ;;		_handlePPM
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           
  7540                           ;psect for function ___ftge
  7541  1737                     ___ftge:	
  7542                           
  7543                           ;incstack = 0
  7544                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7545  1737  1283               	bcf	3,5	;RP0=0, select bank0
  7546  1738  1303               	bcf	3,6	;RP1=0, select bank0
  7547  1739  1FA2               	btfss	___ftge@ff1+2,7
  7548  173A  2F60               	goto	l2500
  7549  173B  3000               	movlw	0
  7550  173C  00A6               	movwf	??___ftge
  7551  173D  3000               	movlw	0
  7552  173E  00A7               	movwf	??___ftge+1
  7553  173F  3080               	movlw	128
  7554  1740  00A8               	movwf	??___ftge+2
  7555  1741  0920               	comf	___ftge@ff1,w
  7556  1742  00A9               	movwf	??___ftge+3
  7557  1743  0921               	comf	___ftge@ff1+1,w
  7558  1744  00AA               	movwf	??___ftge+4
  7559  1745  0922               	comf	___ftge@ff1+2,w
  7560  1746  00AB               	movwf	??___ftge+5
  7561  1747  0AA9               	incf	??___ftge+3,f
  7562  1748  1903               	skipnz
  7563  1749  0AAA               	incf	??___ftge+4,f
  7564  174A  1903               	skipnz
  7565  174B  0AAB               	incf	??___ftge+5,f
  7566  174C  0829               	movf	??___ftge+3,w
  7567  174D  07A6               	addwf	??___ftge,f
  7568  174E  082A               	movf	??___ftge+4,w
  7569  174F  1803               	skipnc
  7570  1750  0F2A               	incfsz	??___ftge+4,w
  7571  1751  2F53               	goto	u3461
  7572  1752  2F54               	goto	u3462
  7573  1753                     u3461:	
  7574  1753  07A7               	addwf	??___ftge+1,f
  7575  1754                     u3462:	
  7576  1754  082B               	movf	??___ftge+5,w
  7577  1755  1803               	skipnc
  7578  1756  0F2B               	incfsz	??___ftge+5,w
  7579  1757  2F59               	goto	u3463
  7580  1758  2F5A               	goto	u3464
  7581  1759                     u3463:	
  7582  1759  07A8               	addwf	??___ftge+2,f
  7583  175A                     u3464:	
  7584  175A  0826               	movf	??___ftge,w
  7585  175B  00A0               	movwf	___ftge@ff1
  7586  175C  0827               	movf	??___ftge+1,w
  7587  175D  00A1               	movwf	___ftge@ff1+1
  7588  175E  0828               	movf	??___ftge+2,w
  7589  175F  00A2               	movwf	___ftge@ff1+2
  7590  1760                     l2500:	
  7591  1760  1FA5               	btfss	___ftge@ff2+2,7
  7592  1761  2F87               	goto	l2504
  7593  1762  3000               	movlw	0
  7594  1763  00A6               	movwf	??___ftge
  7595  1764  3000               	movlw	0
  7596  1765  00A7               	movwf	??___ftge+1
  7597  1766  3080               	movlw	128
  7598  1767  00A8               	movwf	??___ftge+2
  7599  1768  0923               	comf	___ftge@ff2,w
  7600  1769  00A9               	movwf	??___ftge+3
  7601  176A  0924               	comf	___ftge@ff2+1,w
  7602  176B  00AA               	movwf	??___ftge+4
  7603  176C  0925               	comf	___ftge@ff2+2,w
  7604  176D  00AB               	movwf	??___ftge+5
  7605  176E  0AA9               	incf	??___ftge+3,f
  7606  176F  1903               	skipnz
  7607  1770  0AAA               	incf	??___ftge+4,f
  7608  1771  1903               	skipnz
  7609  1772  0AAB               	incf	??___ftge+5,f
  7610  1773  0829               	movf	??___ftge+3,w
  7611  1774  07A6               	addwf	??___ftge,f
  7612  1775  082A               	movf	??___ftge+4,w
  7613  1776  1803               	skipnc
  7614  1777  0F2A               	incfsz	??___ftge+4,w
  7615  1778  2F7A               	goto	u3481
  7616  1779  2F7B               	goto	u3482
  7617  177A                     u3481:	
  7618  177A  07A7               	addwf	??___ftge+1,f
  7619  177B                     u3482:	
  7620  177B  082B               	movf	??___ftge+5,w
  7621  177C  1803               	skipnc
  7622  177D  0F2B               	incfsz	??___ftge+5,w
  7623  177E  2F80               	goto	u3483
  7624  177F  2F81               	goto	u3484
  7625  1780                     u3483:	
  7626  1780  07A8               	addwf	??___ftge+2,f
  7627  1781                     u3484:	
  7628  1781  0826               	movf	??___ftge,w
  7629  1782  00A3               	movwf	___ftge@ff2
  7630  1783  0827               	movf	??___ftge+1,w
  7631  1784  00A4               	movwf	___ftge@ff2+1
  7632  1785  0828               	movf	??___ftge+2,w
  7633  1786  00A5               	movwf	___ftge@ff2+2
  7634  1787                     l2504:	
  7635  1787  3080               	movlw	128
  7636  1788  06A2               	xorwf	___ftge@ff1+2,f
  7637  1789  3080               	movlw	128
  7638  178A  06A5               	xorwf	___ftge@ff2+2,f
  7639  178B  0825               	movf	___ftge@ff2+2,w
  7640  178C  0222               	subwf	___ftge@ff1+2,w
  7641  178D  1D03               	skipz
  7642  178E  0008               	return
  7643  178F  0824               	movf	___ftge@ff2+1,w
  7644  1790  0221               	subwf	___ftge@ff1+1,w
  7645  1791  1D03               	skipz
  7646  1792  0008               	return
  7647  1793  0823               	movf	___ftge@ff2,w
  7648  1794  0220               	subwf	___ftge@ff1,w
  7649  1795  0008               	return
  7650  1796                     __end_of___ftge:	
  7651                           
  7652                           	psect	text35
  7653  08F7                     __ptext35:	
  7654 ;; *************** function _checkTime *****************
  7655 ;; Defined at:
  7656 ;;		line 208 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\time_schedu
      +ler.h"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;		None
  7659 ;; Auto vars:     Size  Location     Type
  7660 ;;		None
  7661 ;; Return value:  Size  Location     Type
  7662 ;;		None               void
  7663 ;; Registers used:
  7664 ;;		wreg
  7665 ;; Tracked objects:
  7666 ;;		On entry : 0/0
  7667 ;;		On exit  : 0/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7670 ;;      Params:         0       0       0       0       0
  7671 ;;      Locals:         0       0       0       0       0
  7672 ;;      Temps:          0       0       0       0       0
  7673 ;;      Totals:         0       0       0       0       0
  7674 ;;Total ram usage:        0 bytes
  7675 ;; Hardware stack levels used:    1
  7676 ;; Hardware stack levels required when called:    2
  7677 ;; This function calls:
  7678 ;;		Nothing
  7679 ;; This function is called by:
  7680 ;;		_main
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684                           
  7685                           ;psect for function _checkTime
  7686  08F7                     _checkTime:	
  7687                           
  7688                           ;time_scheduler.h: 210: if (hours == savedHoursEnd && minutes == savedMinutesEnd)
  7689                           
  7690                           ;incstack = 0
  7691                           ; Regs used in _checkTime: [wreg]
  7692  08F7  087A               	movf	_hours,w	;volatile
  7693  08F8  1683               	bsf	3,5	;RP0=1, select bank1
  7694  08F9  1303               	bcf	3,6	;RP1=0, select bank1
  7695  08FA  0669               	xorwf	_savedHoursEnd^(0+128),w	;volatile
  7696  08FB  1D03               	skipz
  7697  08FC  2905               	goto	l3110
  7698  08FD  0879               	movf	_minutes,w	;volatile
  7699  08FE  066B               	xorwf	_savedMinutesEnd^(0+128),w	;volatile
  7700  08FF  1D03               	skipz
  7701  0900  2905               	goto	l3110
  7702                           
  7703                           ;time_scheduler.h: 211: {
  7704                           ;time_scheduler.h: 212: RC4 = 1;
  7705  0901  1283               	bcf	3,5	;RP0=0, select bank0
  7706  0902  1303               	bcf	3,6	;RP1=0, select bank0
  7707  0903  1607               	bsf	7,4	;volatile
  7708                           
  7709                           ;time_scheduler.h: 213: }
  7710  0904  0008               	return
  7711  0905                     l3110:	
  7712                           
  7713                           ;time_scheduler.h: 214: else if (savedHoursEnd > savedHoursStart)
  7714  0905  1683               	bsf	3,5	;RP0=1, select bank1
  7715  0906  1303               	bcf	3,6	;RP1=0, select bank1
  7716  0907  0869               	movf	_savedHoursEnd^(0+128),w	;volatile
  7717  0908  026A               	subwf	_savedHoursStart^(0+128),w	;volatile
  7718  0909  1803               	skipnc
  7719  090A  292B               	goto	l3124
  7720                           
  7721                           ;time_scheduler.h: 215: {
  7722                           ;time_scheduler.h: 217: if ((hours > savedHoursStart || (hours == savedHoursStart && min
      +                          utes >= savedMinutesStart)) &&
  7723                           ;time_scheduler.h: 218: (hours < savedHoursEnd || (hours == savedHoursEnd && minutes < s
      +                          avedMinutesEnd)))
  7724  090B  087A               	movf	_hours,w	;volatile
  7725  090C  026A               	subwf	_savedHoursStart^(0+128),w	;volatile
  7726  090D  1C03               	skipc
  7727  090E  2917               	goto	l3118
  7728  090F  087A               	movf	_hours,w	;volatile
  7729  0910  066A               	xorwf	_savedHoursStart^(0+128),w	;volatile
  7730  0911  1D03               	skipz
  7731  0912  2927               	goto	l202
  7732  0913  086C               	movf	_savedMinutesStart^(0+128),w	;volatile
  7733  0914  0279               	subwf	_minutes,w	;volatile
  7734  0915  1C03               	skipc
  7735  0916  2927               	goto	l202
  7736  0917                     l3118:	
  7737  0917  0869               	movf	_savedHoursEnd^(0+128),w	;volatile
  7738  0918  027A               	subwf	_hours,w	;volatile
  7739  0919  1C03               	skipc
  7740  091A  2923               	goto	l206
  7741  091B  087A               	movf	_hours,w	;volatile
  7742  091C  0669               	xorwf	_savedHoursEnd^(0+128),w	;volatile
  7743  091D  1D03               	skipz
  7744  091E  2927               	goto	l202
  7745  091F  086B               	movf	_savedMinutesEnd^(0+128),w	;volatile
  7746  0920  0279               	subwf	_minutes,w	;volatile
  7747  0921  1803               	skipnc
  7748  0922  2927               	goto	l202
  7749  0923                     l206:	
  7750                           
  7751                           ;time_scheduler.h: 219: {
  7752                           ;time_scheduler.h: 220: RC4 = 1;
  7753  0923  1283               	bcf	3,5	;RP0=0, select bank0
  7754  0924  1303               	bcf	3,6	;RP1=0, select bank0
  7755  0925  1607               	bsf	7,4	;volatile
  7756                           
  7757                           ;time_scheduler.h: 221: }
  7758  0926  0008               	return
  7759  0927                     l202:	
  7760                           
  7761                           ;time_scheduler.h: 222: else
  7762                           ;time_scheduler.h: 223: {
  7763                           ;time_scheduler.h: 224: RC4 = 0;
  7764  0927  1283               	bcf	3,5	;RP0=0, select bank0
  7765  0928  1303               	bcf	3,6	;RP1=0, select bank0
  7766  0929  1207               	bcf	7,4	;volatile
  7767                           
  7768                           ;time_scheduler.h: 225: }
  7769                           ;time_scheduler.h: 226: }
  7770  092A  0008               	return
  7771  092B                     l3124:	
  7772                           
  7773                           ;time_scheduler.h: 227: else if (savedHoursEnd < savedHoursStart)
  7774  092B  1683               	bsf	3,5	;RP0=1, select bank1
  7775  092C  1303               	bcf	3,6	;RP1=0, select bank1
  7776  092D  086A               	movf	_savedHoursStart^(0+128),w	;volatile
  7777  092E  0269               	subwf	_savedHoursEnd^(0+128),w	;volatile
  7778  092F  1803               	skipnc
  7779  0930  2951               	goto	l3138
  7780                           
  7781                           ;time_scheduler.h: 228: {
  7782                           ;time_scheduler.h: 230: if ((hours > savedHoursStart || (hours == savedHoursStart && min
      +                          utes >= savedMinutesStart)) ||
  7783                           ;time_scheduler.h: 231: (hours < savedHoursEnd || (hours == savedHoursEnd && minutes < s
      +                          avedMinutesEnd)))
  7784  0931  087A               	movf	_hours,w	;volatile
  7785  0932  026A               	subwf	_savedHoursStart^(0+128),w	;volatile
  7786  0933  1C03               	skipc
  7787  0934  2949               	goto	l212
  7788  0935  087A               	movf	_hours,w	;volatile
  7789  0936  066A               	xorwf	_savedHoursStart^(0+128),w	;volatile
  7790  0937  1D03               	skipz
  7791  0938  293D               	goto	l3132
  7792  0939  086C               	movf	_savedMinutesStart^(0+128),w	;volatile
  7793  093A  0279               	subwf	_minutes,w	;volatile
  7794  093B  1803               	skipnc
  7795  093C  2949               	goto	l212
  7796  093D                     l3132:	
  7797  093D  0869               	movf	_savedHoursEnd^(0+128),w	;volatile
  7798  093E  027A               	subwf	_hours,w	;volatile
  7799  093F  1C03               	skipc
  7800  0940  2949               	goto	l212
  7801  0941  087A               	movf	_hours,w	;volatile
  7802  0942  0669               	xorwf	_savedHoursEnd^(0+128),w	;volatile
  7803  0943  1D03               	skipz
  7804  0944  294D               	goto	l210
  7805  0945  086B               	movf	_savedMinutesEnd^(0+128),w	;volatile
  7806  0946  0279               	subwf	_minutes,w	;volatile
  7807  0947  1803               	skipnc
  7808  0948  294D               	goto	l210
  7809  0949                     l212:	
  7810                           
  7811                           ;time_scheduler.h: 232: {
  7812                           ;time_scheduler.h: 233: RC4 = 1;
  7813  0949  1283               	bcf	3,5	;RP0=0, select bank0
  7814  094A  1303               	bcf	3,6	;RP1=0, select bank0
  7815  094B  1607               	bsf	7,4	;volatile
  7816                           
  7817                           ;time_scheduler.h: 234: }
  7818  094C  0008               	return
  7819  094D                     l210:	
  7820                           
  7821                           ;time_scheduler.h: 235: else
  7822                           ;time_scheduler.h: 236: {
  7823                           ;time_scheduler.h: 237: RC4 = 0;
  7824  094D  1283               	bcf	3,5	;RP0=0, select bank0
  7825  094E  1303               	bcf	3,6	;RP1=0, select bank0
  7826  094F  1207               	bcf	7,4	;volatile
  7827                           
  7828                           ;time_scheduler.h: 238: }
  7829                           ;time_scheduler.h: 239: }
  7830  0950  0008               	return
  7831  0951                     l3138:	
  7832                           
  7833                           ;time_scheduler.h: 240: else
  7834                           ;time_scheduler.h: 241: {
  7835                           ;time_scheduler.h: 242: if (minutes >= savedMinutesStart && minutes < savedMinutesEnd)
  7836  0951  1683               	bsf	3,5	;RP0=1, select bank1
  7837  0952  1303               	bcf	3,6	;RP1=0, select bank1
  7838  0953  086C               	movf	_savedMinutesStart^(0+128),w	;volatile
  7839  0954  0279               	subwf	_minutes,w	;volatile
  7840  0955  1C03               	skipc
  7841  0956  295F               	goto	l219
  7842  0957  086B               	movf	_savedMinutesEnd^(0+128),w	;volatile
  7843  0958  0279               	subwf	_minutes,w	;volatile
  7844  0959  1803               	skipnc
  7845  095A  295F               	goto	l219
  7846                           
  7847                           ;time_scheduler.h: 243: {
  7848                           ;time_scheduler.h: 244: RC4 = 1;
  7849  095B  1283               	bcf	3,5	;RP0=0, select bank0
  7850  095C  1303               	bcf	3,6	;RP1=0, select bank0
  7851  095D  1607               	bsf	7,4	;volatile
  7852                           
  7853                           ;time_scheduler.h: 245: }
  7854  095E  0008               	return
  7855  095F                     l219:	
  7856                           
  7857                           ;time_scheduler.h: 246: else
  7858                           ;time_scheduler.h: 247: {
  7859                           ;time_scheduler.h: 248: RC4 = 0;
  7860  095F  1283               	bcf	3,5	;RP0=0, select bank0
  7861  0960  1303               	bcf	3,6	;RP1=0, select bank0
  7862  0961  1207               	bcf	7,4	;volatile
  7863  0962  0008               	return
  7864  0963                     __end_of_checkTime:	
  7865                           
  7866                           	psect	text36
  7867  15F0                     __ptext36:	
  7868 ;; *************** function _checkSelect *****************
  7869 ;; Defined at:
  7870 ;;		line 184 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  7871 ;; Parameters:    Size  Location     Type
  7872 ;;		None
  7873 ;; Auto vars:     Size  Location     Type
  7874 ;;  currentRB1St    2    4[BANK0 ] int 
  7875 ;; Return value:  Size  Location     Type
  7876 ;;		None               void
  7877 ;; Registers used:
  7878 ;;		wreg, status,2, status,0, pclath, cstack
  7879 ;; Tracked objects:
  7880 ;;		On entry : 0/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7884 ;;      Params:         0       0       0       0       0
  7885 ;;      Locals:         0       2       0       0       0
  7886 ;;      Temps:          0       2       0       0       0
  7887 ;;      Totals:         0       4       0       0       0
  7888 ;;Total ram usage:        4 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; Hardware stack levels required when called:    3
  7891 ;; This function calls:
  7892 ;;		_instCTRL
  7893 ;; This function is called by:
  7894 ;;		_main
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           
  7899                           ;psect for function _checkSelect
  7900  15F0                     _checkSelect:	
  7901                           
  7902                           ;main.c: 186: static int lastRB1State = 0;
  7903                           ;main.c: 187: int currentRB1State = RB1;
  7904                           
  7905                           ;incstack = 0
  7906                           ; Regs used in _checkSelect: [wreg+status,2+status,0+pclath+cstack]
  7907  15F0  1003               	clrc
  7908  15F1  1283               	bcf	3,5	;RP0=0, select bank0
  7909  15F2  1303               	bcf	3,6	;RP1=0, select bank0
  7910  15F3  1886               	btfsc	6,1	;volatile
  7911  15F4  1403               	setc
  7912  15F5  3000               	movlw	0
  7913  15F6  1803               	skipnc
  7914  15F7  3001               	movlw	1
  7915  15F8  00A2               	movwf	??_checkSelect
  7916  15F9  01A3               	clrf	??_checkSelect+1
  7917  15FA  0822               	movf	??_checkSelect,w
  7918  15FB  00A4               	movwf	checkSelect@currentRB1State
  7919  15FC  0823               	movf	??_checkSelect+1,w
  7920  15FD  00A5               	movwf	checkSelect@currentRB1State+1
  7921                           
  7922                           ;main.c: 188: if (currentRB1State == 1 && lastRB1State == 0)
  7923  15FE  3001               	movlw	1
  7924  15FF  0624               	xorwf	checkSelect@currentRB1State,w
  7925  1600  0425               	iorwf	checkSelect@currentRB1State+1,w
  7926  1601  1D03               	skipz
  7927  1602  2E15               	goto	l2618
  7928  1603  1683               	bsf	3,5	;RP0=1, select bank1
  7929  1604  1303               	bcf	3,6	;RP1=0, select bank1
  7930  1605  085B               	movf	(checkSelect@lastRB1State+1)^(0+128),w
  7931  1606  045A               	iorwf	checkSelect@lastRB1State^(0+128),w
  7932  1607  1D03               	skipz
  7933  1608  2E15               	goto	l2618
  7934                           
  7935                           ;main.c: 189: {
  7936                           ;main.c: 190: select ^= 1;
  7937  1609  3001               	movlw	1
  7938  160A  1283               	bcf	3,5	;RP0=0, select bank0
  7939  160B  1303               	bcf	3,6	;RP1=0, select bank0
  7940  160C  00A2               	movwf	??_checkSelect
  7941  160D  0822               	movf	??_checkSelect,w
  7942  160E  1683               	bsf	3,5	;RP0=1, select bank1
  7943  160F  1303               	bcf	3,6	;RP1=0, select bank1
  7944  1610  06DE               	xorwf	_select^(0+128),f	;volatile
  7945                           
  7946                           ;main.c: 192: instCTRL(0x01);
  7947  1611  3001               	movlw	1
  7948  1612  160A  118A  242B   	fcall	_instCTRL
  7949  1615                     l2618:	
  7950                           
  7951                           ;main.c: 193: }
  7952                           ;main.c: 194: lastRB1State = currentRB1State;
  7953  1615  1283               	bcf	3,5	;RP0=0, select bank0
  7954  1616  1303               	bcf	3,6	;RP1=0, select bank0
  7955  1617  0825               	movf	checkSelect@currentRB1State+1,w
  7956  1618  1683               	bsf	3,5	;RP0=1, select bank1
  7957  1619  1303               	bcf	3,6	;RP1=0, select bank1
  7958  161A  01DB               	clrf	(checkSelect@lastRB1State+1)^(0+128)
  7959  161B  07DB               	addwf	(checkSelect@lastRB1State+1)^(0+128),f
  7960  161C  1283               	bcf	3,5	;RP0=0, select bank0
  7961  161D  1303               	bcf	3,6	;RP1=0, select bank0
  7962  161E  0824               	movf	checkSelect@currentRB1State,w
  7963  161F  1683               	bsf	3,5	;RP0=1, select bank1
  7964  1620  1303               	bcf	3,6	;RP1=0, select bank1
  7965  1621  01DA               	clrf	checkSelect@lastRB1State^(0+128)
  7966  1622  07DA               	addwf	checkSelect@lastRB1State^(0+128),f
  7967  1623  0008               	return
  7968  1624                     __end_of_checkSelect:	
  7969                           
  7970                           	psect	text37
  7971  14C5                     __ptext37:	
  7972 ;; *************** function _checkMode *****************
  7973 ;; Defined at:
  7974 ;;		line 173 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  7975 ;; Parameters:    Size  Location     Type
  7976 ;;		None
  7977 ;; Auto vars:     Size  Location     Type
  7978 ;;		None
  7979 ;; Return value:  Size  Location     Type
  7980 ;;		None               void
  7981 ;; Registers used:
  7982 ;;		wreg, status,2, status,0, pclath, cstack
  7983 ;; Tracked objects:
  7984 ;;		On entry : 0/0
  7985 ;;		On exit  : 0/0
  7986 ;;		Unchanged: 0/0
  7987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7988 ;;      Params:         0       0       0       0       0
  7989 ;;      Locals:         0       0       0       0       0
  7990 ;;      Temps:          0       2       0       0       0
  7991 ;;      Totals:         0       2       0       0       0
  7992 ;;Total ram usage:        2 bytes
  7993 ;; Hardware stack levels used:    1
  7994 ;; Hardware stack levels required when called:    3
  7995 ;; This function calls:
  7996 ;;		_instCTRL
  7997 ;; This function is called by:
  7998 ;;		_main
  7999 ;; This function uses a non-reentrant model
  8000 ;;
  8001                           
  8002                           
  8003                           ;psect for function _checkMode
  8004  14C5                     _checkMode:	
  8005                           
  8006                           ;main.c: 175: if (lastMode != mode)
  8007                           
  8008                           ;incstack = 0
  8009                           ; Regs used in _checkMode: [wreg+status,2+status,0+pclath+cstack]
  8010  14C5  087C               	movf	_lastMode,w
  8011  14C6  1683               	bsf	3,5	;RP0=1, select bank1
  8012  14C7  1303               	bcf	3,6	;RP1=0, select bank1
  8013  14C8  065C               	xorwf	_mode^(0+128),w
  8014  14C9  1903               	skipnz
  8015  14CA  0008               	return
  8016                           
  8017                           ;main.c: 176: {
  8018                           ;main.c: 178: instCTRL(0x01);
  8019  14CB  3001               	movlw	1
  8020  14CC  160A  118A  242B  160A  118A  	fcall	_instCTRL
  8021                           
  8022                           ;main.c: 179: _delay((unsigned long)((50)*(4000000/4000.0)));
  8023  14D1  3041               	movlw	65
  8024  14D2  1283               	bcf	3,5	;RP0=0, select bank0
  8025  14D3  1303               	bcf	3,6	;RP1=0, select bank0
  8026  14D4  00A3               	movwf	??_checkMode+1
  8027  14D5  30EE               	movlw	238
  8028  14D6  00A2               	movwf	??_checkMode
  8029  14D7                     u4737:	
  8030  14D7  0BA2               	decfsz	??_checkMode,f
  8031  14D8  2CD7               	goto	u4737
  8032  14D9  0BA3               	decfsz	??_checkMode+1,f
  8033  14DA  2CD7               	goto	u4737
  8034  14DB  0000               	nop
  8035                           
  8036                           ;main.c: 180: lastMode = mode;
  8037  14DC  1683               	bsf	3,5	;RP0=1, select bank1
  8038  14DD  1303               	bcf	3,6	;RP1=0, select bank1
  8039  14DE  085C               	movf	_mode^(0+128),w
  8040  14DF  1283               	bcf	3,5	;RP0=0, select bank0
  8041  14E0  1303               	bcf	3,6	;RP1=0, select bank0
  8042  14E1  00A2               	movwf	??_checkMode
  8043  14E2  0822               	movf	??_checkMode,w
  8044  14E3  00FC               	movwf	_lastMode
  8045  14E4  0008               	return
  8046  14E5                     __end_of_checkMode:	
  8047                           
  8048                           	psect	text38
  8049  142B                     __ptext38:	
  8050 ;; *************** function _instCTRL *****************
  8051 ;; Defined at:
  8052 ;;		line 17 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  8053 ;; Parameters:    Size  Location     Type
  8054 ;;  CMD             1    wreg     unsigned char 
  8055 ;; Auto vars:     Size  Location     Type
  8056 ;;  CMD             1    1[BANK0 ] unsigned char 
  8057 ;; Return value:  Size  Location     Type
  8058 ;;		None               void
  8059 ;; Registers used:
  8060 ;;		wreg
  8061 ;; Tracked objects:
  8062 ;;		On entry : 0/0
  8063 ;;		On exit  : 0/0
  8064 ;;		Unchanged: 0/0
  8065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8066 ;;      Params:         0       0       0       0       0
  8067 ;;      Locals:         0       1       0       0       0
  8068 ;;      Temps:          0       1       0       0       0
  8069 ;;      Totals:         0       2       0       0       0
  8070 ;;Total ram usage:        2 bytes
  8071 ;; Hardware stack levels used:    1
  8072 ;; Hardware stack levels required when called:    2
  8073 ;; This function calls:
  8074 ;;		Nothing
  8075 ;; This function is called by:
  8076 ;;		_initLCD
  8077 ;;		_printToLCD
  8078 ;;		_startUpLCD
  8079 ;;		_updateState
  8080 ;;		_checkMode
  8081 ;;		_checkSelect
  8082 ;; This function uses a non-reentrant model
  8083 ;;
  8084                           
  8085                           
  8086                           ;psect for function _instCTRL
  8087  142B                     _instCTRL:	
  8088                           
  8089                           ;incstack = 0
  8090                           ; Regs used in _instCTRL: [wreg]
  8091                           ;instCTRL@CMD stored from wreg
  8092  142B  1283               	bcf	3,5	;RP0=0, select bank0
  8093  142C  1303               	bcf	3,6	;RP1=0, select bank0
  8094  142D  00A1               	movwf	instCTRL@CMD
  8095                           
  8096                           ;lcd_functions.h: 19: PORTD = CMD;
  8097  142E  0821               	movf	instCTRL@CMD,w
  8098  142F  0088               	movwf	8	;volatile
  8099                           
  8100                           ;lcd_functions.h: 20: RC0 = 0;
  8101  1430  1007               	bcf	7,0	;volatile
  8102                           
  8103                           ;lcd_functions.h: 21: RC1 = 0;
  8104  1431  1087               	bcf	7,1	;volatile
  8105                           
  8106                           ;lcd_functions.h: 22: RC2 = 1;
  8107  1432  1507               	bsf	7,2	;volatile
  8108                           
  8109                           ;lcd_functions.h: 23: _delay((unsigned long)((1)*(4000000/4000.0)));
  8110  1433  30F9               	movlw	249
  8111  1434  00A0               	movwf	??_instCTRL
  8112  1435                     u4747:	
  8113  1435  0000               	nop
  8114  1436  0BA0               	decfsz	??_instCTRL,f
  8115  1437  2C35               	goto	u4747
  8116  1438  2C39               	nop2	;nop
  8117  1439  0000               	nop
  8118                           
  8119                           ;lcd_functions.h: 24: RC2 = 0;
  8120  143A  1283               	bcf	3,5	;RP0=0, select bank0
  8121  143B  1303               	bcf	3,6	;RP1=0, select bank0
  8122  143C  1107               	bcf	7,2	;volatile
  8123  143D  0008               	return
  8124  143E                     __end_of_instCTRL:	
  8125                           
  8126                           	psect	text39
  8127  14A5                     __ptext39:	
  8128 ;; *************** function _ISR *****************
  8129 ;; Defined at:
  8130 ;;		line 83 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\main.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;		None
  8133 ;; Auto vars:     Size  Location     Type
  8134 ;;		None
  8135 ;; Return value:  Size  Location     Type
  8136 ;;		None               void
  8137 ;; Registers used:
  8138 ;;		wreg, status,2, status,0, pclath, cstack
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8144 ;;      Params:         0       0       0       0       0
  8145 ;;      Locals:         0       0       0       0       0
  8146 ;;      Temps:          5       0       0       0       0
  8147 ;;      Totals:         5       0       0       0       0
  8148 ;;Total ram usage:        5 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:    1
  8151 ;; This function calls:
  8152 ;;		i1_instCTRL
  8153 ;; This function is called by:
  8154 ;;		Interrupt level 1
  8155 ;; This function uses a non-reentrant model
  8156 ;;
  8157                           
  8158                           
  8159                           ;psect for function _ISR
  8160  14A5                     _ISR:	
  8161                           
  8162                           ;main.c: 85: GIE = 0;
  8163  14A5  138B               	bcf	11,7	;volatile
  8164                           
  8165                           ;main.c: 86: if (INTF == 1)
  8166  14A6  1C8B               	btfss	11,1	;volatile
  8167  14A7  2CB1               	goto	i1l2744
  8168                           
  8169                           ;main.c: 87: {
  8170                           ;main.c: 88: INTF = 0;
  8171  14A8  108B               	bcf	11,1	;volatile
  8172                           
  8173                           ;main.c: 89: mode = (mode + 1) % 4;
  8174  14A9  1683               	bsf	3,5	;RP0=1, select bank1
  8175  14AA  1303               	bcf	3,6	;RP1=0, select bank1
  8176  14AB  085C               	movf	_mode^(0+128),w
  8177  14AC  3E01               	addlw	1
  8178  14AD  3903               	andlw	3
  8179  14AE  00F2               	movwf	??_ISR
  8180  14AF  0872               	movf	??_ISR,w
  8181  14B0  00DC               	movwf	_mode^(0+128)
  8182  14B1                     i1l2744:	
  8183                           
  8184                           ;main.c: 90: }
  8185                           ;main.c: 91: instCTRL(0x01);
  8186  14B1  3001               	movlw	1
  8187  14B2  160A  118A  2418  160A  118A  	fcall	i1_instCTRL
  8188                           
  8189                           ;main.c: 92: GIE = 1;
  8190  14B7  178B               	bsf	11,7	;volatile
  8191  14B8  0876               	movf	??_ISR+4,w
  8192  14B9  1283               	bcf	3,5	;RP0=0, select bank0
  8193  14BA  1303               	bcf	3,6	;RP1=0, select bank0
  8194  14BB  00FF               	movwf	127
  8195  14BC  0875               	movf	??_ISR+3,w
  8196  14BD  008A               	movwf	10
  8197  14BE  0874               	movf	??_ISR+2,w
  8198  14BF  0084               	movwf	4
  8199  14C0  0E73               	swapf	(??_ISR+1)^(0+-128),w
  8200  14C1  0083               	movwf	3
  8201  14C2  0EFE               	swapf	126,f
  8202  14C3  0E7E               	swapf	126,w
  8203  14C4  0009               	retfie
  8204  14C5                     __end_of_ISR:	
  8205                           
  8206                           	psect	intentry
  8207  0004                     __pintentry:	
  8208                           ;incstack = 0
  8209                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  8210                           
  8211  0004                     interrupt_function:	
  8212  007E                     saved_w	set	btemp
  8213  0004  00FE               	movwf	btemp
  8214  0005  0E03               	swapf	3,w
  8215  0006  00F3               	movwf	??_ISR+1
  8216  0007  0804               	movf	4,w
  8217  0008  00F4               	movwf	??_ISR+2
  8218  0009  080A               	movf	10,w
  8219  000A  00F5               	movwf	??_ISR+3
  8220  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8221  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8222  000D  087F               	movf	btemp+1,w
  8223  000E  00F6               	movwf	??_ISR+4
  8224  000F  160A  118A  2CA5   	ljmp	_ISR
  8225                           
  8226                           	psect	text40
  8227  1418                     __ptext40:	
  8228 ;; *************** function i1_instCTRL *****************
  8229 ;; Defined at:
  8230 ;;		line 17 in file "D:\uni_2023-2024\cpe3201\embedded-systems\FinalProject\switching-program\first-version\lcd_function
      +s.h"
  8231 ;; Parameters:    Size  Location     Type
  8232 ;;  CMD             1    wreg     unsigned char 
  8233 ;; Auto vars:     Size  Location     Type
  8234 ;;  CMD             1    1[COMMON] unsigned char 
  8235 ;; Return value:  Size  Location     Type
  8236 ;;		None               void
  8237 ;; Registers used:
  8238 ;;		wreg
  8239 ;; Tracked objects:
  8240 ;;		On entry : 0/0
  8241 ;;		On exit  : 0/0
  8242 ;;		Unchanged: 0/0
  8243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8244 ;;      Params:         0       0       0       0       0
  8245 ;;      Locals:         1       0       0       0       0
  8246 ;;      Temps:          1       0       0       0       0
  8247 ;;      Totals:         2       0       0       0       0
  8248 ;;Total ram usage:        2 bytes
  8249 ;; Hardware stack levels used:    1
  8250 ;; This function calls:
  8251 ;;		Nothing
  8252 ;; This function is called by:
  8253 ;;		_ISR
  8254 ;; This function uses a non-reentrant model
  8255 ;;
  8256                           
  8257                           
  8258                           ;psect for function i1_instCTRL
  8259  1418                     i1_instCTRL:	
  8260                           
  8261                           ;incstack = 0
  8262                           ; Regs used in i1_instCTRL: [wreg]
  8263                           ;i1instCTRL@CMD stored from wreg
  8264  1418  00F1               	movwf	i1instCTRL@CMD
  8265                           
  8266                           ;lcd_functions.h: 19: PORTD = CMD;
  8267  1419  0871               	movf	i1instCTRL@CMD,w
  8268  141A  1283               	bcf	3,5	;RP0=0, select bank0
  8269  141B  1303               	bcf	3,6	;RP1=0, select bank0
  8270  141C  0088               	movwf	8	;volatile
  8271                           
  8272                           ;lcd_functions.h: 20: RC0 = 0;
  8273  141D  1007               	bcf	7,0	;volatile
  8274                           
  8275                           ;lcd_functions.h: 21: RC1 = 0;
  8276  141E  1087               	bcf	7,1	;volatile
  8277                           
  8278                           ;lcd_functions.h: 22: RC2 = 1;
  8279  141F  1507               	bsf	7,2	;volatile
  8280                           
  8281                           ;lcd_functions.h: 23: _delay((unsigned long)((1)*(4000000/4000.0)));
  8282  1420  30F9               	movlw	249
  8283  1421  00F0               	movwf	??i1_instCTRL
  8284  1422                     u475_27:	
  8285  1422  0000               	nop
  8286  1423  0BF0               	decfsz	??i1_instCTRL,f
  8287  1424  2C22               	goto	u475_27
  8288  1425  2C26               	nop2	;nop
  8289  1426  0000               	nop
  8290                           
  8291                           ;lcd_functions.h: 24: RC2 = 0;
  8292  1427  1283               	bcf	3,5	;RP0=0, select bank0
  8293  1428  1303               	bcf	3,6	;RP1=0, select bank0
  8294  1429  1107               	bcf	7,2	;volatile
  8295  142A  0008               	return
  8296  142B                     __end_ofi1_instCTRL:	
  8297  007E                     btemp	set	126	;btemp
  8298  007E                     wtemp	set	126
  8299  007E                     wtemp0	set	126
  8300  0080                     wtemp1	set	128
  8301  0082                     wtemp2	set	130
  8302  0084                     wtemp3	set	132
  8303  0086                     wtemp4	set	134
  8304  0088                     wtemp5	set	136
  8305  007F                     wtemp6	set	127
  8306  007E                     ttemp	set	126
  8307  007E                     ttemp0	set	126
  8308  0081                     ttemp1	set	129
  8309  0084                     ttemp2	set	132
  8310  0087                     ttemp3	set	135
  8311  007F                     ttemp4	set	127
  8312  007E                     ltemp	set	126
  8313  007E                     ltemp0	set	126
  8314  0082                     ltemp1	set	130
  8315  0086                     ltemp2	set	134
  8316  0080                     ltemp3	set	128


Data Sizes:
    Strings     211
    Constant    10
    Data        7
    BSS         21
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      13
    BANK0            80     80      80
    BANK1            80     55      77
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_23(CODE[13]), STR_22(CODE[14]), STR_18(CODE[10]), STR_17(CODE[10]), 
		 -> STR_16(CODE[10]), STR_15(CODE[10]), STR_14(CODE[10]), STR_13(CODE[10]), 
		 -> STR_12(CODE[10]), STR_11(CODE[10]), STR_10(CODE[10]), STR_9(CODE[10]), 
		 -> STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[16]), STR_3(CODE[9]), 
		 -> STR_2(CODE[3]), STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 50
		 -> updateState@buffer(BANK0[10]), debugInfo(BANK1[10]), displayTime@timeFormat(BANK0[10]), displayPPM@strBuffer(BANK1[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S230$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    displayPPM@bufPtr	PTR unsigned char  size(1) Largest target is 50
		 -> displayPPM@strBuffer(BANK1[50]), 

    printToLCD@str	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_31(CODE[8]), STR_30(CODE[12]), STR_29(CODE[10]), STR_28(CODE[14]), 
		 -> STR_27(CODE[12]), STR_26(CODE[10]), STR_25(CODE[16]), STR_24(CODE[15]), 
		 -> updateState@buffer(BANK0[10]), STR_21(CODE[15]), STR_20(CODE[7]), STR_19(CODE[7]), 
		 -> debugInfo(BANK1[10]), displayTime@timeFormat(BANK0[10]), STR_5(CODE[8]), STR_4(CODE[8]), 
		 -> displayPPM@strBuffer(BANK1[50]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_instCTRL

Critical Paths under _main in BANK0

    _main->_updateState
    _updateState->_displayPPM
    _setMinutesStart->_sprintf
    _setMinutesEnd->_sprintf
    _setHoursStart->_sprintf
    _setHoursEnd->_sprintf
    _printStatusPPM->_printToLCD
    _displayTime->_sprintf
    _displayPPM->___fttol
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___fttol->___ftmul
    ___ftneg->___awtoft
    _startUpLCD->_printToLCD
    _printToLCD->_dataCTRL
    _printToLCD->_instCTRL
    _initLCD->_instCTRL
    _runMQ135->_CalcMQ135
    _CalcMQ135->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _handlePPM->___ftge
    _checkSelect->_instCTRL
    _checkMode->_instCTRL

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _updateState->_displayPPM
    _runMQ135->_CalcMQ135

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   67888
                                             77 BANK0      3     3      0
                          _checkMode
                        _checkSelect
                          _checkTime
                          _handlePPM
                            _initADC
                      _initInterrupt
                           _runClock
                           _runMQ135
                  _setPortDirections
                         _startUpLCD
                        _updateState
 ---------------------------------------------------------------------------------
 (1) _updateState                                         15    15      0   54256
                                             62 BANK0     15    15      0
                         _displayPPM
                        _displayTime
                           _instCTRL
                     _printStatusPPM
                         _printToLCD
                        _setHoursEnd
                      _setHoursStart
                      _setMinutesEnd
                    _setMinutesStart
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setMinutesStart                                      3     3      0    6602
                                             35 BANK0      3     3      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setMinutesEnd                                        3     3      0    6602
                                             35 BANK0      3     3      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setHoursStart                                        3     3      0    6602
                                             35 BANK0      3     3      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setHoursEnd                                          3     3      0    6602
                                             35 BANK0      3     3      0
                            ___awmod
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1144
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _printStatusPPM                                       1     1      0    1536
                                              4 BANK0      1     1      0
                         _printToLCD
 ---------------------------------------------------------------------------------
 (2) _displayTime                                         15    15      0    5568
                                             35 BANK0     15    15      0
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _displayPPM                                          57    57      0   15092
                                             60 BANK0      2     2      0
                                              0 BANK1     55    55      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
                         _printToLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    16      5    3984
                                             14 BANK0     21    16      5
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     265
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     358
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     130
                                             14 BANK0      3     0      3
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _startUpLCD                                           0     0      0    1518
                            _initLCD
                           _instCTRL
                         _printToLCD
 ---------------------------------------------------------------------------------
 (3) _printToLCD                                           2     0      2    1474
                                              2 BANK0      2     0      2
                           _dataCTRL
                           _instCTRL
 ---------------------------------------------------------------------------------
 (4) _dataCTRL                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0      22
                                              2 BANK0      1     1      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (1) _setPortDirections                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _runMQ135                                             0     0      0   11783
                          _CalcMQ135
                     _Read_ADC_MQ135
 ---------------------------------------------------------------------------------
 (2) _Read_ADC_MQ135                                       4     2      2       0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _CalcMQ135                                           42    39      3   11783
                                             62 BANK0      3     0      3
                                              0 BANK1     39    39      0
                     _Read_ADC_MQ135 (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3495
                                             30 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2177
                                             46 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3347
                                             17 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    1882
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1685
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _runClock                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handlePPM                                            0     0      0     242
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     242
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (1) _checkTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkSelect                                          4     4      0      67
                                              2 BANK0      4     4      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (1) _checkMode                                            2     2      0      22
                                              2 BANK0      2     2      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (4) _instCTRL                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  5     5      0      22
                                              2 COMMON     5     5      0
                         i1_instCTRL
 ---------------------------------------------------------------------------------
 (6) i1_instCTRL                                           2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkMode
     _instCTRL
   _checkSelect
     _instCTRL
   _checkTime
   _handlePPM
     ___ftge
   _initADC
   _initInterrupt
   _runClock
   _runMQ135
     _CalcMQ135
       _Read_ADC_MQ135 (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
     _Read_ADC_MQ135
   _setPortDirections
   _startUpLCD
     _initLCD
       _instCTRL
     _instCTRL
     _printToLCD
       _dataCTRL
       _instCTRL
   _updateState
     _displayPPM
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _displayTime
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _instCTRL
     _printStatusPPM
       _printToLCD
         _dataCTRL
         _instCTRL
     _printToLCD
       _dataCTRL
       _instCTRL
     _setHoursEnd
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _setHoursStart
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _setMinutesEnd
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _setMinutesStart
       ___awmod
       _printToLCD
         _dataCTRL
         _instCTRL
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit

 _ISR (ROOT)
   i1_instCTRL

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     37      4D       7       96.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      AA      12        0.0%
ABS                  0      0      AA       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun May 12 07:59:27 2024

                         pc 0002                ?_displayTime 0070                 __CFG_CP$OFF 0000  
                        l95 15C0                          fsr 0004         ___wmul@multiplicand 0022  
  __size_of_setMinutesStart 00B8                ___ftadd@exp1 003D                ___ftadd@exp2 003C  
              ___ftadd@sign 003B                         l210 094D                         l202 0927  
                       l106 145F                         l212 0949                         l206 0923  
                       l145 0B62                         l219 095F                         l317 04F0  
                       l173 0CD2                         l159 0AAA                         l273 075B  
                       l418 1581                         l187 0C1A                         l608 0E76  
                       l299 042B                         l585 17E7                         l579 17CE  
                       _GIE 005F                         _RB1 0031                         _RC0 0038  
                       _RC1 0039                         _RC2 003A                         _RC3 003B  
                       _RC4 003C                __CFG_CPD$OFF 0000                         _ISR 14A5  
                       _PPM 00D7                         _key 0077                         fsr0 0004  
                       indf 0000                ___awmod@sign 0026                __CFG_FOSC$HS 0000  
             printToLCD@str 0022              _Read_ADC_MQ135 1451                __CFG_LVP$OFF 0000  
                      ?_ISR 0070                ___ftdiv@cntr 0058                ___ftdiv@sign 005D  
                      l2104 0E0D                        l3000 0A6B                        l2122 0E3C  
                      l2140 0E88                        l2124 0E48                        l2116 0E27  
                      l2212 0D29                        l2044 16F4                        l3110 0905  
                      l2134 0E66                        l2126 0E4D                        l2206 0D13  
                      l2070 1730                        l2062 171D                        l3014 0ABB  
                      l3006 0A8F                        l2144 0E9A                        l2136 0E72  
                      l2128 0E51                        l2240 0DA0                        l2224 0D68  
                      l2056 1701                        l2048 16FB                        l3016 0AC9  
                      l3040 0CB7                        l3200 0699                        l2082 155C  
                      l2154 0EBD                        l2170 0991                        l2058 170F  
                      l2066 1728                        l3034 0C93                        l3050 0CF1  
                      l3132 093D                        l3124 092B                        l2500 1760  
                      l2164 097B                        l2236 0D90                        l2228 0D78  
                      l3220 06EC                        l3118 0917                        l2094 0DF7  
                      l3206 06B4                        l3214 06CF                        l2504 1787  
                      l2192 09F5                        l2184 09D6                        l2264 0776  
                      l3048 0CE3                        l3216 06DA                        l3138 0951  
                      l2098 0DFE                        l2290 07C5                        l2282 07A8  
                      l3082 0C2B                        l3074 0BFF                        l3226 0707  
                      l3234 0722                        l2292 07D0                        l2284 07B8  
                      l3068 0BDB                        l3084 0C39                        l3236 072D  
                      l3172 05EC                        l3244 074B                        l2294 07D3  
                      l3254 16BD                        l2544 149B                        l1832 17A7  
                      l2800 043B                        l3168 05DA                        l2618 1615  
                      l1842 17D3                        l1834 17B3                        l2298 07E1  
                      l3186 0667                        l3194 067C                        l1844 17DD  
                      l1836 17B8                        l1828 17A0                        l2900 05CC  
                      l2804 044D                        l3196 0687                        l2830 04C1  
                      l2814 048B                        l1872 1688                        l1864 1664  
                      l2816 04A2                        l1866 1672                        l1890 163A  
                      l2762 1579                        l2826 04BB                        l1876 1693  
                      l2756 1416                        l1894 1648                        l2870 054A  
                      l2846 050F                        l2838 04E2                        l1888 162C  
                      l2848 0513                        l2792 0427                        l2778 15CB  
                      l1898 1653                        l2858 052A                        l2938 0FDA  
                      l2946 147B                        l2868 0546                        l2980 0B73  
                      l2972 0B47                        l2878 0565                        l2886 057A  
                      l2798 0430                        l2966 0B23                        l2982 0B81  
                      l2896 057E                        l2898 03FF                        STR_1 08E4  
                      STR_2 08EA                        STR_3 08B5                        STR_4 08BE  
                      STR_5 08CE                        STR_6 082A                        STR_7 08A1  
                      STR_8 0897                        STR_9 08AB                  i1_instCTRL 1418  
                      u2005 17D6                        u2105 1689                        u2035 17EE  
                      u2135 162F                        u3025 07C7                        u2065 1667  
                      u2155 1640                        u2085 1673                        u2165 1649  
                      u2095 167F                        u2415 1704                        u4025 0FC5  
                      u2435 1715                        u2605 0E3D                        u2445 171E  
                      u4055 0AD8                        u4145 0A20                        u4065 0AE5  
                      u2635 0E52                        u4155 0A2D                        u4235 0C48  
                      u3461 1753                        u4325 0B90                        u4245 0C55  
                      u3462 1754                        u3463 1759                        u2575 0E28  
                      u4335 0B9D                        u3464 175A                        u3481 177A  
                      u2665 0E67                        u2745 09A3                        u2825 0D35  
                      u3482 177B                        u3483 1780                        u2755 09B5  
                      u2915 0DA1                        u2835 0D47                        u3484 1781  
                      u1965 17AC                        u2765 09D7                        u2925 0DA9  
                      _INTE 005C                        _INTF 0059                        u2775 09E8  
                      u4607 16B6                        u1985 17C7                        u2785 09F6  
                      u2865 0D79                        u4617 0C63                        u2875 0D81  
                      u4707 1512                        u3915 04FF                        u4627 0CEB  
                      u4717 1457                        u2965 077D                        u4637 0BAB  
                      u4727 149F                        u4647 0C33                        u4737 14D7  
                      u3785 1582                        u4657 0AF3                        u4747 1435  
                      u2995 07A9                        u3795 1589                        u3875 04D8  
                      u4667 0B7B                        u4677 0A3B                        u4687 0AC3  
                      u4697 1448                __CFG_WRT$OFF 0000                        _main 169A  
              ___ftpack@arg 0020                        _mode 00DC                ___ftpack@exp 0023  
                      btemp 007E               __CFG_BOREN$ON 0000                        ltemp 007E  
                      start 0012                        ttemp 007E                        wtemp 007E  
     displayPPM@ppmFraction 00D4                ___ftmul@cntr 004C                ___ftmul@sign 004D  
                     ??_ISR 0072                ___fttol@exp1 005B                ___fttol@lval 0057  
                     ?_main 0070             __end_of___ftadd 0ED7                       STR_10 08A1  
                     STR_11 0897                       STR_12 08AB                       STR_20 08D6  
                     STR_13 08A1                       STR_21 083A                       STR_30 0881  
                     STR_14 0897                       STR_22 0866                       STR_15 08AB  
                     STR_31 08C6                       STR_23 0874                       STR_16 08A1  
                     STR_24 0849                       STR_17 0897                       STR_25 081A  
             __CFG_WDTE$OFF 0000                       STR_18 08AB                       STR_26 088D  
                     STR_19 08DD                       STR_27 0881                       STR_28 0858  
           __end_of___awmod 1737                       STR_29 088D             __end_of___ftdiv 0A1B  
           __end_of___ftneg 08F7             __end_of___ftmul 0DCE             __end_of___fttol 07EA  
           __end_of___lwdiv 169A             __end_of___lwmod 165A      __end_of_Read_ADC_MQ135 146C  
                     _PORTA 0005                       _PORTB 0006                       _PORTC 0007  
                     _PORTD 0008                       _TRISA 0085                       _TRISB 0086  
                     _TRISC 0087                       _TRISD 0088        __size_of_checkSelect 0034  
              CalcMQ135@co2 00C1             __end_of_initADC 13F9             __end_of_initLCD 152C  
             ___awtoft@sign 002D             __end_of_dpowers 081A             __end_of_isdigit 1418  
                     _hours 007A               ___ftpack@sign 0024                       pclath 000A  
                     ltemp0 007E                       ltemp1 0082                       ltemp2 0086  
                     ltemp3 0080          __size_of_CalcMQ135 03A7                       ttemp0 007E  
                     ttemp1 0081                       ttemp2 0084                       ttemp3 0087  
                     ttemp4 007F                       status 0003                       wtemp0 007E  
                     wtemp1 0080                       wtemp2 0082                       wtemp3 0084  
                     wtemp4 0086                       wtemp5 0088                       wtemp6 007F  
           __end_of_sprintf 05D9       __end_of_setHoursStart 0B8B       __end_of_setMinutesEnd 0C43  
           __initialization 0015          displayPPM@ppmWhole 00D2      __size_of_initInterrupt 0007  
              __end_of_main 16E8       printStatusPPM@handler 0024  checkSelect@currentRB1State 0024  
                    ??_main 006D               ___fttol@sign1 0056             ?_Read_ADC_MQ135 0020  
              ?_setHoursEnd 0070           ??_setMinutesStart 0043                      _ADCON0 001F  
                    _ADCON1 009F                      _ADRESH 001E                      _ADRESL 009E  
          __end_of___awtoft 1575            __end_of___ftpack 1800                 ?i1_instCTRL 0070  
                    i1l2744 14B1                      _INTEDG 040E                      u475_27 1422  
          __end_of_dataCTRL 1451                 instCTRL@CMD 0021              __CFG_PWRTE$OFF 0000  
                    ___ftge 1737           _setPortDirections 13F9                      ___wmul 1575  
                 ??___ftadd 0037                   ??___awmod 0024                   ??___ftdiv 0054  
                 ??___ftneg 0031                   ??___ftmul 0044                   ??___fttol 0052  
                 ??___lwdiv 0024                   ??___lwmod 002C            ??_printStatusPPM 0024  
          __end_of_instCTRL 143E       displayTime@timeFormat 0048          ?_setPortDirections 0070  
           ___awmod@divisor 0020                      _select 00DE             ___awmod@counter 0025  
         __end_of_CalcMQ135 03F6        __size_of_displayTime 0024                   ??_initADC 0020  
     ___ftmul@f3_as_product 0049                   ??_initLCD 0022            __end_of_runMQ135 1508  
              __pdataCOMMON 007A                   ??_isdigit 0020         ??_setPortDirections 0020  
                    saved_w 007E            __end_of_runClock 14A5               _initInterrupt 13E1  
                 ??_sprintf 0033     __end_of__initialization 004B                  ___ftadd@f1 0031  
                ___ftadd@f2 0034                  ___ftge@ff1 0020                  ___ftge@ff2 0023  
                ___ftdiv@f1 0051                  ___ftdiv@f2 004E                  ___ftdiv@f3 0059  
                ___ftneg@f1 002E                  ___awtoft@c 0028   __end_of_setPortDirections 1408  
                ___ftmul@f1 003E                  ___ftmul@f2 0041                ?_updateState 0070  
                ___fttol@f1 004E              __pcstackCOMMON 0070                __pidataBANK1 13DD  
        __size_of_checkMode 0020          __size_of_checkTime 006C         __size_ofi1_instCTRL 0013  
        __size_of_handlePPM 002B         displayPPM@strBuffer 00A0     checkSelect@lastRB1State 00DA  
            ?_initInterrupt 0070           updateState@buffer 0063                sprintf@width 003F  
                __pbssBANK1 00D7                  __pmaintext 169A                     ?___ftge 0020  
                   ?___wmul 0020                  __pintentry 0004                   ?___awtoft 0028  
                 ?___ftpack 0020                   ?_dataCTRL 0070                     _GO_DONE 00FA  
                _displayPPM 0ED7        __size_of_setHoursEnd 00B8           __end_of_checkMode 14E5  
         __end_of_checkTime 0963                  __stringtab 0800                   ?_instCTRL 0070  
         __end_of_handlePPM 15C5                   ?_runMQ135 0070  __size_of_setPortDirections 000F  
            CalcMQ135@ratio 00C4             _savedHoursStart 00EA                   ?_runClock 0070  
           __size_of___ftge 005F                     ___ftadd 0DCE                     ___awmod 16E8  
                   ___ftdiv 0963                     ___ftneg 08ED             __size_of___wmul 0025  
                   ___ftmul 0CFB                     ___fttol 075C                     ___lwdiv 165A  
                   ___lwmod 1624            ??_Read_ADC_MQ135 0022             _savedMinutesEnd 00EB  
           _setMinutesStart 0C43                  ??___awtoft 002B                  ??___ftpack 0025  
             ??_checkSelect 0022                     __ptext1 05D9                     __ptext2 0C43  
                   __ptext3 0B8B                     __ptext4 0AD3                     __ptext5 0A1B  
                   __ptext6 16E8                     __ptext7 146C                     __ptext8 152C  
                   __ptext9 0ED7                     _initADC 13F0                  ??_dataCTRL 0020  
                   _initLCD 1508                __size_of_ISR 0020             ??_initInterrupt 0020  
                   _dpowers 0810                     _isdigit 1408            ___awmod@dividend 0022  
                   _ppmFlag 00DD                     _minutes 0079                     _sprintf 03F6  
                   clrloop0 13E9                ??i1_instCTRL 0070        end_of_initialization 004B  
                ??_instCTRL 0020                  ??_runMQ135 0061                  ??_runClock 0020  
      __size_of_updateState 0183                  _printToLCD 15C5          __end_ofi1_instCTRL 142B  
    __size_of_setHoursStart 00B8                   _CalcMQ135 004F         __end_of_checkSelect 1624  
               ?_displayPPM 0070      __size_of_setMinutesEnd 00B8                  _startUpLCD 07EA  
               ___ftdiv@exp 005C            displayPPM@bufPtr 00D6            CalcMQ135@RAW_ADC 005E  
   __end_of_setMinutesStart 0CFB                 ___ftmul@exp 0048               ??_displayTime 0043  
            __end_of___ftge 1796              __end_of___wmul 159A               __pidataCOMMON 13DA  
       start_initialization 0015                  ?_CalcMQ135 005E                 __end_of_ISR 14C5  
              _lastKeyState 007B               _setHoursStart 0AD3               _savedHoursEnd 00E9  
             _setMinutesEnd 0B8B            CalcMQ135@voltage 00A0                    ??___ftge 0026  
                  ??___wmul 0024         __size_of_displayPPM 0129                 __pdataBANK1 00E9  
               ?_printToLCD 0022                 _checkSelect 15F0           __size_of___awtoft 0025  
         __size_of___ftpack 006A         __end_of_displayTime 1550                 __pbssCOMMON 0077  
                 ___latbits 0002               __pcstackBANK0 0020               __pcstackBANK1 00A0  
         __size_of_dataCTRL 0013     __size_of_printStatusPPM 001C         __end_of__stringdata 08ED  
               ?_startUpLCD 0070                 sprintf@ccnt 0038                 sprintf@_val 003A  
         _savedMinutesStart 00EC                 sprintf@flag 003E                 sprintf@prec 0037  
                 _checkMode 14C5                   _checkTime 08F7              ?_setHoursStart 0070  
                 _debugInfo 00DF           __size_of_instCTRL 0013            ___lwdiv@dividend 0022  
            ?_setMinutesEnd 0070            ?_setMinutesStart 0070                   _handlePPM 159A  
         __size_of_runMQ135 0023                    ?___ftadd 0031                    ?___awmod 0020  
                  ?___ftdiv 004E                    ?___ftneg 002E                    ?___ftmul 003E  
                  ?___fttol 004E                    ?___lwdiv 0020                    ?___lwmod 0028  
         __size_of_runClock 001D                   __pstrings 0800                    ?_initADC 0070  
                  ?_initLCD 0070                    ?_isdigit 0070               ??_setHoursEnd 0043  
               ??_CalcMQ135 0061            ___lwdiv@quotient 0025                    ?_sprintf 002E  
         interrupt_function 0004              ___wmul@product 0024                  ?_checkMode 0070  
                ?_checkTime 0070         __size_of_printToLCD 002B                   clear_ram0 13E8  
             i1instCTRL@CMD 0071                 dataCTRL@DAT 0021                  ?_handlePPM 0070  
               _displayTime 152C         __size_of_startUpLCD 0015                 __stringbase 080F  
               __stringdata 081A           ___wmul@multiplier 0020       __end_of_initInterrupt 13E8  
              ??_displayPPM 005C         __end_of_setHoursEnd 0AD3             ??_setHoursStart 0043  
           ??_setMinutesEnd 0043             CalcMQ135@ratio2 00B5             CalcMQ135@ratio3 00B8  
           CalcMQ135@ratio4 00BB             CalcMQ135@ratio5 00BE             CalcMQ135@ratio6 00A3  
             ??_updateState 005E          __end_of_displayPPM 1000            __size_of___ftadd 0109  
          __size_of___awmod 004F            __size_of___ftdiv 00B8            __size_of___ftneg 000A  
          __size_of___ftmul 00D3            __size_of___fttol 008E            __size_of___lwdiv 0040  
          __size_of___lwmod 0036                    ___awtoft 1550                    ___ftpack 1796  
        __end_of__stringtab 0810                 _isdigit$426 0020                    _dataCTRL 143E  
          __size_of_initADC 0009            __size_of_initLCD 0024            __size_of_isdigit 0010  
            _printStatusPPM 146C             ___lwdiv@divisor 0020     __size_of_Read_ADC_MQ135 001B  
           ___lwdiv@counter 0027                    __ptext10 03F6                    __ptext11 1408  
                  __ptext20 1508                    __ptext12 1575                    __ptext21 13F9  
                  __ptext13 1624                    __ptext30 1488                    __ptext22 14E5  
                  __ptext14 165A                    __ptext31 13E1                    __ptext23 1451  
                  __ptext15 075C                    __ptext40 1418                    __ptext32 13F0  
                  __ptext24 004F                    __ptext16 08ED                    __ptext33 159A  
                  __ptext25 0CFB                    __ptext17 07EA                    __ptext34 1737  
                  __ptext26 0963                    __ptext18 15C5                    __ptext35 08F7  
                  __ptext27 0DCE                    __ptext19 143E                    __ptext36 15F0  
                  __ptext28 1550                    __ptext37 14C5                    __ptext29 1796  
                  __ptext38 142B                    __ptext39 14A5            __size_of_sprintf 01E3  
                  _keyValid 0078                    _lastMode 007C                    _instCTRL 142B  
             __size_of_main 004E                 ??_checkMode 0022                 ??_checkTime 0020  
                  _runMQ135 14E5                 ??_handlePPM 002C                    _runClock 1488  
       __end_of_updateState 075C                ??_printToLCD 0024                ?_checkSelect 0070  
    __end_of_printStatusPPM 1488                 _setHoursEnd 0A1B                    isdigit@c 0021  
              ??_startUpLCD 0024                    intlevel1 0000                   sprintf@ap 0036  
                 sprintf@sp 0042            ___lwmod@dividend 002A          __end_of_printToLCD 15F0  
                 stringcode 080A          __end_of_startUpLCD 07FF               _CalcMQ135$660 00AF  
             _CalcMQ135$661 00B2               _CalcMQ135$657 00A6               _CalcMQ135$658 00A9  
             _CalcMQ135$659 00AC                    sprintf@c 0041                    sprintf@f 002E  
           ?_printStatusPPM 0070             ___lwmod@divisor 0028             ___lwmod@counter 002D  
                  stringdir 080A                    stringtab 0800                 _updateState 05D9  
