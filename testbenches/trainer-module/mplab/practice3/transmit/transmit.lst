

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed May 01 18:12:21 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     	;# 
    30  0001                     	;# 
    31  0002                     	;# 
    32  0003                     	;# 
    33  0004                     	;# 
    34  0005                     	;# 
    35  0006                     	;# 
    36  0007                     	;# 
    37  0008                     	;# 
    38  0009                     	;# 
    39  000A                     	;# 
    40  000B                     	;# 
    41  000C                     	;# 
    42  000D                     	;# 
    43  000E                     	;# 
    44  000E                     	;# 
    45  000F                     	;# 
    46  0010                     	;# 
    47  0011                     	;# 
    48  0012                     	;# 
    49  0013                     	;# 
    50  0014                     	;# 
    51  0015                     	;# 
    52  0015                     	;# 
    53  0016                     	;# 
    54  0017                     	;# 
    55  0018                     	;# 
    56  0019                     	;# 
    57  001A                     	;# 
    58  001B                     	;# 
    59  001B                     	;# 
    60  001C                     	;# 
    61  001D                     	;# 
    62  001E                     	;# 
    63  001F                     	;# 
    64  0081                     	;# 
    65  0085                     	;# 
    66  0086                     	;# 
    67  0087                     	;# 
    68  0088                     	;# 
    69  0089                     	;# 
    70  008C                     	;# 
    71  008D                     	;# 
    72  008E                     	;# 
    73  0091                     	;# 
    74  0092                     	;# 
    75  0093                     	;# 
    76  0094                     	;# 
    77  0098                     	;# 
    78  0099                     	;# 
    79  009C                     	;# 
    80  009D                     	;# 
    81  009E                     	;# 
    82  009F                     	;# 
    83  010C                     	;# 
    84  010D                     	;# 
    85  010E                     	;# 
    86  010F                     	;# 
    87  018C                     	;# 
    88  018D                     	;# 
    89                           
    90                           	psect	idataCOMMON
    91  04DC                     __pidataCOMMON:	
    92                           
    93                           ;initializer for _lastKeyData
    94  04DC  34FF               	retlw	255
    95                           
    96                           	psect	strings
    97  039E                     __pstrings:	
    98  039E                     stringtab:	
    99  039E                     __stringtab:	
   100                           
   101                           ;	String table - string pointers are 1 byte each
   102  039E  1BFF               	btfsc	btemp+1,7
   103  039F  2BA8               	ljmp	stringcode
   104  03A0  1383               	bcf	3,7
   105  03A1  187F               	btfsc	btemp+1,0
   106  03A2  1783               	bsf	3,7
   107  03A3  0800               	movf	0,w
   108  03A4  0A84               	incf	4,f
   109  03A5  1903               	skipnz
   110  03A6  0AFF               	incf	btemp+1,f
   111  03A7  0008               	return
   112  03A8                     stringcode:	
   113  03A8                     stringdir:	
   114  03A8  3003               	movlw	high stringdir
   115  03A9  008A               	movwf	10
   116  03AA  0804               	movf	4,w
   117  03AB  0A84               	incf	4,f
   118  03AC  0782               	addwf	2,f
   119  03AD                     __stringbase:	
   120  03AD  3400               	retlw	0
   121  03AE                     __end_of__stringtab:	
   122  03AE                     _dpowers:	
   123  03AE  3401               	retlw	1
   124  03AF  3400               	retlw	0
   125  03B0  340A               	retlw	10
   126  03B1  3400               	retlw	0
   127  03B2  3464               	retlw	100
   128  03B3  3400               	retlw	0
   129  03B4  34E8               	retlw	232
   130  03B5  3403               	retlw	3
   131  03B6  3410               	retlw	16
   132  03B7  3427               	retlw	39
   133  03B8                     __end_of_dpowers:	
   134  0006                     _PORTB	set	6
   135  0008                     _PORTD	set	8
   136  001A                     _RCREG	set	26
   137  0018                     _RCSTA	set	24
   138  0019                     _TXREG	set	25
   139  005F                     _GIE	set	95
   140  005C                     _INTE	set	92
   141  0059                     _INTF	set	89
   142  0031                     _RB1	set	49
   143  0038                     _RC0	set	56
   144  0039                     _RC1	set	57
   145  003A                     _RC2	set	58
   146  0065                     _RCIF	set	101
   147  0064                     _TXIF	set	100
   148  0081                     _OPTION_REG	set	129
   149  0099                     _SPBRG	set	153
   150  0086                     _TRISB	set	134
   151  0087                     _TRISC	set	135
   152  0088                     _TRISD	set	136
   153  0098                     _TXSTA	set	152
   154  0428                     _TRISA0	set	1064
   155  03B8                     __stringdata:	
   156  03B8                     STR_3:	
   157  03B8  3425               	retlw	37	;'%'
   158  03B9  3430               	retlw	48	;'0'
   159  03BA  3432               	retlw	50	;'2'
   160  03BB  3464               	retlw	100	;'d'
   161  03BC  343A               	retlw	58	;':'
   162  03BD  3425               	retlw	37	;'%'
   163  03BE  3430               	retlw	48	;'0'
   164  03BF  3432               	retlw	50	;'2'
   165  03C0  3464               	retlw	100	;'d'
   166  03C1  3400               	retlw	0
   167  03C2                     STR_1:	
   168  03C2  3454               	retlw	84	;'T'
   169  03C3  3449               	retlw	73	;'I'
   170  03C4  344D               	retlw	77	;'M'
   171  03C5  3445               	retlw	69	;'E'
   172  03C6  343A               	retlw	58	;':'
   173  03C7  3420               	retlw	32	;' '
   174  03C8  3400               	retlw	0
   175  03C9                     STR_2:	
   176  03C9  344B               	retlw	75	;'K'
   177  03CA  3445               	retlw	69	;'E'
   178  03CB  3459               	retlw	89	;'Y'
   179  03CC  343A               	retlw	58	;':'
   180  03CD  3420               	retlw	32	;' '
   181  03CE  3400               	retlw	0
   182  03CF                     __end_of__stringdata:	
   183                           
   184                           ; #config settings
   185  0000                     
   186                           	psect	cinit
   187  0015                     start_initialization:	
   188  0015                     __initialization:	
   189                           
   190                           ; Clear objects allocated to BANK0
   191  0015  01C6               	clrf	__pbssBANK0& (0+127)
   192  0016  01C7               	clrf	(__pbssBANK0+1)& (0+127)
   193  0017  01C8               	clrf	(__pbssBANK0+2)& (0+127)
   194  0018  01C9               	clrf	(__pbssBANK0+3)& (0+127)
   195  0019  01CA               	clrf	(__pbssBANK0+4)& (0+127)
   196  001A  01CB               	clrf	(__pbssBANK0+5)& (0+127)
   197  001B  01CC               	clrf	(__pbssBANK0+6)& (0+127)
   198  001C  01CD               	clrf	(__pbssBANK0+7)& (0+127)
   199  001D  01CE               	clrf	(__pbssBANK0+8)& (0+127)
   200  001E  01CF               	clrf	(__pbssBANK0+9)& (0+127)
   201  001F  01D0               	clrf	(__pbssBANK0+10)& (0+127)
   202  0020  01D1               	clrf	(__pbssBANK0+11)& (0+127)
   203  0021  01D2               	clrf	(__pbssBANK0+12)& (0+127)
   204  0022  01D3               	clrf	(__pbssBANK0+13)& (0+127)
   205  0023  01D4               	clrf	(__pbssBANK0+14)& (0+127)
   206                           
   207                           ; Initialize objects allocated to COMMON
   208  0024  120A  118A  24DC   	fcall	__pidataCOMMON	;fetch initializer
   209  0027  00F9               	movwf	__pdataCOMMON& (0+127)
   210  0028                     end_of_initialization:	
   211                           ;End of C runtime variable initialization code
   212                           
   213  0028                     __end_of__initialization:	
   214  0028  0183               	clrf	3
   215  0029  120A  118A  2AD2   	ljmp	_main	;jump to C main() function
   216                           
   217                           	psect	dataCOMMON
   218  0079                     __pdataCOMMON:	
   219  0079                     _lastKeyData:	
   220  0079                     	ds	1
   221                           
   222                           	psect	bssBANK0
   223  0046                     __pbssBANK0:	
   224  0046                     _hours:	
   225  0046                     	ds	2
   226  0048                     _mins:	
   227  0048                     	ds	2
   228  004A                     _keyData:	
   229  004A                     	ds	1
   230  004B                     _buffer:	
   231  004B                     	ds	10
   232                           
   233                           	psect	cstackCOMMON
   234  0070                     __pcstackCOMMON:	
   235  0070                     ?_printTime:	
   236  0070                     ?_isdigit:	
   237                           ; 0 bytes @ 0x0
   238                           
   239  0070                     ?_instCTRL:	
   240                           ; 1 bit 
   241                           
   242  0070                     ?_dataCTRL:	
   243                           ; 0 bytes @ 0x0
   244                           
   245  0070                     ?_initLCD:	
   246                           ; 0 bytes @ 0x0
   247                           
   248  0070                     ?_serialInit:	
   249                           ; 0 bytes @ 0x0
   250                           
   251  0070                     ?_serialSend:	
   252                           ; 0 bytes @ 0x0
   253                           
   254  0070                     ?_main:	
   255                           ; 0 bytes @ 0x0
   256                           
   257  0070                     ??_keypadData:	
   258                           ; 0 bytes @ 0x0
   259                           
   260  0070                     ?_ISR:	
   261                           ; 0 bytes @ 0x0
   262                           
   263  0070                     ?i1_serialSend:	
   264                           ; 0 bytes @ 0x0
   265                           
   266  0070                     ??i1_serialSend:	
   267                           ; 0 bytes @ 0x0
   268                           
   269  0070                     ?_keypadData:	
   270                           ; 0 bytes @ 0x0
   271                           
   272                           
   273                           ; 1 bytes @ 0x0
   274  0070                     	ds	2
   275  0072                     keypadData@dataIN:	
   276                           
   277                           ; 1 bytes @ 0x2
   278  0072                     	ds	1
   279  0073                     keypadData@buffer:	
   280  0073                     i1serialSend@dataOUT:	
   281                           ; 1 bytes @ 0x3
   282                           
   283                           
   284                           ; 1 bytes @ 0x3
   285  0073                     	ds	1
   286  0074                     ??_ISR:	
   287                           
   288                           ; 0 bytes @ 0x4
   289  0074                     	ds	5
   290                           
   291                           	psect	cstackBANK0
   292  0020                     __pcstackBANK0:	
   293  0020                     ??_isdigit:	
   294  0020                     ??_instCTRL:	
   295                           ; 0 bytes @ 0x0
   296                           
   297  0020                     ??_dataCTRL:	
   298                           ; 0 bytes @ 0x0
   299                           
   300  0020                     ??_serialInit:	
   301                           ; 0 bytes @ 0x0
   302                           
   303  0020                     ??_serialSend:	
   304                           ; 0 bytes @ 0x0
   305                           
   306  0020                     ?___wmul:	
   307                           ; 0 bytes @ 0x0
   308                           
   309  0020                     ?___lwdiv:	
   310                           ; 2 bytes @ 0x0
   311                           
   312  0020                     _isdigit$309:	
   313                           ; 2 bytes @ 0x0
   314                           
   315  0020                     ___wmul@multiplier:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0020                     ___lwdiv@divisor:	
   319                           ; 2 bytes @ 0x0
   320                           
   321                           
   322                           ; 2 bytes @ 0x0
   323  0020                     	ds	1
   324  0021                     isdigit@c:	
   325                           
   326                           ; 1 bytes @ 0x1
   327  0021                     	ds	1
   328  0022                     instCTRL@CMD:	
   329  0022                     dataCTRL@DAT:	
   330                           ; 1 bytes @ 0x2
   331                           
   332  0022                     ___wmul@multiplicand:	
   333                           ; 1 bytes @ 0x2
   334                           
   335  0022                     ___lwdiv@dividend:	
   336                           ; 2 bytes @ 0x2
   337                           
   338                           
   339                           ; 2 bytes @ 0x2
   340  0022                     	ds	1
   341  0023                     ??_initLCD:	
   342  0023                     ?_printToLCD:	
   343                           ; 0 bytes @ 0x3
   344                           
   345  0023                     serialSend@dataOUT:	
   346                           ; 0 bytes @ 0x3
   347                           
   348  0023                     printToLCD@STR:	
   349                           ; 1 bytes @ 0x3
   350                           
   351                           
   352                           ; 2 bytes @ 0x3
   353  0023                     	ds	1
   354  0024                     ??___wmul:	
   355  0024                     ??___lwdiv:	
   356                           ; 0 bytes @ 0x4
   357                           
   358  0024                     ___wmul@product:	
   359                           ; 0 bytes @ 0x4
   360                           
   361                           
   362                           ; 2 bytes @ 0x4
   363  0024                     	ds	1
   364  0025                     ??_printToLCD:	
   365  0025                     ___lwdiv@quotient:	
   366                           ; 0 bytes @ 0x5
   367                           
   368                           
   369                           ; 2 bytes @ 0x5
   370  0025                     	ds	2
   371  0027                     ___lwdiv@counter:	
   372                           
   373                           ; 1 bytes @ 0x7
   374  0027                     	ds	1
   375  0028                     ?___lwmod:	
   376  0028                     ___lwmod@divisor:	
   377                           ; 2 bytes @ 0x8
   378                           
   379                           
   380                           ; 2 bytes @ 0x8
   381  0028                     	ds	2
   382  002A                     ___lwmod@dividend:	
   383                           
   384                           ; 2 bytes @ 0xA
   385  002A                     	ds	2
   386  002C                     ??___lwmod:	
   387                           
   388                           ; 0 bytes @ 0xC
   389  002C                     	ds	1
   390  002D                     ___lwmod@counter:	
   391                           
   392                           ; 1 bytes @ 0xD
   393  002D                     	ds	1
   394  002E                     ?_sprintf:	
   395  002E                     sprintf@f:	
   396                           ; 2 bytes @ 0xE
   397                           
   398                           
   399                           ; 1 bytes @ 0xE
   400  002E                     	ds	5
   401  0033                     ??_sprintf:	
   402                           
   403                           ; 0 bytes @ 0x13
   404  0033                     	ds	3
   405  0036                     sprintf@ap:	
   406                           
   407                           ; 1 bytes @ 0x16
   408  0036                     	ds	1
   409  0037                     sprintf@prec:	
   410                           
   411                           ; 1 bytes @ 0x17
   412  0037                     	ds	1
   413  0038                     sprintf@_val:	
   414                           
   415                           ; 4 bytes @ 0x18
   416  0038                     	ds	4
   417  003C                     sprintf@flag:	
   418                           
   419                           ; 1 bytes @ 0x1C
   420  003C                     	ds	1
   421  003D                     sprintf@width:	
   422                           
   423                           ; 2 bytes @ 0x1D
   424  003D                     	ds	2
   425  003F                     sprintf@sp:	
   426                           
   427                           ; 1 bytes @ 0x1F
   428  003F                     	ds	1
   429  0040                     sprintf@c:	
   430                           
   431                           ; 1 bytes @ 0x20
   432  0040                     	ds	1
   433  0041                     ??_printTime:	
   434                           
   435                           ; 0 bytes @ 0x21
   436  0041                     	ds	2
   437  0043                     ??_main:	
   438                           
   439                           ; 0 bytes @ 0x23
   440  0043                     	ds	3
   441                           
   442                           	psect	maintext
   443  02D2                     __pmaintext:	
   444 ;;
   445 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   446 ;;
   447 ;; *************** function _main *****************
   448 ;; Defined at:
   449 ;;		line 29 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\trainer-module\mplab\practice3\transmit\main.
      +c"
   450 ;; Parameters:    Size  Location     Type
   451 ;;		None
   452 ;; Auto vars:     Size  Location     Type
   453 ;;		None
   454 ;; Return value:  Size  Location     Type
   455 ;;		None               void
   456 ;; Registers used:
   457 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   458 ;; Tracked objects:
   459 ;;		On entry : 17F/0
   460 ;;		On exit  : 0/0
   461 ;;		Unchanged: 0/0
   462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   463 ;;      Params:         0       0       0       0       0
   464 ;;      Locals:         0       0       0       0       0
   465 ;;      Temps:          0       3       0       0       0
   466 ;;      Totals:         0       3       0       0       0
   467 ;;Total ram usage:        3 bytes
   468 ;; Hardware stack levels required when called:    5
   469 ;; This function calls:
   470 ;;		_initLCD
   471 ;;		_instCTRL
   472 ;;		_printTime
   473 ;;		_printToLCD
   474 ;;		_serialInit
   475 ;; This function is called by:
   476 ;;		Startup code after reset
   477 ;; This function uses a non-reentrant model
   478 ;;
   479                           
   480                           
   481                           ;psect for function _main
   482  02D2                     _main:	
   483                           
   484                           ;main.c: 31: TRISD = 0x00;
   485                           
   486                           ;incstack = 0
   487                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   488  02D2  1683               	bsf	3,5	;RP0=1, select bank1
   489  02D3  1303               	bcf	3,6	;RP1=0, select bank1
   490  02D4  0188               	clrf	8	;volatile
   491                           
   492                           ;main.c: 32: TRISC = 0xC0;
   493  02D5  30C0               	movlw	192
   494  02D6  0087               	movwf	7	;volatile
   495                           
   496                           ;main.c: 33: TRISB = 0xF7;
   497  02D7  30F7               	movlw	247
   498  02D8  0086               	movwf	6	;volatile
   499                           
   500                           ;main.c: 34: TRISA0 = 1;
   501  02D9  1405               	bsf	5,0	;volatile
   502                           
   503                           ;main.c: 36: OPTION_REG = 0x44;
   504  02DA  3044               	movlw	68
   505  02DB  0081               	movwf	1	;volatile
   506                           
   507                           ;main.c: 37: INTE = 1;
   508  02DC  160B               	bsf	11,4	;volatile
   509                           
   510                           ;main.c: 38: INTF = 0;
   511  02DD  108B               	bcf	11,1	;volatile
   512                           
   513                           ;main.c: 40: GIE = 1;
   514  02DE  178B               	bsf	11,7	;volatile
   515                           
   516                           ;main.c: 42: serialInit();
   517  02DF  120A  118A  24CD  120A  118A  	fcall	_serialInit
   518                           
   519                           ;main.c: 43: initLCD();
   520  02E4  120A  118A  2445  120A  118A  	fcall	_initLCD
   521                           
   522                           ;main.c: 44: _delay((unsigned long)((200)*(4000000/4000.0)));
   523  02E9  3002               	movlw	2
   524  02EA  1283               	bcf	3,5	;RP0=0, select bank0
   525  02EB  1303               	bcf	3,6	;RP1=0, select bank0
   526  02EC  00C5               	movwf	??_main+2
   527  02ED  3004               	movlw	4
   528  02EE  00C4               	movwf	??_main+1
   529  02EF  30BA               	movlw	186
   530  02F0  00C3               	movwf	??_main
   531  02F1                     u967:	
   532  02F1  0BC3               	decfsz	??_main,f
   533  02F2  2AF1               	goto	u967
   534  02F3  0BC4               	decfsz	??_main+1,f
   535  02F4  2AF1               	goto	u967
   536  02F5  0BC5               	decfsz	??_main+2,f
   537  02F6  2AF1               	goto	u967
   538  02F7  0000               	nop
   539                           
   540                           ;main.c: 45: instCTRL(0x80);
   541  02F8  3080               	movlw	128
   542  02F9  120A  118A  2493  120A  118A  	fcall	_instCTRL
   543                           
   544                           ;main.c: 46: printToLCD("TIME: ");
   545  02FE  3015               	movlw	low (STR_1-__stringbase)
   546  02FF  1283               	bcf	3,5	;RP0=0, select bank0
   547  0300  1303               	bcf	3,6	;RP1=0, select bank0
   548  0301  00A3               	movwf	printToLCD@STR
   549  0302  3080               	movlw	128
   550  0303                     L1:	
   551  0303  00A4               	movwf	printToLCD@STR+1
   552  0304  120A  118A  23F9  120A  118A  	fcall	_printToLCD
   553                           
   554                           ;main.c: 48: {
   555                           ;main.c: 49: printTime();
   556                           
   557                           ;main.c: 47: while(1)
   558  0309  120A  118A  21E3  120A  118A  	fcall	_printTime
   559                           
   560                           ;main.c: 50: instCTRL(0x86);
   561  030E  3086               	movlw	134
   562  030F  120A  118A  2493  120A  118A  	fcall	_instCTRL
   563                           
   564                           ;main.c: 51: printToLCD("KEY: ");
   565  0314  301C               	movlw	low (STR_2-__stringbase)
   566  0315  1283               	bcf	3,5	;RP0=0, select bank0
   567  0316  1303               	bcf	3,6	;RP1=0, select bank0
   568  0317  00A3               	movwf	printToLCD@STR
   569  0318  3080               	movlw	128
   570  0319  00A4               	movwf	printToLCD@STR+1
   571  031A  120A  118A  23F9  120A  118A  	fcall	_printToLCD
   572                           
   573                           ;main.c: 52: printToLCD(keyData);
   574  031F  1283               	bcf	3,5	;RP0=0, select bank0
   575  0320  1303               	bcf	3,6	;RP1=0, select bank0
   576  0321  084A               	movf	_keyData,w
   577  0322  00C3               	movwf	??_main
   578  0323  01C4               	clrf	??_main+1
   579  0324  0843               	movf	??_main,w
   580  0325  00A3               	movwf	printToLCD@STR
   581  0326  0844               	movf	??_main+1,w
   582  0327  2B03               	goto	L1
   583  0328                     __end_of_main:	
   584                           
   585                           	psect	text1
   586  04CD                     __ptext1:	
   587 ;; *************** function _serialInit *****************
   588 ;; Defined at:
   589 ;;		line 18 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\trainer-module\mplab\practice3\transmit\usart
      +_functions.h"
   590 ;; Parameters:    Size  Location     Type
   591 ;;		None
   592 ;; Auto vars:     Size  Location     Type
   593 ;;		None
   594 ;; Return value:  Size  Location     Type
   595 ;;		None               void
   596 ;; Registers used:
   597 ;;		wreg
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   603 ;;      Params:         0       0       0       0       0
   604 ;;      Locals:         0       0       0       0       0
   605 ;;      Temps:          0       0       0       0       0
   606 ;;      Totals:         0       0       0       0       0
   607 ;;Total ram usage:        0 bytes
   608 ;; Hardware stack levels used:    1
   609 ;; Hardware stack levels required when called:    2
   610 ;; This function calls:
   611 ;;		Nothing
   612 ;; This function is called by:
   613 ;;		_main
   614 ;; This function uses a non-reentrant model
   615 ;;
   616                           
   617                           
   618                           ;psect for function _serialInit
   619  04CD                     _serialInit:	
   620                           
   621                           ;usart_functions.h: 20: TXSTA = 0b00100100;
   622                           
   623                           ;incstack = 0
   624                           ; Regs used in _serialInit: [wreg]
   625  04CD  3024               	movlw	36
   626  04CE  1683               	bsf	3,5	;RP0=1, select bank1
   627  04CF  1303               	bcf	3,6	;RP1=0, select bank1
   628  04D0  0098               	movwf	24	;volatile
   629                           
   630                           ;usart_functions.h: 21: TXIF = 0;
   631  04D1  1283               	bcf	3,5	;RP0=0, select bank0
   632  04D2  1303               	bcf	3,6	;RP1=0, select bank0
   633  04D3  120C               	bcf	12,4	;volatile
   634                           
   635                           ;usart_functions.h: 23: RCSTA = 0b10010000;
   636  04D4  3090               	movlw	144
   637  04D5  0098               	movwf	24	;volatile
   638                           
   639                           ;usart_functions.h: 24: RCIF = 0;
   640  04D6  128C               	bcf	12,5	;volatile
   641                           
   642                           ;usart_functions.h: 26: SPBRG = 25;
   643  04D7  3019               	movlw	25
   644  04D8  1683               	bsf	3,5	;RP0=1, select bank1
   645  04D9  1303               	bcf	3,6	;RP1=0, select bank1
   646  04DA  0099               	movwf	25	;volatile
   647  04DB  0008               	return
   648  04DC                     __end_of_serialInit:	
   649                           
   650                           	psect	text2
   651  01E3                     __ptext2:	
   652 ;; *************** function _printTime *****************
   653 ;; Defined at:
   654 ;;		line 138 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\trainer-module\mplab\practice3\transmit\main
      +.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;		None
   657 ;; Auto vars:     Size  Location     Type
   658 ;;		None
   659 ;; Return value:  Size  Location     Type
   660 ;;		None               void
   661 ;; Registers used:
   662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   663 ;; Tracked objects:
   664 ;;		On entry : 0/0
   665 ;;		On exit  : 0/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   668 ;;      Params:         0       0       0       0       0
   669 ;;      Locals:         0       0       0       0       0
   670 ;;      Temps:          0       2       0       0       0
   671 ;;      Totals:         0       2       0       0       0
   672 ;;Total ram usage:        2 bytes
   673 ;; Hardware stack levels used:    1
   674 ;; Hardware stack levels required when called:    4
   675 ;; This function calls:
   676 ;;		_instCTRL
   677 ;;		_printToLCD
   678 ;;		_serialSend
   679 ;;		_sprintf
   680 ;; This function is called by:
   681 ;;		_main
   682 ;; This function uses a non-reentrant model
   683 ;;
   684                           
   685                           
   686                           ;psect for function _printTime
   687  01E3                     _printTime:	
   688                           
   689                           ;incstack = 0
   690                           ; Regs used in _printTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   691  01E3  2A4A               	goto	l1262
   692  01E4                     l1242:	
   693                           
   694                           ;main.c: 144: {
   695                           ;main.c: 146: instCTRL(0x86);
   696  01E4  3086               	movlw	134
   697  01E5  120A  118A  2493  120A  118A  	fcall	_instCTRL
   698                           
   699                           ;main.c: 147: sprintf(buffer, "%02d:%02d", hours, mins);
   700  01EA  300B               	movlw	(STR_3-__stringbase)& (0+255)
   701  01EB  1283               	bcf	3,5	;RP0=0, select bank0
   702  01EC  1303               	bcf	3,6	;RP1=0, select bank0
   703  01ED  00C1               	movwf	??_printTime
   704  01EE  0841               	movf	??_printTime,w
   705  01EF  00AE               	movwf	sprintf@f
   706  01F0  0847               	movf	_hours+1,w
   707  01F1  01B0               	clrf	?_sprintf+2
   708  01F2  07B0               	addwf	?_sprintf+2,f
   709  01F3  0846               	movf	_hours,w
   710  01F4  01AF               	clrf	?_sprintf+1
   711  01F5  07AF               	addwf	?_sprintf+1,f
   712  01F6  0849               	movf	_mins+1,w
   713  01F7  01B2               	clrf	?_sprintf+4
   714  01F8  07B2               	addwf	?_sprintf+4,f
   715  01F9  0848               	movf	_mins,w
   716  01FA  01B1               	clrf	?_sprintf+3
   717  01FB  07B1               	addwf	?_sprintf+3,f
   718  01FC  304B               	movlw	_buffer& (0+255)
   719  01FD  120A  118A  202C  120A  118A  	fcall	_sprintf
   720                           
   721                           ;main.c: 148: printToLCD(buffer);
   722  0202  304B               	movlw	_buffer& (0+255)
   723  0203  1283               	bcf	3,5	;RP0=0, select bank0
   724  0204  1303               	bcf	3,6	;RP1=0, select bank0
   725  0205  00A3               	movwf	printToLCD@STR
   726  0206  3000               	movlw	0
   727  0207  00A4               	movwf	printToLCD@STR+1
   728  0208  120A  118A  23F9  120A  118A  	fcall	_printToLCD
   729                           
   730                           ;main.c: 149: _delay((unsigned long)((50)*(4000000/4000.0)));
   731  020D  3041               	movlw	65
   732  020E  1283               	bcf	3,5	;RP0=0, select bank0
   733  020F  1303               	bcf	3,6	;RP1=0, select bank0
   734  0210  00C2               	movwf	??_printTime+1
   735  0211  30EE               	movlw	238
   736  0212  00C1               	movwf	??_printTime
   737  0213                     u977:	
   738  0213  0BC1               	decfsz	??_printTime,f
   739  0214  2A13               	goto	u977
   740  0215  0BC2               	decfsz	??_printTime+1,f
   741  0216  2A13               	goto	u977
   742  0217  0000               	nop
   743  0218  3001               	movlw	1
   744  0219  1283               	bcf	3,5	;RP0=0, select bank0
   745  021A  1303               	bcf	3,6	;RP1=0, select bank0
   746  021B  07C8               	addwf	_mins,f
   747  021C  1803               	skipnc
   748  021D  0AC9               	incf	_mins+1,f
   749  021E  3000               	movlw	0
   750  021F  07C9               	addwf	_mins+1,f
   751  0220                     l1252:	
   752  0220  1283               	bcf	3,5	;RP0=0, select bank0
   753  0221  1303               	bcf	3,6	;RP1=0, select bank0
   754  0222  0849               	movf	_mins+1,w
   755  0223  3A80               	xorlw	128
   756  0224  00FF               	movwf	127
   757  0225  3080               	movlw	128
   758  0226  027F               	subwf	127,w
   759  0227  1D03               	skipz
   760  0228  2A2B               	goto	u895
   761  0229  303C               	movlw	60
   762  022A  0248               	subwf	_mins,w
   763  022B                     u895:	
   764  022B  1C03               	skipc
   765  022C  29E4               	goto	l1242
   766                           
   767                           ;main.c: 150: }
   768                           ;main.c: 152: serialSend(hours);
   769  022D  1283               	bcf	3,5	;RP0=0, select bank0
   770  022E  1303               	bcf	3,6	;RP1=0, select bank0
   771  022F  0846               	movf	_hours,w
   772  0230  120A  118A  2469  120A  118A  	fcall	_serialSend
   773                           
   774                           ;main.c: 153: _delay((unsigned long)((50)*(4000000/4000.0)));
   775  0235  3041               	movlw	65
   776  0236  1283               	bcf	3,5	;RP0=0, select bank0
   777  0237  1303               	bcf	3,6	;RP1=0, select bank0
   778  0238  00C2               	movwf	??_printTime+1
   779  0239  30EE               	movlw	238
   780  023A  00C1               	movwf	??_printTime
   781  023B                     u987:	
   782  023B  0BC1               	decfsz	??_printTime,f
   783  023C  2A3B               	goto	u987
   784  023D  0BC2               	decfsz	??_printTime+1,f
   785  023E  2A3B               	goto	u987
   786  023F  0000               	nop
   787                           
   788                           ;main.c: 155: mins = 0;
   789  0240  1283               	bcf	3,5	;RP0=0, select bank0
   790  0241  1303               	bcf	3,6	;RP1=0, select bank0
   791  0242  01C8               	clrf	_mins
   792  0243  01C9               	clrf	_mins+1
   793  0244  3001               	movlw	1
   794  0245  07C6               	addwf	_hours,f
   795  0246  1803               	skipnc
   796  0247  0AC7               	incf	_hours+1,f
   797  0248  3000               	movlw	0
   798  0249  07C7               	addwf	_hours+1,f
   799  024A                     l1262:	
   800  024A  1283               	bcf	3,5	;RP0=0, select bank0
   801  024B  1303               	bcf	3,6	;RP1=0, select bank0
   802  024C  0847               	movf	_hours+1,w
   803  024D  3A80               	xorlw	128
   804  024E  00FF               	movwf	127
   805  024F  3080               	movlw	128
   806  0250  027F               	subwf	127,w
   807  0251  1D03               	skipz
   808  0252  2A55               	goto	u905
   809  0253  3018               	movlw	24
   810  0254  0246               	subwf	_hours,w
   811  0255                     u905:	
   812  0255  1C03               	skipc
   813  0256  2A20               	goto	l1252
   814                           
   815                           ;main.c: 156: }
   816                           ;main.c: 158: hours = 0;
   817  0257  1283               	bcf	3,5	;RP0=0, select bank0
   818  0258  1303               	bcf	3,6	;RP1=0, select bank0
   819  0259  01C6               	clrf	_hours
   820  025A  01C7               	clrf	_hours+1
   821  025B  0008               	return
   822  025C                     __end_of_printTime:	
   823                           
   824                           	psect	text3
   825  002C                     __ptext3:	
   826 ;; *************** function _sprintf *****************
   827 ;; Defined at:
   828 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
   829 ;; Parameters:    Size  Location     Type
   830 ;;  sp              1    wreg     PTR unsigned char 
   831 ;;		 -> buffer(10), 
   832 ;;  f               1   14[BANK0 ] PTR const unsigned char 
   833 ;;		 -> STR_3(10), 
   834 ;; Auto vars:     Size  Location     Type
   835 ;;  sp              1   31[BANK0 ] PTR unsigned char 
   836 ;;		 -> buffer(10), 
   837 ;;  _val            4   24[BANK0 ] struct .
   838 ;;  width           2   29[BANK0 ] int 
   839 ;;  c               1   32[BANK0 ] char 
   840 ;;  flag            1   28[BANK0 ] unsigned char 
   841 ;;  prec            1   23[BANK0 ] char 
   842 ;;  ap              1   22[BANK0 ] PTR void [1]
   843 ;;		 -> ?_sprintf(2), 
   844 ;; Return value:  Size  Location     Type
   845 ;;                  2   14[BANK0 ] int 
   846 ;; Registers used:
   847 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   848 ;; Tracked objects:
   849 ;;		On entry : 0/0
   850 ;;		On exit  : 0/0
   851 ;;		Unchanged: 0/0
   852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   853 ;;      Params:         0       5       0       0       0
   854 ;;      Locals:         0      11       0       0       0
   855 ;;      Temps:          0       3       0       0       0
   856 ;;      Totals:         0      19       0       0       0
   857 ;;Total ram usage:       19 bytes
   858 ;; Hardware stack levels used:    1
   859 ;; Hardware stack levels required when called:    3
   860 ;; This function calls:
   861 ;;		___lwdiv
   862 ;;		___lwmod
   863 ;;		___wmul
   864 ;;		_isdigit
   865 ;; This function is called by:
   866 ;;		_printTime
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870                           
   871                           ;psect for function _sprintf
   872  002C                     _sprintf:	
   873                           
   874                           ;incstack = 0
   875                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   876                           ;sprintf@sp stored from wreg
   877  002C  1283               	bcf	3,5	;RP0=0, select bank0
   878  002D  1303               	bcf	3,6	;RP1=0, select bank0
   879  002E  00BF               	movwf	sprintf@sp
   880                           
   881                           ;doprnt.c: 494: va_list ap;
   882                           ;doprnt.c: 499: signed char c;
   883                           ;doprnt.c: 501: int width;
   884                           ;doprnt.c: 506: signed char prec;
   885                           ;doprnt.c: 508: unsigned char flag;
   886                           ;doprnt.c: 527: union {
   887                           ;doprnt.c: 528: unsigned int _val;
   888                           ;doprnt.c: 529: struct {
   889                           ;doprnt.c: 530: const char * _cp;
   890                           ;doprnt.c: 531: unsigned _len;
   891                           ;doprnt.c: 532: } _str;
   892                           ;doprnt.c: 533: } _val;
   893                           ;doprnt.c: 542: *ap = __va_start();
   894  002F  302F               	movlw	(?_sprintf+1)& (0+255)
   895  0030  00B3               	movwf	??_sprintf
   896  0031  0833               	movf	??_sprintf,w
   897  0032  00B6               	movwf	sprintf@ap
   898  0033                     l1216:	
   899                           ;doprnt.c: 545: while(c = *f++) {
   900                           
   901  0033  3001               	movlw	1
   902  0034  1283               	bcf	3,5	;RP0=0, select bank0
   903  0035  1303               	bcf	3,6	;RP1=0, select bank0
   904  0036  07AE               	addwf	sprintf@f,f
   905  0037  30FF               	movlw	-1
   906  0038  072E               	addwf	sprintf@f,w
   907  0039  0084               	movwf	4
   908  003A  120A  118A  23A8  120A  118A  	fcall	stringdir
   909  003F  00B3               	movwf	??_sprintf
   910  0040  0833               	movf	??_sprintf,w
   911  0041  00C0               	movwf	sprintf@c
   912  0042  08C0               	movf	sprintf@c,f
   913  0043  1903               	btfsc	3,2
   914  0044  29DC               	goto	l1218
   915                           
   916                           ;doprnt.c: 547: if(c != '%')
   917  0045  0840               	movf	sprintf@c,w
   918  0046  3A25               	xorlw	37
   919  0047  1903               	skipnz
   920  0048  2855               	goto	l1120
   921                           
   922                           ;doprnt.c: 549: {
   923                           ;doprnt.c: 550: ((*sp++ = (c)));
   924  0049  0840               	movf	sprintf@c,w
   925  004A  00B3               	movwf	??_sprintf
   926  004B  083F               	movf	sprintf@sp,w
   927  004C  0084               	movwf	4
   928  004D  0833               	movf	??_sprintf,w
   929  004E  1383               	bcf	3,7	;select IRP bank0
   930  004F  0080               	movwf	0
   931  0050  3001               	movlw	1
   932  0051  00B3               	movwf	??_sprintf
   933  0052  0833               	movf	??_sprintf,w
   934  0053  07BF               	addwf	sprintf@sp,f
   935                           
   936                           ;doprnt.c: 551: continue;
   937  0054  2833               	goto	l1216
   938  0055                     l1120:	
   939                           
   940                           ;doprnt.c: 552: }
   941                           ;doprnt.c: 555: width = 0;
   942  0055  01BD               	clrf	sprintf@width
   943  0056  01BE               	clrf	sprintf@width+1
   944                           
   945                           ;doprnt.c: 557: flag = 0;
   946  0057  01BC               	clrf	sprintf@flag
   947                           
   948                           ;doprnt.c: 560: switch(*f) {
   949                           
   950                           ;doprnt.c: 559: for(;;) {
   951  0058  285E               	goto	l1126
   952  0059                     l147:	
   953                           ;doprnt.c: 588: case '0':
   954                           
   955                           
   956                           ;doprnt.c: 589: flag |= 0x04;
   957  0059  153C               	bsf	sprintf@flag,2
   958                           
   959                           ;doprnt.c: 590: f++;
   960  005A  3001               	movlw	1
   961  005B  00B3               	movwf	??_sprintf
   962  005C  0833               	movf	??_sprintf,w
   963  005D  07AE               	addwf	sprintf@f,f
   964  005E                     l1126:	
   965                           ;doprnt.c: 593: }
   966                           
   967                           ;doprnt.c: 591: continue;
   968                           
   969  005E  082E               	movf	sprintf@f,w
   970  005F  0084               	movwf	4
   971  0060  120A  118A  23A8  120A  118A  	fcall	stringdir
   972                           
   973                           ; Switch size 1, requested type "space"
   974                           ; Number of cases is 1, Range of values is 48 to 48
   975                           ; switch strategies available:
   976                           ; Name         Instructions Cycles
   977                           ; simple_byte            4     3 (average)
   978                           ; direct_byte           14    11 (fixed)
   979                           ; jumptable            263     9 (fixed)
   980                           ;	Chosen strategy is simple_byte
   981  0065  3A30               	xorlw	48	; case 48
   982  0066  1903               	skipnz
   983  0067  2859               	goto	l147
   984  0068  2869               	goto	l1128
   985  0069                     l1128:	
   986                           ;doprnt.c: 595: }
   987                           
   988                           ;doprnt.c: 594: break;
   989                           
   990                           
   991                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
   992  0069  082E               	movf	sprintf@f,w
   993  006A  0084               	movwf	4
   994  006B  120A  118A  23A8  120A  118A  	fcall	stringdir
   995  0070  120A  118A  24BD  120A  118A  	fcall	_isdigit
   996  0075  1C03               	btfss	3,0
   997  0076  28B9               	goto	l1142
   998                           
   999                           ;doprnt.c: 607: width = 0;
  1000  0077  1283               	bcf	3,5	;RP0=0, select bank0
  1001  0078  1303               	bcf	3,6	;RP1=0, select bank0
  1002  0079  01BD               	clrf	sprintf@width
  1003  007A  01BE               	clrf	sprintf@width+1
  1004  007B                     l1132:	
  1005                           ;doprnt.c: 608: do {
  1006                           
  1007                           
  1008                           ;doprnt.c: 609: width *= 10;
  1009  007B  300A               	movlw	10
  1010  007C  1283               	bcf	3,5	;RP0=0, select bank0
  1011  007D  1303               	bcf	3,6	;RP1=0, select bank0
  1012  007E  00A0               	movwf	___wmul@multiplier
  1013  007F  3000               	movlw	0
  1014  0080  00A1               	movwf	___wmul@multiplier+1
  1015  0081  083E               	movf	sprintf@width+1,w
  1016  0082  01A3               	clrf	___wmul@multiplicand+1
  1017  0083  07A3               	addwf	___wmul@multiplicand+1,f
  1018  0084  083D               	movf	sprintf@width,w
  1019  0085  01A2               	clrf	___wmul@multiplicand
  1020  0086  07A2               	addwf	___wmul@multiplicand,f
  1021  0087  120A  118A  2420  120A  118A  	fcall	___wmul
  1022  008C  1283               	bcf	3,5	;RP0=0, select bank0
  1023  008D  1303               	bcf	3,6	;RP1=0, select bank0
  1024  008E  0821               	movf	?___wmul+1,w
  1025  008F  01BE               	clrf	sprintf@width+1
  1026  0090  07BE               	addwf	sprintf@width+1,f
  1027  0091  0820               	movf	?___wmul,w
  1028  0092  01BD               	clrf	sprintf@width
  1029  0093  07BD               	addwf	sprintf@width,f
  1030                           
  1031                           ;doprnt.c: 610: width += *f++ - '0';
  1032  0094  082E               	movf	sprintf@f,w
  1033  0095  0084               	movwf	4
  1034  0096  120A  118A  23A8  120A  118A  	fcall	stringdir
  1035  009B  3ED0               	addlw	208
  1036  009C  00B3               	movwf	??_sprintf
  1037  009D  30FF               	movlw	255
  1038  009E  1803               	skipnc
  1039  009F  3000               	movlw	0
  1040  00A0  00B4               	movwf	??_sprintf+1
  1041  00A1  0833               	movf	??_sprintf,w
  1042  00A2  07BD               	addwf	sprintf@width,f
  1043  00A3  1803               	skipnc
  1044  00A4  0ABE               	incf	sprintf@width+1,f
  1045  00A5  0834               	movf	??_sprintf+1,w
  1046  00A6  07BE               	addwf	sprintf@width+1,f
  1047  00A7  3001               	movlw	1
  1048  00A8  00B3               	movwf	??_sprintf
  1049  00A9  0833               	movf	??_sprintf,w
  1050  00AA  07AE               	addwf	sprintf@f,f
  1051                           
  1052                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  1053  00AB  082E               	movf	sprintf@f,w
  1054  00AC  0084               	movwf	4
  1055  00AD  120A  118A  23A8  120A  118A  	fcall	stringdir
  1056  00B2  120A  118A  24BD  120A  118A  	fcall	_isdigit
  1057  00B7  1803               	btfsc	3,0
  1058  00B8  287B               	goto	l1132
  1059  00B9                     l1142:	
  1060                           ;doprnt.c: 831: }
  1061                           
  1062                           ;doprnt.c: 822: continue;
  1063                           
  1064                           ;doprnt.c: 811: default:
  1065                           
  1066                           ;doprnt.c: 707: case 'i':
  1067                           ;doprnt.c: 708: break;
  1068                           
  1069                           ;doprnt.c: 706: case 'd':
  1070                           
  1071                           ;doprnt.c: 647: goto alldone;
  1072                           
  1073                           ;doprnt.c: 646: case 0:
  1074                           
  1075                           ;doprnt.c: 617: }
  1076                           ;doprnt.c: 644: switch(c = *f++) {
  1077                           
  1078  00B9  3001               	movlw	1
  1079  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1080  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  1081  00BC  07AE               	addwf	sprintf@f,f
  1082  00BD  30FF               	movlw	-1
  1083  00BE  072E               	addwf	sprintf@f,w
  1084  00BF  0084               	movwf	4
  1085  00C0  120A  118A  23A8  120A  118A  	fcall	stringdir
  1086  00C5  00C0               	movwf	sprintf@c
  1087                           
  1088                           ; Switch size 1, requested type "space"
  1089                           ; Number of cases is 3, Range of values is 0 to 105
  1090                           ; switch strategies available:
  1091                           ; Name         Instructions Cycles
  1092                           ; simple_byte           10     6 (average)
  1093                           ; jumptable            260     6 (fixed)
  1094                           ;	Chosen strategy is simple_byte
  1095  00C6  3A00               	xorlw	0	; case 0
  1096  00C7  1903               	skipnz
  1097  00C8  29DC               	goto	l1218
  1098  00C9  3A64               	xorlw	100	; case 100
  1099  00CA  1903               	skipnz
  1100  00CB  28D0               	goto	l1144
  1101  00CC  3A0D               	xorlw	13	; case 105
  1102  00CD  1903               	skipnz
  1103  00CE  28D0               	goto	l1144
  1104  00CF  2833               	goto	l1216
  1105  00D0                     l1144:	
  1106                           
  1107                           ;doprnt.c: 1262: {
  1108                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1109  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  1110  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  1111  00D2  0836               	movf	sprintf@ap,w
  1112  00D3  0084               	movwf	4
  1113  00D4  1383               	bcf	3,7	;select IRP bank0
  1114  00D5  0800               	movf	0,w
  1115  00D6  00B8               	movwf	sprintf@_val
  1116  00D7  0A84               	incf	4,f
  1117  00D8  0800               	movf	0,w
  1118  00D9  00B9               	movwf	sprintf@_val+1
  1119  00DA  3002               	movlw	2
  1120  00DB  00B3               	movwf	??_sprintf
  1121  00DC  0833               	movf	??_sprintf,w
  1122  00DD  07B6               	addwf	sprintf@ap,f
  1123                           
  1124                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  1125  00DE  1FB9               	btfss	sprintf@_val+1,7
  1126  00DF  28E9               	goto	l1154
  1127                           
  1128                           ;doprnt.c: 1271: flag |= 0x03;
  1129  00E0  3003               	movlw	3
  1130  00E1  00B3               	movwf	??_sprintf
  1131  00E2  0833               	movf	??_sprintf,w
  1132  00E3  04BC               	iorwf	sprintf@flag,f
  1133                           
  1134                           ;doprnt.c: 1272: _val._val = -_val._val;
  1135  00E4  09B8               	comf	sprintf@_val,f
  1136  00E5  09B9               	comf	sprintf@_val+1,f
  1137  00E6  0AB8               	incf	sprintf@_val,f
  1138  00E7  1903               	skipnz
  1139  00E8  0AB9               	incf	sprintf@_val+1,f
  1140  00E9                     l1154:	
  1141                           
  1142                           ;doprnt.c: 1273: }
  1143                           ;doprnt.c: 1275: }
  1144                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1145  00E9  01C0               	clrf	sprintf@c
  1146  00EA  0AC0               	incf	sprintf@c,f
  1147  00EB  0840               	movf	sprintf@c,w
  1148  00EC  3A05               	xorlw	5
  1149  00ED  1903               	btfsc	3,2
  1150  00EE  2910               	goto	l1166
  1151  00EF                     l1158:	
  1152                           
  1153                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  1154  00EF  0840               	movf	sprintf@c,w
  1155  00F0  00B3               	movwf	??_sprintf
  1156  00F1  0733               	addwf	??_sprintf,w
  1157  00F2  3E01               	addlw	low (_dpowers-__stringbase)
  1158  00F3  0084               	movwf	4
  1159  00F4  120A  118A  23A8  120A  118A  	fcall	stringdir
  1160  00F9  00B4               	movwf	??_sprintf+1
  1161  00FA  120A  118A  23A8  120A  118A  	fcall	stringdir
  1162  00FF  00B5               	movwf	??_sprintf+2
  1163  0100  0835               	movf	??_sprintf+2,w
  1164  0101  0239               	subwf	sprintf@_val+1,w
  1165  0102  1D03               	skipz
  1166  0103  2906               	goto	u755
  1167  0104  0834               	movf	??_sprintf+1,w
  1168  0105  0238               	subwf	sprintf@_val,w
  1169  0106                     u755:	
  1170  0106  1C03               	btfss	3,0
  1171  0107  2910               	goto	l1166
  1172                           
  1173                           ;doprnt.c: 1316: break;
  1174  0108  3001               	movlw	1
  1175  0109  00B3               	movwf	??_sprintf
  1176  010A  0833               	movf	??_sprintf,w
  1177  010B  07C0               	addwf	sprintf@c,f
  1178  010C  0840               	movf	sprintf@c,w
  1179  010D  3A05               	xorlw	5
  1180  010E  1D03               	skipz
  1181  010F  28EF               	goto	l1158
  1182  0110                     l1166:	
  1183                           
  1184                           ;doprnt.c: 1354: if(width && flag & 0x03)
  1185  0110  083E               	movf	sprintf@width+1,w
  1186  0111  043D               	iorwf	sprintf@width,w
  1187  0112  1903               	skipnz
  1188  0113  291E               	goto	l165
  1189  0114  083C               	movf	sprintf@flag,w
  1190  0115  3903               	andlw	3
  1191  0116  1903               	btfsc	3,2
  1192  0117  291E               	goto	l165
  1193                           
  1194                           ;doprnt.c: 1355: width--;
  1195  0118  30FF               	movlw	255
  1196  0119  07BD               	addwf	sprintf@width,f
  1197  011A  1803               	skipnc
  1198  011B  0ABE               	incf	sprintf@width+1,f
  1199  011C  30FF               	movlw	255
  1200  011D  07BE               	addwf	sprintf@width+1,f
  1201  011E                     l165:	
  1202                           
  1203                           ;doprnt.c: 1390: if(width > c)
  1204  011E  0840               	movf	sprintf@c,w
  1205  011F  00B3               	movwf	??_sprintf
  1206  0120  01B4               	clrf	??_sprintf+1
  1207  0121  1BB3               	btfsc	??_sprintf,7
  1208  0122  03B4               	decf	??_sprintf+1,f
  1209  0123  0834               	movf	??_sprintf+1,w
  1210  0124  3A80               	xorlw	128
  1211  0125  00B5               	movwf	??_sprintf+2
  1212  0126  083E               	movf	sprintf@width+1,w
  1213  0127  3A80               	xorlw	128
  1214  0128  0235               	subwf	??_sprintf+2,w
  1215  0129  1D03               	skipz
  1216  012A  292D               	goto	u795
  1217  012B  083D               	movf	sprintf@width,w
  1218  012C  0233               	subwf	??_sprintf,w
  1219  012D                     u795:	
  1220  012D  1803               	skipnc
  1221  012E  293D               	goto	l1174
  1222                           
  1223                           ;doprnt.c: 1391: width -= c;
  1224  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1225  0130  1303               	bcf	3,6	;RP1=0, select bank0
  1226  0131  0840               	movf	sprintf@c,w
  1227  0132  00B3               	movwf	??_sprintf
  1228  0133  01B4               	clrf	??_sprintf+1
  1229  0134  1BB3               	btfsc	??_sprintf,7
  1230  0135  03B4               	decf	??_sprintf+1,f
  1231  0136  0833               	movf	??_sprintf,w
  1232  0137  02BD               	subwf	sprintf@width,f
  1233  0138  0834               	movf	??_sprintf+1,w
  1234  0139  1C03               	skipc
  1235  013A  03BE               	decf	sprintf@width+1,f
  1236  013B  02BE               	subwf	sprintf@width+1,f
  1237  013C  2941               	goto	l1176
  1238  013D                     l1174:	
  1239                           
  1240                           ;doprnt.c: 1392: else
  1241                           ;doprnt.c: 1393: width = 0;
  1242  013D  1283               	bcf	3,5	;RP0=0, select bank0
  1243  013E  1303               	bcf	3,6	;RP1=0, select bank0
  1244  013F  01BD               	clrf	sprintf@width
  1245  0140  01BE               	clrf	sprintf@width+1
  1246  0141                     l1176:	
  1247                           
  1248                           ;doprnt.c: 1396: if(flag & 0x04) {
  1249  0141  1D3C               	btfss	sprintf@flag,2
  1250  0142  2968               	goto	l1192
  1251                           
  1252                           ;doprnt.c: 1401: if(flag & 0x03)
  1253  0143  083C               	movf	sprintf@flag,w
  1254  0144  3903               	andlw	3
  1255  0145  1903               	btfsc	3,2
  1256  0146  2952               	goto	l1184
  1257                           
  1258                           ;doprnt.c: 1402: ((*sp++ = ('-')));
  1259  0147  302D               	movlw	45
  1260  0148  00B3               	movwf	??_sprintf
  1261  0149  083F               	movf	sprintf@sp,w
  1262  014A  0084               	movwf	4
  1263  014B  0833               	movf	??_sprintf,w
  1264  014C  1383               	bcf	3,7	;select IRP bank0
  1265  014D  0080               	movwf	0
  1266  014E  3001               	movlw	1
  1267  014F  00B3               	movwf	??_sprintf
  1268  0150  0833               	movf	??_sprintf,w
  1269  0151  07BF               	addwf	sprintf@sp,f
  1270  0152                     l1184:	
  1271                           
  1272                           ;doprnt.c: 1424: if(width)
  1273  0152  083E               	movf	sprintf@width+1,w
  1274  0153  043D               	iorwf	sprintf@width,w
  1275  0154  1903               	skipnz
  1276  0155  2990               	goto	l1206
  1277                           
  1278                           ;doprnt.c: 1426: ((*sp++ = ('0')));
  1279                           
  1280                           ;doprnt.c: 1425: do
  1281  0156  3030               	movlw	48
  1282  0157  00B3               	movwf	??_sprintf
  1283  0158  083F               	movf	sprintf@sp,w
  1284  0159  0084               	movwf	4
  1285  015A  0833               	movf	??_sprintf,w
  1286  015B  1383               	bcf	3,7	;select IRP bank0
  1287  015C  0080               	movwf	0
  1288  015D  3001               	movlw	1
  1289  015E  00B3               	movwf	??_sprintf
  1290  015F  0833               	movf	??_sprintf,w
  1291  0160  07BF               	addwf	sprintf@sp,f
  1292                           
  1293                           ;doprnt.c: 1427: while(--width);
  1294  0161  30FF               	movlw	255
  1295  0162  07BD               	addwf	sprintf@width,f
  1296  0163  1803               	skipnc
  1297  0164  0ABE               	incf	sprintf@width+1,f
  1298  0165  30FF               	movlw	255
  1299  0166  07BE               	addwf	sprintf@width+1,f
  1300  0167  2952               	goto	l1184
  1301  0168                     l1192:	
  1302                           ;doprnt.c: 1429: } else
  1303                           
  1304                           
  1305                           ;doprnt.c: 1431: {
  1306                           ;doprnt.c: 1433: if(width
  1307                           ;doprnt.c: 1437: )
  1308  0168  083E               	movf	sprintf@width+1,w
  1309  0169  043D               	iorwf	sprintf@width,w
  1310  016A  1903               	skipnz
  1311  016B  2981               	goto	l1200
  1312  016C                     l1194:	
  1313                           ;doprnt.c: 1438: do
  1314                           
  1315                           
  1316                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  1317  016C  3020               	movlw	32
  1318  016D  00B3               	movwf	??_sprintf
  1319  016E  083F               	movf	sprintf@sp,w
  1320  016F  0084               	movwf	4
  1321  0170  0833               	movf	??_sprintf,w
  1322  0171  1383               	bcf	3,7	;select IRP bank0
  1323  0172  0080               	movwf	0
  1324  0173  3001               	movlw	1
  1325  0174  00B3               	movwf	??_sprintf
  1326  0175  0833               	movf	??_sprintf,w
  1327  0176  07BF               	addwf	sprintf@sp,f
  1328                           
  1329                           ;doprnt.c: 1440: while(--width);
  1330  0177  30FF               	movlw	255
  1331  0178  07BD               	addwf	sprintf@width,f
  1332  0179  1803               	skipnc
  1333  017A  0ABE               	incf	sprintf@width+1,f
  1334  017B  30FF               	movlw	255
  1335  017C  07BE               	addwf	sprintf@width+1,f
  1336  017D  083E               	movf	sprintf@width+1,w
  1337  017E  043D               	iorwf	sprintf@width,w
  1338  017F  1D03               	skipz
  1339  0180  296C               	goto	l1194
  1340  0181                     l1200:	
  1341                           
  1342                           ;doprnt.c: 1447: if(flag & 0x03)
  1343  0181  083C               	movf	sprintf@flag,w
  1344  0182  3903               	andlw	3
  1345  0183  1903               	btfsc	3,2
  1346  0184  2990               	goto	l1206
  1347                           
  1348                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  1349  0185  302D               	movlw	45
  1350  0186  00B3               	movwf	??_sprintf
  1351  0187  083F               	movf	sprintf@sp,w
  1352  0188  0084               	movwf	4
  1353  0189  0833               	movf	??_sprintf,w
  1354  018A  1383               	bcf	3,7	;select IRP bank0
  1355  018B  0080               	movwf	0
  1356  018C  3001               	movlw	1
  1357  018D  00B3               	movwf	??_sprintf
  1358  018E  0833               	movf	??_sprintf,w
  1359  018F  07BF               	addwf	sprintf@sp,f
  1360  0190                     l1206:	
  1361                           
  1362                           ;doprnt.c: 1478: }
  1363                           ;doprnt.c: 1481: prec = c;
  1364  0190  0840               	movf	sprintf@c,w
  1365  0191  00B3               	movwf	??_sprintf
  1366  0192  0833               	movf	??_sprintf,w
  1367  0193  00B7               	movwf	sprintf@prec
  1368  0194                     l1214:	
  1369                           ;doprnt.c: 1483: while(prec--) {
  1370                           
  1371  0194  30FF               	movlw	-1
  1372  0195  00B3               	movwf	??_sprintf
  1373  0196  0833               	movf	??_sprintf,w
  1374  0197  07B7               	addwf	sprintf@prec,f
  1375  0198  0837               	movf	sprintf@prec,w
  1376  0199  3AFF               	xorlw	-1
  1377  019A  1903               	btfsc	3,2
  1378  019B  2833               	goto	l1216
  1379                           
  1380                           ;doprnt.c: 1487: {
  1381                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  1382  019C  300A               	movlw	10
  1383  019D  00A8               	movwf	___lwmod@divisor
  1384  019E  3000               	movlw	0
  1385  019F  00A9               	movwf	___lwmod@divisor+1
  1386  01A0  0837               	movf	sprintf@prec,w
  1387  01A1  00B3               	movwf	??_sprintf
  1388  01A2  0733               	addwf	??_sprintf,w
  1389  01A3  3E01               	addlw	low (_dpowers-__stringbase)
  1390  01A4  0084               	movwf	4
  1391  01A5  120A  118A  23A8  120A  118A  	fcall	stringdir
  1392  01AA  00A0               	movwf	___lwdiv@divisor
  1393  01AB  120A  118A  23A8  120A  118A  	fcall	stringdir
  1394  01B0  00A1               	movwf	___lwdiv@divisor+1
  1395  01B1  0839               	movf	sprintf@_val+1,w
  1396  01B2  01A3               	clrf	___lwdiv@dividend+1
  1397  01B3  07A3               	addwf	___lwdiv@dividend+1,f
  1398  01B4  0838               	movf	sprintf@_val,w
  1399  01B5  01A2               	clrf	___lwdiv@dividend
  1400  01B6  07A2               	addwf	___lwdiv@dividend,f
  1401  01B7  120A  118A  2328  120A  118A  	fcall	___lwdiv
  1402  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  1403  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  1404  01BE  0821               	movf	?___lwdiv+1,w
  1405  01BF  01AB               	clrf	___lwmod@dividend+1
  1406  01C0  07AB               	addwf	___lwmod@dividend+1,f
  1407  01C1  0820               	movf	?___lwdiv,w
  1408  01C2  01AA               	clrf	___lwmod@dividend
  1409  01C3  07AA               	addwf	___lwmod@dividend,f
  1410  01C4  120A  118A  2368  120A  118A  	fcall	___lwmod
  1411  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1412  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1413  01CB  0828               	movf	?___lwmod,w
  1414  01CC  3E30               	addlw	48
  1415  01CD  00B4               	movwf	??_sprintf+1
  1416  01CE  0834               	movf	??_sprintf+1,w
  1417  01CF  00C0               	movwf	sprintf@c
  1418                           
  1419                           ;doprnt.c: 1532: }
  1420                           ;doprnt.c: 1533: ((*sp++ = (c)));
  1421  01D0  0840               	movf	sprintf@c,w
  1422  01D1  00B3               	movwf	??_sprintf
  1423  01D2  083F               	movf	sprintf@sp,w
  1424  01D3  0084               	movwf	4
  1425  01D4  0833               	movf	??_sprintf,w
  1426  01D5  1383               	bcf	3,7	;select IRP bank0
  1427  01D6  0080               	movwf	0
  1428  01D7  3001               	movlw	1
  1429  01D8  00B3               	movwf	??_sprintf
  1430  01D9  0833               	movf	??_sprintf,w
  1431  01DA  07BF               	addwf	sprintf@sp,f
  1432  01DB  2994               	goto	l1214
  1433  01DC                     l1218:	
  1434                           ;doprnt.c: 1534: }
  1435                           ;doprnt.c: 1542: }
  1436                           ;doprnt.c: 1544: alldone:
  1437                           
  1438                           
  1439                           ;doprnt.c: 1547: *sp = 0;
  1440  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  1441  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  1442  01DE  083F               	movf	sprintf@sp,w
  1443  01DF  0084               	movwf	4
  1444  01E0  1383               	bcf	3,7	;select IRP bank0
  1445  01E1  0180               	clrf	0
  1446  01E2  0008               	return
  1447  01E3                     __end_of_sprintf:	
  1448                           ;doprnt.c: 1549: return 0;
  1449                           ;	Return value of _sprintf is never used
  1450                           
  1451                           
  1452                           	psect	text4
  1453  04BD                     __ptext4:	
  1454 ;; *************** function _isdigit *****************
  1455 ;; Defined at:
  1456 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  1457 ;; Parameters:    Size  Location     Type
  1458 ;;  c               1    wreg     unsigned char 
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;  c               1    1[BANK0 ] unsigned char 
  1461 ;; Return value:  Size  Location     Type
  1462 ;;		None               void
  1463 ;; Registers used:
  1464 ;;		wreg, status,2, status,0
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1470 ;;      Params:         0       0       0       0       0
  1471 ;;      Locals:         0       2       0       0       0
  1472 ;;      Temps:          0       0       0       0       0
  1473 ;;      Totals:         0       2       0       0       0
  1474 ;;Total ram usage:        2 bytes
  1475 ;; Hardware stack levels used:    1
  1476 ;; Hardware stack levels required when called:    2
  1477 ;; This function calls:
  1478 ;;		Nothing
  1479 ;; This function is called by:
  1480 ;;		_sprintf
  1481 ;; This function uses a non-reentrant model
  1482 ;;
  1483                           
  1484                           
  1485                           ;psect for function _isdigit
  1486  04BD                     _isdigit:	
  1487                           
  1488                           ;incstack = 0
  1489                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1490                           ;isdigit@c stored from wreg
  1491  04BD  1283               	bcf	3,5	;RP0=0, select bank0
  1492  04BE  1303               	bcf	3,6	;RP1=0, select bank0
  1493  04BF  00A1               	movwf	isdigit@c
  1494  04C0  01A0               	clrf	_isdigit$309
  1495  04C1  303A               	movlw	58
  1496  04C2  0221               	subwf	isdigit@c,w
  1497  04C3  1803               	skipnc
  1498  04C4  2CCB               	goto	l1026
  1499  04C5  3030               	movlw	48
  1500  04C6  0221               	subwf	isdigit@c,w
  1501  04C7  1C03               	skipc
  1502  04C8  2CCB               	goto	l1026
  1503  04C9  01A0               	clrf	_isdigit$309
  1504  04CA  0AA0               	incf	_isdigit$309,f
  1505  04CB                     l1026:	
  1506  04CB  0C20               	rrf	_isdigit$309,w
  1507  04CC  0008               	return
  1508  04CD                     __end_of_isdigit:	
  1509                           
  1510                           	psect	text5
  1511  0420                     __ptext5:	
  1512 ;; *************** function ___wmul *****************
  1513 ;; Defined at:
  1514 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1517 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;  product         2    4[BANK0 ] unsigned int 
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  2    0[BANK0 ] unsigned int 
  1522 ;; Registers used:
  1523 ;;		wreg, status,2, status,0
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1529 ;;      Params:         0       4       0       0       0
  1530 ;;      Locals:         0       2       0       0       0
  1531 ;;      Temps:          0       0       0       0       0
  1532 ;;      Totals:         0       6       0       0       0
  1533 ;;Total ram usage:        6 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; Hardware stack levels required when called:    2
  1536 ;; This function calls:
  1537 ;;		Nothing
  1538 ;; This function is called by:
  1539 ;;		_sprintf
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           
  1544                           ;psect for function ___wmul
  1545  0420                     ___wmul:	
  1546                           
  1547                           ;incstack = 0
  1548                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1549  0420  1283               	bcf	3,5	;RP0=0, select bank0
  1550  0421  1303               	bcf	3,6	;RP1=0, select bank0
  1551  0422  01A4               	clrf	___wmul@product
  1552  0423  01A5               	clrf	___wmul@product+1
  1553  0424                     l1032:	
  1554  0424  1C20               	btfss	___wmul@multiplier,0
  1555  0425  2C2C               	goto	l266
  1556  0426  0822               	movf	___wmul@multiplicand,w
  1557  0427  07A4               	addwf	___wmul@product,f
  1558  0428  1803               	skipnc
  1559  0429  0AA5               	incf	___wmul@product+1,f
  1560  042A  0823               	movf	___wmul@multiplicand+1,w
  1561  042B  07A5               	addwf	___wmul@product+1,f
  1562  042C                     l266:	
  1563  042C  3001               	movlw	1
  1564  042D                     u525:	
  1565  042D  1003               	clrc
  1566  042E  0DA2               	rlf	___wmul@multiplicand,f
  1567  042F  0DA3               	rlf	___wmul@multiplicand+1,f
  1568  0430  3EFF               	addlw	-1
  1569  0431  1D03               	skipz
  1570  0432  2C2D               	goto	u525
  1571  0433  3001               	movlw	1
  1572  0434                     u535:	
  1573  0434  1003               	clrc
  1574  0435  0CA1               	rrf	___wmul@multiplier+1,f
  1575  0436  0CA0               	rrf	___wmul@multiplier,f
  1576  0437  3EFF               	addlw	-1
  1577  0438  1D03               	skipz
  1578  0439  2C34               	goto	u535
  1579  043A  0821               	movf	___wmul@multiplier+1,w
  1580  043B  0420               	iorwf	___wmul@multiplier,w
  1581  043C  1D03               	skipz
  1582  043D  2C24               	goto	l1032
  1583  043E  0825               	movf	___wmul@product+1,w
  1584  043F  01A1               	clrf	?___wmul+1
  1585  0440  07A1               	addwf	?___wmul+1,f
  1586  0441  0824               	movf	___wmul@product,w
  1587  0442  01A0               	clrf	?___wmul
  1588  0443  07A0               	addwf	?___wmul,f
  1589  0444  0008               	return
  1590  0445                     __end_of___wmul:	
  1591                           
  1592                           	psect	text6
  1593  0368                     __ptext6:	
  1594 ;; *************** function ___lwmod *****************
  1595 ;; Defined at:
  1596 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;  divisor         2    8[BANK0 ] unsigned int 
  1599 ;;  dividend        2   10[BANK0 ] unsigned int 
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;  counter         1   13[BANK0 ] unsigned char 
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  2    8[BANK0 ] unsigned int 
  1604 ;; Registers used:
  1605 ;;		wreg, status,2, status,0
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1611 ;;      Params:         0       4       0       0       0
  1612 ;;      Locals:         0       1       0       0       0
  1613 ;;      Temps:          0       1       0       0       0
  1614 ;;      Totals:         0       6       0       0       0
  1615 ;;Total ram usage:        6 bytes
  1616 ;; Hardware stack levels used:    1
  1617 ;; Hardware stack levels required when called:    2
  1618 ;; This function calls:
  1619 ;;		Nothing
  1620 ;; This function is called by:
  1621 ;;		_sprintf
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           
  1626                           ;psect for function ___lwmod
  1627  0368                     ___lwmod:	
  1628                           
  1629                           ;incstack = 0
  1630                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1631  0368  1283               	bcf	3,5	;RP0=0, select bank0
  1632  0369  1303               	bcf	3,6	;RP1=0, select bank0
  1633  036A  0829               	movf	___lwmod@divisor+1,w
  1634  036B  0428               	iorwf	___lwmod@divisor,w
  1635  036C  1903               	skipnz
  1636  036D  2B97               	goto	l1086
  1637  036E  01AD               	clrf	___lwmod@counter
  1638  036F  0AAD               	incf	___lwmod@counter,f
  1639  0370                     l1076:	
  1640  0370  1BA9               	btfsc	___lwmod@divisor+1,7
  1641  0371  2B7E               	goto	l1078
  1642  0372  3001               	movlw	1
  1643  0373                     u635:	
  1644  0373  1003               	clrc
  1645  0374  0DA8               	rlf	___lwmod@divisor,f
  1646  0375  0DA9               	rlf	___lwmod@divisor+1,f
  1647  0376  3EFF               	addlw	-1
  1648  0377  1D03               	skipz
  1649  0378  2B73               	goto	u635
  1650  0379  3001               	movlw	1
  1651  037A  00AC               	movwf	??___lwmod
  1652  037B  082C               	movf	??___lwmod,w
  1653  037C  07AD               	addwf	___lwmod@counter,f
  1654  037D  2B70               	goto	l1076
  1655  037E                     l1078:	
  1656  037E  0829               	movf	___lwmod@divisor+1,w
  1657  037F  022B               	subwf	___lwmod@dividend+1,w
  1658  0380  1D03               	skipz
  1659  0381  2B84               	goto	u655
  1660  0382  0828               	movf	___lwmod@divisor,w
  1661  0383  022A               	subwf	___lwmod@dividend,w
  1662  0384                     u655:	
  1663  0384  1C03               	skipc
  1664  0385  2B8C               	goto	l1082
  1665  0386  0828               	movf	___lwmod@divisor,w
  1666  0387  02AA               	subwf	___lwmod@dividend,f
  1667  0388  0829               	movf	___lwmod@divisor+1,w
  1668  0389  1C03               	skipc
  1669  038A  03AB               	decf	___lwmod@dividend+1,f
  1670  038B  02AB               	subwf	___lwmod@dividend+1,f
  1671  038C                     l1082:	
  1672  038C  3001               	movlw	1
  1673  038D                     u665:	
  1674  038D  1003               	clrc
  1675  038E  0CA9               	rrf	___lwmod@divisor+1,f
  1676  038F  0CA8               	rrf	___lwmod@divisor,f
  1677  0390  3EFF               	addlw	-1
  1678  0391  1D03               	skipz
  1679  0392  2B8D               	goto	u665
  1680  0393  3001               	movlw	1
  1681  0394  02AD               	subwf	___lwmod@counter,f
  1682  0395  1D03               	btfss	3,2
  1683  0396  2B7E               	goto	l1078
  1684  0397                     l1086:	
  1685  0397  082B               	movf	___lwmod@dividend+1,w
  1686  0398  01A9               	clrf	?___lwmod+1
  1687  0399  07A9               	addwf	?___lwmod+1,f
  1688  039A  082A               	movf	___lwmod@dividend,w
  1689  039B  01A8               	clrf	?___lwmod
  1690  039C  07A8               	addwf	?___lwmod,f
  1691  039D  0008               	return
  1692  039E                     __end_of___lwmod:	
  1693                           
  1694                           	psect	text7
  1695  0328                     __ptext7:	
  1696 ;; *************** function ___lwdiv *****************
  1697 ;; Defined at:
  1698 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;  divisor         2    0[BANK0 ] unsigned int 
  1701 ;;  dividend        2    2[BANK0 ] unsigned int 
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;  quotient        2    5[BANK0 ] unsigned int 
  1704 ;;  counter         1    7[BANK0 ] unsigned char 
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  2    0[BANK0 ] unsigned int 
  1707 ;; Registers used:
  1708 ;;		wreg, status,2, status,0
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1714 ;;      Params:         0       4       0       0       0
  1715 ;;      Locals:         0       3       0       0       0
  1716 ;;      Temps:          0       1       0       0       0
  1717 ;;      Totals:         0       8       0       0       0
  1718 ;;Total ram usage:        8 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    2
  1721 ;; This function calls:
  1722 ;;		Nothing
  1723 ;; This function is called by:
  1724 ;;		_sprintf
  1725 ;; This function uses a non-reentrant model
  1726 ;;
  1727                           
  1728                           
  1729                           ;psect for function ___lwdiv
  1730  0328                     ___lwdiv:	
  1731                           
  1732                           ;incstack = 0
  1733                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1734  0328  1283               	bcf	3,5	;RP0=0, select bank0
  1735  0329  1303               	bcf	3,6	;RP1=0, select bank0
  1736  032A  01A5               	clrf	___lwdiv@quotient
  1737  032B  01A6               	clrf	___lwdiv@quotient+1
  1738  032C  0821               	movf	___lwdiv@divisor+1,w
  1739  032D  0420               	iorwf	___lwdiv@divisor,w
  1740  032E  1903               	skipnz
  1741  032F  2B61               	goto	l1064
  1742  0330  01A7               	clrf	___lwdiv@counter
  1743  0331  0AA7               	incf	___lwdiv@counter,f
  1744  0332                     l1052:	
  1745  0332  1BA1               	btfsc	___lwdiv@divisor+1,7
  1746  0333  2B40               	goto	l1054
  1747  0334  3001               	movlw	1
  1748  0335                     u565:	
  1749  0335  1003               	clrc
  1750  0336  0DA0               	rlf	___lwdiv@divisor,f
  1751  0337  0DA1               	rlf	___lwdiv@divisor+1,f
  1752  0338  3EFF               	addlw	-1
  1753  0339  1D03               	skipz
  1754  033A  2B35               	goto	u565
  1755  033B  3001               	movlw	1
  1756  033C  00A4               	movwf	??___lwdiv
  1757  033D  0824               	movf	??___lwdiv,w
  1758  033E  07A7               	addwf	___lwdiv@counter,f
  1759  033F  2B32               	goto	l1052
  1760  0340                     l1054:	
  1761  0340  3001               	movlw	1
  1762  0341                     u585:	
  1763  0341  1003               	clrc
  1764  0342  0DA5               	rlf	___lwdiv@quotient,f
  1765  0343  0DA6               	rlf	___lwdiv@quotient+1,f
  1766  0344  3EFF               	addlw	-1
  1767  0345  1D03               	skipz
  1768  0346  2B41               	goto	u585
  1769  0347  0821               	movf	___lwdiv@divisor+1,w
  1770  0348  0223               	subwf	___lwdiv@dividend+1,w
  1771  0349  1D03               	skipz
  1772  034A  2B4D               	goto	u595
  1773  034B  0820               	movf	___lwdiv@divisor,w
  1774  034C  0222               	subwf	___lwdiv@dividend,w
  1775  034D                     u595:	
  1776  034D  1C03               	skipc
  1777  034E  2B56               	goto	l1060
  1778  034F  0820               	movf	___lwdiv@divisor,w
  1779  0350  02A2               	subwf	___lwdiv@dividend,f
  1780  0351  0821               	movf	___lwdiv@divisor+1,w
  1781  0352  1C03               	skipc
  1782  0353  03A3               	decf	___lwdiv@dividend+1,f
  1783  0354  02A3               	subwf	___lwdiv@dividend+1,f
  1784  0355  1425               	bsf	___lwdiv@quotient,0
  1785  0356                     l1060:	
  1786  0356  3001               	movlw	1
  1787  0357                     u605:	
  1788  0357  1003               	clrc
  1789  0358  0CA1               	rrf	___lwdiv@divisor+1,f
  1790  0359  0CA0               	rrf	___lwdiv@divisor,f
  1791  035A  3EFF               	addlw	-1
  1792  035B  1D03               	skipz
  1793  035C  2B57               	goto	u605
  1794  035D  3001               	movlw	1
  1795  035E  02A7               	subwf	___lwdiv@counter,f
  1796  035F  1D03               	btfss	3,2
  1797  0360  2B40               	goto	l1054
  1798  0361                     l1064:	
  1799  0361  0826               	movf	___lwdiv@quotient+1,w
  1800  0362  01A1               	clrf	?___lwdiv+1
  1801  0363  07A1               	addwf	?___lwdiv+1,f
  1802  0364  0825               	movf	___lwdiv@quotient,w
  1803  0365  01A0               	clrf	?___lwdiv
  1804  0366  07A0               	addwf	?___lwdiv,f
  1805  0367  0008               	return
  1806  0368                     __end_of___lwdiv:	
  1807                           
  1808                           	psect	text8
  1809  0469                     __ptext8:	
  1810 ;; *************** function _serialSend *****************
  1811 ;; Defined at:
  1812 ;;		line 29 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\trainer-module\mplab\practice3\transmit\usart
      +_functions.h"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  dataOUT         1    wreg     unsigned char 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  dataOUT         1    3[BANK0 ] unsigned char 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;		None               void
  1819 ;; Registers used:
  1820 ;;		wreg
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1826 ;;      Params:         0       0       0       0       0
  1827 ;;      Locals:         0       1       0       0       0
  1828 ;;      Temps:          0       3       0       0       0
  1829 ;;      Totals:         0       4       0       0       0
  1830 ;;Total ram usage:        4 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; Hardware stack levels required when called:    2
  1833 ;; This function calls:
  1834 ;;		Nothing
  1835 ;; This function is called by:
  1836 ;;		_printTime
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           
  1841                           ;psect for function _serialSend
  1842  0469                     _serialSend:	
  1843                           
  1844                           ;incstack = 0
  1845                           ; Regs used in _serialSend: [wreg]
  1846                           ;serialSend@dataOUT stored from wreg
  1847  0469  1283               	bcf	3,5	;RP0=0, select bank0
  1848  046A  1303               	bcf	3,6	;RP1=0, select bank0
  1849  046B  00A3               	movwf	serialSend@dataOUT
  1850  046C                     l69:	
  1851                           ;usart_functions.h: 32: ;
  1852                           
  1853                           ;usart_functions.h: 31: while (!TXIF)
  1854                           
  1855  046C  1E0C               	btfss	12,4	;volatile
  1856  046D  2C6C               	goto	l69
  1857                           
  1858                           ;usart_functions.h: 33: TXREG = dataOUT;
  1859  046E  0823               	movf	serialSend@dataOUT,w
  1860  046F  0099               	movwf	25	;volatile
  1861                           
  1862                           ;usart_functions.h: 34: _delay((unsigned long)((250)*(4000000/4000.0)));
  1863  0470  3002               	movlw	2
  1864  0471  00A2               	movwf	??_serialSend+2
  1865  0472  3045               	movlw	69
  1866  0473  00A1               	movwf	??_serialSend+1
  1867  0474  30A9               	movlw	169
  1868  0475  00A0               	movwf	??_serialSend
  1869  0476                     u997:	
  1870  0476  0BA0               	decfsz	??_serialSend,f
  1871  0477  2C76               	goto	u997
  1872  0478  0BA1               	decfsz	??_serialSend+1,f
  1873  0479  2C76               	goto	u997
  1874  047A  0BA2               	decfsz	??_serialSend+2,f
  1875  047B  2C76               	goto	u997
  1876  047C  2C7D               	nop2
  1877  047D  0008               	return
  1878  047E                     __end_of_serialSend:	
  1879                           
  1880                           	psect	text9
  1881  03F9                     __ptext9:	
  1882 ;; *************** function _printToLCD *****************
  1883 ;; Defined at:
  1884 ;;		line 49 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\trainer-module\mplab\practice3\transmit\lcd_f
      +unctions.h"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;  STR             2    3[BANK0 ] PTR unsigned char 
  1887 ;;		 -> buffer(10), RAM(512), STR_2(6), STR_1(7), 
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;		None
  1890 ;; Return value:  Size  Location     Type
  1891 ;;		None               void
  1892 ;; Registers used:
  1893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1899 ;;      Params:         0       2       0       0       0
  1900 ;;      Locals:         0       0       0       0       0
  1901 ;;      Temps:          0       0       0       0       0
  1902 ;;      Totals:         0       2       0       0       0
  1903 ;;Total ram usage:        2 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:    3
  1906 ;; This function calls:
  1907 ;;		_dataCTRL
  1908 ;; This function is called by:
  1909 ;;		_main
  1910 ;;		_printTime
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           
  1915                           ;psect for function _printToLCD
  1916  03F9                     _printToLCD:	
  1917  03F9                     l1106:	
  1918                           ;lcd_functions.h: 51: while(*STR != '\0')
  1919                           
  1920                           ;incstack = 0
  1921                           ; Regs used in _printToLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1922                           
  1923  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  1924  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  1925  03FB  0824               	movf	printToLCD@STR+1,w
  1926  03FC  00FF               	movwf	127
  1927  03FD  0823               	movf	printToLCD@STR,w
  1928  03FE  0084               	movwf	4
  1929  03FF  120A  118A  239E  120A  118A  	fcall	stringtab
  1930  0404  3800               	iorlw	0
  1931  0405  1903               	btfsc	3,2
  1932  0406  0008               	return
  1933                           
  1934                           ;lcd_functions.h: 52: {
  1935                           ;lcd_functions.h: 53: dataCTRL(*STR);
  1936  0407  1283               	bcf	3,5	;RP0=0, select bank0
  1937  0408  1303               	bcf	3,6	;RP1=0, select bank0
  1938  0409  0824               	movf	printToLCD@STR+1,w
  1939  040A  00FF               	movwf	127
  1940  040B  0823               	movf	printToLCD@STR,w
  1941  040C  0084               	movwf	4
  1942  040D  120A  118A  239E  120A  118A  	fcall	stringtab
  1943  0412  120A  118A  247E  120A  118A  	fcall	_dataCTRL
  1944                           
  1945                           ;lcd_functions.h: 54: STR++;
  1946  0417  3001               	movlw	1
  1947  0418  1283               	bcf	3,5	;RP0=0, select bank0
  1948  0419  1303               	bcf	3,6	;RP1=0, select bank0
  1949  041A  07A3               	addwf	printToLCD@STR,f
  1950  041B  1803               	skipnc
  1951  041C  0AA4               	incf	printToLCD@STR+1,f
  1952  041D  3000               	movlw	0
  1953  041E  07A4               	addwf	printToLCD@STR+1,f
  1954  041F  2BF9               	goto	l1106
  1955  0420                     __end_of_printToLCD:	
  1956                           
  1957                           	psect	text10
  1958  047E                     __ptext10:	
  1959 ;; *************** function _dataCTRL *****************
  1960 ;; Defined at:
  1961 ;;		line 29 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\trainer-module\mplab\practice3\transmit\lcd_f
      +unctions.h"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;  DAT             1    wreg     unsigned char 
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;  DAT             1    2[BANK0 ] unsigned char 
  1966 ;; Return value:  Size  Location     Type
  1967 ;;		None               void
  1968 ;; Registers used:
  1969 ;;		wreg
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1975 ;;      Params:         0       0       0       0       0
  1976 ;;      Locals:         0       1       0       0       0
  1977 ;;      Temps:          0       2       0       0       0
  1978 ;;      Totals:         0       3       0       0       0
  1979 ;;Total ram usage:        3 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    2
  1982 ;; This function calls:
  1983 ;;		Nothing
  1984 ;; This function is called by:
  1985 ;;		_printToLCD
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           
  1990                           ;psect for function _dataCTRL
  1991  047E                     _dataCTRL:	
  1992                           
  1993                           ;incstack = 0
  1994                           ; Regs used in _dataCTRL: [wreg]
  1995                           ;dataCTRL@DAT stored from wreg
  1996  047E  1283               	bcf	3,5	;RP0=0, select bank0
  1997  047F  1303               	bcf	3,6	;RP1=0, select bank0
  1998  0480  00A2               	movwf	dataCTRL@DAT
  1999                           
  2000                           ;lcd_functions.h: 31: PORTD = DAT;
  2001  0481  0822               	movf	dataCTRL@DAT,w
  2002  0482  0088               	movwf	8	;volatile
  2003                           
  2004                           ;lcd_functions.h: 32: RC0 = 1;
  2005  0483  1407               	bsf	7,0	;volatile
  2006                           
  2007                           ;lcd_functions.h: 33: RC1 = 0;
  2008  0484  1087               	bcf	7,1	;volatile
  2009                           
  2010                           ;lcd_functions.h: 34: RC2 = 1;
  2011  0485  1507               	bsf	7,2	;volatile
  2012                           
  2013                           ;lcd_functions.h: 35: _delay((unsigned long)((50)*(4000000/4000.0)));
  2014  0486  3041               	movlw	65
  2015  0487  00A1               	movwf	??_dataCTRL+1
  2016  0488  30EE               	movlw	238
  2017  0489  00A0               	movwf	??_dataCTRL
  2018  048A                     u1007:	
  2019  048A  0BA0               	decfsz	??_dataCTRL,f
  2020  048B  2C8A               	goto	u1007
  2021  048C  0BA1               	decfsz	??_dataCTRL+1,f
  2022  048D  2C8A               	goto	u1007
  2023  048E  0000               	nop
  2024                           
  2025                           ;lcd_functions.h: 36: RC2 = 0;
  2026  048F  1283               	bcf	3,5	;RP0=0, select bank0
  2027  0490  1303               	bcf	3,6	;RP1=0, select bank0
  2028  0491  1107               	bcf	7,2	;volatile
  2029  0492  0008               	return
  2030  0493                     __end_of_dataCTRL:	
  2031                           
  2032                           	psect	text11
  2033  0445                     __ptext11:	
  2034 ;; *************** function _initLCD *****************
  2035 ;; Defined at:
  2036 ;;		line 39 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\trainer-module\mplab\practice3\transmit\lcd_f
      +unctions.h"
  2037 ;; Parameters:    Size  Location     Type
  2038 ;;		None
  2039 ;; Auto vars:     Size  Location     Type
  2040 ;;		None
  2041 ;; Return value:  Size  Location     Type
  2042 ;;		None               void
  2043 ;; Registers used:
  2044 ;;		wreg, status,2, status,0, pclath, cstack
  2045 ;; Tracked objects:
  2046 ;;		On entry : 0/0
  2047 ;;		On exit  : 0/0
  2048 ;;		Unchanged: 0/0
  2049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2050 ;;      Params:         0       0       0       0       0
  2051 ;;      Locals:         0       0       0       0       0
  2052 ;;      Temps:          0       1       0       0       0
  2053 ;;      Totals:         0       1       0       0       0
  2054 ;;Total ram usage:        1 bytes
  2055 ;; Hardware stack levels used:    1
  2056 ;; Hardware stack levels required when called:    3
  2057 ;; This function calls:
  2058 ;;		_instCTRL
  2059 ;; This function is called by:
  2060 ;;		_main
  2061 ;; This function uses a non-reentrant model
  2062 ;;
  2063                           
  2064                           
  2065                           ;psect for function _initLCD
  2066  0445                     _initLCD:	
  2067                           
  2068                           ;lcd_functions.h: 41: instCTRL(0x38);
  2069                           
  2070                           ;incstack = 0
  2071                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  2072  0445  3038               	movlw	56
  2073  0446  120A  118A  2493  120A  118A  	fcall	_instCTRL
  2074                           
  2075                           ;lcd_functions.h: 42: _delay((unsigned long)((50)*(4000000/4000000.0)));
  2076  044B  3010               	movlw	16
  2077  044C  1283               	bcf	3,5	;RP0=0, select bank0
  2078  044D  1303               	bcf	3,6	;RP1=0, select bank0
  2079  044E  00A3               	movwf	??_initLCD
  2080  044F                     u1017:	
  2081  044F  0BA3               	decfsz	??_initLCD,f
  2082  0450  2C4F               	goto	u1017
  2083  0451  0000               	nop
  2084                           
  2085                           ;lcd_functions.h: 43: instCTRL(0x0C);
  2086  0452  300C               	movlw	12
  2087  0453  120A  118A  2493  120A  118A  	fcall	_instCTRL
  2088                           
  2089                           ;lcd_functions.h: 44: instCTRL(0x01);
  2090  0458  3001               	movlw	1
  2091  0459  120A  118A  2493  120A  118A  	fcall	_instCTRL
  2092                           
  2093                           ;lcd_functions.h: 45: instCTRL(0x06);
  2094  045E  3006               	movlw	6
  2095  045F  120A  118A  2493  120A  118A  	fcall	_instCTRL
  2096                           
  2097                           ;lcd_functions.h: 46: instCTRL(0x0F);
  2098  0464  300F               	movlw	15
  2099  0465  120A  118A  2493   	fcall	_instCTRL
  2100  0468  0008               	return
  2101  0469                     __end_of_initLCD:	
  2102                           
  2103                           	psect	text12
  2104  0493                     __ptext12:	
  2105 ;; *************** function _instCTRL *****************
  2106 ;; Defined at:
  2107 ;;		line 19 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\trainer-module\mplab\practice3\transmit\lcd_f
      +unctions.h"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;  CMD             1    wreg     unsigned char 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;  CMD             1    2[BANK0 ] unsigned char 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;		None               void
  2114 ;; Registers used:
  2115 ;;		wreg
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2121 ;;      Params:         0       0       0       0       0
  2122 ;;      Locals:         0       1       0       0       0
  2123 ;;      Temps:          0       2       0       0       0
  2124 ;;      Totals:         0       3       0       0       0
  2125 ;;Total ram usage:        3 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    2
  2128 ;; This function calls:
  2129 ;;		Nothing
  2130 ;; This function is called by:
  2131 ;;		_initLCD
  2132 ;;		_main
  2133 ;;		_printTime
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           
  2138                           ;psect for function _instCTRL
  2139  0493                     _instCTRL:	
  2140                           
  2141                           ;incstack = 0
  2142                           ; Regs used in _instCTRL: [wreg]
  2143                           ;instCTRL@CMD stored from wreg
  2144  0493  1283               	bcf	3,5	;RP0=0, select bank0
  2145  0494  1303               	bcf	3,6	;RP1=0, select bank0
  2146  0495  00A2               	movwf	instCTRL@CMD
  2147                           
  2148                           ;lcd_functions.h: 21: PORTD = CMD;
  2149  0496  0822               	movf	instCTRL@CMD,w
  2150  0497  0088               	movwf	8	;volatile
  2151                           
  2152                           ;lcd_functions.h: 22: RC0 = 0;
  2153  0498  1007               	bcf	7,0	;volatile
  2154                           
  2155                           ;lcd_functions.h: 23: RC1 = 0;
  2156  0499  1087               	bcf	7,1	;volatile
  2157                           
  2158                           ;lcd_functions.h: 24: RC2 = 1;
  2159  049A  1507               	bsf	7,2	;volatile
  2160                           
  2161                           ;lcd_functions.h: 25: _delay((unsigned long)((50)*(4000000/4000.0)));
  2162  049B  3041               	movlw	65
  2163  049C  00A1               	movwf	??_instCTRL+1
  2164  049D  30EE               	movlw	238
  2165  049E  00A0               	movwf	??_instCTRL
  2166  049F                     u1027:	
  2167  049F  0BA0               	decfsz	??_instCTRL,f
  2168  04A0  2C9F               	goto	u1027
  2169  04A1  0BA1               	decfsz	??_instCTRL+1,f
  2170  04A2  2C9F               	goto	u1027
  2171  04A3  0000               	nop
  2172                           
  2173                           ;lcd_functions.h: 26: RC2 = 0;
  2174  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  2175  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  2176  04A6  1107               	bcf	7,2	;volatile
  2177  04A7  0008               	return
  2178  04A8                     __end_of_instCTRL:	
  2179                           
  2180                           	psect	text13
  2181  03CF                     __ptext13:	
  2182 ;; *************** function _ISR *****************
  2183 ;; Defined at:
  2184 ;;		line 122 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\trainer-module\mplab\practice3\transmit\main
      +.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;		None
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;		None
  2189 ;; Return value:  Size  Location     Type
  2190 ;;		None               void
  2191 ;; Registers used:
  2192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2198 ;;      Params:         0       0       0       0       0
  2199 ;;      Locals:         0       0       0       0       0
  2200 ;;      Temps:          5       0       0       0       0
  2201 ;;      Totals:         5       0       0       0       0
  2202 ;;Total ram usage:        5 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; Hardware stack levels required when called:    1
  2205 ;; This function calls:
  2206 ;;		_keypadData
  2207 ;;		i1_serialSend
  2208 ;; This function is called by:
  2209 ;;		Interrupt level 1
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           
  2214                           ;psect for function _ISR
  2215  03CF                     _ISR:	
  2216                           
  2217                           ;main.c: 124: GIE = 0;
  2218  03CF  138B               	bcf	11,7	;volatile
  2219                           
  2220                           ;main.c: 125: if (INTF)
  2221  03D0  1C8B               	btfss	11,1	;volatile
  2222  03D1  2BED               	goto	i1l1364
  2223                           
  2224                           ;main.c: 126: {
  2225                           ;main.c: 127: keyData = keypadData();
  2226  03D2  120A  118A  225C  120A  118A  	fcall	_keypadData
  2227  03D7  00F4               	movwf	??_ISR
  2228  03D8  0874               	movf	??_ISR,w
  2229  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  2230  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  2231  03DB  00CA               	movwf	_keyData
  2232                           
  2233                           ;main.c: 128: if (keyData != lastKeyData)
  2234  03DC  084A               	movf	_keyData,w
  2235  03DD  0679               	xorwf	_lastKeyData,w
  2236  03DE  1903               	skipnz
  2237  03DF  2BEC               	goto	i1l1362
  2238                           
  2239                           ;main.c: 129: {
  2240                           ;main.c: 130: serialSend(keyData);
  2241  03E0  084A               	movf	_keyData,w
  2242  03E1  120A  118A  24A8  120A  118A  	fcall	i1_serialSend
  2243                           
  2244                           ;main.c: 131: lastKeyData = keyData;
  2245  03E6  1283               	bcf	3,5	;RP0=0, select bank0
  2246  03E7  1303               	bcf	3,6	;RP1=0, select bank0
  2247  03E8  084A               	movf	_keyData,w
  2248  03E9  00F4               	movwf	??_ISR
  2249  03EA  0874               	movf	??_ISR,w
  2250  03EB  00F9               	movwf	_lastKeyData
  2251  03EC                     i1l1362:	
  2252                           
  2253                           ;main.c: 132: }
  2254                           ;main.c: 133: INTF = 0;
  2255  03EC  108B               	bcf	11,1	;volatile
  2256  03ED                     i1l1364:	
  2257                           
  2258                           ;main.c: 134: }
  2259                           ;main.c: 135: GIE = 1;
  2260  03ED  178B               	bsf	11,7	;volatile
  2261  03EE  0878               	movf	??_ISR+4,w
  2262  03EF  00FF               	movwf	127
  2263  03F0  0877               	movf	??_ISR+3,w
  2264  03F1  008A               	movwf	10
  2265  03F2  0876               	movf	??_ISR+2,w
  2266  03F3  0084               	movwf	4
  2267  03F4  0E75               	swapf	(??_ISR+1)^(0+-128),w
  2268  03F5  0083               	movwf	3
  2269  03F6  0EFE               	swapf	126,f
  2270  03F7  0E7E               	swapf	126,w
  2271  03F8  0009               	retfie
  2272  03F9                     __end_of_ISR:	
  2273                           
  2274                           	psect	intentry
  2275  0004                     __pintentry:	
  2276                           ;incstack = 0
  2277                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2278                           
  2279  0004                     interrupt_function:	
  2280  007E                     saved_w	set	btemp
  2281  0004  00FE               	movwf	btemp
  2282  0005  0E03               	swapf	3,w
  2283  0006  00F5               	movwf	??_ISR+1
  2284  0007  0804               	movf	4,w
  2285  0008  00F6               	movwf	??_ISR+2
  2286  0009  080A               	movf	10,w
  2287  000A  00F7               	movwf	??_ISR+3
  2288  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2289  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2290  000D  087F               	movf	btemp+1,w
  2291  000E  00F8               	movwf	??_ISR+4
  2292  000F  120A  118A  2BCF   	ljmp	_ISR
  2293                           
  2294                           	psect	text14
  2295  04A8                     __ptext14:	
  2296 ;; *************** function i1_serialSend *****************
  2297 ;; Defined at:
  2298 ;;		line 29 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\trainer-module\mplab\practice3\transmit\usart
      +_functions.h"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;  dataOUT         1    wreg     unsigned char 
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;  dataOUT         1    3[COMMON] unsigned char 
  2303 ;; Return value:  Size  Location     Type
  2304 ;;		None               void
  2305 ;; Registers used:
  2306 ;;		wreg
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2312 ;;      Params:         0       0       0       0       0
  2313 ;;      Locals:         1       0       0       0       0
  2314 ;;      Temps:          3       0       0       0       0
  2315 ;;      Totals:         4       0       0       0       0
  2316 ;;Total ram usage:        4 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; This function calls:
  2319 ;;		Nothing
  2320 ;; This function is called by:
  2321 ;;		_ISR
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           
  2326                           ;psect for function i1_serialSend
  2327  04A8                     i1_serialSend:	
  2328                           
  2329                           ;incstack = 0
  2330                           ; Regs used in i1_serialSend: [wreg]
  2331                           ;i1serialSend@dataOUT stored from wreg
  2332  04A8  00F3               	movwf	i1serialSend@dataOUT
  2333  04A9                     i1l69:	
  2334                           ;usart_functions.h: 32: ;
  2335                           
  2336                           ;usart_functions.h: 31: while (!TXIF)
  2337                           
  2338  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  2339  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  2340  04AB  1E0C               	btfss	12,4	;volatile
  2341  04AC  2CA9               	goto	i1l69
  2342                           
  2343                           ;usart_functions.h: 33: TXREG = dataOUT;
  2344  04AD  0873               	movf	i1serialSend@dataOUT,w
  2345  04AE  0099               	movwf	25	;volatile
  2346                           
  2347                           ;usart_functions.h: 34: _delay((unsigned long)((250)*(4000000/4000.0)));
  2348  04AF  3002               	movlw	2
  2349  04B0  00F2               	movwf	??i1_serialSend+2
  2350  04B1  3045               	movlw	69
  2351  04B2  00F1               	movwf	??i1_serialSend+1
  2352  04B3  30A9               	movlw	169
  2353  04B4  00F0               	movwf	??i1_serialSend
  2354  04B5                     u103_27:	
  2355  04B5  0BF0               	decfsz	??i1_serialSend,f
  2356  04B6  2CB5               	goto	u103_27
  2357  04B7  0BF1               	decfsz	??i1_serialSend+1,f
  2358  04B8  2CB5               	goto	u103_27
  2359  04B9  0BF2               	decfsz	??i1_serialSend+2,f
  2360  04BA  2CB5               	goto	u103_27
  2361  04BB  2CBC               	nop2
  2362  04BC  0008               	return
  2363  04BD                     __end_ofi1_serialSend:	
  2364                           
  2365                           	psect	text15
  2366  025C                     __ptext15:	
  2367 ;; *************** function _keypadData *****************
  2368 ;; Defined at:
  2369 ;;		line 56 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\trainer-module\mplab\practice3\transmit\main.
      +c"
  2370 ;; Parameters:    Size  Location     Type
  2371 ;;		None
  2372 ;; Auto vars:     Size  Location     Type
  2373 ;;  buffer          1    3[COMMON] unsigned char 
  2374 ;;  dataIN          1    2[COMMON] unsigned char 
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  1    wreg      unsigned char 
  2377 ;; Registers used:
  2378 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2384 ;;      Params:         0       0       0       0       0
  2385 ;;      Locals:         2       0       0       0       0
  2386 ;;      Temps:          2       0       0       0       0
  2387 ;;      Totals:         4       0       0       0       0
  2388 ;;Total ram usage:        4 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; This function calls:
  2391 ;;		Nothing
  2392 ;; This function is called by:
  2393 ;;		_ISR
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           
  2398                           ;psect for function _keypadData
  2399  025C                     _keypadData:	
  2400                           
  2401                           ;main.c: 58: unsigned char buffer = 0x00;
  2402                           
  2403                           ;incstack = 0
  2404                           ; Regs used in _keypadData: [wreg-fsr0h+status,2+status,0]
  2405  025C  01F3               	clrf	keypadData@buffer
  2406                           
  2407                           ;main.c: 59: unsigned char dataIN = 0x00;
  2408  025D  01F2               	clrf	keypadData@dataIN
  2409                           
  2410                           ;main.c: 61: if(RB1)
  2411  025E  1283               	bcf	3,5	;RP0=0, select bank0
  2412  025F  1303               	bcf	3,6	;RP1=0, select bank0
  2413  0260  1C86               	btfss	6,1	;volatile
  2414  0261  2AD0               	goto	i1l1310
  2415                           
  2416                           ;main.c: 62: {
  2417                           ;main.c: 63: _delay((unsigned long)((10)*(4000000/4000.0)));
  2418  0262  300D               	movlw	13
  2419  0263  00F1               	movwf	??_keypadData+1
  2420  0264  30FB               	movlw	251
  2421  0265  00F0               	movwf	??_keypadData
  2422  0266                     u104_27:	
  2423  0266  0BF0               	decfsz	??_keypadData,f
  2424  0267  2A66               	goto	u104_27
  2425  0268  0BF1               	decfsz	??_keypadData+1,f
  2426  0269  2A66               	goto	u104_27
  2427  026A  2A6B               	nop2
  2428                           
  2429                           ;main.c: 64: dataIN = (PORTB & 0xF0) >> 4;
  2430  026B  1283               	bcf	3,5	;RP0=0, select bank0
  2431  026C  1303               	bcf	3,6	;RP1=0, select bank0
  2432  026D  0806               	movf	6,w	;volatile
  2433  026E  00F0               	movwf	??_keypadData
  2434  026F  3004               	movlw	4
  2435  0270                     u92_25:	
  2436  0270  1003               	clrc
  2437  0271  0CF0               	rrf	??_keypadData,f
  2438  0272  3EFF               	addlw	-1
  2439  0273  1D03               	skipz
  2440  0274  2A70               	goto	u92_25
  2441  0275  0870               	movf	??_keypadData,w
  2442  0276  390F               	andlw	15
  2443  0277  00F1               	movwf	??_keypadData+1
  2444  0278  0871               	movf	??_keypadData+1,w
  2445  0279  00F2               	movwf	keypadData@dataIN
  2446                           
  2447                           ;main.c: 65: switch (dataIN)
  2448  027A  2A9E               	goto	i1l1308
  2449  027B                     i1l1274:	
  2450                           ;main.c: 66: {
  2451                           ;main.c: 67: case 0x00:
  2452                           
  2453                           
  2454                           ;main.c: 68: buffer = '7';
  2455  027B  3037               	movlw	55
  2456  027C  2A9A               	goto	L17
  2457  027D                     i1l1276:	
  2458                           ;main.c: 70: case 0x01:
  2459                           
  2460                           ;main.c: 69: break;
  2461                           
  2462                           
  2463                           ;main.c: 71: buffer = '8';
  2464  027D  3038               	movlw	56
  2465  027E  2A9A               	goto	L17
  2466  027F                     i1l1278:	
  2467                           ;main.c: 73: case 0x02:
  2468                           
  2469                           ;main.c: 72: break;
  2470                           
  2471                           
  2472                           ;main.c: 74: buffer = '9';
  2473  027F  3039               	movlw	57
  2474  0280  2A9A               	goto	L17
  2475  0281                     i1l1280:	
  2476                           ;main.c: 76: case 0x03:
  2477                           
  2478                           ;main.c: 75: break;
  2479                           
  2480                           
  2481                           ;main.c: 77: buffer = '/';
  2482  0281  302F               	movlw	47
  2483  0282  2A9A               	goto	L17
  2484  0283                     i1l1282:	
  2485                           ;main.c: 79: case 0x04:
  2486                           
  2487                           ;main.c: 78: break;
  2488                           
  2489                           
  2490                           ;main.c: 80: buffer = '4';
  2491  0283  3034               	movlw	52
  2492  0284  2A9A               	goto	L17
  2493  0285                     i1l1284:	
  2494                           ;main.c: 82: case 0x05:
  2495                           
  2496                           ;main.c: 81: break;
  2497                           
  2498                           
  2499                           ;main.c: 83: buffer = '5';
  2500  0285  3035               	movlw	53
  2501  0286  2A9A               	goto	L17
  2502  0287                     i1l1286:	
  2503                           ;main.c: 85: case 0x06:
  2504                           
  2505                           ;main.c: 84: break;
  2506                           
  2507                           
  2508                           ;main.c: 86: buffer = '6';
  2509  0287  3036               	movlw	54
  2510  0288  2A9A               	goto	L17
  2511  0289                     i1l1288:	
  2512                           ;main.c: 88: case 0x07:
  2513                           
  2514                           ;main.c: 87: break;
  2515                           
  2516                           
  2517                           ;main.c: 89: buffer = '*';
  2518  0289  302A               	movlw	42
  2519  028A  2A9A               	goto	L17
  2520  028B                     i1l1290:	
  2521                           ;main.c: 91: case 0x08:
  2522                           
  2523                           ;main.c: 90: break;
  2524                           
  2525                           
  2526                           ;main.c: 92: buffer = '1';
  2527  028B  3031               	movlw	49
  2528  028C  2A9A               	goto	L17
  2529  028D                     i1l1292:	
  2530                           ;main.c: 94: case 0x09:
  2531                           
  2532                           ;main.c: 93: break;
  2533                           
  2534                           
  2535                           ;main.c: 95: buffer = '2';
  2536  028D  3032               	movlw	50
  2537  028E  2A9A               	goto	L17
  2538  028F                     i1l1294:	
  2539                           ;main.c: 97: case 0x0A:
  2540                           
  2541                           ;main.c: 96: break;
  2542                           
  2543                           
  2544                           ;main.c: 98: buffer = '3';
  2545  028F  3033               	movlw	51
  2546  0290  2A9A               	goto	L17
  2547  0291                     i1l1296:	
  2548                           ;main.c: 100: case 0x0B:
  2549                           
  2550                           ;main.c: 99: break;
  2551                           
  2552                           
  2553                           ;main.c: 101: buffer = '-';
  2554  0291  302D               	movlw	45
  2555  0292  2A9A               	goto	L17
  2556  0293                     i1l1298:	
  2557                           ;main.c: 103: case 0x0C:
  2558                           
  2559                           ;main.c: 102: break;
  2560                           
  2561                           
  2562                           ;main.c: 104: buffer = 'O';
  2563  0293  304F               	movlw	79
  2564  0294  2A9A               	goto	L17
  2565  0295                     i1l1300:	
  2566                           ;main.c: 106: case 0x0D:
  2567                           
  2568                           ;main.c: 105: break;
  2569                           
  2570                           
  2571                           ;main.c: 107: buffer = '0';
  2572  0295  3030               	movlw	48
  2573  0296  2A9A               	goto	L17
  2574  0297                     i1l1302:	
  2575                           ;main.c: 109: case 0x0E:
  2576                           
  2577                           ;main.c: 108: break;
  2578                           
  2579                           
  2580                           ;main.c: 110: buffer = '=';
  2581  0297  303D               	movlw	61
  2582  0298  2A9A               	goto	L17
  2583  0299                     i1l1304:	
  2584                           ;main.c: 112: case 0x0F:
  2585                           
  2586                           ;main.c: 111: break;
  2587                           
  2588                           
  2589                           ;main.c: 113: buffer = '+';
  2590  0299  302B               	movlw	43
  2591  029A                     L17:	
  2592  029A  00F0               	movwf	??_keypadData
  2593  029B  0870               	movf	??_keypadData,w
  2594  029C  00F3               	movwf	keypadData@buffer
  2595                           
  2596                           ;main.c: 117: }
  2597                           
  2598                           ;main.c: 116: break;
  2599                           
  2600                           ;main.c: 115: default:
  2601                           
  2602                           ;main.c: 114: break;
  2603  029D  2AD0               	goto	i1l1310
  2604  029E                     i1l1308:	
  2605  029E  0872               	movf	keypadData@dataIN,w
  2606                           
  2607                           ; Switch size 1, requested type "space"
  2608                           ; Number of cases is 16, Range of values is 0 to 15
  2609                           ; switch strategies available:
  2610                           ; Name         Instructions Cycles
  2611                           ; simple_byte           49    25 (average)
  2612                           ; direct_byte           56     8 (fixed)
  2613                           ; jumptable            260     6 (fixed)
  2614                           ;	Chosen strategy is simple_byte
  2615  029F  3A00               	xorlw	0	; case 0
  2616  02A0  1903               	skipnz
  2617  02A1  2A7B               	goto	i1l1274
  2618  02A2  3A01               	xorlw	1	; case 1
  2619  02A3  1903               	skipnz
  2620  02A4  2A7D               	goto	i1l1276
  2621  02A5  3A03               	xorlw	3	; case 2
  2622  02A6  1903               	skipnz
  2623  02A7  2A7F               	goto	i1l1278
  2624  02A8  3A01               	xorlw	1	; case 3
  2625  02A9  1903               	skipnz
  2626  02AA  2A81               	goto	i1l1280
  2627  02AB  3A07               	xorlw	7	; case 4
  2628  02AC  1903               	skipnz
  2629  02AD  2A83               	goto	i1l1282
  2630  02AE  3A01               	xorlw	1	; case 5
  2631  02AF  1903               	skipnz
  2632  02B0  2A85               	goto	i1l1284
  2633  02B1  3A03               	xorlw	3	; case 6
  2634  02B2  1903               	skipnz
  2635  02B3  2A87               	goto	i1l1286
  2636  02B4  3A01               	xorlw	1	; case 7
  2637  02B5  1903               	skipnz
  2638  02B6  2A89               	goto	i1l1288
  2639  02B7  3A0F               	xorlw	15	; case 8
  2640  02B8  1903               	skipnz
  2641  02B9  2A8B               	goto	i1l1290
  2642  02BA  3A01               	xorlw	1	; case 9
  2643  02BB  1903               	skipnz
  2644  02BC  2A8D               	goto	i1l1292
  2645  02BD  3A03               	xorlw	3	; case 10
  2646  02BE  1903               	skipnz
  2647  02BF  2A8F               	goto	i1l1294
  2648  02C0  3A01               	xorlw	1	; case 11
  2649  02C1  1903               	skipnz
  2650  02C2  2A91               	goto	i1l1296
  2651  02C3  3A07               	xorlw	7	; case 12
  2652  02C4  1903               	skipnz
  2653  02C5  2A93               	goto	i1l1298
  2654  02C6  3A01               	xorlw	1	; case 13
  2655  02C7  1903               	skipnz
  2656  02C8  2A95               	goto	i1l1300
  2657  02C9  3A03               	xorlw	3	; case 14
  2658  02CA  1903               	skipnz
  2659  02CB  2A97               	goto	i1l1302
  2660  02CC  3A01               	xorlw	1	; case 15
  2661  02CD  1903               	skipnz
  2662  02CE  2A99               	goto	i1l1304
  2663  02CF  2AD0               	goto	i1l1310
  2664  02D0                     i1l1310:	
  2665                           
  2666                           ;main.c: 118: }
  2667                           ;main.c: 119: return buffer;
  2668  02D0  0873               	movf	keypadData@buffer,w
  2669  02D1  0008               	return
  2670  02D2                     __end_of_keypadData:	
  2671  007E                     btemp	set	126	;btemp
  2672  007E                     wtemp	set	126
  2673  007E                     wtemp0	set	126
  2674  0080                     wtemp1	set	128
  2675  0082                     wtemp2	set	130
  2676  0084                     wtemp3	set	132
  2677  0086                     wtemp4	set	134
  2678  0088                     wtemp5	set	136
  2679  007F                     wtemp6	set	127
  2680  007E                     ttemp	set	126
  2681  007E                     ttemp0	set	126
  2682  0081                     ttemp1	set	129
  2683  0084                     ttemp2	set	132
  2684  0087                     ttemp3	set	135
  2685  007F                     ttemp4	set	127
  2686  007E                     ltemp	set	126
  2687  007E                     ltemp0	set	126
  2688  0082                     ltemp1	set	130
  2689  0086                     ltemp2	set	134
  2690  0080                     ltemp3	set	128


Data Sizes:
    Strings     23
    Constant    10
    Data        1
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80     38      53
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S113$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    printToLCD@STR	PTR unsigned char  size(2) Largest target is 512
		 -> buffer(BANK0[10]), RAM(DATA[512]), STR_2(CODE[6]), STR_1(CODE[7]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_keypadData
    _ISR->i1_serialSend

Critical Paths under _main in BANK0

    _main->_printTime
    _printTime->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _printToLCD->_dataCTRL
    _initLCD->_instCTRL

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2433
                                             35 BANK0      3     3      0
                            _initLCD
                           _instCTRL
                          _printTime
                         _printToLCD
                         _serialInit
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printTime                                            2     2      0    2110
                                             33 BANK0      2     2      0
                           _instCTRL
                         _printToLCD
                         _serialSend
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             19    14      5    1787
                                             14 BANK0     19    14      5
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     198
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     265
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _serialSend                                           4     4      0      22
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _printToLCD                                           2     0      2     279
                                              3 BANK0      2     0      2
                           _dataCTRL
 ---------------------------------------------------------------------------------
 (2) _dataCTRL                                             3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      22
                                              3 BANK0      1     1      0
                           _instCTRL
 ---------------------------------------------------------------------------------
 (2) _instCTRL                                             3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  5     5      0      85
                                              4 COMMON     5     5      0
                         _keypadData
                       i1_serialSend
 ---------------------------------------------------------------------------------
 (5) i1_serialSend                                         4     4      0      22
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (5) _keypadData                                           4     4      0      63
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _instCTRL
   _instCTRL
   _printTime
     _instCTRL
     _printToLCD
       _dataCTRL
     _serialSend
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _printToLCD
     _dataCTRL
   _serialInit

 _ISR (ROOT)
   _keypadData
   i1_serialSend

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     26      35       5       66.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3F      12        0.0%
ABS                  0      0      3F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed May 01 18:12:21 2024

                      pc 0002              __CFG_CP$OFF 0000                       l69 046C  
                     fsr 0004      ___wmul@multiplicand 0022                      l147 0059  
                    l165 011E                      l266 042C                      _GIE 005F  
                    _RB1 0031                      _RC0 0038                      _RC1 0039  
                    _RC2 003A             __CFG_CPD$OFF 0000                      _ISR 03CF  
                    u605 0357                      u525 042D                      u535 0434  
                    u635 0373                      u565 0335                      u655 0384  
                    u585 0341                      u665 038D                      u905 0255  
                    u595 034D                      u755 0106                      u795 012D  
                    u895 022B                      u967 02F1                      u977 0213  
                    u987 023B                      u997 0476                      fsr0 0004  
                    indf 0000            printToLCD@STR 0023             __CFG_FOSC$XT 0000  
           __CFG_LVP$OFF 0000                     ?_ISR 0070                     l1032 0424  
                   l1200 0181                     l1120 0055                     l1106 03F9  
                   l1026 04CB                     l1060 0356                     l1052 0332  
                   l1132 007B                     l1054 0340                     l1214 0194  
                   l1206 0190                     l1142 00B9                     l1126 005E  
                   l1064 0361                     l1144 00D0                     l1128 0069  
                   l1216 0033                     l1082 038C                     l1154 00E9  
                   l1218 01DC                     l1242 01E4                     l1076 0370  
                   l1252 0220                     l1078 037E                     l1086 0397  
                   l1174 013D                     l1166 0110                     l1158 00EF  
                   l1262 024A                     l1184 0152                     l1192 0168  
                   l1176 0141                     l1194 016C                     STR_1 03C2  
                   STR_2 03C9                     STR_3 03B8                     u1007 048A  
                   u1017 044F                     u1027 049F                     _INTE 005C  
                   _INTF 0059                     _RCIF 0065                     i1l69 04A9  
                   _TXIF 0064             __CFG_WRT$OFF 0000                     _main 02D2  
                   _mins 0048                     btemp 007E            __CFG_BOREN$ON 0000  
                   ltemp 007E                     start 0012                     ttemp 007E  
                   wtemp 007E                    ??_ISR 0074                    ?_main 0070  
          __CFG_WDTE$OFF 0000          __end_of___lwdiv 0368          __end_of___lwmod 039E  
                  _RCREG 001A                    _RCSTA 0018                    _SPBRG 0099  
                  _PORTB 0006                    _PORTD 0008                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    u92_25 0270  
                  _TXREG 0019                    _TXSTA 0098            __CFG_PWRTE$ON 0000  
        __end_of_initLCD 0469          __end_of_dpowers 03B8          __end_of_isdigit 04CD  
                  _hours 0046                    pclath 000A                    ltemp0 007E  
                  ltemp1 0082                    ltemp2 0086                    ltemp3 0080  
                  ttemp0 007E                    ttemp1 0081                    ttemp2 0084  
                  ttemp3 0087                    ttemp4 007F                    status 0003  
                  wtemp0 007E                    wtemp1 0080                    wtemp2 0082  
                  wtemp3 0084                    wtemp4 0086                    wtemp5 0088  
                  wtemp6 007F          __end_of_sprintf 01E3          __initialization 0015  
           __end_of_main 0328                   ??_main 0043                   i1l1300 0295  
                 i1l1302 0297                   i1l1310 02D0                   i1l1304 0299  
                 i1l1308 029E                   u103_27 04B5                   i1l1280 0281  
                 i1l1290 028B                   i1l1282 0283                   i1l1274 027B  
                 i1l1362 03EC                   i1l1292 028D                   i1l1284 0285  
                 i1l1276 027D                   i1l1364 03ED                   i1l1294 028F  
                 i1l1286 0287                   i1l1278 027F                   u104_27 0266  
                 i1l1296 0291                   i1l1288 0289                   i1l1298 0293  
       __end_of_dataCTRL 0493    __size_ofi1_serialSend 0015                   _TRISA0 0428  
            instCTRL@CMD 0022                   ___wmul 0420                ??___lwdiv 0024  
              ??___lwmod 002C                   _buffer 004B         __end_of_instCTRL 04A8  
              ??_initLCD 0023             __pdataCOMMON 0079                ??_isdigit 0020  
                 saved_w 007E             i1_serialSend 04A8                ??_sprintf 0033  
__end_of__initialization 0028           __pcstackCOMMON 0070             sprintf@width 003D  
             __pbssBANK0 0046               __pmaintext 02D2                  ?___wmul 0020  
             __pintentry 0004                ?_dataCTRL 0070       __size_of_printTime 0079  
       keypadData@dataIN 0072         keypadData@buffer 0073               __stringtab 039E  
              ?_instCTRL 0070          __size_of___wmul 0025                  ___lwdiv 0328  
                ___lwmod 0368               _keypadData 025C                  __ptext1 04CD  
                __ptext2 01E3                  __ptext3 002C                  __ptext4 04BD  
                __ptext5 0420                  __ptext6 0368                  __ptext7 0328  
                __ptext8 0469                  __ptext9 03F9                  _keyData 004A  
             ??_dataCTRL 0020                  _initLCD 0445             __size_of_ISR 002A  
                _dpowers 03AE                  _isdigit 04BD                  _sprintf 002C  
   end_of_initialization 0028               ??_instCTRL 0020        serialSend@dataOUT 0023  
      __end_of_printTime 025C               _serialInit 04CD               _serialSend 0469  
             _printToLCD 03F9           __end_of___wmul 0445            __pidataCOMMON 04DC  
            ?_keypadData 0070      start_initialization 0015              __end_of_ISR 03F9  
            ?_serialInit 0070              ?_serialSend 0070                 ??___wmul 0024  
            ?_printToLCD 0023                ___latbits 0002            __pcstackBANK0 0020  
      __size_of_dataCTRL 0015      __end_of__stringdata 03CF              sprintf@_val 0038  
            sprintf@flag 003C      __size_of_keypadData 0076              sprintf@prec 0037  
      __size_of_instCTRL 0015         ___lwdiv@dividend 0022                 ?___lwdiv 0020  
               ?___lwmod 0028                __pstrings 039E                 ?_initLCD 0070  
               ?_isdigit 0070      __size_of_serialInit 000F      __size_of_serialSend 0015  
       ___lwdiv@quotient 0025                 ?_sprintf 002E        interrupt_function 0004  
         ___wmul@product 0024      __size_of_printToLCD 0027              dataCTRL@DAT 0022  
              _printTime 01E3              __stringbase 03AD              __stringdata 03B8  
      ___wmul@multiplier 0020            ?i1_serialSend 0070              _lastKeyData 0079  
             ?_printTime 0070         __size_of___lwdiv 0040             ??_keypadData 0070  
       __size_of___lwmod 0036       __end_of__stringtab 03AE      i1serialSend@dataOUT 0073  
            _isdigit$309 0020                 _dataCTRL 047E         __size_of_initLCD 0024  
         ??i1_serialSend 0070         __size_of_isdigit 0010          ___lwdiv@divisor 0020  
        ___lwdiv@counter 0027                 __ptext10 047E                 __ptext11 0445  
               __ptext12 0493                 __ptext13 03CF                 __ptext14 04A8  
               __ptext15 025C         __size_of_sprintf 01B7                 _instCTRL 0493  
          __size_of_main 0056       __end_of_keypadData 02D2             ??_serialInit 0020  
           ??_serialSend 0020             ??_printToLCD 0025                 isdigit@c 0021  
     __end_of_serialInit 04DC       __end_of_serialSend 047E                 intlevel1 0000  
              sprintf@ap 0036                sprintf@sp 003F         ___lwmod@dividend 002A  
     __end_of_printToLCD 0420                stringcode 03A8              ??_printTime 0041  
             _OPTION_REG 0081                 sprintf@c 0040                 sprintf@f 002E  
        ___lwmod@divisor 0028          ___lwmod@counter 002D                 stringdir 03A8  
               stringtab 039E     __end_ofi1_serialSend 04BD  
