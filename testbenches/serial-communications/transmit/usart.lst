

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun Apr 21 11:06:55 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     	;# 
    15  0001                     	;# 
    16  0002                     	;# 
    17  0003                     	;# 
    18  0004                     	;# 
    19  0005                     	;# 
    20  0006                     	;# 
    21  0007                     	;# 
    22  0008                     	;# 
    23  0009                     	;# 
    24  000A                     	;# 
    25  000B                     	;# 
    26  000C                     	;# 
    27  000D                     	;# 
    28  000E                     	;# 
    29  000E                     	;# 
    30  000F                     	;# 
    31  0010                     	;# 
    32  0011                     	;# 
    33  0012                     	;# 
    34  0013                     	;# 
    35  0014                     	;# 
    36  0015                     	;# 
    37  0015                     	;# 
    38  0016                     	;# 
    39  0017                     	;# 
    40  0018                     	;# 
    41  0019                     	;# 
    42  001A                     	;# 
    43  001B                     	;# 
    44  001B                     	;# 
    45  001C                     	;# 
    46  001D                     	;# 
    47  001E                     	;# 
    48  001F                     	;# 
    49  0081                     	;# 
    50  0085                     	;# 
    51  0086                     	;# 
    52  0087                     	;# 
    53  0088                     	;# 
    54  0089                     	;# 
    55  008C                     	;# 
    56  008D                     	;# 
    57  008E                     	;# 
    58  0091                     	;# 
    59  0092                     	;# 
    60  0093                     	;# 
    61  0094                     	;# 
    62  0098                     	;# 
    63  0099                     	;# 
    64  009C                     	;# 
    65  009D                     	;# 
    66  009E                     	;# 
    67  009F                     	;# 
    68  010C                     	;# 
    69  010D                     	;# 
    70  010E                     	;# 
    71  010F                     	;# 
    72  018C                     	;# 
    73  018D                     	;# 
    74  0006                     _PORTB	set	6
    75  0008                     _PORTD	set	8
    76  001A                     _RCREG	set	26
    77  0018                     _RCSTA	set	24
    78  0001                     _TMR0	set	1
    79  0019                     _TXREG	set	25
    80  0065                     _RCIF	set	101
    81  005A                     _T0IF	set	90
    82  005D                     _TMR0IE	set	93
    83  005A                     _TMR0IF	set	90
    84  0064                     _TXIF	set	100
    85  0081                     _OPTION_REG	set	129
    86  0099                     _SPBRG	set	153
    87  0086                     _TRISB	set	134
    88  0088                     _TRISD	set	136
    89  0098                     _TXSTA	set	152
    90  043E                     _TRISC6	set	1086
    91  043F                     _TRISC7	set	1087
    92                           
    93                           	psect	text0
    94  0000                     __ptext0:	
    95                           ; #config settings
    96                           
    97                           
    98                           ;psect for function _serial_read
    99  0000                     
   100                           	psect	cinit
   101  07FC                     start_initialization:	
   102  07FC                     __initialization:	
   103  07FC                     end_of_initialization:	
   104                           ;End of C runtime variable initialization code
   105                           
   106  07FC                     __end_of__initialization:	
   107  07FC  0183               	clrf	3
   108  07FD  120A  118A  2F91   	ljmp	_main	;jump to C main() function
   109                           
   110                           	psect	cstackCOMMON
   111  0070                     __pcstackCOMMON:	
   112  0070                     ?_delay:	
   113  0070                     ?_serial_init:	
   114                           ; 0 bytes @ 0x0
   115                           
   116  0070                     ??_serial_init:	
   117                           ; 0 bytes @ 0x0
   118                           
   119  0070                     ?_serial_send:	
   120                           ; 0 bytes @ 0x0
   121                           
   122  0070                     ??_serial_read:	
   123                           ; 0 bytes @ 0x0
   124                           
   125  0070                     ?_serial_handshake:	
   126                           ; 0 bytes @ 0x0
   127                           
   128  0070                     ?_main:	
   129                           ; 0 bytes @ 0x0
   130                           
   131  0070                     ?_serial_read:	
   132                           ; 0 bytes @ 0x0
   133                           
   134  0070                     delay@overflows:	
   135                           ; 1 bytes @ 0x0
   136                           
   137                           
   138                           ; 2 bytes @ 0x0
   139  0070                     	ds	2
   140  0072                     ??_delay:	
   141                           
   142                           ; 0 bytes @ 0x2
   143  0072                     	ds	1
   144  0073                     delay@i:	
   145                           
   146                           ; 2 bytes @ 0x3
   147  0073                     	ds	2
   148  0075                     ??_serial_send:	
   149  0075                     serial_send@data:	
   150                           ; 0 bytes @ 0x5
   151                           
   152                           
   153                           ; 1 bytes @ 0x5
   154  0075                     	ds	1
   155  0076                     ??_serial_handshake:	
   156                           
   157                           ; 0 bytes @ 0x6
   158  0076                     	ds	1
   159  0077                     serial_handshake@serialCheck:	
   160                           
   161                           ; 1 bytes @ 0x7
   162  0077                     	ds	1
   163  0078                     serial_handshake@response:	
   164                           
   165                           ; 1 bytes @ 0x8
   166  0078                     	ds	1
   167  0079                     ??_main:	
   168                           
   169                           ; 0 bytes @ 0x9
   170  0079                     	ds	1
   171  007A                     main@serialCheck:	
   172                           
   173                           ; 1 bytes @ 0xA
   174  007A                     	ds	1
   175  007B                     main@dataIN:	
   176                           
   177                           ; 1 bytes @ 0xB
   178  007B                     	ds	1
   179  007C                     main@DAVBL:	
   180                           
   181                           ; 1 bytes @ 0xC
   182  007C                     	ds	1
   183  007D                     main@dataOUT:	
   184                           
   185                           ; 1 bytes @ 0xD
   186  007D                     	ds	1
   187                           
   188                           	psect	maintext
   189  0791                     __pmaintext:	
   190 ;;
   191 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   192 ;;
   193 ;; *************** function _main *****************
   194 ;; Defined at:
   195 ;;		line 26 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\serial-communications\transmit\usart-tx.c"
   196 ;; Parameters:    Size  Location     Type
   197 ;;		None
   198 ;; Auto vars:     Size  Location     Type
   199 ;;  dataOUT         1   13[COMMON] unsigned char 
   200 ;;  DAVBL           1   12[COMMON] unsigned char 
   201 ;;  dataIN          1   11[COMMON] unsigned char 
   202 ;;  serialCheck     1   10[COMMON] unsigned char 
   203 ;; Return value:  Size  Location     Type
   204 ;;		None               void
   205 ;; Registers used:
   206 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   207 ;; Tracked objects:
   208 ;;		On entry : 17F/0
   209 ;;		On exit  : 0/0
   210 ;;		Unchanged: 0/0
   211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   212 ;;      Params:         0       0       0       0       0
   213 ;;      Locals:         4       0       0       0       0
   214 ;;      Temps:          1       0       0       0       0
   215 ;;      Totals:         5       0       0       0       0
   216 ;;Total ram usage:        5 bytes
   217 ;; Hardware stack levels required when called:    3
   218 ;; This function calls:
   219 ;;		_serial_handshake
   220 ;;		_serial_init
   221 ;;		_serial_send
   222 ;; This function is called by:
   223 ;;		Startup code after reset
   224 ;; This function uses a non-reentrant model
   225 ;;
   226                           
   227                           
   228                           ;psect for function _main
   229  0791                     _main:	
   230                           
   231                           ;usart-tx.c: 28: unsigned char serialCheck = 0x00;
   232                           
   233                           ;incstack = 0
   234                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   235  0791  01FA               	clrf	main@serialCheck
   236                           
   237                           ;usart-tx.c: 29: unsigned char dataIN = 0x00;
   238  0792  01FB               	clrf	main@dataIN
   239                           
   240                           ;usart-tx.c: 30: unsigned char dataOUT = 0x00;
   241  0793  01FD               	clrf	main@dataOUT
   242                           
   243                           ;usart-tx.c: 31: unsigned char DAVBL = 0x00;
   244  0794  01FC               	clrf	main@DAVBL
   245                           
   246                           ;usart-tx.c: 32: TRISD = 0x1F;
   247  0795  301F               	movlw	31
   248  0796  1683               	bsf	3,5	;RP0=1, select bank1
   249  0797  1303               	bcf	3,6	;RP1=0, select bank1
   250  0798  0088               	movwf	8	;volatile
   251                           
   252                           ;usart-tx.c: 33: TRISB = 0x00;
   253  0799  0186               	clrf	6	;volatile
   254                           
   255                           ;usart-tx.c: 36: OPTION_REG = 0x44;
   256  079A  3044               	movlw	68
   257  079B  0081               	movwf	1	;volatile
   258                           
   259                           ;usart-tx.c: 37: TMR0 = 0;
   260  079C  1283               	bcf	3,5	;RP0=0, select bank0
   261  079D  1303               	bcf	3,6	;RP1=0, select bank0
   262  079E  0181               	clrf	1	;volatile
   263                           
   264                           ;usart-tx.c: 38: TMR0IE = 1;
   265  079F  168B               	bsf	11,5	;volatile
   266                           
   267                           ;usart-tx.c: 39: TMR0IF = 0;
   268  07A0  110B               	bcf	11,2	;volatile
   269                           
   270                           ;usart-tx.c: 42: TRISC6 = 0;
   271  07A1  1683               	bsf	3,5	;RP0=1, select bank1
   272  07A2  1303               	bcf	3,6	;RP1=0, select bank1
   273  07A3  1307               	bcf	7,6	;volatile
   274                           
   275                           ;usart-tx.c: 43: TRISC7 = 1;
   276  07A4  1787               	bsf	7,7	;volatile
   277                           
   278                           ;usart-tx.c: 44: serial_init();
   279  07A5  120A  118A  272A  120A  118A  	fcall	_serial_init
   280                           
   281                           ;usart-tx.c: 47: serial_handshake();
   282  07AA  120A  118A  2751  120A  118A  	fcall	_serial_handshake
   283  07AF                     l71:	
   284                           ;usart-tx.c: 49: while (1)
   285                           
   286                           
   287                           ;usart-tx.c: 50: {
   288                           ;usart-tx.c: 51: DAVBL = PORTD & 0x10;
   289  07AF  1283               	bcf	3,5	;RP0=0, select bank0
   290  07B0  1303               	bcf	3,6	;RP1=0, select bank0
   291  07B1  0808               	movf	8,w	;volatile
   292  07B2  3910               	andlw	16
   293  07B3  00F9               	movwf	??_main
   294  07B4  0879               	movf	??_main,w
   295  07B5  00FC               	movwf	main@DAVBL
   296                           
   297                           ;usart-tx.c: 52: if (DAVBL == 0x10)
   298  07B6  087C               	movf	main@DAVBL,w
   299  07B7  3A10               	xorlw	16
   300  07B8  1D03               	skipz
   301  07B9  2FAF               	goto	l71
   302                           
   303                           ;usart-tx.c: 53: {
   304                           ;usart-tx.c: 54: dataIN = PORTD & 0x0F;
   305  07BA  0808               	movf	8,w	;volatile
   306  07BB  390F               	andlw	15
   307  07BC  00F9               	movwf	??_main
   308  07BD  0879               	movf	??_main,w
   309  07BE  00FB               	movwf	main@dataIN
   310                           
   311                           ;usart-tx.c: 55: switch (dataIN)
   312  07BF  2FD8               	goto	l632
   313  07C0                     l74:	
   314                           ;usart-tx.c: 56: {
   315                           ;usart-tx.c: 57: case 0x00:
   316                           
   317                           
   318                           ;usart-tx.c: 58: dataOUT = 0x01;
   319  07C0  01FD               	clrf	main@dataOUT
   320  07C1  0AFD               	incf	main@dataOUT,f
   321                           
   322                           ;usart-tx.c: 59: break;
   323  07C2  2FF5               	goto	l634
   324  07C3                     l612:	
   325                           ;usart-tx.c: 60: case 0x01:
   326                           
   327                           
   328                           ;usart-tx.c: 61: dataOUT = 0x02;
   329  07C3  3002               	movlw	2
   330  07C4  2FD2               	goto	L7
   331  07C5                     l614:	
   332                           ;usart-tx.c: 63: case 0x02:
   333                           
   334                           ;usart-tx.c: 62: break;
   335                           
   336                           
   337                           ;usart-tx.c: 64: dataOUT = 0x03;
   338  07C5  3003               	movlw	3
   339  07C6  2FD2               	goto	L7
   340  07C7                     l616:	
   341                           ;usart-tx.c: 66: case 0x04:
   342                           
   343                           ;usart-tx.c: 65: break;
   344                           
   345                           
   346                           ;usart-tx.c: 67: dataOUT = 0x04;
   347  07C7  3004               	movlw	4
   348  07C8  2FD2               	goto	L7
   349  07C9                     l618:	
   350                           ;usart-tx.c: 69: case 0x05:
   351                           
   352                           ;usart-tx.c: 68: break;
   353                           
   354                           
   355                           ;usart-tx.c: 70: dataOUT = 0x05;
   356  07C9  3005               	movlw	5
   357  07CA  2FD2               	goto	L7
   358  07CB                     l620:	
   359                           ;usart-tx.c: 72: case 0x06:
   360                           
   361                           ;usart-tx.c: 71: break;
   362                           
   363                           
   364                           ;usart-tx.c: 73: dataOUT = 0x06;
   365  07CB  3006               	movlw	6
   366  07CC  2FD2               	goto	L7
   367  07CD                     l622:	
   368                           ;usart-tx.c: 75: case 0x08:
   369                           
   370                           ;usart-tx.c: 74: break;
   371                           
   372                           
   373                           ;usart-tx.c: 76: dataOUT = 0x07;
   374  07CD  3007               	movlw	7
   375  07CE  2FD2               	goto	L7
   376  07CF                     l624:	
   377                           ;usart-tx.c: 78: case 0x09:
   378                           
   379                           ;usart-tx.c: 77: break;
   380                           
   381                           
   382                           ;usart-tx.c: 79: dataOUT = 0x08;
   383  07CF  3008               	movlw	8
   384  07D0  2FD2               	goto	L7
   385  07D1                     l626:	
   386                           ;usart-tx.c: 81: case 0x0A:
   387                           
   388                           ;usart-tx.c: 80: break;
   389                           
   390                           
   391                           ;usart-tx.c: 82: dataOUT = 0x09;
   392  07D1  3009               	movlw	9
   393  07D2                     L7:	
   394  07D2  00F9               	movwf	??_main
   395  07D3  0879               	movf	??_main,w
   396  07D4  00FD               	movwf	main@dataOUT
   397                           
   398                           ;usart-tx.c: 83: break;
   399  07D5  2FF5               	goto	l634
   400  07D6                     l628:	
   401                           ;usart-tx.c: 84: default:
   402                           
   403                           
   404                           ;usart-tx.c: 85: dataOUT = 0x00;
   405  07D6  01FD               	clrf	main@dataOUT
   406                           
   407                           ;usart-tx.c: 87: }
   408                           
   409                           ;usart-tx.c: 86: break;
   410  07D7  2FF5               	goto	l634
   411  07D8                     l632:	
   412  07D8  087B               	movf	main@dataIN,w
   413                           
   414                           ; Switch size 1, requested type "space"
   415                           ; Number of cases is 9, Range of values is 0 to 10
   416                           ; switch strategies available:
   417                           ; Name         Instructions Cycles
   418                           ; simple_byte           28    15 (average)
   419                           ; direct_byte           41     8 (fixed)
   420                           ; jumptable            260     6 (fixed)
   421                           ;	Chosen strategy is simple_byte
   422  07D9  3A00               	xorlw	0	; case 0
   423  07DA  1903               	skipnz
   424  07DB  2FC0               	goto	l74
   425  07DC  3A01               	xorlw	1	; case 1
   426  07DD  1903               	skipnz
   427  07DE  2FC3               	goto	l612
   428  07DF  3A03               	xorlw	3	; case 2
   429  07E0  1903               	skipnz
   430  07E1  2FC5               	goto	l614
   431  07E2  3A06               	xorlw	6	; case 4
   432  07E3  1903               	skipnz
   433  07E4  2FC7               	goto	l616
   434  07E5  3A01               	xorlw	1	; case 5
   435  07E6  1903               	skipnz
   436  07E7  2FC9               	goto	l618
   437  07E8  3A03               	xorlw	3	; case 6
   438  07E9  1903               	skipnz
   439  07EA  2FCB               	goto	l620
   440  07EB  3A0E               	xorlw	14	; case 8
   441  07EC  1903               	skipnz
   442  07ED  2FCD               	goto	l622
   443  07EE  3A01               	xorlw	1	; case 9
   444  07EF  1903               	skipnz
   445  07F0  2FCF               	goto	l624
   446  07F1  3A03               	xorlw	3	; case 10
   447  07F2  1903               	skipnz
   448  07F3  2FD1               	goto	l626
   449  07F4  2FD6               	goto	l628
   450  07F5                     l634:	
   451                           
   452                           ;usart-tx.c: 88: serial_send(dataOUT);
   453  07F5  087D               	movf	main@dataOUT,w
   454  07F6  120A  118A  271B  120A  118A  	fcall	_serial_send
   455  07FB  2FAF               	goto	l71
   456  07FC                     __end_of_main:	
   457                           
   458                           	psect	text1
   459  072A                     __ptext1:	
   460 ;; *************** function _serial_init *****************
   461 ;; Defined at:
   462 ;;		line 20 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\serial-communications\transmit\usart-processe
      +s.h"
   463 ;; Parameters:    Size  Location     Type
   464 ;;		None
   465 ;; Auto vars:     Size  Location     Type
   466 ;;		None
   467 ;; Return value:  Size  Location     Type
   468 ;;		None               void
   469 ;; Registers used:
   470 ;;		wreg
   471 ;; Tracked objects:
   472 ;;		On entry : 0/0
   473 ;;		On exit  : 0/0
   474 ;;		Unchanged: 0/0
   475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   476 ;;      Params:         0       0       0       0       0
   477 ;;      Locals:         0       0       0       0       0
   478 ;;      Temps:          0       0       0       0       0
   479 ;;      Totals:         0       0       0       0       0
   480 ;;Total ram usage:        0 bytes
   481 ;; Hardware stack levels used:    1
   482 ;; This function calls:
   483 ;;		Nothing
   484 ;; This function is called by:
   485 ;;		_main
   486 ;; This function uses a non-reentrant model
   487 ;;
   488                           
   489                           
   490                           ;psect for function _serial_init
   491  072A                     _serial_init:	
   492                           
   493                           ;usart-processes.h: 23: TXSTA = 0b00100100;
   494                           
   495                           ;incstack = 0
   496                           ; Regs used in _serial_init: [wreg]
   497  072A  3024               	movlw	36
   498  072B  1683               	bsf	3,5	;RP0=1, select bank1
   499  072C  1303               	bcf	3,6	;RP1=0, select bank1
   500  072D  0098               	movwf	24	;volatile
   501                           
   502                           ;usart-processes.h: 24: TXIF = 0;
   503  072E  1283               	bcf	3,5	;RP0=0, select bank0
   504  072F  1303               	bcf	3,6	;RP1=0, select bank0
   505  0730  120C               	bcf	12,4	;volatile
   506                           
   507                           ;usart-processes.h: 27: RCSTA = 0b10010000;
   508  0731  3090               	movlw	144
   509  0732  0098               	movwf	24	;volatile
   510                           
   511                           ;usart-processes.h: 28: RCIF = 0;
   512  0733  128C               	bcf	12,5	;volatile
   513                           
   514                           ;usart-processes.h: 30: SPBRG = 25;
   515  0734  3019               	movlw	25
   516  0735  1683               	bsf	3,5	;RP0=1, select bank1
   517  0736  1303               	bcf	3,6	;RP1=0, select bank1
   518  0737  0099               	movwf	25	;volatile
   519  0738  0008               	return
   520  0739                     __end_of_serial_init:	
   521                           
   522                           	psect	text2
   523  0751                     __ptext2:	
   524 ;; *************** function _serial_handshake *****************
   525 ;; Defined at:
   526 ;;		line 48 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\serial-communications\transmit\usart-processe
      +s.h"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;  response        1    8[COMMON] unsigned char 
   531 ;;  serialCheck     1    7[COMMON] unsigned char 
   532 ;; Return value:  Size  Location     Type
   533 ;;		None               void
   534 ;; Registers used:
   535 ;;		wreg, status,2, status,0, pclath, cstack
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   541 ;;      Params:         0       0       0       0       0
   542 ;;      Locals:         2       0       0       0       0
   543 ;;      Temps:          1       0       0       0       0
   544 ;;      Totals:         3       0       0       0       0
   545 ;;Total ram usage:        3 bytes
   546 ;; Hardware stack levels used:    1
   547 ;; Hardware stack levels required when called:    2
   548 ;; This function calls:
   549 ;;		_delay
   550 ;;		_serial_read
   551 ;;		_serial_send
   552 ;; This function is called by:
   553 ;;		_main
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557                           
   558                           ;psect for function _serial_handshake
   559  0751                     _serial_handshake:	
   560                           
   561                           ;usart-processes.h: 51: delay(100);
   562                           
   563                           ;incstack = 0
   564                           ; Regs used in _serial_handshake: [wreg+status,2+status,0+pclath+cstack]
   565  0751  3064               	movlw	100
   566  0752  00F0               	movwf	delay@overflows
   567  0753  3000               	movlw	0
   568  0754  00F1               	movwf	delay@overflows+1
   569  0755  120A  118A  2739  120A  118A  	fcall	_delay
   570                           
   571                           ;usart-processes.h: 52: serial_send(0x01);
   572  075A  3001               	movlw	1
   573  075B  120A  118A  271B  120A  118A  	fcall	_serial_send
   574                           
   575                           ;usart-processes.h: 55: unsigned char response = 0;
   576  0760  01F8               	clrf	serial_handshake@response
   577  0761                     l570:	
   578                           ;usart-processes.h: 56: do
   579                           
   580                           
   581                           ;usart-processes.h: 57: {
   582                           ;usart-processes.h: 58: response = serial_read();
   583  0761  120A  118A  2715  120A  118A  	fcall	_serial_read
   584  0766  00F6               	movwf	??_serial_handshake
   585  0767  0876               	movf	??_serial_handshake,w
   586  0768  00F8               	movwf	serial_handshake@response
   587                           
   588                           ;usart-processes.h: 59: if (response == 0x01)
   589  0769  0878               	movf	serial_handshake@response,w
   590  076A  3A01               	xorlw	1
   591  076B  1903               	btfsc	3,2
   592  076C  2F7A               	goto	l580
   593                           
   594                           ;usart-processes.h: 61: delay(10);
   595                           
   596                           ;usart-processes.h: 60: break;
   597  076D  300A               	movlw	10
   598  076E  00F0               	movwf	delay@overflows
   599  076F  3000               	movlw	0
   600  0770  00F1               	movwf	delay@overflows+1
   601  0771  120A  118A  2739  120A  118A  	fcall	_delay
   602                           
   603                           ;usart-processes.h: 62: } while (response != 0x01);
   604  0776  0878               	movf	serial_handshake@response,w
   605  0777  3A01               	xorlw	1
   606  0778  1D03               	skipz
   607  0779  2F61               	goto	l570
   608  077A                     l580:	
   609                           
   610                           ;usart-processes.h: 65: unsigned char serialCheck = serial_read();
   611  077A  120A  118A  2715  120A  118A  	fcall	_serial_read
   612  077F  00F6               	movwf	??_serial_handshake
   613  0780  0876               	movf	??_serial_handshake,w
   614  0781  00F7               	movwf	serial_handshake@serialCheck
   615                           
   616                           ;usart-processes.h: 66: PORTB = serialCheck;
   617  0782  0877               	movf	serial_handshake@serialCheck,w
   618  0783  1283               	bcf	3,5	;RP0=0, select bank0
   619  0784  1303               	bcf	3,6	;RP1=0, select bank0
   620  0785  0086               	movwf	6	;volatile
   621                           
   622                           ;usart-processes.h: 67: delay(500);
   623  0786  30F4               	movlw	244
   624  0787  00F0               	movwf	delay@overflows
   625  0788  3001               	movlw	1
   626  0789  00F1               	movwf	delay@overflows+1
   627  078A  120A  118A  2739   	fcall	_delay
   628                           
   629                           ;usart-processes.h: 68: PORTB = 0x00;
   630  078D  1283               	bcf	3,5	;RP0=0, select bank0
   631  078E  1303               	bcf	3,6	;RP1=0, select bank0
   632  078F  0186               	clrf	6	;volatile
   633  0790  0008               	return
   634  0791                     __end_of_serial_handshake:	
   635                           
   636                           	psect	text3
   637  071B                     __ptext3:	
   638 ;; *************** function _serial_send *****************
   639 ;; Defined at:
   640 ;;		line 33 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\serial-communications\transmit\usart-processe
      +s.h"
   641 ;; Parameters:    Size  Location     Type
   642 ;;  data            1    wreg     unsigned char 
   643 ;; Auto vars:     Size  Location     Type
   644 ;;  data            1    5[COMMON] unsigned char 
   645 ;; Return value:  Size  Location     Type
   646 ;;		None               void
   647 ;; Registers used:
   648 ;;		wreg, status,2, status,0, pclath, cstack
   649 ;; Tracked objects:
   650 ;;		On entry : 0/0
   651 ;;		On exit  : 0/0
   652 ;;		Unchanged: 0/0
   653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   654 ;;      Params:         0       0       0       0       0
   655 ;;      Locals:         1       0       0       0       0
   656 ;;      Temps:          0       0       0       0       0
   657 ;;      Totals:         1       0       0       0       0
   658 ;;Total ram usage:        1 bytes
   659 ;; Hardware stack levels used:    1
   660 ;; Hardware stack levels required when called:    1
   661 ;; This function calls:
   662 ;;		_delay
   663 ;; This function is called by:
   664 ;;		_serial_handshake
   665 ;;		_main
   666 ;; This function uses a non-reentrant model
   667 ;;
   668                           
   669                           
   670                           ;psect for function _serial_send
   671  071B                     _serial_send:	
   672                           
   673                           ;incstack = 0
   674                           ; Regs used in _serial_send: [wreg+status,2+status,0+pclath+cstack]
   675                           ;serial_send@data stored from wreg
   676  071B  00F5               	movwf	serial_send@data
   677  071C                     l44:	
   678                           ;usart-processes.h: 36: ;
   679                           
   680                           ;usart-processes.h: 35: while (!TXIF)
   681                           
   682  071C  1283               	bcf	3,5	;RP0=0, select bank0
   683  071D  1303               	bcf	3,6	;RP1=0, select bank0
   684  071E  1E0C               	btfss	12,4	;volatile
   685  071F  2F1C               	goto	l44
   686                           
   687                           ;usart-processes.h: 37: TXREG = data;
   688  0720  0875               	movf	serial_send@data,w
   689  0721  0099               	movwf	25	;volatile
   690                           
   691                           ;usart-processes.h: 38: delay(10);
   692  0722  300A               	movlw	10
   693  0723  00F0               	movwf	delay@overflows
   694  0724  3000               	movlw	0
   695  0725  00F1               	movwf	delay@overflows+1
   696  0726  120A  118A  2739   	fcall	_delay
   697  0729  0008               	return
   698  072A                     __end_of_serial_send:	
   699                           
   700                           	psect	text4
   701  0739                     __ptext4:	
   702 ;; *************** function _delay *****************
   703 ;; Defined at:
   704 ;;		line 71 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\serial-communications\transmit\usart-processe
      +s.h"
   705 ;; Parameters:    Size  Location     Type
   706 ;;  overflows       2    0[COMMON] int 
   707 ;; Auto vars:     Size  Location     Type
   708 ;;  i               2    3[COMMON] int 
   709 ;; Return value:  Size  Location     Type
   710 ;;		None               void
   711 ;; Registers used:
   712 ;;		wreg, status,2
   713 ;; Tracked objects:
   714 ;;		On entry : 0/0
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   718 ;;      Params:         2       0       0       0       0
   719 ;;      Locals:         2       0       0       0       0
   720 ;;      Temps:          1       0       0       0       0
   721 ;;      Totals:         5       0       0       0       0
   722 ;;Total ram usage:        5 bytes
   723 ;; Hardware stack levels used:    1
   724 ;; This function calls:
   725 ;;		Nothing
   726 ;; This function is called by:
   727 ;;		_serial_send
   728 ;;		_serial_handshake
   729 ;; This function uses a non-reentrant model
   730 ;;
   731                           
   732                           
   733                           ;psect for function _delay
   734  0739                     _delay:	
   735                           
   736                           ;usart-processes.h: 73: int i;
   737                           ;usart-processes.h: 74: for (i = 0; i < overflows; i++)
   738                           
   739                           ;incstack = 0
   740                           ; Regs used in _delay: [wreg+status,2]
   741  0739  01F3               	clrf	delay@i
   742  073A  01F4               	clrf	delay@i+1
   743  073B                     l62:	
   744  073B  0874               	movf	delay@i+1,w
   745  073C  3A80               	xorlw	128
   746  073D  00F2               	movwf	??_delay
   747  073E  0871               	movf	delay@overflows+1,w
   748  073F  3A80               	xorlw	128
   749  0740  0272               	subwf	??_delay,w
   750  0741  1D03               	skipz
   751  0742  2F45               	goto	u25
   752  0743  0870               	movf	delay@overflows,w
   753  0744  0273               	subwf	delay@i,w
   754  0745                     u25:	
   755  0745  1803               	btfsc	3,0
   756  0746  0008               	return
   757  0747                     l64:	
   758                           ;usart-processes.h: 77: ;
   759                           
   760                           ;usart-processes.h: 75: {
   761                           ;usart-processes.h: 76: while (!T0IF)
   762                           
   763  0747  1D0B               	btfss	11,2	;volatile
   764  0748  2F47               	goto	l64
   765                           
   766                           ;usart-processes.h: 78: T0IF = 0;
   767  0749  110B               	bcf	11,2	;volatile
   768  074A  3001               	movlw	1
   769  074B  07F3               	addwf	delay@i,f
   770  074C  1803               	skipnc
   771  074D  0AF4               	incf	delay@i+1,f
   772  074E  3000               	movlw	0
   773  074F  07F4               	addwf	delay@i+1,f
   774  0750  2F3B               	goto	l62
   775  0751                     __end_of_delay:	
   776                           
   777                           	psect	text5
   778  0715                     __ptext5:	
   779 ;; *************** function _serial_read *****************
   780 ;; Defined at:
   781 ;;		line 41 in file "D:\uni_2023-2024\cpe3201\embedded-systems\testbenches\serial-communications\transmit\usart-processe
      +s.h"
   782 ;; Parameters:    Size  Location     Type
   783 ;;		None
   784 ;; Auto vars:     Size  Location     Type
   785 ;;		None
   786 ;; Return value:  Size  Location     Type
   787 ;;                  1    wreg      unsigned char 
   788 ;; Registers used:
   789 ;;		wreg
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   795 ;;      Params:         0       0       0       0       0
   796 ;;      Locals:         0       0       0       0       0
   797 ;;      Temps:          0       0       0       0       0
   798 ;;      Totals:         0       0       0       0       0
   799 ;;Total ram usage:        0 bytes
   800 ;; Hardware stack levels used:    1
   801 ;; This function calls:
   802 ;;		Nothing
   803 ;; This function is called by:
   804 ;;		_serial_handshake
   805 ;; This function uses a non-reentrant model
   806 ;;
   807                           
   808                           
   809                           ;psect for function _serial_read
   810  0715                     _serial_read:	
   811  0715                     l50:	
   812                           ;usart-processes.h: 44: ;
   813                           
   814                           ;usart-processes.h: 43: while (!RCIF)
   815                           
   816                           ;incstack = 0
   817                           ; Regs used in _serial_read: [wreg]
   818                           
   819  0715  1283               	bcf	3,5	;RP0=0, select bank0
   820  0716  1303               	bcf	3,6	;RP1=0, select bank0
   821  0717  1E8C               	btfss	12,5	;volatile
   822  0718  2F15               	goto	l50
   823                           
   824                           ;usart-processes.h: 45: return RCREG;
   825  0719  081A               	movf	26,w	;volatile
   826  071A  0008               	return
   827  071B                     __end_of_serial_read:	
   828  007E                     btemp	set	126	;btemp
   829  007E                     wtemp	set	126
   830  007E                     wtemp0	set	126
   831  0080                     wtemp1	set	128
   832  0082                     wtemp2	set	130
   833  0084                     wtemp3	set	132
   834  0086                     wtemp4	set	134
   835  0088                     wtemp5	set	136
   836  007F                     wtemp6	set	127
   837  007E                     ttemp	set	126
   838  007E                     ttemp0	set	126
   839  0081                     ttemp1	set	129
   840  0084                     ttemp2	set	132
   841  0087                     ttemp3	set	135
   842  007F                     ttemp4	set	127
   843  007E                     ltemp	set	126
   844  007E                     ltemp0	set	126
   845  0082                     ltemp1	set	130
   846  0086                     ltemp2	set	134
   847  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_serial_handshake
    _serial_handshake->_serial_send
    _serial_send->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     726
                                              9 COMMON     5     5      0
                   _serial_handshake
                        _serial_init
                        _serial_send
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serial_handshake                                     3     3      0     464
                                              6 COMMON     3     3      0
                              _delay
                        _serial_read
                        _serial_send
 ---------------------------------------------------------------------------------
 (1) _serial_send                                          1     1      0     217
                                              5 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     202
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _serial_read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _serial_handshake
     _delay
     _serial_read
     _serial_send
       _delay
   _serial_init
   _serial_send
     _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun Apr 21 11:06:55 2024

                __CFG_CP$OFF 0000                           l50 0715                           l44 071C  
                         l62 073B                           l71 07AF                           l64 0747  
                         l74 07C0                           u25 0745                          l620 07CB  
                        l612 07C3                          l622 07CD                          l614 07C5  
                        l624 07CF                          l616 07C7                          l632 07D8  
                        l570 0761                          l626 07D1                          l618 07C9  
                        l634 07F5                          l580 077A                          l628 07D6  
               __CFG_CPD$OFF 0000              serial_send@data 0075                 __CFG_FOSC$XT 0000  
                main@dataOUT 007D                 __CFG_LVP$OFF 0000                         _T0IF 005A  
                       _RCIF 0065                         _TMR0 0001                         _TXIF 0064  
               __CFG_WRT$OFF 0000                         _main 0791                         btemp 007E  
              __CFG_BOREN$ON 0000                         ltemp 007E                         start 0000  
                       ttemp 007E                         wtemp 007E                        ?_main 0070  
              __CFG_WDTE$OFF 0000                        _RCREG 001A                        _RCSTA 0018  
                      _SPBRG 0099                        _PORTB 0006                        _PORTD 0008  
                      _TRISB 0086                        _TRISD 0088                        _TXREG 0019  
                      _TXSTA 0098                __CFG_PWRTE$ON 0000                        _delay 0739  
                      ltemp0 007E                        ltemp1 0082                        ltemp2 0086  
                      ltemp3 0080                        ttemp0 007E                        ttemp1 0081  
                      ttemp2 0084                        ttemp3 0087                        ttemp4 007F  
                      status 0003                        wtemp0 007E                        wtemp1 0080  
                      wtemp2 0082                        wtemp3 0084                        wtemp4 0086  
                      wtemp5 0088                        wtemp6 007F              __initialization 07FC  
               __end_of_main 07FC     __end_of_serial_handshake 0791                       ??_main 0079  
                     ?_delay 0070                       _TMR0IE 005D                       _TMR0IF 005A  
                     _TRISC6 043E                       _TRISC7 043F  serial_handshake@serialCheck 0077  
               ?_serial_init 0070                 ?_serial_read 0070                 ?_serial_send 0070  
                     delay@i 0073      __end_of__initialization 07FC               __pcstackCOMMON 0070  
              __end_of_delay 0751                      ??_delay 0072                   __pmaintext 0791  
          ?_serial_handshake 0070         __size_of_serial_init 000F         __size_of_serial_read 0006  
       __size_of_serial_send 000F           ??_serial_handshake 0076                      __ptext0 0000  
                    __ptext1 072A                      __ptext2 0751                      __ptext3 071B  
                    __ptext4 0739                      __ptext5 0715         end_of_initialization 07FC  
                 main@dataIN 007B          start_initialization 07FC                    ___latbits 0002  
  __size_of_serial_handshake 0040               __size_of_delay 0018                ??_serial_init 0070  
              ??_serial_read 0070                ??_serial_send 0075                    main@DAVBL 007C  
        __end_of_serial_init 0739          __end_of_serial_read 071B          __end_of_serial_send 072A  
   serial_handshake@response 0078                __size_of_main 006B              main@serialCheck 007A  
             delay@overflows 0070             _serial_handshake 0751                  _serial_init 072A  
                _serial_read 0715                  _serial_send 071B                   _OPTION_REG 0081  
